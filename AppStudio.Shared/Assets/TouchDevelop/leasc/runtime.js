'use strict';
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var RTValue = (function () {
            function RTValue() {
                this.on_render_heap = false;
                this.versioncounter = 1;
                this.jsonExportMark = false;
            }
            RTValue.normalize = function (n) {
                return n < 0 ? 0 : n > 1 ? 1 : n;
            };
            RTValue.prototype.post_to_wall = function (s) {
                if (!s.rt.mayPostToWall(s.rt.getCurrentPage()))
                    TDev.Util.userError("cannot post to the wall here");
                var box = TDev.WallBox.CreateOrRecycleLeafBox(s.rt, this);
                if (!box.getContent()) {
                    var e;
                    try {
                        e = this.getViewCore(s, box);
                    }
                    catch (e) {
                        TDev.Util.reportError('getViewCore crash: ' + (typeof this), e, false);
                        e = TDev.div('item item-crash', ':( something went wrong');
                    }
                    if (box instanceof TDev.WallBox)
                        s.rt.addTapEvent(e, this.rtType(), box, this);
                    box.setContent(e);
                    try {
                        this.updateViewCore(s, box);
                    }
                    catch (e) {
                        TDev.Util.reportError('updateViewCore crash: ' + (typeof this), e, false);
                    }
                }
                if (box instanceof TDev.WallBox && box.getDepth() === 1)
                    s.rt.renderBox(box);
            };
            RTValue.prototype.viewIsRefreshable = function () {
                return false;
            };
            RTValue.prototype.refreshViews = function (s) {
            };
            RTValue.prototype.debuggerDisplay = function (clickHandler) {
                return TDev.div("wall-text", this.getShortStringRepresentation()).withClick(clickHandler);
            };
            RTValue.prototype.getViewCore = function (s, b) {
                return TDev.div("wall-text", this.getShortStringRepresentation());
            };
            RTValue.prototype.updateViewCore = function (s, b) {
            };
            RTValue.prototype.getShortStringRepresentation = function () {
                try {
                    if (this.to_string)
                        return this.to_string();
                    else
                        return this.toString();
                }
                catch (e) {
                    TDev.Util.reportError("getShortStringRepresentation", e, false);
                    return "???";
                }
            };
            RTValue.prototype.toString = function () {
                return "[" + this.rtType() + "]";
            };
            RTValue.prototype.isSerializable = function () {
                return false;
            };
            RTValue.prototype.rtType = function () {
                return "RTValue";
            };
            RTValue.mkPicker = function (p, v, n, qn) {
                var fp = p;
                p.set(v);
                fp.userName = n;
                fp.quotedName = qn;
                return fp;
            };
            RTValue.prototype.exportJson = function (ctx) {
                return undefined;
            };
            RTValue.prototype.importJson = function (ctx, json) {
                return undefined;
            };
            RTValue.prototype.jsonExportKey = function (ctx) {
                return undefined;
            };
            RTValue.prototype.toJsonKey = function () {
                throw new Error("cannot use " + this.rtType() + " as a key (it is not a value)");
            };
            RTValue.prototype.keyCompareTo = function (other) {
                throw new Error("cannot use " + this.rtType() + " as a key (it is not a value)");
            };
            RTValue.prototype.isDefaultValue = function () {
                return false;
            };
            RTValue.CompareKeys = function (a, b) {
                if (!a)
                    return (b ? -1 : 0);
                else
                    return (b ? a.keyCompareTo(b) : 1);
            };
            RTValue.copySpecificImpls = function (classPrefix) {
                var rt = TDev.RT;
                var moduleOverrides = rt[classPrefix];
                Object.keys(moduleOverrides).forEach(function (k) {
                    if (/Init$/.test(k)) {
                        var f = moduleOverrides[k];
                        if (f instanceof Function)
                            f();
                    }
                });
                var rx = new RegExp("^" + classPrefix);
                function copyFrom(src) {
                    Object.keys(src).forEach(function (k) {
                        if (rx.test(k)) {
                            var baseName = k.slice(classPrefix.length);
                            var derived = src[k].prototype;
                            if (!derived)
                                return;
                            var base = rt[baseName].prototype;
                            Object.keys(derived).forEach(function (m) {
                                if (m != "constructor" && m != "rtType")
                                    base[m] = derived[m];
                            });
                        }
                    });
                }
                copyFrom(rt);
                copyFrom(moduleOverrides);
            };
            RTValue.setupTypeTable = function () {
                var setClsName = function (name, fn) {
                    fn.prototype.rtType = function () { return name; };
                };
                for (var cls in TDev.RT) {
                    if (!TDev.RT.hasOwnProperty(cls))
                        continue;
                    var fn = TDev.RT[cls];
                    if (fn.prototype && fn.prototype.rtType && !fn.prototype.noMagicRtType) {
                        if (!fn.prototype.hasOwnProperty("rtType"))
                            setClsName(cls, fn);
                    }
                }
            };
            RTValue.initApis = function () {
                RTValue.setupTypeTable();
                if (TDev.Browser.isNodeJS)
                    this.copySpecificImpls("Node");
                else if (TDev.Browser.inCordova)
                    this.copySpecificImpls("Cordova");
                else if (TDev.Browser.webAppBooster)
                    this.copySpecificImpls("Wab");
            };
            return RTValue;
        })();
        RT.RTValue = RTValue;
        var RTDisposableValue = (function (_super) {
            __extends(RTDisposableValue, _super);
            function RTDisposableValue(rt) {
                _super.call(this);
                this.rt = rt;
                this.rt.disposables.push(this);
            }
            RTDisposableValue.prototype.dispose = function () {
                var i = this.rt.disposables.indexOf(this);
                if (i > 0)
                    this.rt.disposables.splice(i, 1);
            };
            return RTDisposableValue;
        })(RTValue);
        RT.RTDisposableValue = RTDisposableValue;
        var DecoratorCollection = (function (_super) {
            __extends(DecoratorCollection, _super);
            function DecoratorCollection() {
                _super.call(this);
            }
            return DecoratorCollection;
        })(RTValue);
        RT.DecoratorCollection = DecoratorCollection;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
'use strict';
var TDev;
(function (TDev) {
    var JsonExportCtx = (function () {
        function JsonExportCtx(stackframe, fullcloudstate) {
            if (fullcloudstate === void 0) { fullcloudstate = false; }
            this.stackframe = stackframe;
            this.fullcloudstate = fullcloudstate;
            this.depth = 0;
        }
        JsonExportCtx.prototype.push = function (node) {
            TDev.Util.assert(!node.jsonExportMark);
            node.jsonExportMark = true;
            this.depth++;
        };
        JsonExportCtx.prototype.pop = function (node) {
            TDev.Util.assert(node.jsonExportMark);
            node.jsonExportMark = false;
            this.depth--;
        };
        JsonExportCtx.prototype.encodeObjectNode = function (node, keys, vals) {
            TDev.Util.assert(keys.length == vals.length);
            var json = {};
            var exportkey = node.jsonExportKey(this);
            if (exportkey)
                json["‚åπid"] = exportkey;
            this.encodeValues(vals);
            for (var i = 0; i < vals.length; i++) {
                var val = vals[i];
                if (val !== undefined)
                    json[keys[i]] = val;
            }
            return json;
        };
        JsonExportCtx.prototype.encodeArrayNode = function (node, vals) {
            TDev.Util.assert(!node.jsonExportKey(this));
            this.encodeValues(vals);
            return vals;
        };
        JsonExportCtx.prototype.encodeValues = function (vals) {
            var recursed;
            for (var i = 0; i < vals.length; i++) {
                var v = vals[i];
                if (v && (v instanceof TDev.RT.RTValue)) {
                    var k = v.jsonExportKey(this);
                    if (k !== undefined) {
                        if (v.jsonExportMark || (this.fullcloudstate && this.depth > 0)) {
                            vals[i] = k;
                        }
                        else {
                            v.jsonExportMark = true;
                            if (!recursed)
                                recursed = new Array();
                            recursed.push(v);
                        }
                    }
                }
            }
            for (var i = 0; i < vals.length; i++) {
                var val = vals[i];
                if (val !== undefined && val !== null) {
                    var t = typeof val;
                    if (t == "function")
                        vals[i] = undefined;
                    else if (t !== "boolean" && t !== "string" && t !== "number")
                        vals[i] = val.exportJson(this);
                }
            }
            if (recursed)
                recursed.forEach(function (rv) {
                    TDev.Util.assert(rv.jsonExportMark);
                    rv.jsonExportMark = false;
                });
        };
        return JsonExportCtx;
    })();
    TDev.JsonExportCtx = JsonExportCtx;
    var JsonImportCtx = (function () {
        function JsonImportCtx(s) {
            this.s = s;
            this.mapping = {};
        }
        JsonImportCtx.prototype.map = function (table, id) {
            return id ? (this.mapping[table + id] || id) : id;
        };
        JsonImportCtx.prototype.addmapping = function (table, from, to) {
            this.mapping[table + from] = to;
        };
        JsonImportCtx.prototype.importString = function (source, key) {
            var v = source ? source[key] : undefined;
            return (typeof v == "string") ? v : undefined;
        };
        JsonImportCtx.prototype.importNumber = function (source, key) {
            var v = source ? source[key] : undefined;
            if (typeof v == "string")
                v = Number(v);
            return (typeof v == "number") ? v : undefined;
        };
        JsonImportCtx.prototype.importBoolean = function (source, key) {
            var v = source ? source[key] : undefined;
            return (typeof v == "boolean") ? v : undefined;
        };
        JsonImportCtx.prototype.importDateTime = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.DateTime.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importColor = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.Color.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importJsonObject = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.JsonObject.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importLocation = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.Location_.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importVector3 = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.Vector3.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importUser = function (source, key) {
            var v = source ? source[key] : undefined;
            return TDev.RT.User.mkFromJson(this, v);
        };
        JsonImportCtx.prototype.importStringMap = function (source, target, key) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target)
                target = new TDev.RT.StringMap();
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importNumberMap = function (source, target, key) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target)
                target = new TDev.RT.NumberMap();
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importCollection = function (source, target, key, typeInfo) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target) {
                target = TDev.RT.Collection.fromArray([], typeInfo);
            }
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importJsonBuilder = function (source, target, key) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target)
                target = new TDev.RT.JsonBuilder();
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importLink = function (source, target, key) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target)
                target = new TDev.RT.Link();
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importOAuthResponse = function (source, target, key) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            if (!target)
                target = new TDev.RT.OAuthResponse();
            return target.importJson(this, v);
        };
        JsonImportCtx.prototype.importRecord = function (source, target, key, singleton) {
            var v = source ? source[key] : undefined;
            if (!v)
                return undefined;
            return singleton.importJsonRecord(this, target, v, false);
        };
        return JsonImportCtx;
    })();
    TDev.JsonImportCtx = JsonImportCtx;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Cloud;
    (function (Cloud) {
        Cloud.lite = false;
        function getServiceUrl() {
            return (window.rootUrl);
        }
        Cloud.getServiceUrl = getServiceUrl;
        function mkLegalDiv() {
            var link = function (text, lnk) { return TDev.HTML.mkA(null, getServiceUrl() + lnk, "_blank", text); };
            return TDev.div("wall-dialog-body", TDev.div("smallText", TDev.lf("Publishing is subject to our "), link(TDev.lf("terms of use"), "/legal"), TDev.lf(". Please read our information about "), link(TDev.lf("privacy and cookies"), "/privacy"), "."));
        }
        Cloud.mkLegalDiv = mkLegalDiv;
        Cloud.authenticateAsync = function (activity, redirect, dontRedirect) {
            if (redirect === void 0) { redirect = false; }
            if (dontRedirect === void 0) { dontRedirect = false; }
            if (!Cloud.isAccessTokenExpired())
                return TDev.Promise.as(true);
            function loginAsync() {
                var loginUrl = Cloud.getServiceUrl() + "/oauth/dialog?response_type=token&" + "client_id=webapp" + "&identity_provider=" + encodeURIComponent(Cloud.getIdentityProvider() || "");
                return TDev.RT.Web.oauth_v2_async(loginUrl, "touchdevelop").then(function (or) {
                    if (or.is_error())
                        return false;
                    else {
                        var id = or.others().at('id');
                        var oldid = Cloud.getUserId();
                        if (oldid && id != oldid) {
                            return false;
                        }
                        Cloud.setUserId(or.others().at('id'));
                        Cloud.setAccessToken(encodeURIComponent(or.access_token()));
                        Cloud.setIdentityProvider(or.others().at('identity_provider'));
                        return true;
                    }
                });
            }
            return Cloud.isOnlineWithPingAsync().then(function (isOnline) {
                if (!isOnline)
                    return TDev.Promise.as(false);
                var prevHash = (window.location.hash || "#").replace(/#/, "");
                var login = TDev.Login;
                if (login) {
                    if (!login.show || dontRedirect)
                        login = null;
                    if (!redirect && (!prevHash || /^(hub|list:.*:user:me:)/.test(prevHash)))
                        login = null;
                }
                var r = new TDev.PromiseInv();
                var m = new TDev.ModalDialog();
                m.addHTML(TDev.Util.fmt("<h3>{0:q} requires sign&nbsp;in</h3>", activity) + (!TDev.TheEditor ? "" : "<p class='agree'>" + "After you sign in we will back up and sync scripts between your devices. " + "You will be able to publish scripts, join and create groups, post comments, post leaderboard scores, and give hearts. " + "In short, it's totally awesome!" + "</p>") + "<p class='agree'>You can sign in with your Microsoft, Google, Facebook or Yahoo account.</p>");
                m.fullWhite();
                var ignoreDismiss = false;
                m.add(TDev.div("wall-dialog-buttons", TDev.HTML.mkButton(TDev.lf("maybe later"), function () {
                    m.dismiss();
                }, "gray-button"), TDev.HTML.mkButtonElt("wall-button login-button", TDev.SVG.getLoginButton()).withClick(function () {
                    ignoreDismiss = true;
                    m.dismiss();
                    if (login)
                        login.show();
                    else
                        loginAsync().done(function (v) { return r.success(v); });
                })));
                m.onDismiss = function () {
                    if (!ignoreDismiss)
                        r.success(false);
                };
                m.show();
                return r;
            });
        };
        function anonMode(activity, restart, redirect) {
            if (restart === void 0) { restart = null; }
            if (redirect === void 0) { redirect = false; }
            if (Cloud.isOffline()) {
                Cloud.showModalOnlineInfo(TDev.lf("{0} requires online access", activity));
                return true;
            }
            if (Cloud.getUserId())
                return false;
            Cloud.authenticateAsync(activity, redirect).done(function (ok) {
                if (ok && restart)
                    restart();
            });
            return true;
        }
        Cloud.anonMode = anonMode;
        function parseAccessToken(h, onStateError, onUserError) {
            var stateMatch = h.match(/.*&state=([^&]*)/);
            var state = stateMatch ? stateMatch[1] : "";
            if (Cloud.oauthStates().indexOf(decodeURIComponent(state)) == -1) {
                onStateError();
                return false;
            }
            var token = h.match(/.*#access_token=([^&]*)/)[1];
            var m = h.match(/.*&identity_provider=([^&]*)/);
            var identityProvider = m ? decodeURIComponent(m[1]) : undefined;
            var id = h.match(/.*&id=([^&]*)/)[1];
            var expires = parseInt((h.match(/.*&expires_in=([^&]*)/) || ["0", "0"])[1]);
            var oldid = Cloud.getUserId();
            if (oldid && id != oldid) {
                onUserError();
                return false;
            }
            if (/.*[#&]dbg=true/.test(h))
                window.localStorage.setItem("dbg", "true");
            else
                window.localStorage.removeItem("dbg");
            Cloud.setUserId(id);
            Cloud.setIdentityProvider(identityProvider || "");
            Cloud.setAccessToken(token);
            return true;
        }
        Cloud.parseAccessToken = parseAccessToken;
        function getAccessToken() {
            return window.localStorage.getItem("access_token");
        }
        Cloud.getAccessToken = getAccessToken;
        function isAccessTokenExpired() {
            return !getAccessToken() || !!window.localStorage.getItem("access_token_expired");
        }
        Cloud.isAccessTokenExpired = isAccessTokenExpired;
        function accessTokenExpired() {
            window.localStorage.setItem("access_token_expired", "1");
        }
        Cloud.accessTokenExpired = accessTokenExpired;
        function setAccessToken(token) {
            window.localStorage.removeItem("access_token_expired");
            if (!token)
                window.localStorage.removeItem("access_token");
            else
                window.localStorage.setItem("access_token", token);
        }
        Cloud.setAccessToken = setAccessToken;
        Cloud.getUserId = function () { return window.localStorage.getItem("userid"); };
        Cloud.currentReleaseId = "";
        function getWorldId() {
            var worldId = window.localStorage.getItem("worldId");
            if (!worldId)
                window.localStorage.setItem("worldId", worldId = "$webclient$-" + TDev.Util.guidGen());
            return worldId;
        }
        Cloud.getWorldId = getWorldId;
        function oauthStates() {
            var a = JSON.parse(window.localStorage.getItem("oauth_states") || "[]");
            if (a.length == 0)
                a = [TDev.Random.normalized().toString()];
            window.localStorage.setItem("oauth_states", JSON.stringify(a));
            return a;
        }
        Cloud.oauthStates = oauthStates;
        function setUserId(id) {
            if (!id)
                window.localStorage.removeItem("userid");
            else
                window.localStorage.setItem("userid", id);
        }
        Cloud.setUserId = setUserId;
        function getIdentityProvider() {
            return window.localStorage.getItem("identity_provider");
        }
        Cloud.getIdentityProvider = getIdentityProvider;
        function setIdentityProvider(id) {
            if (!id)
                window.localStorage.removeItem("identity_provider");
            else
                window.localStorage.setItem("identity_provider", id);
        }
        Cloud.setIdentityProvider = setIdentityProvider;
        function mergeProgress(oldData, data) {
            oldData = JSON.parse(JSON.stringify(oldData));
            Object.keys(data).forEach(function (id) {
                var oldProgress = oldData[id] || {};
                var progress = data[id];
                if (oldProgress.index === undefined || oldProgress.index <= progress.index) {
                    if (progress.guid)
                        oldProgress.guid = progress.guid;
                    oldProgress.index = progress.index;
                    if (progress.completed && (oldProgress.completed === undefined || oldProgress.completed > progress.completed))
                        oldProgress.completed = progress.completed;
                    oldProgress.numSteps = progress.numSteps;
                    oldProgress.lastUsed = progress.lastUsed;
                }
                oldData[id] = oldProgress;
            });
            return oldData;
        }
        function storeProgress(data) {
            var newData = mergeProgress(loadPendingProgress(), data);
            window.localStorage.setItem("progress", JSON.stringify(newData));
            window.localStorage.setItem("total_progress", JSON.stringify(mergeProgress(loadProgress(), data)));
        }
        Cloud.storeProgress = storeProgress;
        function clearPendingProgress(data) {
            var oldData = loadPendingProgress();
            Object.keys(data).forEach(function (id) {
                var oldProgress = oldData[id];
                var progress = data[id];
                var uploaded = oldProgress && (!oldProgress.guid || !progress.guid || oldProgress.guid == progress.guid) && (oldProgress.index === undefined || progress.index === undefined || oldProgress.index <= progress.index) && (oldProgress.completed === undefined || progress.completed === undefined || oldProgress.completed <= progress.completed);
                if (uploaded) {
                    delete oldData[id];
                }
            });
            window.localStorage.setItem("progress", JSON.stringify(oldData));
        }
        function loadProgress() {
            return loadPendingProgress("total_progress");
        }
        Cloud.loadProgress = loadProgress;
        function loadPendingProgress(name) {
            if (name === void 0) { name = "progress"; }
            return JSON.parse(window.localStorage.getItem(name) || "{}");
        }
        function isOffline() {
            return !isOnline();
        }
        Cloud.isOffline = isOffline;
        function isOnline() {
            var b = !TDev.Browser.noNetwork && (TDev.Browser.isNodeJS || window.navigator.onLine) && isTouchDevelopOnline();
            if (TDev.dbg && b && isChaosOffline() && TDev.RT.Math_.random(10) < 4)
                b = false;
            return b;
        }
        Cloud.isOnline = isOnline;
        function isOnlineWithPingAsync() {
            if (!isOnline())
                return TDev.Promise.as(false);
            return pingAsync();
        }
        Cloud.isOnlineWithPingAsync = isOnlineWithPingAsync;
        Cloud.transientOfflineMode = false;
        function isTouchDevelopOnline() {
            return !window.localStorage.getItem('offline_mode') && !Cloud.transientOfflineMode;
        }
        Cloud.isTouchDevelopOnline = isTouchDevelopOnline;
        function setTouchDevelopOnline(value) {
            if (value)
                window.localStorage.removeItem('offline_mode');
            else
                window.localStorage.setItem('offline_mode', "true");
        }
        Cloud.setTouchDevelopOnline = setTouchDevelopOnline;
        function isChaosOffline() {
            return !!window.localStorage.getItem('chaos_offline_mode');
        }
        Cloud.isChaosOffline = isChaosOffline;
        function setChaosOffline(value) {
            if (!value)
                window.localStorage.removeItem('chaos_offline_mode');
            else
                window.localStorage.setItem('chaos_offline_mode', "true");
        }
        Cloud.setChaosOffline = setChaosOffline;
        function offlineErrorAsync() {
            var msg = isTouchDevelopOnline() ? "offline mode is on" : "force offline mode is on";
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                var e = new Error(msg);
                e.status = 502;
                onError(e);
            });
        }
        Cloud.offlineErrorAsync = offlineErrorAsync;
        function canPublish() {
            return Cloud.getUserId() != "paema";
        }
        Cloud.canPublish = canPublish;
        function onlineInfo() {
            if (Cloud.isOffline()) {
                var msg = TDev.lf("You appear to be offline. ") + (isTouchDevelopOnline() ? TDev.lf("Please connect to the internet.") : TDev.lf("Please go to the settings in the main hub to disable offline mode."));
                return msg;
            }
            else {
                return TDev.lf("You are online.");
            }
        }
        Cloud.onlineInfo = onlineInfo;
        function showOnlineInfoProgess() {
            TDev.HTML.showProgressNotification(onlineInfo(), true);
        }
        Cloud.showOnlineInfoProgess = showOnlineInfoProgess;
        function showModalOnlineInfo(title) {
            TDev.ModalDialog.info(title, onlineInfo());
        }
        Cloud.showModalOnlineInfo = showModalOnlineInfo;
        var appendAccessToken = function (url) { return (url + (/\?/.test(url) ? "&" : "?") + "access_token=" + getAccessToken() + "&world_id=" + encodeURIComponent(Cloud.getWorldId()) + "&release_id=" + encodeURIComponent(Cloud.currentReleaseId) + "&user_platform=" + encodeURIComponent(TDev.Browser.platformCaps.join(","))); };
        function getPublicApiUrl(path) {
            return appendAccessToken(getServiceUrl() + "/api/" + path);
        }
        Cloud.getPublicApiUrl = getPublicApiUrl;
        function getPrivateApiUrl(path) {
            return appendAccessToken(getServiceUrl() + "/api" + (path == null ? "" : "/" + path));
        }
        Cloud.getPrivateApiUrl = getPrivateApiUrl;
        function getScriptTextAsync(id) {
            return TDev.Util.httpGetTextAsync(getPublicApiUrl(encodeURIComponent(id) + "/text?original=true&ids=true"));
        }
        Cloud.getScriptTextAsync = getScriptTextAsync;
        function getPrivateApiAsync(path) {
            return TDev.Util.httpGetJsonAsync(getPrivateApiUrl(path));
        }
        Cloud.getPrivateApiAsync = getPrivateApiAsync;
        function getPublicApiAsync(path) {
            return TDev.Util.httpGetJsonAsync(getPublicApiUrl(path));
        }
        Cloud.getPublicApiAsync = getPublicApiAsync;
        function postPrivateApiAsync(path, req) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl(path), req);
        }
        Cloud.postPrivateApiAsync = postPrivateApiAsync;
        function deletePrivateApiAsync(path) {
            return TDev.Util.httpRequestAsync(Cloud.getPrivateApiUrl(path), "DELETE");
        }
        Cloud.deletePrivateApiAsync = deletePrivateApiAsync;
        function deletePublicationAsync(id) {
            return TDev.Util.httpRequestAsync(Cloud.getPrivateApiUrl(id), "DELETE");
        }
        Cloud.deletePublicationAsync = deletePublicationAsync;
        function getRandomAsync() {
            return TDev.Util.httpGetTextAsync(getPublicApiUrl("random"));
        }
        Cloud.getRandomAsync = getRandomAsync;
        function isVersionNewer(version1, version2) {
            if (typeof version1 === "object" && typeof version2 === "object") {
                if (version1.instanceId == version2.instanceId)
                    return version1.version > version2.version || version1.version == version2.version && version1.time > version2.time;
                else
                    return version1.time > version2.time;
            }
            return false;
        }
        Cloud.isVersionNewer = isVersionNewer;
        function getUserInstalledAsync() {
            return getPrivateApiAsync("me/installed");
        }
        Cloud.getUserInstalledAsync = getUserInstalledAsync;
        function getUserInstalledLongAsync(v, m) {
            return getPrivateApiAsync("me/installedlong" + (v ? "?v=" + v + (m ? "&m=1" : "") : ""));
        }
        Cloud.getUserInstalledLongAsync = getUserInstalledLongAsync;
        function getUserInstalledBodyAsync(guid) {
            return getPrivateApiAsync("me/installed/" + guid);
        }
        Cloud.getUserInstalledBodyAsync = getUserInstalledBodyAsync;
        function postUserInstalledAsync(installedBodies) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("me/installed"), installedBodies);
        }
        Cloud.postUserInstalledAsync = postUserInstalledAsync;
        function postUserInstalledPublishAsync(guid, hidden, scriptVersion, meta) {
            var url = "me/installed/" + guid + "/publish?hidden=" + (hidden ? "true" : "false");
            if (scriptVersion)
                url += "&scriptversion=" + encodeURIComponent(scriptVersion);
            if (!meta)
                meta = {};
            var mergeIds = meta.parentIds;
            if (mergeIds)
                url += "&mergeids=" + encodeURIComponent(mergeIds);
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl(url), Cloud.lite ? meta : "");
        }
        Cloud.postUserInstalledPublishAsync = postUserInstalledPublishAsync;
        function postApiBatch(bundle) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl(null), bundle);
        }
        Cloud.postApiBatch = postApiBatch;
        function postBugReportAsync(bug) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("bug"), bug);
        }
        Cloud.postBugReportAsync = postBugReportAsync;
        function postTicksAsync(ticks) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("ticks"), ticks);
        }
        Cloud.postTicksAsync = postTicksAsync;
        function postNotificationsAsync() {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("me/notifications"), "");
        }
        Cloud.postNotificationsAsync = postNotificationsAsync;
        function postNotificationChannelAsync(body) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("me/notificationchannel"), body);
        }
        Cloud.postNotificationChannelAsync = postNotificationChannelAsync;
        function getUserApiKeysAsync() {
            return TDev.Util.httpGetJsonAsync(getPrivateApiUrl("me/keys"));
        }
        Cloud.getUserApiKeysAsync = getUserApiKeysAsync;
        function getUserSettingsAsync() {
            return TDev.Util.httpGetJsonAsync(getPrivateApiUrl("me/settings"));
        }
        Cloud.getUserSettingsAsync = getUserSettingsAsync;
        function postUserSettingsAsync(body) {
            return TDev.Util.httpPostJsonAsync(getPrivateApiUrl("me/settings"), body);
        }
        Cloud.postUserSettingsAsync = postUserSettingsAsync;
        function getAppAsync(id, appPlatform) {
            return TDev.Util.httpGetJsonAsync(getPrivateApiUrl(id + "/" + appPlatform + "app"));
        }
        Cloud.getAppAsync = getAppAsync;
        function postAppAsync(id, appPlatform, data) {
            return TDev.Util.httpPostTextAsync(getPrivateApiUrl(id + "/" + appPlatform + "app"), JSON.stringify(data));
        }
        Cloud.postAppAsync = postAppAsync;
        function getWebAppAsync(id) {
            return TDev.Util.httpGetJsonAsync(getPrivateApiUrl(id + "/webapp"));
        }
        Cloud.getWebAppAsync = getWebAppAsync;
        function postWebAppAsync(id, previewUrl, data) {
            return TDev.Util.httpPostTextAsync(getPrivateApiUrl(id + "/webapp" + (previewUrl ? "?previewUrl=true" : "")), JSON.stringify(data));
        }
        Cloud.postWebAppAsync = postWebAppAsync;
        function deleteWebAppAsync(id) {
            return TDev.Util.httpDeleteAsync(getPrivateApiUrl(id + "/webapp"));
        }
        Cloud.deleteWebAppAsync = deleteWebAppAsync;
        function postAskBetaAsync(accept) {
            return TDev.Util.httpPostTextAsync(getPrivateApiUrl("/me/askbeta?accept=" + accept), "");
        }
        Cloud.postAskBetaAsync = postAskBetaAsync;
        function postAskSomethingAsync(accept) {
            return TDev.Util.httpPostTextAsync(getPrivateApiUrl("/me/asksomething?accept=" + accept), "");
        }
        Cloud.postAskSomethingAsync = postAskSomethingAsync;
        function pingAsync() {
            if (/http:\/\/localhost/i.test(document.URL))
                return TDev.Promise.as(true);
            var v = TDev.RT.Math_.random(0xffffff).toString();
            var url = getPublicApiUrl("ping?value=" + encodeURIComponent(v));
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                var client;
                function ready() {
                    if (client.readyState == 4)
                        onSuccess(client.status == 200 && client.responseText === v);
                }
                client = new XMLHttpRequest();
                client.onreadystatechange = ready;
                client.open("GET", url);
                client.send();
            });
        }
        Cloud.pingAsync = pingAsync;
        function postPendingProgressAsync() {
            if (!Cloud.getUserId() || !getAccessToken() || isOffline())
                return TDev.Promise.as();
            var data = loadPendingProgress();
            if (Object.keys(data).length == 0)
                return TDev.Promise.as();
            TDev.Util.log('progress: ' + JSON.stringify(data));
            return Cloud.postPrivateApiAsync("me/progress", data).then(function () { return clearPendingProgress(data); }, function () {
            });
        }
        Cloud.postPendingProgressAsync = postPendingProgressAsync;
        function postCommentAsync(id, text) {
            var req = { kind: "comment", text: text, userplatform: TDev.Browser.platformCaps };
            return Cloud.postPrivateApiAsync(id + "/comments", req);
        }
        Cloud.postCommentAsync = postCommentAsync;
    })(Cloud = TDev.Cloud || (TDev.Cloud = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var HTML;
    (function (HTML) {
        function mkAudio(url, aacUrl, mp3Url, controls) {
            if (aacUrl === void 0) { aacUrl = null; }
            if (mp3Url === void 0) { mp3Url = null; }
            if (controls === void 0) { controls = false; }
            var audio = document.createElement('audio');
            audio.crossorigin = "anonymous";
            audio.controls = controls;
            setAudioSource(audio, url, aacUrl, mp3Url);
            return audio;
        }
        HTML.mkAudio = mkAudio;
        function audioLoadAsync(audio) {
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                audio.oncanplay = function () {
                    TDev.Util.log('loaded sound oncanplay');
                    audio.oncanplay = null;
                    audio.oncanplaythrough = null;
                    audio.onerror = null;
                    onSuccess(audio);
                };
                audio.oncanplaythrough = function () {
                    TDev.Util.log('loaded sound oncanplaythrough');
                    audio.oncanplay = null;
                    audio.oncanplaythrough = null;
                    audio.onerror = null;
                    onSuccess(audio);
                };
                audio.onerror = function (e) {
                    TDev.Util.log('failed loading sound - ' + audio.readyState);
                    audio.oncanplay = null;
                    audio.oncanplaythrough = null;
                    audio.onerror = null;
                    onSuccess(audio);
                };
                var retry = 20;
                var loadTracker = function () {
                    var readyState = (audio.readyState);
                    if (!audio.oncanplay)
                        return;
                    if (readyState === HTMLMediaElement.HAVE_ENOUGH_DATA) {
                        audio.oncanplay = null;
                        audio.oncanplaythrough = null;
                        audio.onerror = null;
                        onSuccess(audio);
                    }
                    else if (retry-- > 0) {
                        TDev.Util.log('retry loading sound. readState:' + readyState + ', networkState:' + audio.networkState + ', try:' + retry);
                        TDev.Util.setTimeout(250, loadTracker);
                    }
                    else {
                        TDev.Util.log('timeout loading sound');
                        audio.oncanplay = null;
                        audio.oncanplaythrough = null;
                        audio.onerror = null;
                        onSuccess(audio);
                    }
                };
                try {
                    TDev.Util.log('start loading sound');
                    audio.load();
                    TDev.Util.setTimeout(400, loadTracker);
                }
                catch (e) {
                    TDev.Util.log('failed loading sound: ' + e.message);
                    onSuccess(audio);
                }
            });
        }
        HTML.audioLoadAsync = audioLoadAsync;
        function setAudioSource(audio, url, aacUrl, mp3Url) {
            if (aacUrl === void 0) { aacUrl = null; }
            if (mp3Url === void 0) { mp3Url = null; }
            if (!url) {
                audio.setChildren([]);
                return;
            }
            var m = url.match(/^data:audio\/(mp3|mp4|wav);base64,/i);
            if (m) {
                TDev.Util.log('audio: src datauri ' + m[1]);
                var src = document.createElement('source');
                src.src = url;
                src.type = 'audio/' + m[1];
                audio.setChildren([src]);
            }
            else {
                var wavSrc = document.createElement('source');
                wavSrc.src = proxyResource(url);
                wavSrc.type = 'audio/wav';
                var mp3Src = document.createElement('source');
                mp3Src.src = proxyResource(mp3Url || url);
                mp3Src.type = 'audio/mp3';
                var aacSrc = document.createElement('source');
                aacSrc.src = proxyResource(aacUrl || url);
                aacSrc.type = 'audio/mp4';
                audio.setChildren([aacSrc, wavSrc, mp3Src]);
            }
        }
        HTML.setAudioSource = setAudioSource;
        function parseWtt(wtt) {
            var r = [];
            if (wtt) {
                try {
                    var rx = /((\d{2}):)?(\d{2}):(\d{2})\.(\d{3}) --> ((\d{2}):)?(\d{2}):(\d{2})\.(\d{3})/gi;
                    var m;
                    while (m = rx.exec(wtt)) {
                        var startTime = parseInt(m[2] || "0") * 3600 + parseInt(m[3]) * 60 + parseInt(m[4]) + parseInt(m[5]) / 1000;
                        var endTime = parseInt(m[7] || "0") * 3600 + parseInt(m[8]) * 60 + parseInt(m[9]) + parseInt(m[10]) / 1000;
                        var message = wtt.substr(m.index + m[0].length).trim();
                        var emptyLine = /^$/m.exec(message);
                        if (emptyLine)
                            message = message.substr(0, emptyLine.index).trim();
                        r.push({ startTime: startTime, endTime: endTime, message: message });
                    }
                }
                catch (e) {
                    TDev.Util.reportError("wtt", e, false);
                    return r;
                }
            }
            return r;
        }
        HTML.parseWtt = parseWtt;
        function pauseVideos(el) {
            if (el) {
                var vids = el.getElementsByTagName("video");
                for (var i = 0; i < vids.length; ++i) {
                    try {
                        vids.item(i).pause();
                    }
                    catch (e) {
                    }
                }
            }
        }
        HTML.pauseVideos = pauseVideos;
        function patchWavToMp4Url(url) {
            if (url) {
                var m = url.match(/^http(s?):\/\/(cdn\.touchdevelop\.com|az31353\.vo\.msecnd\.net)\/pub\/(\w+)/i);
                if (m) {
                    url = 'http' + m[1] + '://' + m[2] + '/aac/' + m[3] + '.m4a';
                }
            }
            return url;
        }
        HTML.patchWavToMp4Url = patchWavToMp4Url;
        function mkBr() {
            return document.createElement("br");
        }
        HTML.mkBr = mkBr;
        function mkTextArea(cls) {
            if (cls === void 0) { cls = null; }
            var ta = document.createElement("textarea");
            if (cls != null)
                ta.className = cls;
            TDev.dirAuto(ta);
            ta.onselectstart = function (e) {
                e.stopImmediatePropagation();
                return true;
            };
            return ta;
        }
        HTML.mkTextArea = mkTextArea;
        function mkButtonElt(cl) {
            var children = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                children[_i - 1] = arguments[_i];
            }
            var elt = document.createElement("button");
            if (cl != null)
                elt.className = cl;
            elt.appendChildren(children);
            TDev.dirAuto(elt);
            return elt;
        }
        HTML.mkButtonElt = mkButtonElt;
        function mkImg(url, cls) {
            if (cls === void 0) { cls = undefined; }
            if (/^\//.test(url))
                url = url.slice(1);
            var m = /^scripticons(96)?\/(.*)\.png/.exec(url);
            if (m) {
                url = "svg:" + m[2] + ",white";
            }
            var img;
            if (/^svg:/.test(url)) {
                img = TDev.SVG.getIconSVG(url.slice(4));
            }
            else {
                var elt = document.createElement("img");
                elt.src = proxyResource(url);
                elt.alt = "";
                img = elt;
            }
            if (cls)
                img.className += " " + cls;
            return img;
        }
        HTML.mkImg = mkImg;
        function mkImgButton(img, f) {
            var i = HTML.mkImg(img);
            HTML.setRole(i, "presentation");
            var btn = mkButtonElt("wall-button", i);
            TDev.Util.clickHandler(btn, f);
            return btn;
        }
        HTML.mkImgButton = mkImgButton;
        function mkDisablableButton(content, f) {
            var r = mkButton(content, function () {
                if (!r.getFlag("disabled"))
                    f();
            });
            return r;
        }
        HTML.mkDisablableButton = mkDisablableButton;
        function mkButton(content, f, cls) {
            if (cls === void 0) { cls = ""; }
            var btn = mkButtonElt("wall-button " + cls, TDev.text(content));
            TDev.Util.clickHandler(btn, f);
            return btn;
        }
        HTML.mkButton = mkButton;
        function mkLinkButton(content, f, cls) {
            if (cls === void 0) { cls = ""; }
            var btn = mkButtonElt("link-button " + cls, TDev.text(content));
            TDev.Util.clickHandler(btn, f);
            return btn;
        }
        HTML.mkLinkButton = mkLinkButton;
        function mkButtonTick(content, t, f, cls) {
            if (cls === void 0) { cls = ""; }
            var btn = mkButtonElt("wall-button " + cls, TDev.text(content));
            setTickCallback(btn, t, f);
            return btn;
        }
        HTML.mkButtonTick = mkButtonTick;
        function mkButtonOnce(content, f, removeSiblings) {
            if (removeSiblings === void 0) { removeSiblings = false; }
            var btn = mkButtonElt("wall-button", TDev.text(content));
            TDev.Util.clickHandler(btn, function (e) {
                if (removeSiblings)
                    btn.parentNode.removeAllChildren();
                else
                    btn.removeSelf();
                f();
            });
            return btn;
        }
        HTML.mkButtonOnce = mkButtonOnce;
        function setTickCallback(btn, tick, f) {
            if (tick == 0 /* noEvent */) {
                return btn.withClick(f);
            }
            else {
                btn.id = "btn-" + TDev.Ticker.tickName(tick);
                return btn.withClick(function () {
                    TDev.Ticker.tick(tick);
                    f();
                });
            }
            return btn;
        }
        HTML.setTickCallback = setTickCallback;
        function mkRoundButton(icon, name, tick, f) {
            var btn = HTML.mkButtonElt("topMenu-button " + (name.length > 11 ? "topMenu-button-long-desc" : ""), [
                TDev.div("topMenu-button-frame", HTML.mkImg(icon)),
                TDev.div("topMenu-button-desc", name)
            ]);
            setTickCallback(btn, tick, f);
            return btn;
        }
        HTML.mkRoundButton = mkRoundButton;
        HTML.mkAudioInput = function (allowEmpty, maxMb) {
            var input = HTML.mkTextInput("file", TDev.lf("choose a file"));
            input.accept = "audio/wav";
            return {
                element: input,
                validate: function () {
                    var files = input.files;
                    if (files.length == 0)
                        return allowEmpty ? null : 'Oops, you need to select a sound...';
                    var f = files[0];
                    if (maxMb > 0 && f.size > maxMb * 1000000)
                        return 'Sorry, the sound is too big. The sound must be less than ' + maxMb + 'Mb...';
                    if (f.type !== 'audio/wav' && f.type !== 'audio/x-wav')
                        return 'Sorry, you can only upload WAV sounds...';
                    return null;
                },
                readAsync: function () {
                    var f = input.files[0];
                    if (!f)
                        return TDev.Promise.as(null);
                    else {
                        return new TDev.Promise(function (onSuccess, onError, onProgress) {
                            var reader = new FileReader();
                            reader.onerror = function (ev) { return onSuccess(null); };
                            reader.onload = function (ev) { return onSuccess(reader.result); };
                            reader.readAsDataURL(f);
                        });
                    }
                }
            };
        };
        HTML.mkImageChooser = function (onchanged) {
            var file = HTML.mkTextInput("file", TDev.lf("choose a picture"));
            file.accept = "image/jpeg,image/png";
            file.onchange = function () {
                var f = file.files.length > 0 ? file.files[0] : null;
                if (!f)
                    return;
                var reader = new FileReader();
                reader.onload = function (ev) { return onchanged(reader.result); };
                reader.readAsDataURL(f);
            };
            return file;
        };
        function mkFileInput(file, maxMb) {
            var input;
            if (/^image\/(png|jpeg)$/.test(file.type)) {
                input = document.createElement("img");
                input.style.maxWidth = '21em';
                input.style.maxHeight = '11em';
                input.src = file;
            }
            else {
                input = document.createElement("audio");
                input.crossorigin = "anonymous";
                input.src = file;
            }
            input.style.margins = '0.5em';
            var prev = new FileReader();
            prev.onload = function (e) { return input.src = prev.result; };
            prev.readAsDataURL(file);
            return {
                element: input,
                validate: function () { return null; },
                readAsync: function () {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var reader = new FileReader();
                        reader.onerror = function (ev) { return onSuccess(null); };
                        reader.onload = function (ev) { return onSuccess(reader.result); };
                        reader.readAsDataURL(file);
                    });
                }
            };
        }
        HTML.mkFileInput = mkFileInput;
        HTML.mkImageInput = function (allowEmpty, maxMb) {
            var input = HTML.mkTextInput("file", TDev.lf("choose a picture"));
            input.accept = "image/jpeg,image/png";
            return { element: input, validate: function () {
                var files = input.files;
                if (files.length == 0)
                    return allowEmpty ? null : TDev.lf("Oops, you need to select a picture...");
                var f = files[0];
                if (maxMb > 0 && f.size > maxMb * 1000000)
                    return TDev.lf("Sorry, the picture is too big. The picture must be less than {0} Mb...", maxMb);
                if (f.type !== 'image/jpeg' && f.type !== 'image/png')
                    return TDev.lf("Sorry, you can only upload JPEG and PNG pictures...");
                return null;
            }, readAsync: function () {
                var f = input.files[0];
                if (!f)
                    return TDev.Promise.as(null);
                else {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var reader = new FileReader();
                        reader.onerror = function (ev) { return onSuccess(null); };
                        reader.onload = function (ev) { return onSuccess(reader.result); };
                        reader.readAsDataURL(f);
                    });
                }
            } };
        };
        function setRole(el, role) {
            if (!el)
                return;
            if (role)
                el.setAttribute("role", role);
            else
                el.removeAttribute("role");
        }
        HTML.setRole = setRole;
        function enableSpeech(el, changed) {
            el.setAttribute('x-webkit-speech', 'x-webkit-speech');
            el.onwebkitspeechchange = function () {
                changed();
            };
            el.onspeechchange = function () {
                changed();
            };
        }
        HTML.enableSpeech = enableSpeech;
        function mkTextInput(type, placeholder, role) {
            var txt = document.createElement("input");
            txt.setAttribute("type", type);
            if (placeholder) {
                txt.setAttribute("placeholder", placeholder);
                txt.setAttribute("aria-label", placeholder);
            }
            if (role)
                HTML.setRole(txt, role);
            txt.autofocus = false;
            txt.className = "wall-textbox";
            TDev.dirAuto(txt);
            if (TDev.Browser.browser == 8 /* safari */)
                txt.autocapitalize = false;
            txt.onselectstart = function (e) {
                e.stopImmediatePropagation();
                return true;
            };
            return txt;
        }
        HTML.mkTextInput = mkTextInput;
        function mkTextInputWithOk(type, placeholder, onOk) {
            var res = mkTextInput(type, placeholder);
            var okBtn = null;
            TDev.Util.onInputChange(res, function () {
                if (okBtn)
                    return;
                res.style.width = "calc(100% - 6em)";
                okBtn = mkButton(TDev.lf("ok"), function () {
                    var b = okBtn;
                    okBtn = null;
                    res.style.width = "";
                    if (b)
                        b.removeSelf();
                    res.blur();
                    if (onOk)
                        onOk();
                }, "input-confirm");
                res.parentNode.insertBefore(okBtn, res.nextSibling);
            });
            res.addEventListener("blur", function () {
                var b = okBtn;
                okBtn = null;
                res.style.width = "";
                if (b)
                    b.removeSelf();
            }, false);
            return res;
        }
        HTML.mkTextInputWithOk = mkTextInputWithOk;
        function mkOption(value, label, selected) {
            if (selected === void 0) { selected = undefined; }
            var children = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                children[_i - 3] = arguments[_i];
            }
            var option = document.createElement("option");
            option.label = label;
            option.value = value;
            if (selected !== undefined)
                option.selected = selected;
            if (label)
                option.appendChildren(label);
            option.appendChildren(children);
            return option;
        }
        HTML.mkOption = mkOption;
        function mkComboBox(options) {
            var combobox = document.createElement("select");
            combobox.autofocus = false;
            combobox.className = "wall-textbox";
            combobox.appendChildren(options);
            return combobox;
        }
        HTML.mkComboBox = mkComboBox;
        function getCheckboxValue(ch) {
            return !!ch.selected;
        }
        HTML.getCheckboxValue = getCheckboxValue;
        function setCheckboxValue(ch, v) {
            ch.theBox.setChildren(v ? [TDev.text("\u2713")] : []);
            ch.selected = v;
        }
        HTML.setCheckboxValue = setCheckboxValue;
        function mkCheckBox(lbl, onchg, v) {
            if (onchg === void 0) { onchg = undefined; }
            return mkTickCheckBox(0 /* noEvent */, lbl, onchg, v);
        }
        HTML.mkCheckBox = mkCheckBox;
        function mkTickCheckBox(t, lbl, onchg, v) {
            if (onchg === void 0) { onchg = undefined; }
            var b = TDev.div("theBox", TDev.text(""));
            var r = TDev.div("checkbox", b, TDev.text(lbl));
            r.theBox = b;
            setTickCallback(r, t, function () {
                var nv = !r.selected;
                setCheckboxValue(r, nv);
                if (!!onchg)
                    onchg(nv);
            });
            if (v !== undefined)
                setCheckboxValue(r, v);
            return r;
        }
        HTML.mkTickCheckBox = mkTickCheckBox;
        function mkRadioButtons(lbls) {
            var res = {
                current: -1,
                enabled: true,
                buttons: lbls.map(function (l, i) { return setTickCallback(mkButtonElt("radio-button", TDev.div("radio-outer", TDev.div("radio-inner")), TDev.div("radio-label", l.name)), l.tick, function () {
                    if (res.enabled)
                        res.change(i);
                }); }),
                onchange: function (n) {
                },
                change: function (n) {
                    res.current = n;
                    res.buttons.forEach(function (b, i) { return b.setFlag("selected", i == n); });
                    res.onchange(n);
                },
                elt: TDev.div("radio-group")
            };
            res.elt.setChildren(res.buttons);
            return res;
        }
        HTML.mkRadioButtons = mkRadioButtons;
        function mkModalList(children) {
            var kindList = TDev.div("modalList", children);
            TDev.Util.setupDragToScroll(kindList);
            return kindList;
        }
        HTML.mkModalList = mkModalList;
        var progressNotificationAnimation;
        HTML.showProgressNotification = function (msgText, fadeOut, delay, duration) {
            if (fadeOut === void 0) { fadeOut = true; }
            if (delay === void 0) { delay = 1000; }
            if (duration === void 0) { duration = 2000; }
            if (TDev.Browser.isHeadless) {
                TDev.Util.log("progress: " + msgText);
                return;
            }
            var className = "progressNotification";
            var se = TDev.elt("root");
            var oldMsgs = se.getElementsByClassName(className);
            var msg = oldMsgs.length > 0 ? oldMsgs.item(0) : undefined;
            var f = function () {
                progressNotificationAnimation = undefined;
                if (fadeOut) {
                    progressNotificationAnimation = TDev.Animation.fadeOut(msg);
                    progressNotificationAnimation.delay = delay;
                    progressNotificationAnimation.duration = duration;
                    progressNotificationAnimation.completed = function () {
                        progressNotificationAnimation = undefined;
                    };
                    progressNotificationAnimation.begin();
                }
            };
            if (msg) {
                if (!!progressNotificationAnimation) {
                    progressNotificationAnimation.stop();
                }
                msg.style.opacity = "1";
                if (msgText !== undefined) {
                    msg.removeAllChildren();
                    msg.appendChildren(msgText);
                }
                f();
            }
            else if (msgText) {
                msg = TDev.div(className, msgText);
                se.appendChild(msg);
                progressNotificationAnimation = TDev.Animation.fadeIn(msg);
                progressNotificationAnimation.completed = f;
                progressNotificationAnimation.begin();
            }
        };
        function showWarningNotification(msgText, details) {
            if (details === void 0) { details = null; }
            if (TDev.Browser.isHeadless) {
                TDev.Util.log("warning: " + msgText);
                return;
            }
            var msg = TDev.div("warningNotification", TDev.div('frownie', ":("), TDev.div('info', msgText));
            if (details) {
                msg.appendChild(TDev.div('info link', 'learn more...'));
                msg.withClick(function () {
                    TDev.tick(423 /* warningNotificationTap */);
                    TDev.ModalDialog.info(msgText, details);
                });
            }
            TDev.elt("root").appendChild(msg);
            var a = TDev.Animation.fadeOut(msg);
            a.delay = 6000;
            a.duration = 3000;
            a.begin();
        }
        HTML.showWarningNotification = showWarningNotification;
        function showPluginNotification(msgText) {
            var msg = TDev.div("pluginNotification", TDev.div('info', msgText));
            TDev.elt("root").appendChild(msg);
            var a = TDev.Animation.fadeOut(msg);
            a.delay = 6000;
            a.duration = 3000;
            a.begin();
        }
        HTML.showPluginNotification = showPluginNotification;
        function showErrorNotification(msgText) {
            if (TDev.Browser.isHeadless) {
                TDev.Util.log("error: " + msgText);
                return;
            }
            var msg = TDev.div("errorNotification", msgText);
            TDev.elt("root").appendChild(msg);
            var a = TDev.Animation.fadeOut(msg);
            a.delay = 2000;
            a.duration = 2000;
            a.begin();
        }
        HTML.showErrorNotification = showErrorNotification;
        function showSaveNotification(msgText, time) {
            if (time === void 0) { time = 1000; }
            var msg = TDev.div("saveNotification", msgText);
            TDev.elt("root").appendChild(msg);
            var a = TDev.Animation.fadeOut(msg);
            a.delay = time;
            a.duration = 1000;
            a.begin();
            return msg;
        }
        HTML.showSaveNotification = showSaveNotification;
        ;
        function showWebNotification(aTitle, aOptions, aTimeout) {
            if (aOptions === void 0) { aOptions = {}; }
            if (aTimeout === void 0) { aTimeout = 10000; }
            if (!("Notification" in window))
                return;
            if (document.hasFocus())
                return;
            var Notification = window.Notification;
            var doit = function () {
                var n = new Notification(aTitle, aOptions);
                n.onshow = function () {
                    TDev.Util.setTimeout(aTimeout, function () { return n.close(); });
                };
            };
            if (Notification.permission === "granted") {
                doit();
            }
            else {
                Notification.requestPermission(function (permission) {
                    if (permission === "granted")
                        doit();
                });
            }
        }
        HTML.showWebNotification = showWebNotification;
        function mkA(cl, href, target) {
            var children = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                children[_i - 3] = arguments[_i];
            }
            var elt = document.createElement("a");
            elt.href = href;
            elt.target = target;
            if (cl)
                elt.className = cl;
            elt.appendChildren(children);
            return elt;
        }
        HTML.mkA = mkA;
        function span(cls) {
            var elts = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                elts[_i - 1] = arguments[_i];
            }
            var r = document.createElement("span");
            if (cls)
                r.className = cls;
            r.setChildren(elts);
            return r;
        }
        HTML.span = span;
        function label(cls) {
            var elts = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                elts[_i - 1] = arguments[_i];
            }
            var r = document.createElement("label");
            if (cls)
                r.className = cls;
            r.setChildren(elts);
            return r;
        }
        HTML.label = label;
        function showNotification(msg) {
            TDev.elt("root").appendChild(msg);
            var a = TDev.Animation.fadeOut(msg);
            a.delay = 6000;
            a.duration = 2000;
            a.begin();
        }
        HTML.showNotification = showNotification;
        function showNotificationText(text) {
            var msg = TDev.div("errorNotification", text);
            showNotification(msg);
        }
        HTML.showNotificationText = showNotificationText;
        function showProxyNotification(message, url) {
            var msg = TDev.div("errorNotification", message, mkBr(), span("smallText", "URL: " + url));
            showNotification(msg);
        }
        HTML.showProxyNotification = showProxyNotification;
        function showCorsNotification(url) {
            var msg = TDev.div("errorNotification", TDev.lf("Access Denied: Your web browser and the web site prevent cross-origin resource sharing (CORS)."), mkA("", "https://www.touchdevelop.com/docs/CORS", "_blank", "Learn more..."), mkBr(), span("smallText", "URL: " + url));
            showNotification(msg);
        }
        HTML.showCorsNotification = showCorsNotification;
        function mkProgressBar() {
            var r = TDev.div("progressBar", TDev.Util.range(0, 4).map(function (v) { return TDev.div("progressDot progressDot-" + v); }));
            HTML.setRole(r, "progressbar");
            var n = 0;
            function update(k) {
                n += k;
                if (n < 0)
                    n = 0;
                r.style.display = n > 0 ? "block" : "none";
            }
            update(0);
            if (TDev.Browser.noAnimations) {
                r.start = r.stop = r.reset = function () {
                };
            }
            else {
                r.start = function () {
                    update(+1);
                };
                r.stop = function () {
                    update(-1);
                };
                r.reset = function () {
                    update(-n);
                };
            }
            return r;
        }
        HTML.mkProgressBar = mkProgressBar;
        function mkAutoExpandingTextArea(showDismiss) {
            if (showDismiss === void 0) { showDismiss = false; }
            var ta = HTML.mkTextArea();
            var pre = document.createElement("pre");
            var dismiss = showDismiss ? TDev.div('close-round-button', HTML.mkImg("svg:check,black")).withClick(function () {
                if (r.onDismiss)
                    r.onDismiss();
            }) : null;
            var content = span(null, null);
            pre.setChildren([content, mkBr()]);
            var update = function () {
                content.textContent = ta.value;
                r.onUpdate();
            };
            TDev.Util.onInputChange(ta, update);
            var r = {
                div: TDev.div("expandingTextAreaContainer", pre, ta, dismiss),
                textarea: ta,
                update: update,
                onUpdate: function () {
                },
                dismiss: dismiss,
                onDismiss: function () {
                },
            };
            return r;
        }
        HTML.mkAutoExpandingTextArea = mkAutoExpandingTextArea;
        function fixWp8Links() {
            var elts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                elts[_i - 0] = arguments[_i];
            }
            elts.forEach(function (elt) {
                var ch = elt.getElementsByTagName("A");
                for (var i = 0; i < ch.length; ++i)
                    (function () {
                        var a = ch[i];
                        var href = a.getAttribute("href");
                        if (/^#/.test(href)) {
                            a.withClick(function () {
                                TDev.Util.log("navigate " + href);
                                TDev.Util.setHash(href);
                                return false;
                            });
                        }
                    })();
            });
        }
        HTML.fixWp8Links = fixWp8Links;
        HTML.localCdn = null;
        function proxyResource(url) {
            if (!url)
                return url;
            if (HTML.localCdn && /^(https:\/\/az31353.vo.msecnd.net|http:\/\/cdn.touchdevelop.com|https?:\/\/lexmediaservice3.blob.core.windows.net|https:\/\/tdtutorialtranslator.blob.core.windows.net)/i.test(url)) {
                url = HTML.localCdn + encodeURIComponent(url);
            }
            return url;
        }
        HTML.proxyResource = proxyResource;
        function cssImage(url, opacity) {
            if (opacity === void 0) { opacity = 1; }
            if (!url)
                return "";
            var u = "url(" + proxyResource(url) + ")";
            if (opacity <= 1)
                u = TDev.Util.fmt("linear-gradient(to bottom, rgba(255,255,255,{0}) 0%,rgba(255,255,255,{0}) 100%), {1}", (1 - opacity).toFixed(3), u);
            return u;
        }
        HTML.cssImage = cssImage;
        HTML.html5Tags = {
            "dialog": -1,
            "embed": -1,
            "keygen": -1,
            "link": -1,
            "meta": -1,
            "noscript": -1,
            "object": -1,
            "param": -1,
            "script": -1,
            "applet": -1,
            "frame": -1,
            "frameset": -1,
            "noframes": -1,
            "html": -1,
            "body": -1,
            "head": -1,
            "title": -1,
            "form": -1,
            "style": -1,
            "basefont": -2,
            "font": -2,
            "center": -2,
            "big": -2,
            "dir": -2,
            "acronym": -2,
            "strike": -2,
            "tt": -2,
            "a": 1,
            "ul": 1,
            "h1": 1,
            "h2": 1,
            "h3": 1,
            "h4": 1,
            "h5": 1,
            "h6": 1,
            "ol": 1,
            "li": 1,
            "blockquote": 1,
            "pre": 1,
            "b": 1,
            "button": 1,
            "code": 1,
            "img": 1,
            "strong": 1,
            "span": 1,
            "br": 1,
            "del": 1,
            "div": 1,
            "em": 1,
            "p": 1,
            "i": 1,
            "u": 1,
            "video": 1,
            "source": 1,
            "audio": 1,
            "track": 1,
            "small": 1,
            "iframe": 1,
            "svg": 1,
            "path": 1,
            "circle": 1,
            "g": 1,
            "abbr": 2,
            "address": 2,
            "area": 2,
            "article": 2,
            "aside": 2,
            "bdi": 2,
            "bdo": 2,
            "canvas": 2,
            "caption": 2,
            "cite": 2,
            "col": 2,
            "colgroup": 2,
            "datalist": 2,
            "dd": 2,
            "details": 2,
            "dfn": 2,
            "dl": 2,
            "dt": 2,
            "fieldset": 2,
            "figcaption": 2,
            "figure": 2,
            "footer": 2,
            "header": 2,
            "hgroup": 2,
            "hr": 2,
            "input": 2,
            "ins": 2,
            "kbd": 2,
            "label": 2,
            "legend": 2,
            "main": 2,
            "map": 2,
            "mark": 2,
            "menu": 2,
            "menuitem": 2,
            "meter": 2,
            "nav": 2,
            "optgroup": 2,
            "option": 2,
            "output": 2,
            "progress": 2,
            "q": 2,
            "rp": 2,
            "rt": 2,
            "ruby": 2,
            "s": 2,
            "samp": 2,
            "section": 2,
            "select": 2,
            "sub": 2,
            "summary": 2,
            "sup": 2,
            "table": 2,
            "tbody": 2,
            "td": 2,
            "textarea": 2,
            "tfoot": 2,
            "th": 2,
            "thead": 2,
            "time": 2,
            "tr": 2,
            "var": 2,
            "wbr": 2,
        };
        var html5Attributes = {
            "src": 1,
            "srcset": 1,
            "href": 1,
            "xmlns": 1,
            "class": 2,
            "frameborder": 2,
            "allowfullscreen": 2,
            "alt": 2,
            "style": 2,
            "type": 2,
            "target": 2,
            "rel": 2,
            "name": 2,
            "translate": 2,
            "dir": 2,
            "id": 2,
            "width": 2,
            "height": 2,
            "placeholder": 2,
            "title": 2,
            "controls": 2,
            "autoplay": 2,
            "disabled": 2,
            "role": 2,
            "aria-atomic": 2,
            "aria-busy": 2,
            "aria-controls": 2,
            "aria-describedby": 2,
            "aria-disabled": 2,
            "aria-dropeffect": 2,
            "aria-flowto": 2,
            "aria-grabbed": 2,
            "aria-haspopup": 2,
            "aria-hidden": 2,
            "aria-invalid": 2,
            "aria-label": 2,
            "aria-labelledby": 2,
            "aria-live": 2,
            "aria-owns": 2,
            "aria-relevant": 2,
            "viewbox": 2,
            "preserveaspectratio": 2,
            "fill": 2,
            "d": 2,
            "cx": 2,
            "cy": 2,
            "r": 2,
            "stroke": 2,
            "stroke-width": 2,
            "transform": 2,
            "fill-opacity": 2,
            "stroke-miterlimit": 2,
            "stroke-dasharray": 2,
        };
        function htmlOops(msg, html, other) {
            if (other)
                msg += ": " + other.slice(0, 100);
            var err = new Error("Critical: HTML sanitization failure, " + msg);
            err.bugAttachments = [html];
            if (other && other.length > 100)
                err.bugAttachments.push(other);
            throw err;
        }
        function validateTag(t, html) {
            if (/^\!--.*--$/.exec(t))
                return;
            var m = /^\/?([a-zA-Z0-9]+)(\s|\/?$)/.exec(t);
            if (!m)
                htmlOops("no tag name", html, t);
            var tn = m[1].toLowerCase();
            if (!HTML.html5Tags.hasOwnProperty(tn))
                htmlOops("unknown tag", html, tn);
            var v = HTML.html5Tags[tn];
            if (v !== 1)
                htmlOops("tag not allowed, " + v, html, tn);
            t = t.slice(m[0].length);
            while (!/^\s*\/?$/.test(t)) {
                m = /^\s*([a-zA-Z0-9-]+)($|\s|="([^"]*)"|='([^']*)'|=([a-zA-Z0-9]+))/.exec(t);
                if (!m)
                    htmlOops("cannot parse html attribute", html, t);
                var an = m[1].toLowerCase();
                var av = m[3] || m[4] || m[5] || "";
                if (/^data-/.test(an)) {
                }
                else if (!html5Attributes.hasOwnProperty(an))
                    htmlOops("unknown attribute", html, t);
                else {
                    var kk = html5Attributes[an];
                    if (kk == 1) {
                        if (!/^(http|\/|\.\/|#|mailto:)/.test(av))
                            htmlOops("bad URL", html, t);
                    }
                    else if (kk == 2) {
                    }
                    else {
                        htmlOops("forbidden attribute", html, t);
                    }
                }
                t = t.slice(m[0].length);
            }
        }
        function sanitizeHTML(html) {
            if (!TDev.isBeta)
                return html;
            try {
                var reminder = html.replace(/<([^<>]+)>/g, function (allm, t) {
                    validateTag(t, html);
                    return "(tag)";
                });
                if (/[<>]/.test(reminder)) {
                    htmlOops("unexpected tag", html, reminder);
                }
                return html;
            }
            catch (e) {
                TDev.Util.reportError("html", e, false);
                return html;
            }
        }
        HTML.sanitizeHTML = sanitizeHTML;
        function allowedTagName(tn) {
            tn = tn.toLowerCase();
            if (!HTML.html5Tags.hasOwnProperty(tn))
                return false;
            var v = HTML.html5Tags[tn];
            return v === 1 || v === 2;
        }
        HTML.allowedTagName = allowedTagName;
        function allowedAttribute(name, val) {
            if (/^data-/.test(name))
                return true;
            if (!html5Attributes.hasOwnProperty(name))
                return false;
            var v = html5Attributes[val];
            if (v === 1)
                return /^(http|\/|\.\/|#|mailto:)/.test(val);
            else if (v === 2)
                return true;
            else
                return false;
        }
        HTML.allowedAttribute = allowedAttribute;
    })(HTML = TDev.HTML || (TDev.HTML = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var StackFrameBase = (function () {
        function StackFrameBase(rt) {
            this.rt = rt;
            this.returnAddr = null;
            this.entryAddr = null;
            this.previous = null;
            this.isLibProxy = false;
        }
        return StackFrameBase;
    })();
    TDev.StackFrameBase = StackFrameBase;
    var StackBottom = (function (_super) {
        __extends(StackBottom, _super);
        function StackBottom(rt) {
            _super.call(this, rt);
            this.needsPicker = false;
            this.pc = "";
            this.stackDepth = 0;
            this.name = "<entry-point>";
            this.d = this.rt.datas["this"];
            this.libs = this.rt.compiled.libs;
        }
        return StackBottom;
    })(StackFrameBase);
    TDev.StackBottom = StackBottom;
    var LibProxy = (function (_super) {
        __extends(LibProxy, _super);
        function LibProxy(libs, previous, libRefName, libActionName, invoke) {
            _super.call(this, previous.rt);
            this.libRefName = libRefName;
            this.libActionName = libActionName;
            this.invoke = invoke;
            this.isLibProxy = true;
            this.pc = "";
            this.libs = libs;
            this.previous = previous;
            this.d = this.rt.datas[this.libRefName];
            this.name = this.libActionName;
            this.stackDepth = previous.stackDepth;
        }
        return LibProxy;
    })(StackFrameBase);
    TDev.LibProxy = LibProxy;
    var ResumeCtx = (function () {
        function ResumeCtx(stackframe) {
            this.stackframe = stackframe;
            this.used = false;
            this.isBlocking = false;
            this.rt = stackframe.rt;
            stackframe.rendermode = stackframe.rt.rendermode;
        }
        ResumeCtx.prototype.isTaskCtx = function () {
            return false;
        };
        ResumeCtx.prototype.clearProgress = function () {
            if (this.shownProgress) {
                this.shownProgress = false;
                TDev.HTML.showProgressNotification("");
            }
        };
        ResumeCtx.prototype.resumeVal = function (v) {
            if (this.used)
                return;
            this.used = true;
            this.clearProgress();
            this.resumeCore(v);
        };
        ResumeCtx.prototype.resumeCore = function (v) {
            this.rt._resumeVal(v, this);
        };
        ResumeCtx.prototype.resume = function () {
            return this.resumeVal(undefined);
        };
        ResumeCtx.prototype.progress = function (msg) {
            this.shownProgress = true;
            TDev.HTML.showProgressNotification(msg, false);
        };
        return ResumeCtx;
    })();
    TDev.ResumeCtx = ResumeCtx;
    (function (RtState) {
        RtState[RtState["Stopped"] = 0] = "Stopped";
        RtState[RtState["Running"] = 1] = "Running";
        RtState[RtState["Paused"] = 2] = "Paused";
        RtState[RtState["AtAwait"] = 3] = "AtAwait";
        RtState[RtState["BreakpointHit"] = 4] = "BreakpointHit";
    })(TDev.RtState || (TDev.RtState = {}));
    var RtState = TDev.RtState;
    var RuntimeSettings;
    (function (RuntimeSettings) {
        RuntimeSettings.readSetting = function (key) {
            return window.localStorage[key];
        };
        RuntimeSettings.storeSetting = function (key, value) {
            window.localStorage[key] = value;
        };
        function location() {
            return !RuntimeSettings.readSetting("rtnolocation");
        }
        RuntimeSettings.location = location;
        function setLocation(value) {
            RuntimeSettings.storeSetting("rtnolocation", value ? value : undefined);
        }
        RuntimeSettings.setLocation = setLocation;
        function sounds() {
            return !RuntimeSettings.readSetting("rtsnosounds");
        }
        RuntimeSettings.sounds = sounds;
        function setSounds(value) {
            RuntimeSettings.storeSetting("rtsnosounds", value ? value : undefined);
            if (!value)
                TDev.RT.Player.pause();
        }
        RuntimeSettings.setSounds = setSounds;
        RuntimeSettings.askSourceAccess = true;
    })(RuntimeSettings = TDev.RuntimeSettings || (TDev.RuntimeSettings = {}));
    var Runtime = (function () {
        function Runtime(sessions) {
            this.handlingException = false;
            this.datas = {};
            this.testMode = false;
            this.devMode = true;
            this.eventQ = null;
            this.recordTypesRegistered = false;
            this.resumePointOverride = null;
            this.versionNumber = 1;
            this.restartQueued = false;
            this.tutorialState = null;
            this.renderedComments = "";
            this.webState = {};
            this.state = 0 /* Stopped */;
            this.stateMsg = undefined;
            this.eventExecuting = false;
            this.mainLoopRunning = false;
            this.resumeAllowed = false;
            this.runningPluginOn = "";
            this.headlessPluginMode = false;
            this.tutorialObject = "";
            this.pageTransitionStyle = "slide";
            this.currentScriptId = undefined;
            this.currentAuthorId = undefined;
            this.baseScriptId = undefined;
            this.disposables = [];
            this.asyncStack = [];
            this.asyncTasks = [];
            this.runMap = new TDev.RunBitMap();
            this.debuggerLastState = null;
            this.eventCategory = null;
            this.eventVariable = null;
            this.inCloudCall = false;
            this.inQuery = false;
            this.rendermode = false;
            this.lastBreak = 0;
            this.quickLoopDepth = 0;
            this.sessions = sessions || new TDev.Revisions.Sessions();
            this.sessions.rt = this;
        }
        Runtime.prototype.liveMode = function () {
            return this.host.liveMode();
        };
        Runtime.prototype.getWall = function () {
            return this.host.getWall();
        };
        Runtime.prototype.runtimeKind = function () {
            return this.devMode ? "editor" : "website";
        };
        Runtime.prototype.requiresAuth = function () {
            return this.compiled.hasCloudData && this.sessions.getCurrentSession().requiresAuth;
        };
        Runtime.prototype.getUserId = function () {
            if (this.sessions.isNodeClient()) {
                return this.sessions.getCurrentSession().clientUserId;
            }
            return TDev.Cloud.getUserId();
        };
        Runtime.prototype.getScriptGuid = function () {
            return this.host.currentGuid;
        };
        Runtime.prototype.getScriptName = function () {
            return this.compiled.scriptTitle;
        };
        Runtime.prototype.getScriptColor = function () {
            return this.compiled.scriptColor;
        };
        Runtime.prototype.beenHere = function (id) {
            this.runMap.push(id);
        };
        Runtime.prototype.resetRunMap = function () {
            this.runMap.clear();
        };
        Runtime.prototype.initBreakpoints = function (h) {
            this.breakpoints = h;
            this.updateScriptBreakpoints();
        };
        Runtime.prototype.hitBreakpoint = function (id) {
            this.debuggerLastState = this.state;
            this.setState(4 /* BreakpointHit */, "breakpoint");
            this.host.notifyBreakpointHit(id);
        };
        Runtime.prototype.updateScriptBreakpoints = function () {
            var _this = this;
            if (!this.compiled)
                return;
            var binds = this.compiled.breakpointBindings;
            Object.keys(binds).forEach(function (k) {
                var bind = binds[k];
                bind.setter(_this.breakpoints.get(k));
            });
        };
        Runtime.prototype.debuggerContinue = function () {
            if (!this.debuggerStopped())
                return;
            if (this.debuggerLastState !== null)
                this.setState(this.debuggerLastState, "debugger last state");
            if (this.debuggerCC)
                this.mainLoop(this.debuggerCC, "resume debugger");
        };
        Runtime.prototype.debuggerStopped = function () {
            return this.state === 4 /* BreakpointHit */;
        };
        Runtime.prototype.debuggerQueryGlobalValue = function (stableName) {
            TDev.Util.log("Runtime.debuggerQueryGlobalValue: " + stableName);
            if (!this.compiled || !this.current)
                return;
            return this.current.d[stableName];
        };
        Runtime.prototype.debuggerQueryLocalValue = function (actionId, name, stackFrame) {
            TDev.Util.log("Runtime.debuggerQueryLocalValue: " + name);
            if (!this.compiled || !this.current)
                return;
            var actionBindings;
            this.compiled.forEachLib(function (l) {
                if (!actionBindings && l.localNamesBindings)
                    actionBindings = l.localNamesBindings[actionId];
            });
            if (!actionBindings)
                return;
            name = actionBindings[name];
            TDev.Util.log("Runtime.debuggerQueryLocalValue resolved to: " + name);
            var frame = stackFrame ? stackFrame : this.current;
            return frame && frame["$" + name];
        };
        Runtime.prototype.debuggerQueryOutValue = function (ix, stackFrame) {
            TDev.Util.log("Runtime.debuggerQueryOutValue: " + ix);
            if (!this.compiled || !this.current)
                return;
            var frame = stackFrame ? stackFrame : this.current;
            if (ix > 0)
                return frame.results[ix];
            else
                return frame.orig_result || frame.result || (frame.results && frame.results[0]);
        };
        Runtime.prototype.saveAndCloseAllSessionsAsync = function () {
            return this.sessions.clearScriptContext(true);
        };
        Runtime.prototype.permissionsAsync = function () {
            return this.sessions.getLocalSessionAttributeAsync("____source_access", this).then(function (s) { return JSON.parse(s || "{}"); });
        };
        Runtime.prototype.savePermissionsAsync = function (perm) {
            return this.sessions.setLocalSessionAttributeAsync("____source_access", JSON.stringify(perm), this);
        };
        Runtime.offerNotifications = function () {
            return !!Runtime.refreshNotifications || !!localStorage["gcm"];
        };
        Runtime.prototype.getActionResults = function () {
            var r = this.returnedFrom;
            if (!r)
                return null;
            if (r.results)
                return r.results.slice(0);
            else
                return [r.result];
        };
        Runtime.prototype.setNextEvent = function (c, v) {
            this.eventCategory = c;
            this.eventVariable = v;
        };
        Runtime.prototype.resetNextEvent = function () {
            this.eventCategory = null;
            this.eventVariable = null;
        };
        Runtime.prototype.currentTime = function () {
            return TDev.Util.perfNow();
        };
        Runtime.prototype.setHost = function (h) {
            this.host = h;
            this.host.init(this);
        };
        Runtime.prototype.startCloudCall = function (libName, actionName, paramNames, returnNames, args, isQuery) {
            TDev.Util.assert(!this.inCloudCall);
            TDev.Util.assert(!this.inQuery);
            this.inCloudCall = true;
            if (!isQuery) {
                this.sessions.getCurrentSession().user_start_cloud_operation(libName, actionName, paramNames, returnNames, args, 2 /* OFFLINE */);
            }
            else {
                this.inQuery = true;
            }
        };
        Runtime.prototype.endCloudCall = function (libName, actionName, paramNames, returnNames, args, isQuery) {
            TDev.Util.assert(this.inCloudCall);
            this.inCloudCall = false;
            if (isQuery) {
                TDev.Util.assert(this.inQuery);
                this.inQuery = false;
            }
            else {
                this.sessions.getCurrentSession().user_stop_cloud_operation(libName, actionName, paramNames, returnNames, args);
            }
        };
        Runtime.prototype.log = function (s) {
            TDev.Util.log(s);
        };
        Runtime.prototype.mayPostToWall = function (p) {
            return !this.headlessPluginMode && (!p.isAuto() || this.rendermode || p.crashed);
        };
        Runtime.prototype.clearWall = function () {
            var p = this.getCurrentPage();
            if (p.isAuto())
                TDev.Util.userError(TDev.lf("cannot clear wall on pages"));
            p.clear();
            p.render(this.host);
        };
        Runtime.prototype.setWallDirection = function (topDown) {
            var p = this.getCurrentPage();
            if (p.isAuto())
                TDev.Util.userError(TDev.lf("cannot set wall direction on pages"));
            p.setReversed(topDown);
        };
        Runtime.prototype.postHtml = function (e, pc) {
            this.postBoxedHtml(e, pc);
        };
        Runtime.prototype.postText = function (s, pc) {
            this.postHtml(TDev.div("wall-text", s), pc);
        };
        Runtime.prototype.postException = function (e) {
            var p = this.getCurrentPage();
            if (this.rendermode)
                this.abortRender();
            else if (p.isAuto())
                p.clear();
            p.crashed = true;
            this.postBoxedHtml(e, "");
        };
        Runtime.prototype.addTapEvent = function (e, tp, box, v) {
            var _this = this;
            if (this.eventEnabled("tap wall " + tp)) {
                if (!box || !this.getCurrentPage().isAuto()) {
                    e.style.cursor = "pointer";
                    e.withClick(function () {
                        _this.eventQ.add("tap wall " + tp, null, [v]);
                    });
                }
                else {
                    box.withClick(function () {
                        _this.eventQ.add("tap wall " + tp, null, [v]);
                    });
                }
            }
        };
        Runtime.prototype.getPageCount = function () {
            return !this.pageStack ? 0 : this.pageStack.length < 1 ? 1 : this.pageStack.length;
        };
        Runtime.prototype.pushPage = function (auto) {
            if (auto === void 0) { auto = false; }
            var currentPage = this.getCurrentPage();
            currentPage.deactivate();
            var page = new TDev.WallPage(this, auto);
            if (auto && this.pageStack.length == 1 && !this.pageStack[0].isAuto() && this.pageStack[0].lastChildCount < 0 && !(this.pageStack[0].fullScreenElement))
                this.pageStack[0] = page;
            else
                this.pageStack.push(page);
            var wall = this.getWall();
            wall.appendChild(page.getElement());
            if (this.pageTransitionStyle == "slide")
                TDev.Util.coreAnim("showPageRight", 400, page.getElement());
            else if (this.pageTransitionStyle == "fade")
                TDev.Util.coreAnim("fadeIn", 400, page.getElement());
            this.forcePageRefresh();
            this.host.notifyPagePush();
            this.applyPageAttributes();
            return page;
        };
        Runtime.prototype.popPagesIncluding = function (p) {
            while (this.pageStack.indexOf(p) >= 0) {
                if (!this.popPage())
                    return;
            }
        };
        Runtime.prototype.popPage = function (transition) {
            var _this = this;
            if (transition === void 0) { transition = null; }
            if (this.pageStack.length <= 1)
                return false;
            var currentPage = this.pageStack.pop();
            var prevPage = currentPage;
            var currentElement = currentPage.getElement();
            currentPage = this.getCurrentPage();
            currentPage.activate();
            var hideStyle = transition;
            var hideAnim = null;
            if (hideStyle == "slide" || hideStyle == "slide right")
                hideAnim = "hidePageLeft 0.2";
            else if (hideStyle == "slide up")
                hideAnim = "hidePageUp 0.7";
            else if (hideStyle == "slide down")
                hideAnim = "hidePageDown 0.7";
            else if (hideStyle == "fade")
                hideAnim = "fadeOut 0.3";
            else if (hideStyle == "none")
                hideAnim = "fadeOut 0.01";
            if (!hideAnim && this.pageTransitionStyle == "slide")
                hideAnim = "hidePageLeft 0.2";
            if (hideAnim) {
                currentPage.getElement().style.opacity = "0";
                var parts = hideAnim.split(/ /);
                var hideDuration = parseFloat(parts[1]) * 1000;
                hideAnim = parts[0];
                TDev.Util.coreAnim(hideAnim, hideDuration, currentElement, function () {
                    currentElement.removeSelf();
                    currentPage.getElement().style.opacity = null;
                    if (_this.pageTransitionStyle == "slide")
                        TDev.Util.coreAnim("showPageLeft", 300, currentPage.getElement());
                    else if (_this.pageTransitionStyle == "fade")
                        TDev.Util.coreAnim("fadeIn", 400, currentPage.getElement());
                    else {
                    }
                });
            }
            else if (this.pageTransitionStyle == "fade") {
                TDev.Util.coreAnim("fadeOut", 400, currentElement, function () { return currentElement.removeSelf(); });
                TDev.Util.coreAnim("fadeIn", 400, currentPage.getElement());
            }
            else {
                currentElement.removeSelf();
            }
            if (this.eventEnabled("page navigated from"))
                this.eventQ.add("page navigated from", null, [prevPage.rtPage()]);
            if (prevPage.onNavigatedFrom.handlers)
                this.queueLocalEvent(prevPage.onNavigatedFrom);
            this.host.notifyPagePop(prevPage);
            this.applyPageAttributes();
            if (currentPage.isAuto())
                this.forcePageRefresh();
            else
                currentPage.render(this.host);
            return true;
        };
        Runtime.prototype.getPageAt = function (idx) {
            if (idx == 0)
                return this.getCurrentPage();
            else
                return this.pageStack[idx];
        };
        Runtime.prototype.initPageStack = function () {
            var page = new TDev.WallPage(this, false);
            this.pageStack = [page];
            var wall = this.getWall();
            if (wall)
                wall.setChildren([page.getElement()]);
            this.sessions.scriptRestarted();
            this.resetRender();
        };
        Runtime.prototype.refreshPageStackForNewScript = function () {
            this.pageStack.forEach(function (p) { return p.refreshForNewScript(); });
        };
        Runtime.prototype.getCurrentPage = function () {
            if (!this.pageStack)
                return new TDev.WallPage(this, false);
            return this.pageStack.peek();
        };
        Runtime.prototype.onCssPage = function () {
            if (!this.pageStack)
                return false;
            var pg = this.pageStack.peek();
            return pg ? pg.csslayout : false;
        };
        Runtime.prototype.addPageButton = function (pageButton) {
            this.forceNonRender("You may not add a page button here");
            var currentPage = this.getCurrentPage();
            currentPage.buttons.push(pageButton);
            this.host.notifyPageButtonUpdate();
            this.addTapEvent(pageButton.getElement(), "Page Button", null, pageButton);
        };
        Runtime.prototype.clearPageButtons = function () {
            this.forceNonRender("You may not remove a page button here");
            var currentPage = this.getCurrentPage();
            currentPage.buttons = [];
            this.host.notifyPageButtonUpdate();
        };
        Runtime.prototype.getPageButtons = function () {
            return this.getCurrentPage().buttons;
        };
        Runtime.prototype.applyPageAttributes = function (renderwall) {
            if (renderwall === void 0) { renderwall = false; }
            var p = this.getCurrentPage();
            this.host.applyPageAttributes(p);
            if (renderwall && !p.isAuto())
                p.render(this.host);
        };
        Runtime.prototype.postAutoPage = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.eventQ.add("page", null, args);
        };
        Runtime.prototype.forceNonRender = function (msg) {
            if (msg === void 0) { msg = "You may not perform this operation here"; }
            if (this.rendermode) {
                TDev.Util.userError(msg + ". Only side-effect-free operations are allowed in page display code.");
            }
        };
        Runtime.prototype.mkLibObject = function (libId, objectName) {
            var singl = this.getLibRecordSingleton(libId, objectName);
            var obj = new singl.entryCtor(this);
            obj.on_render_heap = this.rendermode;
            return obj;
        };
        Runtime.prototype.getLibRecordSingleton = function (libId, objectName) {
            var indir = this.current.libs[libId + "$lib"];
            if (indir)
                libId = indir;
            var d = this.datas[libId];
            var getsingl = this.compiled.libScripts[libId].objectSingletons[objectName];
            return getsingl(d);
        };
        Runtime.prototype.logDataWrite = function (renderheap) {
            if (renderheap === void 0) { renderheap = false; }
            if (!renderheap)
                this.forceNonRender("You may not modify global variables here");
            if (this.inQuery)
                this.forceNonRender("You may not change data in a query function");
            this.forcePageRefresh();
        };
        Runtime.prototype.logObjectMutation = function (value) {
            if (value) {
                value.versioncounter++;
                if (!value.on_render_heap) {
                    this.forcePageRefresh();
                    this.forceNonRender();
                }
            }
            else {
                this.forceNonRender();
                this.forcePageRefresh();
            }
        };
        Runtime.prototype.forcePageRefresh = function () {
            if (!TDev.Browser.isNodeJS) {
                if (this.eventQ)
                    this.eventQ.queuePageUpdate();
            }
        };
        Runtime.prototype.yield_when_possible = function () {
            if (this.eventQ)
                this.eventQ.queueYield();
        };
        Runtime.prototype.yield_now = function () {
            var changes = this.sessions.yieldSession();
            if (this.eventQ) {
                this.eventQ.finishYield(changes, this.eventEnabled("cloud data updated"));
            }
        };
        Runtime.prototype.registerTimeDependency = function () {
            if (this.rendermode && this.eventQ)
                this.eventQ.registerTimeDependency();
        };
        Runtime.prototype.canPause = function () {
            return this.pageStack && this.pageStack.length && this.pageStack[this.pageStack.length - 1].isAuto();
        };
        Runtime.prototype.canResume = function () {
            return this.canPause() && this.resumeAllowed;
        };
        Runtime.prototype.liveViewSupported = function () {
            return this.canResume() && this.getCurrentPage().isAuto();
        };
        Runtime.prototype.enter_render = function () {
            this.rendermode = true;
            TDev.LayoutMgr.SetRenderExecutionMode(true);
            var page = this.getCurrentPage();
            page.startrender();
            TDev.LayoutMgr.setCurrentRenderBox(page.getCurrentBox());
            TDev.Util.log("Enter Render Mode");
        };
        Runtime.prototype.leave_render = function () {
            TDev.Util.log("Leave Render Mode");
            this.render();
            TDev.LayoutMgr.SetRenderExecutionMode(false);
            this.rendermode = false;
            if (this.eventQ)
                this.eventQ.finishPageUpdate();
        };
        Runtime.prototype.abortRender = function () {
            TDev.LayoutMgr.SetRenderExecutionMode(false);
            this.rendermode = false;
            this.getCurrentPage().clear();
            this.host.setFullScreenElement(undefined);
        };
        Runtime.prototype.resetRender = function () {
            TDev.LayoutMgr.SetRenderExecutionMode(false);
            this.rendermode = false;
            this.host.setFullScreenElement(undefined);
        };
        Runtime.prototype.markAllocated = function (obj) {
            if (this.rendermode && obj)
                obj.on_render_heap = true;
        };
        Runtime.prototype.getCurrentBoxBase = function (nonRenderOk) {
            if (nonRenderOk === void 0) { nonRenderOk = false; }
            if (this.rendermode) {
                return TDev.LayoutMgr.getCurrentRenderBox();
            }
            else {
                if (!nonRenderOk)
                    TDev.Util.userError(TDev.lf("'box' can only be accessed in page display code"));
                return this.getCurrentPage().getCurrentBox();
            }
        };
        Runtime.prototype.getCurrentBox = function () {
            var box = this.getCurrentBoxBase();
            if (!(box instanceof TDev.WallBox))
                TDev.Util.userError(TDev.lf("'box' cannot be accessed in HTML layout mode"));
            return box;
        };
        Runtime.prototype.getCurrentHtmlBox = function () {
            var box = this.getCurrentBoxBase();
            if (!(box instanceof TDev.HtmlBox))
                TDev.Util.userError(TDev.lf("'html' can only be accessed in HTML layout mode"));
            return box;
        };
        Runtime.prototype.render = function (popCount) {
            if (popCount === void 0) { popCount = 0; }
            TDev.Contract.Requires(popCount >= 0);
            this.getCurrentPage().render(this.host, popCount);
        };
        Runtime.prototype.renderBox = function (box) {
            var p = this.getCurrentPage();
            if ((p.crashed || !p.isAuto()) && box.getDepth() === 1) {
                var popCount = 0;
                var parent = box.parent;
                TDev.Util.assert(parent instanceof TDev.WallBox);
                if (parent.size() > Runtime.maxBoxLength) {
                    parent.shift();
                    popCount++;
                }
                this.render(popCount);
            }
        };
        Runtime.prototype.postBoxedHtml = function (e, pc, reusekey) {
            if (reusekey === void 0) { reusekey = null; }
            if (!this.mayPostToWall(this.getCurrentPage()))
                TDev.Util.userError(TDev.lf("cannot post to the wall here"));
            var box = TDev.WallBox.CreateOrRecycleLeafBox(this, reusekey);
            box.setContent(e);
            this.renderBox(box);
            return box;
        };
        Runtime.prototype.postBoxedTextWithTap = function (s, rtV, pc) {
            if (!this.mayPostToWall(this.getCurrentPage()))
                TDev.Util.userError(TDev.lf("cannot post to the wall here"));
            var box = TDev.WallBox.CreateOrRecycleLeafBox(this, rtV);
            if (!box.getContent()) {
                box.setContent(s);
                this.renderBox(box);
                var type;
                switch (typeof rtV) {
                    case "boolean":
                        type = "Bool";
                        break;
                    case "string":
                        type = "String";
                        break;
                    case "number":
                        type = "Number";
                        break;
                    default:
                        type = rtV.rtType();
                        break;
                }
                if (box instanceof TDev.WallBox)
                    this.addTapEvent(box.getContent(), type, box, rtV);
            }
            return box;
        };
        Runtime.prototype.postBoxedText = function (s, pc) {
            if (!this.mayPostToWall(this.getCurrentPage()))
                TDev.Util.userError(TDev.lf("cannot post to the wall here"));
            var box = TDev.WallBox.CreateOrRecycleLeafBox(this, s);
            if (!box.getContent()) {
                box.setContent(s);
                this.renderBox(box);
            }
            return box;
        };
        Runtime.prototype.postUnboxedText = function (s, pc) {
            if (!this.mayPostToWall(this.getCurrentPage()))
                TDev.Util.userError(TDev.lf("cannot post to the wall here"));
            var box = TDev.WallBox.CreateOrRecycleLeafBox(this, s);
            if (!box.getContent()) {
                box.setContent(TDev.text(s));
                this.renderBox(box);
            }
            return box;
        };
        Runtime.prototype.postEditableText = function (style, s, handler, pc) {
            if (!this.mayPostToWall(this.getCurrentPage()))
                TDev.Util.userError(TDev.lf("cannot post to the wall here"));
            var box = TDev.WallBox.CreateOrRecycleLeafBox(this, style);
            var current = box.getContent();
            if (!current) {
                if (style === "textarea") {
                    box.textarea = true;
                    var elt = TDev.HTML.mkTextArea();
                    elt.id = "i" + box.getId();
                    box.setContent(elt);
                }
                else {
                    box.textarea = false;
                    style = (Runtime.inputboxstylemap[style] || "text");
                    var elt2 = TDev.HTML.mkTextInput(style, TDev.lf("edit"));
                    elt2.id = "i" + box.getId();
                    box.setContent(elt2);
                }
                box.bindEditableText(s, handler, pc);
                this.renderBox(box);
            }
            else {
                box.textarea = (style === "textarea");
                box.bindEditableText(s, handler, pc);
            }
            return box;
        };
        Runtime.prototype.nextHitCount = function (current) {
            if (current >= 200)
                return Math.round(200 + (Math.random() * 50));
            else
                return Math.round(current * (Math.random() + 1) + 2);
        };
        Runtime.prototype.isHeadless = function () {
            return this.host.isHeadless();
        };
        Runtime.prototype.restartAfterException = function () {
            this.current = null;
            this.asyncStack = [];
            this.setState(3 /* AtAwait */, "restart after exception");
            this.queueRestart();
        };
        Runtime.prototype.stopAsync = function (isPause) {
            var _this = this;
            if (isPause === void 0) { isPause = false; }
            var p = TDev.Promise.as();
            if (!this.isHeadless()) {
                TDev.HistoryMgr.instance.clearModalStack();
            }
            if (this.state != 0 /* Stopped */) {
                this.setState(0 /* Stopped */, "stopAsync");
                if (!isPause) {
                    this.versionNumber++;
                    if (this.eventQ)
                        this.eventQ.clear();
                }
                this.eventExecuting = false;
                this.resumeAllowed = isPause;
                if (this.headlessPluginMode)
                    TDev.ProgressOverlay.hide();
                this.asyncStack = [];
                this.asyncTasks = [];
                this.compiled.stopFn(this);
                if (!isPause && !this.resumeAllowed && !this.handlingException) {
                    var profilingData = this.compiled._getProfilingResults();
                    this.host.attachProfilingInfo(profilingData);
                    var runMap = this.getRunMap();
                    if (runMap)
                        this.host.attachCoverageInfo({
                            compilerversion: this.compiled._compilerVersion,
                            astnodes: runMap.toJSON()
                        }, this.compiled._showCoverage);
                }
                if (!this.resumeAllowed) {
                    this.killDisposables();
                    this.killTempState();
                }
                p = this.host.notifyStopAsync();
                p = p.then(function () { return _this.sessions.stopAsync(); });
                if (!isPause)
                    VisibilityManager.attachToVisibilityChange(null);
            }
            return p;
        };
        Runtime.prototype.stopAndHideAsync = function () {
            var p = this.stopAsync();
            this.host.notifyHideWall();
            return p;
        };
        Runtime.prototype.isStopped = function () {
            return this.state == 0 /* Stopped */;
        };
        Runtime.prototype.queueEvent = function (category, varValue, args, ignore) {
            if (ignore === void 0) { ignore = true; }
            if (this.eventQ == null)
                return;
            this.eventQ.add(category, varValue, args, ignore);
        };
        Runtime.prototype.queueBoardEvent = function (categories, valueStack, args, ignore, matchAll) {
            if (ignore === void 0) { ignore = true; }
            if (matchAll === void 0) { matchAll = false; }
            if (this.eventQ == null)
                return;
            this.eventQ.addBoardEvent(categories, valueStack, args, ignore, matchAll);
        };
        Runtime.prototype.queueLocalEvent = function (e, args, ignore, skipIfInQueue, filter) {
            if (args === void 0) { args = []; }
            if (ignore === void 0) { ignore = true; }
            if (skipIfInQueue === void 0) { skipIfInQueue = false; }
            if (filter === void 0) { filter = undefined; }
            if (this.eventQ == null)
                return;
            this.eventQ.addLocalEvent(e, args, ignore, skipIfInQueue, filter);
        };
        Runtime.prototype.queueAsyncEvent = function (f) {
            this.asyncTasks.push(f);
            this.queueRestart();
        };
        Runtime.prototype.queueRestart = function () {
            var _this = this;
            if (this.restartQueued || this.state != 3 /* AtAwait */)
                return;
            this.restartQueued = true;
            TDev.Util.setTimeout(0, function () {
                _this.restartQueued = false;
                if (_this.state != 3 /* AtAwait */)
                    return;
                var f = _this.pumpEventsCore();
                if (f) {
                    _this.mainLoop(f, "queue restart");
                }
            });
        };
        Runtime.prototype.eventEnabled = function (category) {
            return this.eventQ != null && !!this.eventQ.eventsByCategory[category];
        };
        Runtime.prototype.enterAsync = function (t, s) {
            var _this = this;
            this.current.continueAt = s.returnAddr;
            this.asyncStack.push(this.current);
            s.isAsync = true;
            s.returnAddr = function (s) {
                var prev = s.rt.returnedFrom;
                t.resume(prev.results || prev.result);
                _this.setState(3 /* AtAwait */, "enterAsync stop");
                return null;
            };
            return this.enter(s);
        };
        Runtime.prototype.isTopScriptFrame = function (s) {
            return s.libs.scriptId === s.libs.topScriptId;
        };
        Runtime.prototype.getTopScriptPc = function () {
            return this.current ? ((!this.rendermode || this.isTopScriptFrame(this.current)) ? this.current.pc : this.last_topscript_pc) : "";
        };
        Runtime.prototype.enter = function (s) {
            this.current = s;
            if (s.previous) {
                if (this.rendermode && s.previous.isLibProxy && this.isTopScriptFrame(s.previous.previous)) {
                    this.last_topscript_pc = s.previous.previous.pc;
                    s.previous.previous.libs;
                }
                s.stackDepth = s.previous.stackDepth + 1;
                if (s.stackDepth > 1000) {
                    TDev.Util.userError("stack overflow");
                }
            }
            return s.entryAddr;
        };
        Runtime.prototype.leave = function () {
            var c = this.current;
            this.current = c.previous;
            if (this.current.isLibProxy)
                this.current = this.current.previous;
            if (c.serverRequest)
                c.serverRequest.response().sendNow();
            this.returnedFrom = c;
            var ret = c.returnAddr;
            c.returnAddr = Runtime.pumpEvents;
            return ret;
        };
        Runtime.toRestArgument = function (v, s) {
            if (typeof v == "undefined" || typeof v == "string" || typeof v == "number" || typeof v == "boolean") {
                return v;
            }
            else if (v.exportJson) {
                try {
                    var ctx = new TDev.JsonExportCtx(s);
                    var v0 = v;
                    ctx.push(v0);
                    v = v.exportJson(ctx);
                    ctx.pop(v0);
                    return v;
                }
                catch (e) {
                    TDev.Util.userError("JSON export failed on " + v.toString());
                }
            }
            else {
                TDev.Util.userError("unsupported value in JSON cloud call: " + v.toString());
            }
        };
        Runtime.prototype.getRuntimeType = function (libname, typename) {
            var type = this.datas[libname];
            var result;
            Object.keys(type).forEach(function (t) {
                if (type[t].name === typename) {
                    result = type[t];
                }
            });
            return result;
        };
        Runtime.stringToBoolean = function (s) {
            if (!s)
                return false;
            if (/^(false|no|0)$/i.test(s))
                return false;
            return true;
        };
        Runtime.fromRestArgument = function (v, tp, s) {
            var singleton = s.d["$" + tp];
            if (singleton !== undefined) {
                return singleton.fromRest(v);
            }
            var a = tp.indexOf("‚Üí");
            if (a !== -1) {
                var lib = tp.slice(0, a);
                var tab = tp.slice(a + 1);
                if (lib.indexOf("Collection of") !== -1) {
                    lib = lib.slice(14);
                    var typ = s.rt.getRuntimeType(lib, tab);
                    return TDev.RT.Collection.fromArray(v.map(function (v) { return typ.fromRest(v); }), typ);
                }
                else {
                    return s.rt.getRuntimeType(lib, tab).fromRest(v);
                }
            }
            switch (tp) {
                case "Number":
                    return parseFloat(v);
                case "String":
                    return v + "";
                case "Boolean":
                    return Runtime.stringToBoolean(v);
                case "Json Object":
                    return RT.JsonObject.wrap(v);
                case "Json Builder":
                    if (typeof v == "object")
                        return RT.JsonBuilder.wrap(TDev.Util.jsonClone(v));
                    return undefined;
                default:
                    TDev.RT.App.logEvent(TDev.RT.App.WARNING, "rest", TDev.lf("unsupported type {0}", tp), undefined);
                    return undefined;
            }
        };
        Runtime.prototype.callServiceOffline = function (isQuery, site, service, libName, actionName, paramNames, returnNames, returnTypes, prev, ret) {
            var args = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args[_i - 10] = arguments[_i];
            }
            var rt = this;
            var action = prev.libs[libName][actionName](prev);
            var next = ret;
            if (this.rendermode && !isQuery) {
                this.forceNonRender("Can not call a cloud action that is not \"read-only\" in display code");
            }
            if (!rt.inCloudCall && !rt.host.isServer) {
                var req = {};
                for (var i = 0; i < args.length; i++) {
                    req[paramNames[i]] = Runtime.toRestArgument(args[i], prev);
                }
                prev.rt.startCloudCall(service, actionName, paramNames, returnNames, req, isQuery);
                next = function (s) {
                    s.rt.endCloudCall(service, actionName, paramNames, returnNames, req, isQuery);
                    return ret;
                };
            }
            return action.invoke.apply(action, [action, next].concat(args));
        };
        Runtime.prototype.callService = function (isQuery, site, service, libName, actionName, paramNames, returnNames, returnTypes, prev, ret) {
            var _this = this;
            var args = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args[_i - 10] = arguments[_i];
            }
            var rt = this;
            var run = function (s) {
                if (_this.rendermode) {
                    _this.forceNonRender("Can not call a remote cloud action in display code (only \"offline available\" \"read-only\" are allowed)");
                }
                var ctx = _this.getAwaitResumeCtx(function (s) { return s.rt.leave(); });
                var req = {};
                for (var i = 0; i < args.length; i++) {
                    req[paramNames[i]] = Runtime.toRestArgument(args[i], prev);
                }
                var ses = rt.sessions.getCurrentSession();
                if (!ses.hasNodeConnection()) {
                    var m = new TDev.ModalDialog();
                    m.add([
                        TDev.div("wall-dialog-header", TDev.lf("Trying to reach server")),
                        TDev.div("wall-dialog-body", TDev.lf("Please wait..."))
                    ]);
                    m.show();
                }
                ses.user_rpc_cloud_operation(service, actionName, paramNames, returnNames, req).then(function (resp) {
                    var results = returnNames.map(function (n) { return resp[n]; });
                    results = results.map(function (v, i) { return Runtime.fromRestArgument(v, returnTypes[i], s); });
                    if (results.length == 1)
                        s.result = results[0];
                    else
                        s.results = results;
                    if (m)
                        m.dismiss();
                    ctx.resume();
                }, function (err) {
                    TDev.Runtime.theRuntime.handleException(err);
                });
            };
            return {
                previous: prev,
                returnAddr: ret,
                d: prev.d,
                rt: this,
                libs: prev.libs,
                entryAddr: run,
                name: actionName
            };
        };
        Runtime.prototype.pickParameters = function (cont) {
            var _this = this;
            var parms = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                parms[_i - 1] = arguments[_i];
            }
            var ch = parms.map(function (p) { return [TDev.div("picker-name", p.userName + ":"), TDev.div("picker-input", p.html)]; });
            var ctx = this.getAwaitResumeCtx(cont);
            ch.push(TDev.div("wall-dialog-buttons", TDev.HTML.mkButton(TDev.lf("ok"), function () {
                var allOk = true;
                var s = _this.current;
                parms.forEach(function (p) {
                    var ok = p.validate();
                    allOk = allOk && ok;
                    p.html.setFlag("invalid", !ok);
                    if (ok) {
                        s[p.quotedName] = p.get();
                    }
                });
                if (allOk)
                    ctx.resume();
            })));
            this.postHtml(TDev.div("picker-form", ch), "");
        };
        Runtime.prototype.displayResult = function (name, val) {
            var _this = this;
            var e = TDev.div("picker-form");
            var pc = this.current.pc;
            var box = new TDev.WallBox(this, this.getCurrentBoxBase(true), pc);
            box.setContent(e);
            this.getCurrentPage().setCurrentBox(box);
            var dual = function (str) {
                _this.postHtml(TDev.div("picker-name", name + ":"), pc);
                _this.postHtml(TDev.div("picker-input", str), pc);
            };
            try {
                switch (typeof val) {
                    case "string":
                        dual(val);
                        break;
                    case "number":
                        dual(val + "");
                        break;
                    case "boolean":
                        dual(val ? "True" : "False");
                        break;
                    case "undefined":
                        dual("[invalid]");
                        break;
                    default:
                        if (val === null)
                            dual("[null]");
                        else {
                            if (val.postResult)
                                val.postResult(this.current);
                            else {
                                this.postText(name + ":", pc);
                                val.post_to_wall(this.current);
                            }
                        }
                        break;
                }
            }
            finally {
                this.getCurrentPage().setCurrentBox(box.parent);
            }
            box.forEachChild(function (c) {
                e.appendChild(c.getContent());
            });
            this.renderBox(box);
        };
        Runtime.prototype.setState = function (s, msg) {
            if (this.state == 0 /* Stopped */ || s == 0 /* Stopped */)
                TDev.Util.log("runtime state: {0} -> {1}, {2}", this.state, s, msg);
            this.state = s;
            this.stateMsg = msg;
        };
        Runtime.prototype.getResumeCtxCore = function (isBlocking, cont) {
            TDev.Util.assert(this.state == 1 /* Running */);
            if (isBlocking)
                this.setState(2 /* Paused */, "getBlockingResumeCtx");
            else
                this.setState(3 /* AtAwait */, "getAwaitResumeCtx");
            this.current.continueAt = cont;
            var r = new ResumeCtx(this.current);
            r.isBlocking = isBlocking;
            r.versionNumber = this.versionNumber;
            return r;
        };
        Runtime.prototype.getBlockingResumeCtx = function (cont) {
            return this.getResumeCtxCore(true, cont);
        };
        Runtime.prototype.getAwaitResumeCtx = function (cont) {
            if (this.rendermode)
                TDev.Util.userError("non-atomic APIs cannot be called in page display code");
            return this.getResumeCtxCore(false, cont);
        };
        Runtime.prototype.getAsyncResumeCtx = function () {
            TDev.Util.assert(this.state == 1 /* Running */);
            if (this.rendermode)
                TDev.Util.userError("'async' cannot be used in page display code");
            var t = new RT.Task();
            var r = new RT.TaskResumeCtx(t, this.current);
            r.versionNumber = this.versionNumber;
            return r;
        };
        Runtime.prototype.mkActionTask = function () {
            var t = new RT.Task();
            return t;
        };
        Runtime.prototype._resumeVal = function (v, r) {
            var _this = this;
            var frame = r.stackframe;
            if (r.versionNumber != this.versionNumber)
                return;
            if (this.state == 2 /* Paused */) {
                if (r.isBlocking) {
                    this._resumeValCore(v, frame);
                    this.mainLoop(frame.continueAt, "_resumeValBlocking");
                }
                else {
                    this.queueAsyncEvent(function () { return _this.continueStackFrame(v, frame); });
                }
            }
            else if (this.state == 3 /* AtAwait */) {
                TDev.Util.assert(!r.isBlocking, "blocking await");
                this._resumeValCore(v, frame);
                this.mainLoop(frame.continueAt, "_resumeValAwait");
            }
            else {
                TDev.Util.oops("wrong resume state: " + this.state);
            }
        };
        Runtime.prototype.continueStackFrame = function (v, frame) {
            this._resumeValCore(v, frame);
            return frame.continueAt;
        };
        Runtime.prototype._resumeValCore = function (v, frame) {
            this.current = frame;
            if (frame.rendermode !== undefined)
                this.rendermode = frame.rendermode;
            frame.pauseValue = v;
        };
        Runtime.prototype.initFrom = function (cs) {
            this.compiled = cs;
            if (cs.authorId)
                this.currentAuthorId = cs.authorId;
            if (cs.scriptId) {
                this.currentScriptId = this.baseScriptId = cs.scriptId;
            }
            cs.initPages();
            EventQueue.init(this);
            this.sessions.scriptStarted(cs.authorId);
        };
        Runtime.prototype.nextAsyncTask = function () {
            if (this.asyncStack.length > 0) {
                if (this.current.isAsync)
                    this.current.isDetached = true;
                var f = this.asyncStack.pop();
                this.current = f;
                this.setState(1 /* Running */, "async stack");
                return f.continueAt;
            }
            else if (this.asyncTasks.length > 0) {
                var q = this.asyncTasks.shift();
                this.setState(1 /* Running */, "async task");
                return q();
            }
            else {
                return null;
            }
        };
        Runtime.prototype.wrap = function (s, f) {
            if (this.isStopped())
                return function () {
                };
            if (!s)
                s == this.current;
            var rt = s.rt;
            TDev.Util.assert(rt == this);
            return function () {
                try {
                    if (rt.isStopped())
                        return undefined;
                    Runtime.theRuntime = rt;
                    rt.current = s;
                    f.apply(this, arguments);
                }
                catch (e) {
                    rt.handleException(e);
                    e.rtProtectHandled = true;
                    throw e;
                }
            };
        };
        Runtime.prototype.pumpEventsCore = function () {
            this.yield_now();
            TDev.Util.assert(!this.isStopped(), "pump-stopped");
            var r = this.nextAsyncTask();
            if (r)
                return r;
            if (this.eventQ == null) {
                this.stopAsync().done();
                return null;
            }
            else if (this.eventExecuting) {
                this.setState(3 /* AtAwait */, "event executing");
                return null;
            }
            else {
                var fn = this.eventQ.maybeRunPageRefresh();
                if (!fn)
                    fn = this.eventQ.process();
                if (!fn && this.host.dontWaitForEvents())
                    this.stopAsync(true).done();
                else if (fn)
                    this.setState(1 /* Running */, "got event");
                else {
                    if (this.liveMode())
                        this.stopAsync(true).done();
                    else if (this.headlessPluginMode)
                        this.stopAsync().done();
                    else
                        this.setState(3 /* AtAwait */, "no event");
                }
                return fn;
            }
        };
        Runtime.pumpEvents = function (s) {
            s.rt.eventExecuting = false;
            return s.rt.pumpEventsCore();
        };
        Runtime.prototype.pauseExecution = function () {
            this.queueEvent("pause", null, []);
        };
        Runtime.prototype.resumeExecution = function (once) {
            if (once === void 0) { once = false; }
            this.eventQ.clearPause();
            if (this.state != 0 /* Stopped */ || !this.resumeAllowed)
                return;
            VisibilityManager.attachToVisibilityChange(this);
            this.refreshPageStackForNewScript();
            this.eventQ.clear();
            if (!this.liveMode())
                this.getWall().setChildrenIfNeeded(this.pageStack.map(function (p) { return p.getElement(); }));
            try {
                this.eventQ.blockEvents = false;
                this.logDataWrite();
                this.eventQ.blockEvents = once;
                var bot = new StackBottom(this);
                bot.entryAddr = Runtime.pumpEvents;
                bot.returnAddr = Runtime.pumpEvents;
                var frame = this.enter(bot);
                if (!once)
                    VisibilityManager.attachToVisibilityChange(this);
                this.mainLoop(frame, "resume execution");
            }
            catch (e) {
                this.handleException(e);
            }
        };
        Runtime.mkStackFrame = function (prev, ret) {
            return {
                previous: prev,
                d: prev.d,
                rt: prev.rt,
                libs: prev.libs,
                returnAddr: ret
            };
        };
        Runtime.syntheticFrame = function (f) {
            return function (prev, ret) {
                var s = Runtime.mkStackFrame(prev, ret);
                s.name = "__synthetic";
                s.entryAddr = function (s) {
                    s.rt.forcePageRefresh();
                    f(s);
                    return s.rt.leave();
                };
                return s;
            };
        };
        Runtime.prototype.getActionFrame = function (mk, args, isBlocking) {
            if (isBlocking === void 0) { isBlocking = true; }
            var bot = new StackBottom(this);
            if (args == null) {
                bot.needsPicker = true;
                args = [];
            }
            var fnObj;
            if (isBlocking)
                this.eventExecuting = true;
            if (args.length == 0)
                fnObj = mk(bot, Runtime.pumpEvents);
            else
                fnObj = mk.apply(null, [bot, Runtime.pumpEvents].concat(args));
            this.resetNextEvent();
            return this.enter(fnObj);
        };
        Runtime.prototype.queueEventCallback = function (cb) {
            var ev = new RT.Event_();
            ev.addHandler(new RT.PseudoAction(function (rt, args) {
                cb(rt, args);
            }));
            this.queueLocalEvent(ev);
        };
        Runtime.prototype.getEventFrame = function (mk, args, isBlocking) {
            if (isBlocking === void 0) { isBlocking = true; }
            try {
                if (this.state != 1 /* Running */) {
                    TDev.Util.assert(this.state == 3 /* AtAwait */);
                    this.setState(1 /* Running */, "getEventFrame dispatch");
                }
                return this.getActionFrame(mk, args, isBlocking);
            }
            catch (e) {
                return function () {
                    throw e;
                    return null;
                };
            }
        };
        Runtime.handleUserError = function (err) {
            if (Runtime.theRuntime && Runtime.theRuntime.state != 0 /* Stopped */ && !Runtime.theRuntime.handlingException) {
                if (err.isUserError || err.wabStatus) {
                    Runtime.theRuntime.handleException(err);
                    return true;
                }
            }
            return false;
        };
        Runtime.stopPendingScriptsAsync = function () {
            if (Runtime.theRuntime && Runtime.theRuntime.state != 0 /* Stopped */) {
                return Runtime.theRuntime.stopAsync();
            }
            else {
                return TDev.Promise.as();
            }
        };
        Runtime.prototype.rerun = function () {
            TDev.Util.assert(this.isStopped(), "rerun-isStopped");
            this.initPageStack();
            this.run(this.startMk, this.startArgs);
        };
        Runtime.prototype.run = function (mk, args) {
            var _this = this;
            TDev.Util.assert(this.isStopped(), "run-isStopped");
            this.startMk = mk;
            this.startArgs = args;
            this.tutorialState = null;
            Runtime.stopPendingScriptsAsync().done(function () {
                _this.errorPC = undefined;
                Runtime.theRuntime = _this;
                if (_this.eventQ)
                    _this.eventQ.blockEvents = false;
                _this.resetRunMap();
                _this.killTempState();
                TDev.ProgressOverlay.setMessage("loading...");
                RT.ArtCache.resetProgress();
                _this.initDataAsync().done(function () {
                    try {
                        if (_this.headlessPluginMode) {
                            TDev.ProgressOverlay.setMessage("running...");
                            TDev.ProgressOverlay.unblockKeyboard();
                            TDev.ProgressOverlay.showLog();
                        }
                        else
                            TDev.ProgressOverlay.hide();
                        TDev.Util.assert(_this.isStopped());
                        VisibilityManager.attachToVisibilityChange(_this);
                        _this.host.initApiKeysAsync().then(function () { return _this.host.agreeTermsOfUseAsync(); }).done(function () {
                            try {
                                var entryPt = _this.getActionFrame(mk, args);
                                if (_this.validatorAction) {
                                    var act = _this.current.libs["tutorialLib"][_this.validatorAction];
                                    if (!act) {
                                        TDev.Util.userError(TDev.lf("problem with tutorial: validator action '{0}' not found", _this.validatorAction));
                                    }
                                    var libcall = act(_this.current);
                                    _this.tutorialObject = libcall.libs.topScriptId;
                                    if (/norun/i.test(_this.validatorActionFlags))
                                        entryPt = Runtime.pumpEvents;
                                    entryPt = _this.enter(libcall.invoke(libcall, entryPt, _this.editorObj));
                                }
                                _this.mainLoop(entryPt, "Runtime.run");
                            }
                            catch (e) {
                                _this.handleException(e);
                            }
                        });
                    }
                    catch (e) {
                        _this.handleException(e);
                    }
                }, function (e) {
                    _this.handleException(e);
                });
            });
        };
        Runtime.prototype.resyncData = function () {
            this.datas = {};
        };
        Runtime.prototype.initDataAsync = function () {
            var _this = this;
            this.compiled.startFn(this);
            var loadSession = this.sessions.ensureSessionLoaded().thenalways(function () {
                _this.sessions.yieldSession();
            });
            this.compiled.initGlobals(this.datas, this);
            return TDev.Promise.join([this.compiled.initArtAsync(this.datas), loadSession]);
        };
        Runtime.prototype.killDisposables = function () {
            this.disposables.forEach(function (d) {
                try {
                    d.dispose();
                }
                catch (e) {
                    TDev.Util.reportError('', e, false);
                }
            });
            this.disposables = [];
        };
        Runtime.prototype.killTempState = function () {
            this.renderedComments = "";
            this.sessions.unlink();
            this.compiled.resetData(this.datas);
        };
        Runtime.prototype.resetData = function () {
            if (this.state == 0 /* Stopped */ && this.resumeAllowed) {
                this.resumeAllowed = false;
                this.killTempState();
                this.initPageStack();
                this.host.notifyRunState();
            }
        };
        Runtime.prototype.quietlyHandleError = function (e) {
            var _this = this;
            for (var s = this.current; s; s = s.previous) {
                if (s.isDetached)
                    break;
                if (s.errorHandler)
                    (function () {
                        var s0 = s;
                        TDev.Util.setTimeout(0, function () {
                            try {
                                s0.errorHandler(e, s0);
                            }
                            catch (exn) {
                                _this.host.exceptionHandler(exn);
                            }
                        });
                    })();
            }
            return false;
        };
        Runtime.prototype.handleException = function (e) {
            if (this.quietlyHandleError(e))
                return;
            this.handlingException = true;
            if (e.programCounter)
                this.errorPC = e.programCounter;
            this.compiled.extractAllRunMaps(this);
            this.host.exceptionHandler(e);
            this.stopAsync().done();
        };
        Runtime.prototype.getStackTrace = function () {
            var locs = [];
            if (this.errorPC)
                locs.push({ pc: this.errorPC });
            for (var s = this.current; s; s = s.previous) {
                locs.push(s);
            }
            return locs;
        };
        Runtime.prototype.getRunMap = function () {
            this.runMap.clear();
            if (this.compiled.extractAllRunMaps(this))
                return this.runMap;
            else
                return undefined;
        };
        Runtime.prototype.saveComment = function (cmt) {
            this.renderedComments += cmt;
        };
        Runtime.prototype.wrapFromHandler = function (f) {
            var prevState = this.state;
            var prevCurr = this.current;
            this.current = new StackBottom(this);
            this.setState(1 /* Running */, "runUserAction from handler");
            try {
                f();
                this.setState(prevState, "runUserAction from handler restore");
                this.current = prevCurr;
            }
            catch (e) {
                this.handleException(e);
            }
        };
        Runtime.prototype.runUserAction = function (f, args) {
            var _this = this;
            args.unshift(function (s) {
                _this.state = 2 /* Paused */;
                return null;
            });
            args.unshift(this.current);
            var fn = this.enter(f.apply(null, args));
            return this.quickLoop(fn);
        };
        Runtime.prototype.runValidUserAction = function (f, args) {
            var r = this.runUserAction(f, args);
            if (r === undefined)
                TDev.Util.userError("user action passed to library returned invalid");
            return r;
        };
        Runtime.prototype.quickLoop = function (fn) {
            if (this.quickLoopDepth > 20) {
                TDev.Util.userError("stack overflow (more than 20 runtime/user code switches)");
            }
            TDev.Util.assert(this.state == 1 /* Running */);
            this.quickLoopDepth++;
            var prevFrom = this.returnedFrom;
            this.returnedFrom = null;
            try {
                while (true) {
                    var newFn = fn(this.current);
                    if (this.state != 1 /* Running */) {
                        if (this.state == 2 /* Paused */) {
                            this.state = 1 /* Running */;
                            break;
                        }
                        if (this.state == 4 /* BreakpointHit */)
                            TDev.Util.userError("breakpoints in library callbacks are not supported");
                        TDev.Util.oops("wrong state in quick Loop " + this.state);
                    }
                    if (!newFn)
                        TDev.Util.oops("no newFn: " + fn);
                    fn = newFn;
                }
            }
            finally {
                this.quickLoopDepth--;
            }
            var res = this.returnedFrom ? this.returnedFrom.result : undefined;
            this.returnedFrom = prevFrom;
            return res;
        };
        Runtime.prototype.mainLoop = function (fn, comment) {
            var _this = this;
            if (!Runtime.continueAfter)
                Runtime.continueAfter = TDev.Util.setTimeout;
            this.handlingException = false;
            if (this.mainLoopRunning) {
                this.setState(1 /* Running */, "resume point override");
                this.resumePointOverride = fn;
                return;
            }
            var prevState = this.state;
            this.setState(1 /* Running */, comment);
            if (prevState == 0 /* Stopped */)
                this.host.notifyRunState();
            if (!this.sessions.readyForExecution()) {
                this.stopAsync().done();
                return;
            }
            var continueLater = false;
            var continueLaterVersion = 0;
            var numCheck = 0;
            this.mainLoopRunning = true;
            try {
                while (true) {
                    var newFn = fn(this.current);
                    if (this.state != 1 /* Running */) {
                        if (this.state == 4 /* BreakpointHit */) {
                            this.debuggerCC = newFn;
                            break;
                        }
                        if (this.state == 0 /* Stopped */) {
                            break;
                        }
                        if (this.debuggerCC) {
                            this.debuggerCC = null;
                            this.host.notifyBreakpointContinue();
                        }
                        if (this.state == 3 /* AtAwait */) {
                            newFn = this.pumpEventsCore();
                            if (!newFn)
                                break;
                            TDev.Util.check(!this.resumePointOverride);
                            this.resumePointOverride = null;
                        }
                        if (this.state != 1 /* Running */) {
                            break;
                        }
                    }
                    if (!newFn)
                        TDev.Util.oops("no newFn: " + fn);
                    if (!!this.resumePointOverride) {
                        fn = this.resumePointOverride;
                        this.resumePointOverride = null;
                    }
                    else {
                        fn = newFn;
                    }
                    if (numCheck++ > 10) {
                        var now = Date.now();
                        if (now - this.lastBreak > (TDev.Browser.isNodeJS ? 1000 : 50)) {
                            continueLater = true;
                            continueLaterVersion = this.versionNumber;
                            break;
                        }
                        numCheck = 0;
                    }
                }
            }
            catch (e) {
                this.handleException(e);
            }
            this.mainLoopRunning = false;
            if (continueLater && continueLaterVersion == this.versionNumber && this.state != 0 /* Stopped */) {
                this.setState(2 /* Paused */, "continue later");
                var ver = this.versionNumber;
                var curr = this.current;
                Runtime.continueAfter(1, function () {
                    if (ver != _this.versionNumber)
                        return;
                    _this.lastBreak = Date.now();
                    _this.current = curr;
                    _this.mainLoop(fn, "continue later - run");
                });
            }
            TDev.Util.assert(this.state != 1 /* Running */);
        };
        Runtime.prototype.saveDataAsync = function () {
            this.sessions.yieldSession();
            return TDev.Promise.as();
        };
        Runtime.prototype.getRestRequest = function () {
            var frame = this.current;
            while (frame && !frame.serverRequest)
                frame = frame.previous;
            return frame ? frame.serverRequest : undefined;
        };
        Runtime.prototype.getRestArgument = function (name, tp, s) {
            var r = this.getRestRequest().getRestArgument(name, tp, s);
            return r;
        };
        Runtime.shellVersion = 24;
        Runtime.maxBoxLength = 1000;
        Runtime.lockOrientation = function () {
        };
        Runtime.rateTouchDevelop = null;
        Runtime.legalNotice = "";
        Runtime.appName = "TouchDevelop Web App";
        Runtime.inputboxstylemap = { textline: "text", password: "password", number: "number" };
        return Runtime;
    })();
    TDev.Runtime = Runtime;
    var EventHandlerDesc = (function () {
        function EventHandlerDesc(varId, entry) {
            this.varId = varId;
            this.entry = entry;
        }
        return EventHandlerDesc;
    })();
    TDev.EventHandlerDesc = EventHandlerDesc;
    var EventEntry = (function () {
        function EventEntry(binding, args, isLast) {
            this.binding = binding;
            this.args = args;
            this.isLast = isLast;
            this.category = "local";
            this.done = false;
        }
        EventEntry.prototype.isPageEvent = function () {
            return this.binding._event.isPageEvent;
        };
        EventEntry.prototype.dispatch = function (rt, eventsByCategory) {
            if (this.done)
                return null;
            this.done = true;
            var ev = this.binding._event;
            ev.pendinghandlers--;
            this.binding.inQueue = false;
            var f = this.binding._handler;
            if (!f)
                return null;
            if (f instanceof RT.PseudoAction) {
                f.run(rt, this.args);
                return null;
            }
            var res = rt.getEventFrame(f, this.args, ev.isBlocking);
            rt.current.currentHandler = this.binding;
            if (ev.finalCallback) {
                var cb = ev.finalCallback;
                ev.finalCallback = null;
                rt.current.returnAddr = function (s) {
                    cb(s);
                    return Runtime.pumpEvents(s);
                };
            }
            if (ev.errorHandler) {
                rt.current.errorHandler = ev.errorHandler;
            }
            return res;
        };
        EventEntry.prototype.clear = function () {
            var ev = this.binding._event;
            ev.pendinghandlers = 0;
        };
        EventEntry.prototype.isPause = function () {
            return false;
        };
        EventEntry.prototype.isGameLoop = function () {
            return false;
        };
        return EventEntry;
    })();
    TDev.EventEntry = EventEntry;
    var GlobalEventEntry = (function () {
        function GlobalEventEntry(category, varValue, args, idx) {
            if (idx === void 0) { idx = 0; }
            this.category = category;
            this.varValue = varValue;
            this.args = args;
            this.idx = idx;
            TDev.Util.assert(category != "local");
        }
        GlobalEventEntry.prototype.isPageEvent = function () {
            return false;
        };
        GlobalEventEntry.prototype.dispatch = function (rt, eventsByCategory) {
            if (this.evts === undefined)
                this.evts = eventsByCategory[this.category];
            if (this.evts === undefined)
                return null;
            while (this.idx < this.evts.length) {
                var handler = this.evts[this.idx++];
                var match = this.handlerMatch(handler, rt);
                if (match.matches) {
                    rt.setNextEvent(this.category, handler.varId);
                    return rt.getEventFrame(handler.entry, match.args);
                }
            }
            return null;
        };
        GlobalEventEntry.prototype.handlerMatch = function (desc, rt) {
            if (desc.varId == null)
                return { matches: true, args: this.args };
            if (this.category.search(/ in /) >= 0) {
                var set = rt.datas["this"][desc.varId];
                if (!!set) {
                    var idx = set.index_of_obj(this.varValue);
                    if (idx >= 0) {
                        return { matches: true, args: [this.varValue, idx].concat(this.args) };
                    }
                }
            }
            else {
                if (rt.datas["this"][desc.varId] === this.varValue) {
                    return { matches: true, args: this.args };
                }
            }
            return { matches: false, args: [] };
        };
        GlobalEventEntry.prototype.isGameLoop = function () {
            return this.category == "gameloop" && !this.evts;
        };
        GlobalEventEntry.prototype.isPause = function () {
            return this.category == "pause" && !this.evts;
        };
        GlobalEventEntry.prototype.clear = function () {
        };
        return GlobalEventEntry;
    })();
    TDev.GlobalEventEntry = GlobalEventEntry;
    var BoardEventEntry = (function () {
        function BoardEventEntry(categories, valueStack, args, matchAll) {
            this.categories = categories;
            this.valueStack = valueStack;
            this.args = args;
            this.matchAll = matchAll;
            this.category = "board";
        }
        BoardEventEntry.prototype.dispatch = function (rt, eventsByCategory) {
            if (this.categoryHandlers === undefined)
                this.categoryHandlers = this.categories.map(function (c) { return eventsByCategory[c]; });
            var valueIndex = 0;
            while (!this.matchedHandlers && valueIndex < this.valueStack.length) {
                var value = this.valueStack[valueIndex++];
                var categoryIndex = 0;
                while (categoryIndex < this.categories.length) {
                    var category = this.categories[categoryIndex];
                    var handlers = this.categoryHandlers[categoryIndex++];
                    if (!handlers) {
                        continue;
                    }
                    var handlerIndex = 0;
                    while (handlerIndex < handlers.length) {
                        var handler = handlers[handlerIndex++];
                        var match = this.handlerMatch(handler, category, value, rt);
                        if (match.matches) {
                            if (!this.matchedHandlers) {
                                this.matchedHandlers = [];
                            }
                            this.matchedHandlers.push({ category: category, varid: handler.varId, handler: handler.entry, args: match.args });
                        }
                    }
                }
                if (!this.matchAll && !!this.matchedHandlers) {
                    break;
                }
            }
            if (!!this.matchedHandlers && this.matchedHandlers.length > 0) {
                var matchedHandler = this.matchedHandlers.shift();
                rt.setNextEvent(matchedHandler.category, matchedHandler.varid);
                return rt.getEventFrame(matchedHandler.handler, matchedHandler.args);
            }
            return null;
        };
        BoardEventEntry.prototype.handlerMatch = function (desc, category, varValue, rt) {
            if (category.search(/ sprite in /) >= 0) {
                var set = rt.datas["this"][desc.varId];
                if (!!set) {
                    var idx = set.index_of_obj(varValue);
                    if (idx >= 0) {
                        return { matches: true, args: [varValue, idx].concat(this.args) };
                    }
                }
            }
            if (category.search(/touch over /) >= 0) {
                var set = rt.datas["this"][desc.varId];
                if (!!set) {
                    var idx = set.index_of_obj(varValue);
                    if (idx >= 0) {
                        return { matches: true, args: [varValue, idx].concat(this.args) };
                    }
                }
            }
            else if (category.search(/ sprite:/) >= 0) {
                if (rt.datas["this"][desc.varId] == varValue) {
                    return { matches: true, args: [varValue].concat(this.args) };
                }
            }
            else {
                if (rt.datas["this"][desc.varId] === varValue) {
                    return { matches: true, args: this.args };
                }
            }
            return { matches: false, args: [] };
        };
        BoardEventEntry.prototype.isGameLoop = function () {
            return false;
        };
        BoardEventEntry.prototype.isPause = function () {
            return false;
        };
        BoardEventEntry.prototype.isPageEvent = function () {
            return false;
        };
        BoardEventEntry.prototype.clear = function () {
        };
        return BoardEventEntry;
    })();
    TDev.BoardEventEntry = BoardEventEntry;
    var EventQueue = (function () {
        function EventQueue(rt) {
            this.rt = rt;
            this.queue = [];
            this.needPageRefresh = false;
            this.needYield = false;
            this.needCloudstateRefresh = false;
            this.eventsByCategory = null;
            this.hasGameLoop = false;
            this.needsGameLoopTimer = false;
            this.blockEvents = false;
            this.eps = 0;
            this.minimumEps = 0;
            this.maximumEps = 0;
            this.averageEps = 0;
            this.epsHistory = [];
            this.profiling = false;
            this.numPageEvents = 0;
            this.pageIsTimeDependent = false;
            this.refreshtimerpending = false;
        }
        EventQueue.prototype.add = function (category, varValue, args, ignore) {
            if (ignore === void 0) { ignore = true; }
            if (this.blockEvents)
                return;
            TDev.Util.assert(!(varValue instanceof RT.Event_));
            if (this.eventsByCategory[category] !== undefined) {
                var ev = new GlobalEventEntry(category, varValue, args);
                this.queue.push(ev);
                this.rt.queueRestart();
            }
        };
        EventQueue.prototype.addLocalEvent = function (ev, args, ignore, skipIfInQueue, filter) {
            if (ignore === void 0) { ignore = true; }
            if (skipIfInQueue === void 0) { skipIfInQueue = false; }
            if (filter === void 0) { filter = undefined; }
            if (!this.blockEvents && ev.handlers) {
                var anyPushed = false;
                for (var i = 0; i < ev.handlers.length; ++i) {
                    var binding = ev.handlers[i];
                    if (filter && !filter(binding))
                        continue;
                    if (!(skipIfInQueue && binding.inQueue)) {
                        var ee = new EventEntry(binding, args, i == ev.handlers.length - 1);
                        if (ee.isPageEvent())
                            this.numPageEvents++;
                        ev.pendinghandlers++;
                        binding.inQueue = true;
                        this.queue.push(ee);
                        anyPushed = true;
                    }
                }
                if (anyPushed)
                    this.rt.queueRestart();
            }
            ev.runAwaiters(args);
        };
        EventQueue.prototype.addBoardEvent = function (categories, valueStack, args, ignore, matchAll) {
            if (ignore === void 0) { ignore = true; }
            if (matchAll === void 0) { matchAll = false; }
            if (this.blockEvents)
                return;
            this.queue.push(new BoardEventEntry(categories, valueStack, args, matchAll));
            this.rt.queueRestart();
        };
        EventQueue.prototype.clear = function () {
            this.queue.forEach(function (e) { return e.clear(); });
            this.queue = [];
        };
        EventQueue.prototype.clearPause = function () {
            this.queue = this.queue.filter(function (q) { return !q.isPause(); });
        };
        EventQueue.prototype.calculateEpsInfo = function () {
            if (this.epsHistory.length > 2) {
                var myEpsHistory = this.epsHistory.slice(1);
                myEpsHistory.pop();
                var minimum = Number.MAX_VALUE;
                var maximum = 0;
                var cumulative = 0;
                for (var i = 0; i < myEpsHistory.length; ++i) {
                    if (myEpsHistory[i] > maximum)
                        maximum = myEpsHistory[i];
                    if (myEpsHistory[i] < minimum)
                        minimum = myEpsHistory[i];
                    cumulative += myEpsHistory[i];
                }
                if (TDev.dbg) {
                    TDev.Util.log("Gameloop Events per Second statistics: minimum " + minimum + ", maximum " + maximum + ", average " + (cumulative / myEpsHistory.length).toFixed(2) + ". Ran for " + myEpsHistory.length + "s.");
                }
                this.minimumEps = minimum;
                this.maximumEps = maximum;
                this.averageEps = cumulative / myEpsHistory.length;
                this.epsHistory = [];
            }
        };
        EventQueue.prototype.setupGameLoopTimer = function () {
            var _this = this;
            var stopLogEPS = false;
            var logEPS = function () {
                var eps = _this.eps;
                _this.eps = 0;
                if (!stopLogEPS)
                    TDev.Util.setTimeout(1000, logEPS);
                if (eps > 0)
                    _this.epsHistory.push(eps);
            };
            var gameLoop = function () {
                if (_this.rt.isStopped()) {
                    _this.needsGameLoopTimer = true;
                    stopLogEPS = true;
                    return;
                }
                var hasIt = false;
                for (var i = 0; i < _this.queue.length; ++i)
                    if (_this.queue[i].isGameLoop()) {
                        hasIt = true;
                        break;
                    }
                if (!hasIt)
                    _this.add("gameloop", null, []);
                TDev.Util.setTimeout(20, gameLoop);
            };
            this.needsGameLoopTimer = false;
            gameLoop();
            if (this.profiling)
                logEPS();
        };
        EventQueue.prototype.queuePageUpdate = function () {
            this.needPageRefresh = true;
            this.rt.queueRestart();
        };
        EventQueue.prototype.viewIsCurrent = function () {
            return !this.needPageRefresh;
        };
        EventQueue.prototype.registerTimeDependency = function () {
            this.pageIsTimeDependent = true;
        };
        EventQueue.prototype.finishPageUpdate = function () {
            var _this = this;
            this.needPageRefresh = false;
            if (this.pageIsTimeDependent) {
                this.pageIsTimeDependent = false;
                if (!this.refreshtimerpending) {
                    this.refreshtimerpending = true;
                    TDev.Util.setTimeout(100, function () {
                        if (_this.refreshtimerpending) {
                            _this.refreshtimerpending = false;
                            _this.queuePageUpdate();
                        }
                    });
                }
            }
            else
                this.refreshtimerpending = false;
        };
        EventQueue.prototype.queueYield = function () {
            this.needYield = true;
            this.rt.queueRestart();
        };
        EventQueue.prototype.finishYield = function (changes, fireevent) {
            this.needYield = false;
            if (changes) {
                if (fireevent)
                    this.add("cloud data updated", null, []);
                this.queuePageUpdate();
            }
        };
        EventQueue.prototype.maybeRunPageRefresh = function () {
            var _this = this;
            if (this.rt.isHeadless())
                return null;
            if (!this.needPageRefresh && !this.needYield)
                return null;
            if (this.numPageEvents > 0)
                return null;
            var p = this.rt.getCurrentPage();
            if (p.isAuto() && !p.crashed) {
                return function () {
                    var page = _this.rt.getCurrentPage();
                    return _this.rt.getEventFrame(function (p, b) { return page.getFrame(p, b); }, []);
                };
            }
            else {
                this.needPageRefresh = false;
                this.needYield = false;
                return null;
            }
        };
        EventQueue.prototype.process = function () {
            if (this.needsGameLoopTimer)
                this.setupGameLoopTimer();
            while (this.queue.length > 0) {
                var e = this.queue[0];
                if (this.profiling && this.hasGameLoop && e.isGameLoop()) {
                    ++this.eps;
                }
                var fn = e.dispatch(this.rt, this.eventsByCategory);
                if (fn != null)
                    return fn;
                this.queue.shift();
                if (e.isPageEvent())
                    this.numPageEvents--;
                TDev.Util.assert(this.numPageEvents >= 0);
            }
            return null;
        };
        EventQueue.init = function (rt) {
            var s = rt.compiled;
            var q = new EventQueue(rt);
            rt.eventQ = q;
            if (!s.eventsByCategory || !s.eventsByCategory["local"]) {
                s.registerEventHandler("local", null, null);
            }
            q.hasGameLoop = (s.eventsByCategory && s.eventsByCategory["gameloop"] !== undefined);
            q.eps = 0;
            q.needsGameLoopTimer = q.hasGameLoop;
            q.eventsByCategory = s.eventsByCategory;
        };
        return EventQueue;
    })();
    TDev.EventQueue = EventQueue;
    var BreakpointCollection = (function () {
        function BreakpointCollection(cs) {
            this.cs = cs;
        }
        BreakpointCollection.prototype.init = function (bps) {
            var _this = this;
            bps.forEach(function (k, v) { return _this.cs.breakpointBindings[k].setter(true); });
        };
        BreakpointCollection.prototype.set = function (bp, val) {
            this.cs.breakpointBindings[bp].setter(val);
        };
        BreakpointCollection.prototype.get = function (bp) {
            return this.cs.breakpointBindings[bp].getter();
        };
        return BreakpointCollection;
    })();
    TDev.BreakpointCollection = BreakpointCollection;
    var CompilerOptStatistics = (function () {
        function CompilerOptStatistics(inlinedFunctions, inlinedCalls, eliminatedOks, termsReused, constantsPropagated, reachingDefsTime, inlineAnalysisTime, dominatorsTime, usedAnalysisTime, availableExpressionsTime, constantPropagationTime, compileTime, numActions, numStatements) {
            if (inlinedFunctions === void 0) { inlinedFunctions = 0; }
            if (inlinedCalls === void 0) { inlinedCalls = 0; }
            if (eliminatedOks === void 0) { eliminatedOks = 0; }
            if (termsReused === void 0) { termsReused = 0; }
            if (constantsPropagated === void 0) { constantsPropagated = 0; }
            if (reachingDefsTime === void 0) { reachingDefsTime = 0; }
            if (inlineAnalysisTime === void 0) { inlineAnalysisTime = 0; }
            if (dominatorsTime === void 0) { dominatorsTime = 0; }
            if (usedAnalysisTime === void 0) { usedAnalysisTime = 0; }
            if (availableExpressionsTime === void 0) { availableExpressionsTime = 0; }
            if (constantPropagationTime === void 0) { constantPropagationTime = 0; }
            if (compileTime === void 0) { compileTime = 0; }
            if (numActions === void 0) { numActions = 0; }
            if (numStatements === void 0) { numStatements = 0; }
            this.inlinedFunctions = inlinedFunctions;
            this.inlinedCalls = inlinedCalls;
            this.eliminatedOks = eliminatedOks;
            this.termsReused = termsReused;
            this.constantsPropagated = constantsPropagated;
            this.reachingDefsTime = reachingDefsTime;
            this.inlineAnalysisTime = inlineAnalysisTime;
            this.dominatorsTime = dominatorsTime;
            this.usedAnalysisTime = usedAnalysisTime;
            this.availableExpressionsTime = availableExpressionsTime;
            this.constantPropagationTime = constantPropagationTime;
            this.compileTime = compileTime;
            this.numActions = numActions;
            this.numStatements = numStatements;
        }
        return CompilerOptStatistics;
    })();
    TDev.CompilerOptStatistics = CompilerOptStatistics;
    var CompiledScript = (function () {
        function CompiledScript() {
            this.steps = [];
            this.actionsByName = {};
            this.actionsByStableName = {};
            this.pagesByName = {};
            this.eventsByCategory = null;
            this.reflectionInfo = {};
            this.artInitializers = [];
            this.artPromises = [];
            this.missingApis = [];
            this.apiKeys = {};
            this.globals = [];
            this.packageResources = [];
            this.npmModules = {};
            this.cordovaPlugins = {};
            this.pipPackages = {};
            this.scriptTitle = "";
            this.scriptColor = "";
            this.showAd = false;
            this.startFn = function (rt) {
            };
            this.stopFn = function (rt) {
            };
            this.setupRestRoutes = function (rt) {
            };
            this.extractRunMap = undefined;
            this._resetGlobals = function (dt) {
            };
            this._initGlobals = function (dt, rt) {
            };
            this._initGlobals2 = function (dt) {
            };
            this._importJson = function (dt, ctx, json) {
            };
            this._exportJson = function (dt, ctx) {
            };
            this._getProfilingResults = function () { return null; };
            this._showCoverage = false;
            this.breakpointBindings = {};
            this.initBreakpoints = null;
            this.localNamesBindings = {};
            this.optStatistics = new CompilerOptStatistics();
            this.libScripts = { "this": this };
            this.breakpoints = new BreakpointCollection(this);
        }
        CompiledScript.prototype.allApiKeys = function () {
            var _this = this;
            var r = {};
            Object.keys(this.libScripts).forEach(function (cs) {
                var keys = _this.libScripts[cs].apiKeys;
                Object.keys(keys).forEach(function (key) { return r[key] = keys[key]; });
            });
            return Object.keys(r).map(function (k) {
                return { url: k, value: r[k] };
            });
        };
        CompiledScript.prototype.forEachLib = function (f) {
            var _this = this;
            Object.keys(this.libScripts).forEach(function (k) {
                f(_this.libScripts[k]);
            });
        };
        CompiledScript.prototype.extractAllRunMaps = function (rt) {
            var _this = this;
            var defined = true;
            Object.keys(this.libScripts).forEach(function (k) {
                var extractRunMap = _this.libScripts[k].extractRunMap;
                if (extractRunMap)
                    extractRunMap(rt);
                else
                    defined = false;
            });
            return defined;
        };
        CompiledScript.prototype.registerAction = function (name, stName, entry, isAsync) {
            this.actionsByName[name] = entry;
            this.actionsByStableName[stName] = entry;
            if (isAsync && !this.eventsByCategory)
                this.registerEventHandler("async", null, null);
        };
        CompiledScript.prototype.initPages = function () {
            var _this = this;
            var hasPages = Object.keys(this.libScripts).some(function (k) { return Object.keys(_this.libScripts[k].pagesByName).length > 0; });
            if (!hasPages)
                return;
            this.registerEventHandler("page", null, function (prev, ret, libName, pageName) {
                var args = [];
                for (var _i = 4; _i < arguments.length; _i++) {
                    args[_i - 4] = arguments[_i];
                }
                var p = prev.rt.pushPage(true);
                p.libName = libName;
                p.pageName = pageName;
                p.drawArgs = args;
                return p.getFrame(prev, ret);
            });
        };
        CompiledScript.prototype.getCompiledCode = function () {
            var _this = this;
            Object.keys(this.libScripts).forEach(function (name) {
                _this.libScripts[name].primaryName = null;
            });
            var res = "var TDev;\nif (!TDev) TDev = {};\nTDev.precompiledScript = {\n";
            var first = true;
            Object.keys(this.libScripts).forEach(function (name) {
                if (!first)
                    res += ",\n\n// **************************************************************\n";
                first = false;
                res += TDev.Util.jsStringLiteral(name) + ": ";
                var cs = _this.libScripts[name];
                if (cs.primaryName)
                    res += TDev.Util.jsStringLiteral(cs.primaryName);
                else {
                    cs.primaryName = name;
                    res += cs.code;
                }
            });
            res += "}\n";
            return res;
        };
        CompiledScript.prototype.initFromPrecompiled = function (script) {
            var _this = this;
            if (script === void 0) { script = null; }
            if (!script)
                script = TDev.precompiledScript;
            Object.keys(script).forEach(function (name) {
                if (name == "this")
                    return;
                var f = script[name];
                var cs = _this;
                if (typeof f == "string") {
                    cs = _this.libScripts[f];
                }
                else {
                    cs = new CompiledScript();
                    f(cs);
                }
                _this.registerLibRef(name, cs);
            });
            script["this"](this);
        };
        CompiledScript.prototype.registerPage = function (name, stName, entry) {
            this.actionsByName[name] = entry;
            this.actionsByStableName[stName] = entry;
            this.pagesByName[name] = entry;
        };
        CompiledScript.prototype.registerLambda = function (name, stName, entry) {
            this.actionsByName[name] = entry;
            this.actionsByStableName[stName] = entry;
        };
        CompiledScript.prototype.forEachData = function (datas, f) {
            var _this = this;
            var res = [];
            Object.keys(this.libScripts).forEach(function (lr) {
                if (!datas[lr])
                    datas[lr] = {};
                datas[lr]["libName"] = lr;
                res.push(f(datas[lr], _this.libScripts[lr], lr));
            });
            return res;
        };
        CompiledScript.prototype.resetData = function (datas) {
            this.forEachData(datas, function (d, cs) {
                cs._resetGlobals(d);
            });
        };
        CompiledScript.prototype.initGlobals = function (datas, rt) {
            this.forEachData(datas, function (d, cs) {
                cs._initGlobals(d, rt);
                cs._initGlobals2(d);
            });
        };
        CompiledScript.prototype.registerArtResource = function (clsName, id, url) {
            var _this = this;
            this.artInitializers.push(function (data) {
                if (!!data[id]) {
                    if (clsName === "String_") {
                        var key = TDev.RT.String_.valueFromKeyUrl(url);
                        if (key)
                            _this.apiKeys[key] = data[id];
                    }
                    return;
                }
                var f = TDev.RT[clsName].fromArtUrl;
                if (!!f)
                    _this.artPromises.push(f(url).then(function (v) {
                        if (clsName === "String_") {
                            var key = TDev.RT.String_.valueFromKeyUrl(url);
                            if (key) {
                                _this.apiKeys[key] = v;
                            }
                        }
                        if (v === undefined) {
                            switch (clsName) {
                                case "Picture":
                                    v = TDev.RT.Picture.fromArtUrl("data:image/jpeg;base64," + "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAW7SURBVHhe7ZxbTBxVGMc/7gssdGG5LSIUC6UKTQu1Rg19EDVqmja2SWNTo1HTxMTESLw90PhkUk29PZgYo6kPTXyqDbGJPhgDKW1tLRWsWhrFyp0F2kUuy7VcnG/2bGcG+sAuifufM+eXbPg+CAT2x3fmfDPnnLji423LpIAhXnxUgKCEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgKGEgOFoIdmuxNuv9ESMt8KxQg5X5lL7oa3669LBKirzuMRXYosjhTyQ76aGnXeJjOjopQG6cnNaZLHFcUKK3Mn05WOllBAfp+c/9IzRVx039BgBRwlJ0Bx89kgpeVIS9bx/cp7eONurxyg4SsjLW/NpW26aHi8tL9Ob53poYn5Rz1FwjJCKLBe9tr1AZERf/xmgC/6gyHBwhBAeqj6oLSGXmNoOBOfp2OVBPUbDEUL2bcq+PVQxH7f54YaqMNILSdWq4q0dhSIj6p6Yo8broyLDQ3ohz9+bQwXpSSIj+vTXIVoEXjwrtRCuDp5ZhUGvDkZqIXvvySKvK9RzMMevjkBXByO1kGcrckRENL2wRN9e/1dkuEgrpNKbaplZfd81RuOgMyszcEKe2uihLx4tpVO7y+mZzV7x2cg5UGb93pOdARFhAyXkUIWXPq8rpSdKPHR/vpuO1RZTfbXRXUfC4yUbREQUmF2gi0N4XfmdgBLyYmWeiAwORlEl5R6Xflc3THPfhIjwgRJinhGFcScliGjtPKlVmJmmvnER4QMlpKV/9X9y63DkQ01tYYaIiOYWl6jpDj8XFSghR1sH6MyA8eZ1BGboyE99IlsbyfFxVJ1nzK7aR6ZpRpvy2gXIXbh5qYmUk5pEf43N0sJSZL9ejTbVbdxTITKiE9du0jsXIpMaS6AqJMzIzAJ1jM5ELIOpyjGqg7nonxSRPYAUsh6qc9NFFIKrzE5IJ2RzlrGcZ1LrzDuVkNhSkpEiIqJRrSG0G1IJ4RlWRrLRt3RPzonIPkglxGd6EMX4g7dEZB8kE2LcLmHUkBVjvFr/YsY/PS8i+yDdRd3uSCXEnWT9c3jaazekEpKSYP1z5qPo9GONGrLAUELAkEoIP/sww42i3ZBKSPCWVYi5a7cLasgCQyoh/qC1EfSlWTt3OyCVEF7uY8a8yNouyFUhU9abiRszjVvxdkEqIdwI+qeMYWvl3V87IN1F3Txs8QkNdpv6SiekbcQ4AIBvpdTkWZ+xoyOhEOvCOiUkxvwRmBFRiCqvdVkQOtIJ4VUm5tvuD/rcIrIH0glhWgaMxXG8gJtXw9sFOCE7tDG/YWchfbirWN+8Ew0rV7vX3Z0pInyghPAmzW92l+s7Zw+UhzbvvHRfrvjq2mnun6BF08OpuiJj8w46UEJe3V5A8XHWvuGFKIRwL9I6PCUy0lfDr3y8iwrUb+lLW91Zc3MXDd91GztuuR/ZX5YtMmyghJwdXL1S/fdAdCe9newc1bdCh3luS+SVFgughLz7c7++SSdM1/gcNZyPbm8Hb9I5/Y9RJbwIm/eOoAO3YYePUtqSnaqf+vbLcJBm13H0wracNDq919i80/j3KNW39IgME7grHb//V7UqOa8NX+uRwfDBlk2mHbg8iyvJwH5oZY+pxzr4pN0vIq364uP0mRwy0gv5bUWV7N+UDV0l0gthVlbJ6zU+keHhCCFcJSeuGWfzPq1VyUOgNx0dIYR5v3WQhkzP3N97uJhcPKUDwzFCprS+5Ihpv3rphhQ6XLX6bJVY4xghzI+943RK60XC1Ff79F4FCUcJYd4+10tXboRuxyRpF3g+ejwTaMmp44Tw6RCvNHfRyHToelKkTYE/2lWsxwhAnnXyf1CTm077yrJEFjoTBeGQAccKQcVxQxY6SggYSggYSggYSggYSggYSggYSggYSggYSggYSggYSggYSggYSggYSggYSggURP8B901+vZyEn/4AAAAASUVORK5CYII=")._value;
                                    break;
                                case "Sound":
                                    v = TDev.RT.Sound.mk("https://az31353.vo.msecnd.net/pub/pxiraczt");
                                    break;
                                default:
                                    break;
                            }
                        }
                        data[id] = v;
                    }));
            });
        };
        CompiledScript.prototype.registerGlobal = function (id) {
            this.globals.push(id);
        };
        CompiledScript.prototype.initArtAsync = function (datas) {
            this.apiKeys = {};
            return TDev.Promise.join(this.forEachData(datas, function (d, cs) { return cs.initArtCoreAsync(d); }));
        };
        CompiledScript.prototype.initArtCoreAsync = function (data) {
            this.artPromises = [];
            this.artInitializers.forEach(function (f) {
                f(data);
            });
            return TDev.Promise.join(this.artPromises);
        };
        CompiledScript.prototype.registerEventHandler = function (category, varId, entry) {
            if (this.eventsByCategory == null)
                this.eventsByCategory = {};
            var curr = this.eventsByCategory[category];
            if (curr === undefined) {
                curr = [];
                this.eventsByCategory[category] = curr;
            }
            curr.push(new EventHandlerDesc(varId, entry));
            if (!this.eventsByCategory["pause"])
                this.registerEventHandler("pause", null, function (prev, ret) {
                    var frame = {};
                    frame.previous = prev;
                    frame.rt = prev.rt;
                    frame.returnAddr = ret;
                    frame.entryAddr = function (s) {
                        s.rt.stopAsync(true).done();
                        return null;
                    };
                    return frame;
                });
            if (!this.eventsByCategory["async"])
                this.registerEventHandler("async", null, null);
        };
        CompiledScript.prototype.registerStep = function (step, name) {
            step.idx = this.steps.length;
            step.theName = name;
            this.steps.push(step);
        };
        CompiledScript.prototype.registerLibRef = function (libRefName, cs) {
            if (this.libScripts.hasOwnProperty(libRefName))
                TDev.Util.oops("redefinition of libref " + libRefName);
            this.libScripts[libRefName] = cs;
        };
        CompiledScript.prototype.mkLambdaProxy = function (libs, libRefName) {
            return function (s) { return new LibProxy(libs, s, libRefName, "inline action", null); };
        };
        CompiledScript.prototype.mkLibProxyFactory = function (libs, libRefName, actionName) {
            var f = this.libScripts[libRefName].actionsByName[actionName];
            TDev.Util.assert(f);
            return function (s) { return new LibProxy(libs, s, libRefName, actionName, f); };
        };
        CompiledScript.prototype.lookupLibPage = function (libRefName, actionName) {
            var _this = this;
            var f = this.libScripts[libRefName].actionsByName[actionName];
            TDev.Util.assert(f);
            return function (s) { return new LibProxy(_this.libBindings[libRefName], s, libRefName, actionName, f); };
        };
        CompiledScript.prototype.lookupAction = function (libName, actName) {
            return this.libScripts[libName].actionsByStableName[actName];
        };
        CompiledScript.prototype.init = function (code, missingApis, packageResources, safe) {
            this.code = code;
            this.missingApis.pushRange(missingApis);
            this.packageResources.pushRange(packageResources);
            if (safe) {
                var f = eval(code);
                f(this);
            }
        };
        CompiledScript.prototype.reinit = function (code) {
            this.additionalCode = code;
            var f = eval(code);
            f(this);
        };
        CompiledScript.additionalScriptStateFields = ["leaderboard_score", "apikeys_consent", "source_access"];
        return CompiledScript;
    })();
    TDev.CompiledScript = CompiledScript;
    var VisibilityManager;
    (function (VisibilityManager) {
        var hiddenProp = null;
        var rt = null;
        function getHiddenProp() {
            if (TDev.Browser.isNodeJS)
                return null;
            var prefixes = ['webkit', 'moz', 'ms', 'o'];
            if ('hidden' in document)
                return 'hidden';
            for (var i = 0; i < prefixes.length; i++) {
                if ((prefixes[i] + 'Hidden') in document)
                    return prefixes[i] + 'Hidden';
            }
            return null;
        }
        function attachToVisibilityChange(runtime) {
            if (runtime && runtime.testMode)
                return;
            rt = runtime;
            if (!hiddenProp)
                hiddenProp = getHiddenProp();
            if (hiddenProp) {
                TDev.Util.log('visibility manager: ' + (!!runtime ? "attach" : "detach"));
                var evName = hiddenProp.replace(/[H|h]idden/, '') + 'visibilitychange';
                if (rt)
                    document.addEventListener(evName, visibilityChanged, false);
                else
                    document.removeEventListener(evName, visibilityChanged, false);
            }
        }
        VisibilityManager.attachToVisibilityChange = attachToVisibilityChange;
        function visibilityChanged() {
            var rt = Runtime.theRuntime;
            if (rt && hiddenProp) {
                var hidden = document[hiddenProp];
                if (hidden) {
                    TDev.Util.log('visibility manager: pausing');
                    rt.pauseExecution();
                }
                else {
                    TDev.Util.log('visibility manager: resuming');
                    rt.resumeExecution();
                }
            }
        }
    })(VisibilityManager || (VisibilityManager = {}));
    var RT;
    (function (RT) {
        function unwrapJson(o) {
            return o ? o.value() : undefined;
        }
        RT.unwrapJson = unwrapJson;
        function wrapJson(o) {
            return RT.JsonObject.wrap(o);
        }
        RT.wrapJson = wrapJson;
        function queueAction(s, a, args, whenDone, errorHandler) {
            if (whenDone === void 0) { whenDone = null; }
            if (errorHandler === void 0) { errorHandler = null; }
            if (a) {
                var ev = new RT.Event_();
                ev.isBlocking = false;
                ev.finalCallback = whenDone;
                ev.errorHandler = errorHandler;
                ev.addHandler(a);
                s.rt.queueLocalEvent(ev, args);
            }
        }
        RT.queueAction = queueAction;
        function protect(s, f) {
            return s.rt.wrap(s, f);
        }
        RT.protect = protect;
        function userError(msg) {
            TDev.Util.userError(msg);
        }
        RT.userError = userError;
        function logError(err, meta) {
            RT.App.logException(err, meta);
        }
        RT.logError = logError;
        function checkAndLog(err, meta) {
            if (!err)
                return true;
            logError(err, meta);
            return false;
        }
        RT.checkAndLog = checkAndLog;
        function checkAndThrow(e) {
            if (!e)
                return;
            TDev.Util.userError(e + "");
        }
        RT.checkAndThrow = checkAndThrow;
        function checkAndResume(s) {
            return protect(s, function (err) {
                checkAndThrow(err);
                s.localResume();
            });
        }
        RT.checkAndResume = checkAndResume;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Revisions;
    (function (Revisions) {
        function revisionservice_http() {
            return revision_service_url;
        }
        Revisions.revisionservice_http = revisionservice_http;
        var revision_service_url = "https://storage.touchdevelop.com/sessions";
        function parseUrlParameters(url) {
            if (/altrevserv3/.test(url))
                revision_service_url = "http://localhost:843/sessions3";
            else if (/altrevserv2/.test(url))
                revision_service_url = "http://localhost:843/sessions2";
            else if (/altrevserv1/.test(url))
                revision_service_url = "http://localhost:843/sessions1";
            else if (/altrevserv/.test(url))
                revision_service_url = "http://localhost:843/sessions";
            else if (/simrevserv1/.test(url))
                revision_service_url = "http://127.0.0.1:82/sessions1";
            else if (/simrevserv/.test(url))
                revision_service_url = "http://127.0.0.1:82/sessions";
            else if (/revserv=/.test(url)) {
                var myRe = new RegExp("revserv=([^?&#]+)", "i");
                var myArray = myRe.exec(url);
                revision_service_url = "https://" + myArray[1] + "/sessions";
            }
        }
        Revisions.parseUrlParameters = parseUrlParameters;
        function localsessionid(scriptguid) {
            return "L" + scriptguid;
        }
        Revisions.localsessionid = localsessionid;
        function nodesessionid(guid) {
            return "userid" + "0pn" + letterify(guid);
        }
        Revisions.nodesessionid = nodesessionid;
        function justmesessionid(userid, guid) {
            return userid + "0pr" + letterify(guid);
        }
        Revisions.justmesessionid = justmesessionid;
        function everyonesessionid(author, scriptname) {
            return author + "0pu" + scripthash(author, scriptname);
        }
        Revisions.everyonesessionid = everyonesessionid;
        function make_astsessionid(userid) {
            return userid + "0pa" + letterify(TDev.Util.guidGen());
        }
        Revisions.make_astsessionid = make_astsessionid;
        function scripthash(author, title) {
            return letterify(author + title);
        }
        Revisions.scripthash = scripthash;
        function publicpermission(script) {
            return "users:*=W" + (script ? " scripts:" + (script) : "");
        }
        Revisions.publicpermission = publicpermission;
        function broadcastpermission(script) {
            return "users:*=R" + (script ? " scripts:" + (script) : "");
        }
        Revisions.broadcastpermission = broadcastpermission;
        function privatepermission(script) {
            return "users:" + (script ? " scripts:" + (script) : "");
        }
        Revisions.privatepermission = privatepermission;
        function letterify(s) {
            var n = Math.floor(Math.abs(TDev.Util.getStableHashCode(s)));
            var c = "";
            while (n > 0) {
                var d = n % 26;
                n = Math.floor(n / 26);
                c = c + String.fromCharCode(97 + d);
            }
            return c;
        }
        Revisions.letterify = letterify;
        function getRevisionServiceTokenAsync(forcefreshtoken) {
            if (forcefreshtoken === void 0) { forcefreshtoken = false; }
            var token = getRevisionServiceToken(forcefreshtoken);
            if (token)
                return TDev.Promise.wrap(token);
            else
                return refreshRevisionServiceTokenAsync();
        }
        Revisions.getRevisionServiceTokenAsync = getRevisionServiceTokenAsync;
        function getRevisionServiceToken(forcefreshtoken) {
            if (forcefreshtoken === void 0) { forcefreshtoken = false; }
            var expires = parseInt(window.localStorage["rs_token_expires"] || "0");
            if (forcefreshtoken || expires > 0 && Date.now() + 600 > expires) {
                setRevisionServiceToken(undefined);
                return undefined;
            }
            return window.localStorage["rs_access_token"];
        }
        function setRevisionServiceToken(token, expires_in) {
            if (expires_in === void 0) { expires_in = 0; }
            if (!token) {
                TDev.Util.log('revision service access token expired');
                window.localStorage.removeItem("rs_access_token");
                window.localStorage.removeItem("rs_token_expires");
            }
            else {
                TDev.Util.log('received revision service token (expires in ' + (expires_in * 1000).toString() + 'ms)');
                window.localStorage["rs_access_token"] = token;
                if (expires_in > 0)
                    window.localStorage["rs_token_expires"] = Date.now() + expires_in * 1000;
                else
                    window.localStorage.removeItem("rs_token_expires");
            }
        }
        function refreshRevisionServiceTokenAsync() {
            if (TDev.Cloud.isOffline())
                return TDev.Promise.wrapError(TDev.lf("cloud is offline"));
            return TDev.Cloud.authenticateAsync(TDev.lf("cloud data")).then(function (authenticated) {
                if (authenticated) {
                    var userid = TDev.Cloud.getUserId();
                    var tdtoken = TDev.Cloud.getAccessToken();
                    TDev.Util.log('asking TD server for revision service access token');
                    var tokenserviceurl = "https://www.touchdevelop.com/api/" + userid + "/storage/access_token?access_token=" + tdtoken;
                    return TDev.Util.httpRequestAsync(tokenserviceurl, "POST", undefined).then(function (text) {
                        var json = JSON.parse(text);
                        var token = json["access_token"];
                        var expires_in = json["expires_in"];
                        setRevisionServiceToken(token, expires_in);
                        return token;
                    }, function (error) {
                        TDev.Util.log('could not get revision service token, web request failed');
                        return TDev.Promise.wrapError("Failed to receive revision service token");
                    });
                }
                else {
                    TDev.Util.log('could not get revision service token, user not signed in');
                    return TDev.Promise.wrapError("User not signed in");
                }
            });
        }
        function getServerInfoAsync(id) {
            return Revisions.getRevisionServiceTokenAsync().then(function (token) {
                if (TDev.Cloud.isOffline())
                    return TDev.Promise.wrapError("Cloud is offline");
                var url = Revisions.revisionservice_http() + "/" + id + "/info?user=" + TDev.Cloud.getUserId() + "&access_token=" + encodeURIComponent(token);
                return TDev.Util.httpRequestAsync(url, "GET", undefined).then(function (response) { return TDev.RT.JsonObject.mk(response, TDev.RT.Time.log); }, function (error) { return undefined; });
            }, function (error) { return undefined; });
        }
        Revisions.getServerInfoAsync = getServerInfoAsync;
        function queryMySessionsOnRevisionServerAsync(rt, filter_based_on_current_script) {
            if (filter_based_on_current_script === void 0) { filter_based_on_current_script = false; }
            var userid = TDev.Cloud.getUserId();
            return getRevisionServiceTokenAsync().then(function (token) {
                if (TDev.Cloud.isOffline())
                    return TDev.Promise.wrapError("Cloud is offline");
                var url = revisionservice_http() + "?user=" + userid + "&access_token=" + encodeURIComponent(token);
                if (filter_based_on_current_script) {
                    url = url + "&guidhash=" + encodeURIComponent(letterify(rt.sessions.getScriptGuid())) + "&scripthash=" + encodeURIComponent(scripthash(rt.sessions.getScriptAuthor(), rt.sessions.getScriptName()));
                }
                return TDev.Util.httpRequestAsync(url, "GET", undefined).then(function (s) {
                    var json = JSON.parse(s);
                    var sessions = new Array();
                    for (var f in json)
                        if (json.hasOwnProperty(f)) {
                            var cs = new TDev.RT.CloudSession();
                            cs._id = f;
                            if (!cs.validate())
                                continue;
                            cs.serverinfo = json[f];
                            cs._title = cs.serverinfo.title;
                            cs._permissions = "";
                            sessions.push(cs);
                        }
                    return sessions;
                });
            });
        }
        Revisions.queryMySessionsOnRevisionServerAsync = queryMySessionsOnRevisionServerAsync;
        function queryCachedSessionsAsync(filter_based_on_current_script, rt) {
            var sessions = [];
            var confirmedsessions = [];
            return TDev.Storage.getTableAsync("Sessions").then(function (table) {
                return table.getValueAsync("%").then(function (val) {
                    var sessionlist = (val || "").split(" ");
                    sessionlist.forEach(function (id) {
                        var cs = new TDev.RT.CloudSession();
                        cs._id = id;
                        if (cs.validate()) {
                            if (filter_based_on_current_script) {
                                var privatehash = letterify(rt.sessions.getScriptGuid());
                                var scripthash = Revisions.scripthash(rt.sessions.getScriptAuthor(), rt.sessions.getScriptName());
                                if (cs.tag === "pr" && cs.guidhash != privatehash)
                                    return;
                                if (cs.tag === "pu" && cs.guidhash != scripthash)
                                    return;
                                if (cs.tag === "pn")
                                    return;
                                if (cs.tag[0] === "c" && cs.guidhash[0] === "s" && cs.guidhash.lastIndexOf(scripthash, 1) !== 1)
                                    return;
                            }
                            sessions.push(cs);
                        }
                    });
                    var keys = sessions.map(function (s, idx, arr) { return s._id + "/S"; });
                    return table.getItemsAsync(keys).then(function (results) {
                        for (var i = 0; i < sessions.length; i++) {
                            var cs = sessions[i];
                            var val = results[keys[i]];
                            if (val) {
                                var json = JSON.parse(val);
                                TDev.Util.assert(cs._id === json.servername);
                                TDev.Util.assert(cs._id === json.localname);
                                cs.localname = cs._id;
                                cs._title = json.description;
                                cs._permissions = json.permissions;
                                cs.membernumber = json.membernumber;
                                cs.enable_sync = json.enable_sync;
                                confirmedsessions.push(cs);
                            }
                            else {
                            }
                        }
                        return confirmedsessions;
                    });
                });
            });
        }
        Revisions.queryCachedSessionsAsync = queryCachedSessionsAsync;
        function deleteSessionAsync(desc, rt) {
            var tasks = [];
            tasks.push(Slot.deleteSessionFileAsync(rt.sessions, desc));
            if (!desc.nodeserver && desc.servername) {
                var pos = desc.servername.indexOf("0");
                if (pos > 3 && pos < desc.servername.length - 4 && desc.servername.substr(0, pos) == TDev.Cloud.getUserId()) {
                    tasks.push(Slot.queueSessionWork(desc.localname, "deleting session on server", function () { return getRevisionServiceTokenAsync().then(function (token) {
                        if (TDev.Cloud.isOffline())
                            return TDev.Promise.wrapError("Cloud is offline");
                        var url = revisionservice_http() + "/" + desc.servername + "?user=" + TDev.Cloud.getUserId() + "&access_token=" + encodeURIComponent(token);
                        var deleteonserver = TDev.Util.httpRequestAsync(url, "DELETE", undefined);
                        return deleteonserver;
                    }); }));
                }
            }
            return TDev.Promise.join(tasks);
        }
        Revisions.deleteSessionAsync = deleteSessionAsync;
        var Slot = (function () {
            function Slot(context, getCurrent, setCurrent) {
                this.context = context;
                this.getCurrent = getCurrent;
                this.setCurrent = setCurrent;
            }
            Slot.prototype.connect = function (desc, loadonly) {
                var _this = this;
                if (loadonly === void 0) { loadonly = false; }
                var cs = this.getCurrent();
                if (cs) {
                    if (cs.servername === desc.servername && cs.localname === desc.localname && (cs.user === desc.user || cs.user === "")) {
                        if (cs.script !== desc.script || cs.readonly !== desc.readonly || cs.user !== desc.user) {
                            cs.script = desc.script;
                            cs.readonly = desc.readonly;
                            cs.user = desc.user;
                            if (cs.loaded && (cs.servername != "")) {
                                cs.disconnect();
                                cs.try_reconnect_in(1000);
                            }
                        }
                        this.context.updateStatus();
                        if (!cs.loadtask.isPending())
                            this.context.afterload();
                        return cs.loadtask;
                    }
                    this.disconnect(false, "unload previous session");
                }
                if (desc.localname) {
                    var openedby = Slot.slots[desc.localname];
                    openedby && openedby.disconnect(false, "opening session in different context");
                }
                cs = this.context.createSession(desc);
                this.setCurrent(cs);
                if (cs.localname)
                    Slot.slots[cs.localname] = this;
                cs.user_set_doorbell(function () { return _this.context.onDoorBell(); });
                var loadtask = this.loadSessionAsync(cs);
                return loadtask;
            };
            Slot.prototype.disconnect = function (deletelocalstorage, msg) {
                var cs = this.getCurrent();
                if (!cs)
                    return TDev.Promise.as();
                cs.user_unlink();
                cs.user_set_doorbell(function () { return undefined; });
                this.setCurrent(undefined);
                if (cs.localname && Slot.slots[cs.localname] === this)
                    Slot.slots[cs.localname] = undefined;
                var p = Slot.queueSessionWork(cs.localname, "unloading session" + (msg ? " (" + msg + ")" : ""), function () {
                    var promise = cs.closeAsync(deletelocalstorage);
                    promise.done();
                    return promise;
                });
                this.context.clearCachedData();
                this.context.updateStatus();
                return p;
            };
            Slot.prototype.loadSessionAsync = function (session) {
                var _this = this;
                TDev.Util.assert(session !== undefined);
                TDev.Util.assert(session.loadtask === undefined);
                var loadtask = Slot.queueSessionWork(session.localname, "loading session", function () { return session.loadAsync(function () { return _this.context.afterload(); }); });
                loadtask.thenalways(function () {
                    _this.context.updateStatus();
                    if (session.loaded) {
                        if (session.servername != "")
                            return session.connect(_this.context.url_ws(), function (needfreshtoken) { return _this.context.tokensource(needfreshtoken); });
                    }
                    else
                        session.log("!! failure while loading session");
                }).done();
                this.context.clearCachedData();
                this.context.updateStatus();
                return loadtask;
            };
            Slot.createSessionFileAsync = function (context, desc) {
                TDev.Util.assert(desc.localname && !Slot.slots[desc.localname]);
                var s = context.createSession(desc);
                return Slot.queueSessionWork(desc.localname, "creating session", function () {
                    return s.loadAsync().then(function () { return s.closeAsync(false); }).then(function () { return s; }, function () { return undefined; });
                });
            };
            Slot.deleteSessionFileAsync = function (context, desc) {
                var openedby = desc.localname && Slot.slots[desc.localname];
                if (openedby)
                    return openedby.disconnect(true);
                var s = context.createSession(desc);
                return Slot.queueSessionWork(desc.localname, "deleting session cache", function () {
                    return s.loadAsync().then(function () { return s.closeAsync(true); });
                });
            };
            Slot.queueSessionWork = function (localname, description, work) {
                var waitfor = Slot.busysessions[localname];
                if (waitfor === undefined)
                    waitfor = TDev.Promise.wrap(undefined);
                else
                    TDev.Util.log("[" + localname + "] queued " + description);
                waitfor = waitfor.then(function () {
                    TDev.Util.log("[" + localname + "] started " + description);
                    return work().then(function (x) {
                        Slot.busysessions[localname] = undefined;
                        TDev.Util.log("[" + localname + "] finished " + description);
                        return x;
                    }, function (e) {
                        Slot.busysessions[localname] = undefined;
                        TDev.Util.log("[" + localname + "] unsuccessfully terminated  " + description);
                    });
                });
                Slot.busysessions[localname] = (!!waitfor._state) ? undefined : waitfor;
                return waitfor;
            };
            Slot.slots = {};
            Slot.busysessions = {};
            return Slot;
        })();
        Revisions.Slot = Slot;
        var Sessions = (function () {
            function Sessions(wsServer) {
                var _this = this;
                if (wsServer === void 0) { wsServer = undefined; }
                this.wsServer = wsServer;
                this.CurrentSession = undefined;
                this.LocalSession = undefined;
                this.currentSessionSlot = new Slot(this, function () { return _this.CurrentSession; }, function (cs) { return _this.CurrentSession = cs; });
                this.localSessionSlot = new Slot(this, function () { return _this.LocalSession; }, function (cs) { return _this.LocalSession = cs; });
                this.doorbelllisteners = [];
                this.registereddatacaches = [];
            }
            Sessions.prototype.url_http = function () {
                return (this.current_nodeserver || revisionservice_http());
            };
            Sessions.prototype.url_ws = function () {
                return this.url_http().replace("http", "ws");
            };
            Sessions.prototype.tokensource = function (forcefreshtoken) {
                if (this.current_nodeserver)
                    return TDev.Promise.as(this._authtoken || "token");
                else
                    return Revisions.getRevisionServiceTokenAsync(forcefreshtoken);
            };
            Sessions.prototype.setAccessToken = function (token) {
                this._authtoken = token;
            };
            Sessions.prototype.isNodeServer = function () {
                return this.wsServer !== undefined;
            };
            Sessions.prototype.isNodeClient = function () {
                return this.current_nodeserver && this.wsServer === undefined;
            };
            Sessions.prototype.hasNodeConnection = function () {
                return this.current_nodeserver && this.CurrentSession !== undefined && this.CurrentSession.hasNodeConnection();
            };
            Sessions.prototype.nodeConnectionPending = function () {
                return false;
            };
            Sessions.prototype.afterload = function () {
                return undefined;
            };
            Sessions.prototype.getUserId = function () {
                return this.current_userid;
            };
            Sessions.prototype.getScriptGuid = function () {
                return this.current_scriptguid;
            };
            Sessions.prototype.getScriptAuthor = function () {
                return this.current_scriptauthor;
            };
            Sessions.prototype.getScriptName = function () {
                return this.current_scriptname;
            };
            Sessions.prototype.getScript = function () {
                return this.current_script;
            };
            Sessions.prototype.getNodeServer = function () {
                return this.current_nodeserver;
            };
            Sessions.prototype.setEditorScriptContext = function (user, guid, title, basescript, author) {
                this.current_userid = user;
                this.current_scriptguid = guid;
                this.current_scriptname = title;
                this.current_scriptauthor = author;
                this.current_script = TDev.RT.CloudSession.makeScriptIdentifier(basescript, author);
            };
            Sessions.prototype.refreshFinalScriptContext = function () {
                var changed;
                var userid = TDev.Cloud.getUserId() || "";
                var scriptguid = this.rt.host ? this.rt.host.currentGuid : this.current_scriptguid;
                var scriptname = this.rt.compiled.scriptTitle;
                var scriptauthor = this.rt.compiled.authorId || "";
                var basescript = this.rt.compiled && this.rt.compiled.baseScriptId || "";
                var script = TDev.RT.CloudSession.makeScriptIdentifier(basescript, scriptauthor);
                var nodeserver = this.rt.compiled.azureSite;
                if ((!nodeserver && this.current_userid !== userid) || this.current_script != script || this.current_scriptguid != scriptguid || this.current_scriptname != scriptname || this.current_nodeserver != nodeserver) {
                    changed = true;
                    this.currentSessionSlot.disconnect(false, "script context changed");
                    this.localSessionSlot.disconnect(false, "script context changed");
                }
                this.current_userid = userid;
                this.current_scriptguid = scriptguid;
                this.current_scriptname = scriptname;
                this.current_scriptauthor = scriptauthor;
                this.current_script = script;
                this.current_nodeserver = nodeserver;
                return changed;
            };
            Sessions.prototype.clearScriptContext = function (includinglocal) {
                var tasks = [];
                tasks.push(this.currentSessionSlot.disconnect(false, "clear script context"));
                if (includinglocal)
                    tasks.push(this.localSessionSlot.disconnect(false, "clear script context"));
                this.current_userid = undefined;
                this.current_scriptguid = undefined;
                this.current_scriptname = undefined;
                this.current_script = undefined;
                this.current_scriptauthor = undefined;
                this.current_nodeserver = undefined;
                return TDev.Promise.join(tasks);
            };
            Sessions.prototype.getCurrentSession = function () {
                TDev.Util.assert(this.CurrentSession !== undefined);
                return this.CurrentSession;
            };
            Sessions.prototype.getLocalSession = function () {
                if (!this.isNodeServer()) {
                    TDev.Util.assert(this.LocalSession !== undefined);
                    return this.LocalSession;
                }
                else {
                    TDev.Util.assert(this.CurrentSession !== undefined);
                    return this.CurrentSession;
                }
            };
            Sessions.prototype.getLastSession = function () {
                return this.CurrentSession;
            };
            Sessions.prototype.getJustMeSessionDescriptor = function () {
                if (!this.current_userid)
                    return undefined;
                return this.getCloudSessionDescriptor(justmesessionid(this.current_userid, this.current_scriptguid), "just-me session for script \"" + this.current_scriptname + "\"", privatepermission());
            };
            Sessions.prototype.getNodeSessionDescriptor = function (user) {
                var desc = this.getCloudSessionDescriptor(nodesessionid(this.current_scriptguid), "node session for script \"" + this.current_scriptname + "\"", publicpermission(this.current_script));
                desc.user = user;
                return desc;
            };
            Sessions.prototype.getEveryoneSessionDescriptor = function () {
                return this.getCloudSessionDescriptor(everyonesessionid(this.current_scriptauthor, this.current_scriptname), "everyone session for script \"" + this.current_scriptname + "\"", publicpermission(this.current_script));
            };
            Sessions.prototype.getLocalSessionDescriptor = function () {
                var desc = {};
                desc.servername = "";
                desc.localname = localsessionid(this.current_scriptguid);
                desc.user = "";
                desc.title = "";
                desc.permissions = "";
                desc.script = this.current_script;
                desc.readonly = false;
                desc.nodeserver = "";
                return desc;
            };
            Sessions.prototype.getCloudSessionDescriptor = function (servername, title, permissions) {
                var isnode = servername.indexOf("0pn") != -1;
                var owner = servername.substr(0, servername.indexOf("0"));
                var desc = {};
                desc.servername = servername;
                desc.user = this.current_userid;
                desc.title = title;
                desc.script = this.current_script;
                desc.permissions = permissions;
                desc.nodeserver = this.current_nodeserver;
                desc.localname = (!isnode && TDev.Browser.isNodeJS) ? undefined : servername;
                desc.readonly = !isnode && (owner !== this.current_userid) && (servername.indexOf("0cr") != -1);
                return desc;
            };
            Sessions.prototype.disconnect = function () {
                this.currentSessionSlot.disconnect(false, "disconnect");
                this.localSessionSlot.disconnect(false, "disconnect");
            };
            Sessions.prototype.unlink = function () {
                if (this.CurrentSession)
                    this.CurrentSession.user_unlink();
                if (this.LocalSession)
                    this.LocalSession.user_unlink();
            };
            Sessions.prototype.scriptRestarted = function () {
                this.refreshFinalScriptContext();
            };
            Sessions.prototype.scriptStarted = function (author) {
                this.refreshFinalScriptContext();
            };
            Sessions.prototype.createSession = function (original) {
                var si = original.nodeserver ? (this.isNodeServer() ? new Revisions.ServerSession(original.nodeserver, original.servername, original.localname, original.user, this.rt, this.wsServer) : new Revisions.NodeSession(original.nodeserver, original.servername, original.localname, original.user)) : new Revisions.ClientSession(original.servername, original.localname, original.user);
                si.permissions = original.permissions;
                si.title = original.title;
                si.script = original.script;
                si.readonly = original.readonly;
                si.user = original.user;
                return si;
            };
            Sessions.prototype.connectCurrent = function (desc) {
                var isnodesession = desc.servername.indexOf("0pn") != -1;
                TDev.Util.assert(isnodesession == !!this.current_nodeserver, "must not mix cloud/node sessions");
                TDev.Util.assert(isnodesession || !!this.current_userid, "must be signed in to connect cloud session");
                TDev.Util.assert(!this.isNodeServer() || isnodesession, "can only use node session on server");
                return this.currentSessionSlot.connect(desc);
            };
            Sessions.prototype.enable_script_session_mgt = function () {
                return TDev.Cloud.getUserId() && !!this.current_userid && !!this.current_scriptguid && !!this.current_scriptauthor;
            };
            Sessions.prototype.ensureSessionLoaded = function () {
                var _this = this;
                var sign_in = (this.current_userid || !this.rt.compiled.hasCloudData || this.current_nodeserver) ? TDev.Promise.as() : TDev.Cloud.authenticateAsync(TDev.lf("cloud data"));
                return sign_in.thenalways(function () {
                    _this.refreshFinalScriptContext();
                    var loadlocal;
                    var loadcurrent;
                    if (_this.rt.compiled.hasLocalData && !_this.isNodeServer()) {
                        loadlocal = _this.localSessionSlot.connect(_this.getLocalSessionDescriptor()).thenalways(function () {
                            if (_this.LocalSession && _this.LocalSession.faulted) {
                                TDev.Util.check(false, "local data corrupted - resetting");
                                _this.localSessionSlot.disconnect(true, "delete due to faulted load");
                                _this.localSessionSlot.connect(_this.getLocalSessionDescriptor());
                            }
                        });
                    }
                    else {
                        _this.localSessionSlot.disconnect(false, "no local data");
                        loadlocal = TDev.Promise.as();
                    }
                    if (_this.current_nodeserver || _this.rt.compiled.hasCloudData) {
                        if (!_this.current_nodeserver && !_this.current_userid)
                            loadcurrent = TDev.Promise.wrapError("cannot run this script without first signing in");
                        else if (!_this.current_scriptguid || !_this.current_scriptname || !_this.current_scriptauthor || !_this.current_script)
                            TDev.Util.oops("cannot determine script info: runtime lacks information");
                        else {
                            var session = _this.current_nodeserver ? _this.getNodeSessionDescriptor("") : (_this.CurrentSession || _this.getJustMeSessionDescriptor());
                            loadcurrent = _this.connectCurrent(session);
                        }
                    }
                    else {
                        _this.currentSessionSlot.disconnect(false, "no cloud session");
                        loadcurrent = TDev.Promise.as();
                    }
                    _this.updateStatus();
                    return TDev.Promise.join([loadlocal, loadcurrent]);
                });
            };
            Sessions.prototype.readyForExecution = function () {
                if (this.refreshFinalScriptContext()) {
                    TDev.Util.check(false, "script info changed between loading and execution");
                    return false;
                }
                if (this.rt.compiled.hasCloudData && !this.current_nodeserver && !this.current_userid) {
                    return false;
                }
                if (this.rt.compiled.hasLocalData && !this.isNodeServer() && !(this.LocalSession && this.LocalSession.loaded)) {
                    TDev.Util.check(false, "failed to load local session");
                    return false;
                }
                if ((this.rt.compiled.hasCloudData || (this.rt.compiled.hasLocalData && this.isNodeServer())) && !(this.CurrentSession && this.CurrentSession.loaded)) {
                    TDev.Util.check(false, "failed to load cloud session");
                    return false;
                }
                if (this.LocalSession && this.LocalSession.faulted) {
                    TDev.Util.check(false, "error loading local session from disk");
                    return false;
                }
                return true;
            };
            Sessions.prototype.stopAsync = function () {
                return TDev.Promise.as();
            };
            Sessions.prototype.receive_operation = function (p) {
                if (!this.current_nodeserver)
                    throw new Error("should not be called for unexported apps");
            };
            Sessions.prototype.resetCurrentSession = function () {
                var session = this.CurrentSession;
                if (!session)
                    return;
                var desc = this.getCloudSessionDescriptor(session.servername, session.title, session.permissions);
                this.currentSessionSlot.disconnect(true, "reset current session");
                return this.currentSessionSlot.connect(desc);
            };
            Sessions.prototype.clearCurrentSession = function () {
                if (!this.CurrentSession)
                    return;
                this.CurrentSession.user_clear_all();
                this.clearCachedData();
            };
            Sessions.prototype.getLocalSessionAttributeAsync = function (key, rt) {
                var _this = this;
                TDev.Util.assert(!this.isNodeServer(), "cannot access attributes on server");
                return this.get_attribute_lval(key, rt).then(function (lval) { return TDev.RT.Conv.fromCloud("string", _this.LocalSession.user_get_value(lval)); });
            };
            Sessions.prototype.setLocalSessionAttributeAsync = function (key, value, rt) {
                var _this = this;
                TDev.Util.assert(!this.isNodeServer(), "cannot access attributes on server");
                var op = TDev.RT.Conv.toCloud("string", value, false);
                return this.get_attribute_lval(key, rt).then(function (lval) { return _this.LocalSession.user_modify_lval(lval, op); });
            };
            Sessions.prototype.get_attribute_lval = function (key, rt) {
                var _this = this;
                var waitfor = this.LocalSession ? TDev.Promise.as() : this.localSessionSlot.connect(this.getLocalSessionDescriptor());
                return waitfor.then(function () { return _this.LocalSession.user_get_lval(Revisions.Parser.MakeProperty(key, "attributes[]", "string"), [], []); });
            };
            Sessions.prototype.queueRestRequest = function (sr) {
                sr._onStop = new TDev.PromiseInv();
                this.rt.dispatchServerRequest(sr, sr._onStop).then(function (res) {
                }, function (err) {
                    TDev.RT.App.log("404 " + sr.method().toUpperCase() + " " + sr.url());
                    var resp = sr.getNodeRequest().tdResponse;
                    resp.writeHead(404, "API Error");
                    resp.end(err.message);
                });
            };
            Sessions.prototype.yieldSession = function () {
                var somechanges = false;
                if (this.CurrentSession) {
                    var changes = this.CurrentSession.user_yield();
                    if (changes) {
                        this.updateStatus();
                        this.clearCachedData();
                        somechanges = true;
                    }
                }
                if (this.LocalSession) {
                    var changes = this.LocalSession.user_yield();
                    if (changes) {
                        this.clearCachedData();
                        somechanges = true;
                    }
                }
                return somechanges;
            };
            Sessions.prototype.updateStatus = function () {
                if (this.isNodeServer())
                    return;
                if (this.CurrentSession) {
                    if (this.rt.host)
                        this.rt.host.updateCloudState(true, this.CurrentSession.getCloudSession().type(), this.CurrentSession.user_get_connectionstatus(false));
                    TDev.RT.CloudData.refreshSessionInfo(this.CurrentSession);
                }
                else {
                    if (this.rt.host)
                        this.rt.host.updateCloudState(false, "", "");
                }
            };
            Sessions.prototype.onDoorBell = function () {
                if (this.isNodeClient() && this.CurrentSession && (this.CurrentSession.marooned || this.CurrentSession.faulted)) {
                    var s = this.CurrentSession;
                    s.log("discard cache because it is " + (s.marooned ? "marooned" : s.faulted ? "faulted" : ""));
                    this.currentSessionSlot.disconnect(true, "reset because " + (s.marooned ? "marooned" : s.faulted ? "faulted" : ""));
                    this.currentSessionSlot.connect(s);
                }
                if (!TDev.Browser.isNodeJS) {
                    this.rt.yield_when_possible();
                }
                this.doorbelllisteners = this.doorbelllisteners.filter(function (listener) { return listener(); });
                this.updateStatus();
            };
            Sessions.prototype.addDoorbellListener = function (listener) {
                this.doorbelllisteners.push(listener);
            };
            Sessions.prototype.clearCachedData = function () {
                for (var l in this.registereddatacaches) {
                    if (this.registereddatacaches.hasOwnProperty(l))
                        this.registereddatacaches[l].clearCachedData();
                }
            };
            Sessions.prototype.registerDataCache = function (key, o) {
                this.registereddatacaches[key] = o;
            };
            Sessions.prototype.unregisterDataCache = function (key) {
                delete this.registereddatacaches[key];
            };
            Sessions.prototype.deleteAllLocalDataAsync = function (scriptguid) {
                var localtask = Slot.deleteSessionFileAsync(this, this.getLocalSessionDescriptor());
                if (this.current_nodeserver) {
                    return TDev.Promise.join([
                        Slot.deleteSessionFileAsync(this, this.getNodeSessionDescriptor("")),
                        localtask
                    ]);
                }
                else {
                    var userid = TDev.Cloud.getUserId();
                    if (!userid || userid !== this.current_userid || scriptguid !== this.current_scriptguid)
                        return localtask;
                    else {
                        var justmesession = this.getJustMeSessionDescriptor();
                        var everyonesession = this.getEveryoneSessionDescriptor();
                        return TDev.Promise.join([
                            Slot.deleteSessionFileAsync(this, justmesession),
                            Slot.deleteSessionFileAsync(this, everyonesession),
                            localtask
                        ]);
                    }
                }
            };
            Sessions.prototype.createCustomSessionAsync = function (title, type) {
                TDev.Util.assert(!!this.current_userid, "must be signed in to create a cloud session");
                TDev.Util.assert(!this.current_nodeserver, "cannot create sessions for cloud library");
                var desc = {};
                var letter = (permit_all_scripts ? "a" : "s");
                var scripth = (permit_all_scripts ? "" : scripthash(this.current_scriptauthor, this.current_scriptname));
                var guid = letterify(TDev.Util.guidGen());
                var id;
                var permit_all_scripts = false;
                if (type === "shareable") {
                    desc.servername = this.current_userid + "0cw" + letter + scripth + guid;
                    desc.permissions = publicpermission(permit_all_scripts ? "" : this.current_script);
                }
                else if (type === "broadcast") {
                    desc.servername = this.current_userid + "0cr" + letter + scripth + guid;
                    desc.permissions = broadcastpermission(permit_all_scripts ? "" : this.current_script);
                }
                else {
                    desc.servername = this.current_userid + "0cp" + letter + scripth + guid;
                    desc.permissions = privatepermission(permit_all_scripts ? "" : this.current_script);
                }
                desc.localname = desc.servername;
                desc.readonly = false;
                desc.user = this.current_userid;
                desc.title = title;
                desc.nodeserver = "";
                desc.script = this.current_script;
                return Slot.createSessionFileAsync(this, desc).then(function (s) { return s.getCloudSession(); });
            };
            return Sessions;
        })();
        Revisions.Sessions = Sessions;
        (function (CloudOperationType) {
            CloudOperationType[CloudOperationType["UNKNOWN"] = 0] = "UNKNOWN";
            CloudOperationType[CloudOperationType["RPC"] = 1] = "RPC";
            CloudOperationType[CloudOperationType["OFFLINE"] = 2] = "OFFLINE";
        })(Revisions.CloudOperationType || (Revisions.CloudOperationType = {}));
        var CloudOperationType = Revisions.CloudOperationType;
    })(Revisions = TDev.Revisions || (TDev.Revisions = {}));
    var WebSocketWrapper = (function () {
        function WebSocketWrapper(server, request, socket) {
            this.server = server;
            this.request = request;
            this.socket = socket;
        }
        WebSocketWrapper.prototype.origin = function () {
            return this.request.headers['origin'];
        };
        WebSocketWrapper.prototype.path = function () {
            return this.request.url;
        };
        WebSocketWrapper.prototype.accept = function () {
            var _this = this;
            this.socket.tdWrapper = this;
            this.server._conns.push(this.socket);
            var remove = function () {
                var conns = _this.server._conns;
                var idx = conns.indexOf(_this.socket);
                if (idx >= 0)
                    conns.splice(idx, 1);
            };
            this.onClose(remove);
            this.onError(remove);
            return this.socket;
        };
        WebSocketWrapper.prototype.reject = function () {
            this.socket.close();
        };
        WebSocketWrapper.prototype.remoteAddress = function () {
            return this.socket.remoteAddress;
        };
        WebSocketWrapper.prototype.onMessage = function (h) {
            this.socket.addEventListener("message", function (msg) { return typeof msg.data == "string" ? h(msg.data, null) : h(null, msg.data); }, false);
        };
        WebSocketWrapper.prototype.onClose = function (h) {
            this.socket.addEventListener("close", function (ev) { return h(ev.code, ev.reason); }, false);
        };
        WebSocketWrapper.prototype.onError = function (h) {
            this.socket.addEventListener("error", h, false);
        };
        WebSocketWrapper.prototype.mkTdWebSocket = function (rt) {
            if (!this.socket)
                this.accept();
            var w = new TDev.RT.WebSocket_(this.socket, rt);
            this.onMessage(function (str, buff) {
                var data = str;
                if (buff)
                    data = TDev.RT.Buffer.fromTypedArray(buff);
                w.receiveMessage(TDev.RT.WebSocketMessage.mk(data));
            });
            this.onError(function (ev) {
                var msg = ev.message || (ev + "");
                TDev.RT.App.logEvent(TDev.RT.App.DEBUG, "ws", "error: " + msg, undefined);
                w.receiveMessage(TDev.RT.WebSocketMessage.mkError(msg));
            });
            return w;
        };
        return WebSocketWrapper;
    })();
    TDev.WebSocketWrapper = WebSocketWrapper;
    var WebSocketServerWrapper = (function () {
        function WebSocketServerWrapper(WebSocketModule) {
            this.WebSocketModule = WebSocketModule;
            this.handlers = [];
            this._conns = [];
        }
        WebSocketServerWrapper.prototype.upgradeCallback = function (request, socket, body) {
            var _this = this;
            var ws = this.WebSocketModule;
            if (ws.isWebSocket(request)) {
                var conn = new ws(request, socket, body);
                var r = new WebSocketWrapper(this, request, conn);
                var nextOne = function (idx) {
                    if (!_this.handlers[idx])
                        r.reject();
                    else
                        _this.handlers[idx](r, function () { return nextOne(idx + 1); });
                };
                nextOne(0);
            }
        };
        WebSocketServerWrapper.prototype.closeConnections = function () {
            this._conns.forEach(function (c) { return c.close(); });
            this._conns = [];
        };
        WebSocketServerWrapper.prototype.addHandler = function (h) {
            this.handlers.push(h);
        };
        WebSocketServerWrapper.prototype.connections = function () {
            return this._conns;
        };
        return WebSocketServerWrapper;
    })();
    TDev.WebSocketServerWrapper = WebSocketServerWrapper;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Revisions;
    (function (Revisions) {
        (function (StatusType) {
            StatusType[StatusType["Error"] = 0] = "Error";
            StatusType[StatusType["Warning"] = 1] = "Warning";
            StatusType[StatusType["Ok"] = 2] = "Ok";
        })(Revisions.StatusType || (Revisions.StatusType = {}));
        var StatusType = Revisions.StatusType;
        (function (EncodingMode) {
            EncodingMode[EncodingMode["CLIENT_LAYER_TO_DISK"] = 0] = "CLIENT_LAYER_TO_DISK";
            EncodingMode[EncodingMode["CLIENT_BASE_TO_DISK"] = 1] = "CLIENT_BASE_TO_DISK";
            EncodingMode[EncodingMode["CLIENT_LAYER_TO_SERVER"] = 2] = "CLIENT_LAYER_TO_SERVER";
            EncodingMode[EncodingMode["SERVER_BASE_TO_DISK"] = 3] = "SERVER_BASE_TO_DISK";
            EncodingMode[EncodingMode["SERVER_LAYER_TO_CLIENT"] = 4] = "SERVER_LAYER_TO_CLIENT";
            EncodingMode[EncodingMode["SERVER_UPDATES_TO_CLIENT"] = 5] = "SERVER_UPDATES_TO_CLIENT";
            EncodingMode[EncodingMode["TRACE_LOAD"] = 6] = "TRACE_LOAD";
        })(Revisions.EncodingMode || (Revisions.EncodingMode = {}));
        var EncodingMode = Revisions.EncodingMode;
        var Layer = (function () {
            function Layer(session, name, data, clientround, serverround, grounded) {
                if (grounded === void 0) { grounded = false; }
                this.delcount = 0;
                this.session = session;
                this.name = name;
                this.data = data;
                if (clientround !== undefined)
                    this.clientround = clientround;
                if (serverround !== undefined)
                    this.serverround = serverround;
                this.grounded = grounded;
            }
            Layer.prototype.hasData = function () {
                return ((this.data && this.data.length !== 0) || (this.cloudOperations && this.cloudOperations.length !== 0) || this.grounded || this.clientrounds);
            };
            Layer.prototype.clear = function () {
                var _this = this;
                var changes = false;
                this.data.forEach(function (d) {
                    if (d.removeOperation(_this) !== undefined)
                        changes = true;
                });
                return changes;
                this.grounded = false;
            };
            Layer.prototype.cleanIfNeeded = function (limit) {
                var _this = this;
                if (this.delcount > limit) {
                    this.data = this.data.filter(function (d) { return (d.getOperation(_this.name) !== undefined); });
                    this.delcount = 0;
                }
            };
            Layer.prototype.invalidate_all = function () {
                this.data.forEach(function (d) {
                    if (d instanceof Item)
                        d.invalidate(true);
                    else
                        d.invalidate(false);
                });
            };
            Layer.prototype.CommitCloudOperation = function (op) {
                if (!this.cloudOperations) {
                    this.cloudOperations = [op];
                }
                else {
                    this.cloudOperations.push(op);
                }
            };
            Layer.prototype.mergeCloudOperations = function (layer) {
                if (!layer.cloudOperations)
                    return;
                if (!this.cloudOperations) {
                    this.cloudOperations = [];
                }
                this.cloudOperations = this.cloudOperations.concat(layer.cloudOperations);
            };
            Layer.prototype.removeCloudOperations = function () {
                delete this.cloudOperations;
            };
            return Layer;
        })();
        Revisions.Layer = Layer;
        var Fence = (function () {
            function Fence(continuation, round, exclusive) {
                this.continuation = continuation;
                this.round = round;
                this.exclusive = exclusive;
            }
            return Fence;
        })();
        var Datum = (function () {
            function Datum() {
                this.fromCloudOp = TDev.Runtime.theRuntime && TDev.Runtime.theRuntime.inCloudCall;
                this.ops = {};
            }
            Datum.prototype.invalidate = function (deleted) {
                delete this.cached;
                if (deleted) {
                    this.deleted = true;
                    this.unlink();
                }
            };
            Datum.prototype.get_op = function (layer) {
                return this.ops[layer];
            };
            Datum.prototype.set_op = function (layer, op) {
                this.ops[layer] = op;
            };
            Datum.prototype.del_op = function (layer) {
                delete this.ops[layer];
            };
            Datum.prototype.all_ops = function () {
                return Object.keys(this.ops);
            };
            Datum.prototype.getOperation = function (lname) {
                return this.get_op(lname);
            };
            Datum.prototype.recordOperation = function (l, op) {
                var val = this.get_op(l.name);
                var result = this.collapse(val, op, l.grounded);
                if (result !== undefined) {
                    this.set_op(l.name, result);
                    if (val === undefined)
                        l.data.push(this);
                }
                else {
                    if (val !== undefined) {
                        this.del_op(l.name);
                        l.delcount += 1;
                    }
                }
                return (val !== result);
            };
            Datum.prototype.removeOperation = function (l) {
                var val = this.get_op(l.name);
                if (val !== undefined) {
                    this.del_op(l.name);
                    l.delcount += 1;
                }
                return val;
            };
            Datum.prototype.compute_current = function () {
                var cur = this.getOperation("B");
                if (!this.session.readonly) {
                    var baseround = this.session.get_layer("B").clientround;
                    var localround = this.session.localround;
                    for (var i = baseround + 1; i < localround; i++) {
                        var datalayer = this.session.get_layer("D" + i);
                        cur = (datalayer.grounded) ? this.getOperation("D" + i) : this.collapse(cur, this.getOperation("D" + i), true);
                    }
                    var locallayer = this.session.get_layer("D" + localround);
                    cur = (locallayer && locallayer.grounded) ? this.getOperation("D" + localround) : this.collapse(cur, this.getOperation("D" + localround), true);
                    var tlayer = this.session.get_layer("T");
                    if (tlayer)
                        cur = (tlayer.grounded) ? this.getOperation("T") : this.collapse(cur, this.getOperation("T"), true);
                }
                TDev.Util.check(!TDev.dbg || (this.cached === undefined) || (this.cached !== null && this.cached === cur) || (this.cached === null && cur === undefined));
                this.cached = (cur === undefined) ? null : cur;
                return cur;
            };
            Datum.prototype.has_deleted_dependencies = function () {
                var _this = this;
                var deleted = false;
                this.ukeys.forEach(function (uid) {
                    var item = _this.session.get_item(uid);
                    if (!item || _this.session.user_is_datum_deleted(item))
                        deleted = true;
                });
                TDev.Util.assert(!deleted || this.deleted);
                return deleted;
            };
            Datum.prototype.linkDeps = function () {
                var _this = this;
                this.ukeys.forEach(function (l) {
                    var item = _this.session.get_item(l);
                    if (!(item && item.addDependency(_this)))
                        _this.deleted = true;
                });
            };
            Datum.prototype.collapse = function (first, second, grounded) {
            };
            Datum.prototype.target = function () {
                return "";
            };
            Datum.prototype.unlink = function () {
            };
            return Datum;
        })();
        Revisions.Datum = Datum;
        var Item = (function (_super) {
            __extends(Item, _super);
            function Item() {
                _super.apply(this, arguments);
                this.deps = {};
            }
            Item.prototype.target = function () {
                return this.uid;
            };
            Item.prototype.unlink = function () {
                if (this.backlink) {
                    this.backlink.unlink();
                    delete this.backlink;
                }
            };
            Item.prototype.collapse = function (first, second, grounded) {
                if (first === undefined)
                    return second;
                if (second === undefined)
                    return first;
                if (first === "D") {
                    this.session.assertConsistency(second === "D");
                    return grounded ? undefined : "D";
                }
                TDev.Util.assert(first[0] === "C");
                if (second !== "D")
                    this.session.assertConsistency(false, "collapse uid=" + this.uid + " def=" + (this.backlink && this.backlink.parent && this.backlink.parent.cloudtype) + " second=" + second);
                return undefined;
            };
            Item.prototype.recordCreation = function (l, serveritemcount) {
                if (serveritemcount === undefined)
                    this.recordOperation(l, "C");
                else {
                    this.recordOperation(l, "C" + serveritemcount);
                }
            };
            Item.prototype.recordDeletion = function (l) {
                this.recordOperation(l, "D");
            };
            Item.prototype.recordOperation = function (l, op) {
                if (op === "D")
                    this.removeRedundantOps(l);
                return _super.prototype.recordOperation.call(this, l, op);
            };
            Item.prototype.compareTo = function (other) {
                var a = this.compute_current();
                if (a === "C") {
                    var b = other.compute_current();
                    if (b === "C")
                        return Number(this.uid) - Number(other.uid);
                    else
                        return 1;
                }
                else {
                    var b = other.compute_current();
                    if (b === "C")
                        return -1;
                    else
                        return Number(a.substr(1)) - Number(b.substr(1));
                }
            };
            Item.prototype.addDependency = function (d) {
                this.deps["$" + d.target()] = d;
                return !this.deleted;
            };
            Item.prototype.removeDependency = function (d) {
                delete this.deps["$" + d.target()];
            };
            Item.prototype.invalidate = function (deleted) {
                _super.prototype.invalidate.call(this, deleted);
                for (var p in this.deps)
                    if (this.deps.hasOwnProperty(p) && p[0] === "$")
                        this.deps[p].invalidate(deleted);
                this.session.remove_item_from_index(this);
            };
            Item.prototype.removeRedundantOps = function (layer) {
                for (var p in this.deps)
                    if (this.deps.hasOwnProperty(p) && p[0] === "$") {
                        var datum = this.deps[p];
                        datum.removeOperation(layer);
                        if (datum instanceof Item)
                            datum.removeRedundantOps(layer);
                    }
            };
            return Item;
        })(Datum);
        Revisions.Item = Item;
        var Entry = (function (_super) {
            __extends(Entry, _super);
            function Entry() {
                _super.apply(this, arguments);
            }
            Entry.prototype.target = function () {
                return ClientSession.MakeModTarget(this.definition, this.ukeys, this.lkeys);
            };
            return Entry;
        })(Datum);
        Revisions.Entry = Entry;
        var LVal = (function (_super) {
            __extends(LVal, _super);
            function LVal() {
                _super.apply(this, arguments);
            }
            LVal.prototype.target = function () {
                return ClientSession.MakeModTarget(this.definition, this.ukeys, this.lkeys);
            };
            LVal.prototype.parseDefinition = function () {
                var p = new Parser(this.definition, 0);
                this.name = p.ParseDefinitionString();
                TDev.Util.assert(p.text[p.pos] === ",");
                p.pos += 1;
                this.codomain = p.ParseDefinitionString();
                TDev.Util.assert(p.text[p.pos] === "[");
                this.indexdomain = p.text.slice(p.pos + 1, p.text.length - 1);
            };
            LVal.prototype.collapse = function (first, second, grounded) {
                if (second === undefined)
                    return first;
                else if (first === undefined) {
                    if (this.codomain === "double" || this.codomain === "long") {
                        if (grounded) {
                            if (second.lastIndexOf("A", 0) === 0)
                                second = second.slice(1);
                            return (second === "0") ? undefined : second;
                        }
                        else
                            return second === "A0" ? undefined : second;
                    }
                    else if (this.codomain === "ast") {
                        return second;
                    }
                    else {
                        if (second.lastIndexOf("^?", 0) !== 0)
                            return (grounded && !second) ? undefined : second;
                        var cond = second.substring(2);
                        if (cond === "")
                            return undefined;
                        if (grounded)
                            return (cond.charAt(0) === "^") ? ("^!" + cond) : cond;
                        return second;
                    }
                }
                else if (this.codomain === "double" || this.codomain === "long") {
                    if (second.charAt(0) !== 'A')
                        return (grounded && second === "0") ? undefined : second;
                    var secondval = Number(second.slice(1));
                    var relative = false;
                    var firstval = Number(first);
                    if (isNaN(firstval)) {
                        TDev.Util.assert(first.charAt(0) === 'A');
                        firstval = Number(first.slice(1));
                        relative = true;
                        TDev.Util.assert(!grounded);
                    }
                    var sum = (firstval + secondval);
                    if (sum !== 0 || (!relative && !grounded))
                        return relative ? ("A" + sum) : sum.toString();
                    else
                        return undefined;
                }
                else if (this.codomain === "ast") {
                    return second;
                }
                else {
                    if (second.lastIndexOf("^?", 0) !== 0) {
                        return (grounded && !second) ? undefined : second;
                    }
                    else {
                        if (first.lastIndexOf("^?", 0) !== 0) {
                            if (first === "" || first === "^!") {
                                var cond = second.substring(2);
                                var r = (cond.charAt(0) === "^") ? ("^!" + cond) : cond;
                                return (grounded && !r) ? undefined : r;
                            }
                            else {
                                return first;
                            }
                        }
                        else {
                            if (first.length === 2)
                                return (grounded && !second) ? undefined : second;
                            else
                                return first;
                        }
                    }
                }
                TDev.Util.oops("missing case in LVal.collapse");
            };
            return LVal;
        })(Datum);
        Revisions.LVal = LVal;
        var ClientSession = (function () {
            function ClientSession(servername, localname, user) {
                this.servername = servername;
                this.localname = localname;
                this.user = user;
                this.sendCloudOperations = false;
                this.concatIdToItem = false;
                this.includeKeysInStatus = false;
                this.acceptsUpdates = false;
                this.requiresAuth = true;
                this.trace_save_and_load = false;
                this.trace_incoming_packets = false;
                this.trace_saving = false;
                this.membernumber = -1;
                this.disambiguator = "";
                this.enable_sync = undefined;
                this.serveritemcount = 0;
                this.userdata = {};
                this.localround = 1;
                this.uidcount = 0;
                this.sendinterval = 250;
                this.pendingroundlimit = 5;
                this.scrublimit = 1000;
                this.connectionretrydelay = 20000;
                this.qcount = 0;
                this.last_S_save = TDev.Promise.as();
                this.last_C_save = TDev.Promise.as();
                this.ring_doorbell_when_done = false;
                this.CLstate_needsave = false;
                this.Sstate_needsave = false;
                this.previewround = 0;
                this.percentfull = 0;
                this.presence = [];
                this.dochannelcompression = false;
                this.statuschanges = false;
                this.fences = [];
                this.doorbell = function () {
                };
                this.initialize_data();
                this.loaded = (localname === undefined);
                if (this.user === undefined)
                    this.user = "";
                TDev.Util.assert(!!servername || !!localname);
            }
            ClientSession.prototype.samesession = function (other) {
                return (this.servername === other.servername && this.localname === other.localname);
            };
            ClientSession.prototype.getMemberNumber = function () {
                return this.membernumber;
            };
            ClientSession.prototype.key_sessionlist = function () {
                return "%";
            };
            ClientSession.prototype.key_Sstate = function () {
                return this.localname + "/S";
            };
            ClientSession.prototype.key_Cstate = function () {
                return this.localname + "/C";
            };
            ClientSession.prototype.key_layer = function (layer) {
                return this.localname + "/" + layer;
            };
            ClientSession.prototype.S_toJSONstring = function () {
                return JSON.stringify({
                    servername: this.servername,
                    localname: this.localname,
                    description: this.title,
                    membernumber: this.membernumber,
                    disambiguator: this.disambiguator,
                    enable_sync: this.enable_sync,
                    serveritemcount: this.serveritemcount,
                    permissions: this.permissions,
                    userdata: this.userdata,
                });
            };
            ClientSession.prototype.S_fromJSONstring = function (s) {
                var json = JSON.parse(s);
                TDev.Util.assert(this.servername === json.servername);
                TDev.Util.assert(this.localname === json.localname);
                if (!this.title && json.description)
                    this.title = json.description;
                this.membernumber = json.membernumber;
                this.disambiguator = json.disambiguator;
                if (this.enable_sync === undefined)
                    this.enable_sync = json.enable_sync;
                this.serveritemcount = json.serveritemcount;
                this.permissions = json.permissions;
                this.userdata = json.userdata || {};
            };
            ClientSession.prototype.C_toJSONstring = function () {
                return JSON.stringify({
                    uidcount: this.uidcount,
                    localround: this.localround,
                });
            };
            ClientSession.prototype.C_fromJSONstring = function (s) {
                var json = JSON.parse(s);
                this.uidcount = json.uidcount;
                this.localround = json.localround;
            };
            ClientSession.prototype.user_specify_ast_encoding = function (s) {
                this.astencoding = s;
            };
            ClientSession.prototype.assertConsistency = function (cond, message) {
                if (!cond) {
                    this.faulted = true;
                    this.statuschanges = true;
                    TDev.Util.check(cond, "local cache inconsistent with server");
                }
            };
            ClientSession.prototype.user_get_lval = function (definition, ukeys, lkeys) {
                var t = ClientSession.MakeModTarget(definition, ukeys, lkeys);
                var lval = this.get_lval(t);
                if (!lval) {
                    lval = new LVal();
                    lval.session = this;
                    lval.definition = definition;
                    lval.ukeys = ukeys;
                    lval.lkeys = lkeys;
                    lval.parseDefinition();
                    lval.entry = this.user_get_entry(lval.indexdomain, ukeys, lkeys);
                    lval.linkDeps();
                    this.add_lval(lval);
                    this.add_lval_to_index(lval);
                }
                else {
                    this.assertConsistency(lval.definition === definition);
                    this.assertConsistency(ukeys.length === lval.ukeys.length);
                    for (var i = 0; i < ukeys.length; i++)
                        this.assertConsistency(ukeys[i] === lval.ukeys[i]);
                    this.assertConsistency(lkeys.length === lval.lkeys.length);
                    for (var i = 0; i < lkeys.length; i++)
                        this.assertConsistency(lkeys[i] === lval.lkeys[i]);
                }
                return lval;
            };
            ClientSession.prototype.user_get_entry = function (definition, ukeys, lkeys) {
                var k = ClientSession.MakeModTarget(definition, ukeys, lkeys);
                var entry = this.get_entry(k);
                if (!entry) {
                    entry = new Entry();
                    entry.session = this;
                    entry.definition = definition;
                    entry.ukeys = ukeys;
                    entry.lkeys = lkeys;
                    entry.linkDeps();
                    this.add_entry(entry);
                }
                else {
                    this.assertConsistency(entry.definition === definition);
                    this.assertConsistency(ukeys.length === entry.ukeys.length);
                    for (var i = 0; i < ukeys.length; i++)
                        this.assertConsistency(ukeys[i] === entry.ukeys[i]);
                    this.assertConsistency(lkeys.length === entry.lkeys.length);
                    for (var i = 0; i < lkeys.length; i++)
                        this.assertConsistency(lkeys[i] === entry.lkeys[i]);
                }
                return entry;
            };
            ClientSession.prototype.user_get_entries_in_indexdomain = function (indexdomain) {
                var _this = this;
                var entries = new Array();
                var qcount = this.qcount;
                this.qcount += 1;
                this.get_lvals_for_indexdomain(indexdomain).forEach(function (lval) {
                    if (!_this.user_is_defaultvalue(lval)) {
                        var e = lval.entry;
                        if (e.qcount !== qcount) {
                            e.qcount = qcount;
                            entries.push(lval.entry);
                            e.lvals = new Array();
                        }
                        e.lvals.push(lval);
                    }
                });
                return entries;
            };
            ClientSession.prototype.user_modify_lval = function (lval, op) {
                if (this.readonly)
                    return;
                var deleted = this.user_is_datum_deleted(lval);
                if (!deleted) {
                    lval.invalidate(false);
                    if (op !== undefined) {
                        var transactionlayer = this.get_layer("T") || this.create_layer("T");
                        lval.recordOperation(transactionlayer, op);
                    }
                }
            };
            ClientSession.prototype.user_get_items_in_domain = function (domain) {
                var _this = this;
                var base = this.get_items_in_domain(domain);
                return base.filter(function (i) { return !_this.user_is_datum_deleted(i); });
            };
            ClientSession.prototype.user_get_item = function (uid) {
                var k = this.get_item(uid);
                if (k === undefined) {
                    var pos = uid.indexOf('.');
                    if (pos != -1 && uid.substr(0, pos) === this.membernumber.toString())
                        k = this.get_item(uid.substr(pos + 1));
                }
                return k;
            };
            ClientSession.prototype.user_create_tombstone = function (definition, uid, ukeys, lkeys) {
                var k = new Item();
                k.session = this;
                k.definition = definition;
                k.uid = uid;
                k.ukeys = ukeys;
                k.lkeys = lkeys;
                k.deleted = true;
                return k;
            };
            ClientSession.prototype.user_create_item = function (definition, ukeys, lkeys) {
                var k = new Item();
                k.session = this;
                k.definition = definition;
                TDev.Util.assert(this.loaded || this.faulted);
                this.uidcount += 1;
                k.uid = (this.concatIdToItem ? (this.membernumber + ".") : "") + this.uidcount.toString();
                k.ukeys = ukeys;
                k.lkeys = lkeys;
                this.assertConsistency(!this.get_item(k.uid));
                if (this.readonly) {
                    k.deleted = true;
                    return k;
                }
                k.linkDeps();
                this.add_item(k);
                if (!k.has_deleted_dependencies()) {
                    var transactionlayer = this.get_layer("T") || this.create_layer("T");
                    k.recordCreation(transactionlayer);
                    this.add_item_to_index(k);
                }
                return k;
            };
            ClientSession.prototype.user_delete_item = function (item) {
                if (this.readonly)
                    return;
                var deleted = this.user_is_datum_deleted(item);
                if (!deleted) {
                    var transactionlayer = this.get_layer("T") || this.create_layer("T");
                    item.recordDeletion(transactionlayer);
                    item.invalidate(true);
                }
            };
            ClientSession.prototype.user_clear_all = function () {
                if (this.readonly)
                    return;
                var baselayer = this.get_layer("B");
                baselayer.invalidate_all();
                var baseround = baselayer.clientround;
                var localround = this.localround;
                for (var i = baseround + 1; i <= localround; i++) {
                    var datalayer = this.get_layer("D" + i);
                    datalayer && datalayer.invalidate_all();
                }
                var transactionlayer = this.get_layer("T");
                transactionlayer && transactionlayer.invalidate_all();
                this.delete_layer("T", false);
                var transactionlayer = this.create_layer("T");
                transactionlayer.grounded = true;
            };
            ClientSession.prototype.log = function (msg) {
                TDev.Util.log("{0}", this.logmsg(msg));
            };
            ClientSession.prototype.logmsg = function (msg) {
                return "[" + (this.servername || this.localname) + "] " + msg;
            };
            ClientSession.prototype.user_is_datum_deleted = function (datum) {
                if (datum.has_deleted_dependencies())
                    return true;
                var deleted = false;
                if (datum instanceof Item) {
                    var s = datum.compute_current();
                    deleted = (!s || s[0] !== "C");
                }
                TDev.Util.assert(!TDev.dbg || deleted === !!datum.deleted);
                return deleted;
            };
            ClientSession.prototype.user_is_datum_confirmed = function (datum) {
                var ops = datum.all_ops();
                if (this.servername)
                    return !ops.some(function (s) { return (s[0] === "D" || s[0] === "T"); });
                else
                    return !ops.some(function (s) { return s != "D1"; });
            };
            ClientSession.prototype.user_get_value = function (lval) {
                var s;
                if (!lval.has_deleted_dependencies())
                    s = lval.compute_current();
                return s;
            };
            ClientSession.prototype.user_is_defaultvalue = function (lval) {
                if (lval.has_deleted_dependencies())
                    return true;
                var s = lval.compute_current();
                if (s === undefined)
                    return true;
                if (lval.codomain === "long" || lval.codomain === "double")
                    return (s === "A0" || s === "0");
                else if (lval.codomain === "string")
                    return (s === "" || s === "^" || s === "^?" || s === "^!");
                else
                    return s === "";
            };
            ClientSession.prototype.get_datum = function (target) {
                return this.data[target];
            };
            ClientSession.prototype.get_item = function (uid) {
                return this.data[uid];
            };
            ClientSession.prototype.get_lval = function (target) {
                return this.data[target];
            };
            ClientSession.prototype.get_entry = function (target) {
                return this.data[target];
            };
            ClientSession.prototype.add_item = function (item) {
                this.data[item.uid] = item;
            };
            ClientSession.prototype.add_lval = function (lval) {
                this.data[lval.target()] = lval;
            };
            ClientSession.prototype.add_entry = function (entry) {
                this.data[entry.target()] = entry;
            };
            ClientSession.prototype.get_items_in_domain = function (domain) {
                var obj = this.domains[domain];
                return obj ? TDev.Util.values(obj) : [];
            };
            ClientSession.prototype.add_item_to_index = function (item) {
                var obj = this.domains[item.definition];
                if (!obj)
                    obj = this.domains[item.definition] = {};
                obj[item.target()] = item;
            };
            ClientSession.prototype.remove_item_from_index = function (item) {
                var obj = this.domains[item.definition];
                if (obj)
                    delete obj[item.target()];
            };
            ClientSession.prototype.get_lvals_for_indexdomain = function (indexdomain) {
                var obj = this.properties[indexdomain];
                if (obj)
                    return TDev.Util.values(obj);
                else
                    return [];
            };
            ClientSession.prototype.add_lval_to_index = function (lval) {
                var obj = this.properties[lval.indexdomain];
                if (!obj)
                    obj = this.properties[lval.indexdomain] = {};
                obj[lval.target()] = lval;
            };
            ClientSession.prototype.remove_lval_from_index = function (lval) {
                var obj = this.properties[lval.indexdomain];
                if (obj)
                    delete obj[lval.target()];
            };
            ClientSession.prototype.user_unlink = function () {
                for (var p in this.data) {
                    var o = this.data[p];
                    if (o.backlink) {
                        o.backlink.unlink();
                        o.backlink = undefined;
                    }
                }
            };
            ClientSession.prototype.checkinvariants = function () {
                var _this = this;
                return;
                this.all_layers().forEach(function (l) {
                    l.data.forEach(function (d) {
                        TDev.Util.assert(_this.get_datum(d.target()) === d);
                    });
                });
            };
            ClientSession.prototype.user_dump_stable_data = function (assert) {
                var _this = this;
                var result = new Array();
                assert(this.loaded);
                this.checkinvariants();
                var count1 = 0;
                for (var x in TDev.Util.values(this.data)) {
                    if (x instanceof Datum) {
                        var ops = x.all_ops();
                        if (ops.length !== 0) {
                            assert(ops.length === 1);
                            assert(ops[0] === "B");
                            count1 += 1;
                        }
                    }
                }
                var basedata = this.get_layer("B").data;
                var count2 = 0;
                basedata.forEach(function (d) {
                    var op = d.getOperation("B");
                    var p;
                    if (op !== undefined) {
                        if (d instanceof Item) {
                            if (op[0] === "C")
                                p = Packet.MakeNewPacket(d.definition, d.uid, d.ukeys, d.lkeys, (op.length === 1) ? undefined : Number(op.substr(1)));
                            else {
                                TDev.Util.assert(op === "D");
                                p = Packet.MakeDelPacket(d.uid);
                            }
                        }
                        else if (d instanceof LVal && (op !== undefined)) {
                            p = Packet.MakeModPacket(d.definition, op, d.ukeys, d.lkeys, _this.astencoding);
                        }
                        result.push(p.toString());
                        count2 += 1;
                    }
                });
                assert(count1 === count2);
                return result;
            };
            ClientSession.prototype.initialize_data = function () {
                this.data = {};
                this.domains = {};
                this.properties = {};
                this.layers = {
                    "B": new Layer(this, "B", new Array(), 0, 0, true)
                };
            };
            ClientSession.prototype.create_layer = function (name, clientround, serverround) {
                TDev.Util.assert(!this.layers[name]);
                var l = new Layer(this, name, new Array(), clientround, serverround, false);
                this.layers[name] = l;
                if (clientround === 1 && serverround === undefined && this.servername === "")
                    l.grounded = true;
                return l;
            };
            ClientSession.prototype.get_layer = function (s) {
                return this.layers[s];
            };
            ClientSession.prototype.collapse_layers = function (firstname, secondname, keepsecond) {
                var _this = this;
                var first = this.layers[firstname];
                var second = this.layers[secondname];
                TDev.Util.assert(first && second);
                var changed = false;
                var observable = (firstname === "B" && secondname === "S");
                if (second.grounded) {
                    changed = first.clear();
                    if (observable)
                        first.invalidate_all();
                }
                if ((first.serverround === undefined) || first.serverround < second.serverround) {
                    changed = true;
                    first.serverround = second.serverround;
                }
                if ((first.clientround === undefined) || first.clientround < second.clientround) {
                    changed = true;
                    first.clientround = second.clientround;
                }
                second.data.forEach(function (d) {
                    var secondop = d.getOperation(second.name);
                    if (!keepsecond) {
                        d.removeOperation(second);
                    }
                    if (d.recordOperation(first, secondop)) {
                        changed = true;
                        if (observable) {
                            if (d instanceof Item) {
                                var item = d;
                                d.invalidate(secondop === "D");
                                if (secondop && secondop[0] === "C")
                                    _this.add_item_to_index(item);
                            }
                            else {
                                TDev.Util.assert(d instanceof LVal);
                                d.invalidate(false);
                                if (secondop !== undefined)
                                    _this.add_lval_to_index(d);
                            }
                        }
                    }
                });
                if (second.grounded)
                    first.grounded = true;
                if (!keepsecond) {
                    delete this.layers[second.name];
                }
                return changed;
            };
            ClientSession.prototype.delete_layer = function (s, assertexists) {
                var l = this.layers[s];
                if (assertexists)
                    TDev.Util.assert(l);
                else if (l === undefined)
                    return false;
                var changes = l.clear();
                delete this.layers[s];
                return changes;
            };
            ClientSession.prototype.all_layers = function () {
                return TDev.Util.values(this.layers);
            };
            ClientSession.prototype.logLayers = function () {
                var layers = this.all_layers();
                for (var i = 0; i < layers.length; i++) {
                    var layer = layers[i];
                    this.log(TDev.Util.fmt("Layer {0} (s:{1}/c:{2})", layer.name, layer.serverround, layer.clientround));
                }
            };
            ClientSession.prototype.unsent_changes = function () {
                var locallayer = this.get_layer("D" + this.localround);
                return locallayer && locallayer.hasData();
            };
            ClientSession.prototype.dependency_is_gone = function (d, layer) {
                var _this = this;
                if (d.ukeys.some(function (uid) { return _this.uid_is_gone(uid, layer); })) {
                    d.removeOperation(layer);
                    return true;
                }
                return false;
            };
            ClientSession.prototype.item_is_gone = function (i, layer) {
                var op = i.getOperation(layer.name);
                if (op === undefined)
                    return true;
                if (op === "D") {
                    i.removeOperation(layer);
                    return true;
                }
                return this.dependency_is_gone(i, layer);
            };
            ClientSession.prototype.uid_is_gone = function (uid, layer) {
                var i = this.get_item(uid);
                if (!i)
                    return true;
                return this.item_is_gone(i, layer);
            };
            ClientSession.prototype.forEachValidDatum = function (layer, fn) {
                var _this = this;
                layer.data.forEach(function (d) {
                    var op = d.getOperation(layer.name);
                    if (op === undefined || (layer.grounded && (d instanceof Item && _this.item_is_gone(d, layer) || _this.dependency_is_gone(d, layer))))
                        return;
                    fn(d, op);
                });
            };
            ClientSession.prototype.EncodeLayer = function (layer, mode, socket) {
                var _this = this;
                var includeCloudEffects = (mode != 2 /* CLIENT_LAYER_TO_SERVER */ && mode != 5 /* SERVER_UPDATES_TO_CLIENT */);
                var withClientRounds = (mode == 3 /* SERVER_BASE_TO_DISK */);
                var packets = new Array();
                var comp = socket && socket.channelCompressor;
                if (layer.grounded) {
                    packets.push(Packet.MakeCldStarPacket(comp));
                }
                layer.data.forEach(function (d) {
                    if (mode == 4 /* SERVER_LAYER_TO_CLIENT */) {
                        if (!socket.keyset.contains_and_clr(d.target()))
                            return;
                    }
                    else if (mode == 5 /* SERVER_UPDATES_TO_CLIENT */) {
                        if (!socket.keyset.is_unsent_and_clr(d.target()))
                            return;
                    }
                    var op = d.getOperation(layer.name);
                    if (op !== undefined) {
                        if (layer.grounded && (d instanceof Item && _this.item_is_gone(d, layer) || _this.dependency_is_gone(d, layer))) {
                        }
                        else {
                            if (d.fromCloudOp && !includeCloudEffects)
                                return;
                            var p;
                            if (d instanceof Item) {
                                if (op[0] === "C") {
                                    p = Packet.MakeNewPacket(d.definition, d.uid, d.ukeys, d.lkeys, (op.length == 1) ? undefined : Number(op.substr(1)), comp);
                                }
                                else {
                                    _this.assertConsistency(op === "D" && !layer.grounded);
                                    p = Packet.MakeDelPacket(d.uid);
                                }
                            }
                            else if (d instanceof LVal) {
                                p = Packet.MakeModPacket(d.definition, op, d.ukeys, d.lkeys, _this.astencoding, comp);
                            }
                            p.fromCloudOp = d.fromCloudOp;
                            packets.push(p);
                        }
                    }
                });
                if (this.sendCloudOperations && layer.cloudOperations !== undefined) {
                    layer.cloudOperations.forEach(function (op) {
                        if (op.optype == 1 /* RPC */ && mode == 0 /* CLIENT_LAYER_TO_DISK */)
                            return;
                        var p = Packet.MakeCopPacket(op.libName + "/" + op.actionName, op.args, op.opid, op.uidcountstart, op.uidcountstop);
                        packets.push(p);
                    });
                }
                packets.push(Packet.MakeFramePacket(layer, withClientRounds));
                return packets;
            };
            ClientSession.MakeModTarget = function (definition, ukeys, lkeys) {
                var s = (definition ? Parser.WriteComboString(definition) : "");
                ukeys.forEach(function (uid) {
                    s = s + "|" + uid;
                });
                lkeys.forEach(function (lit) {
                    s = s + "|+" + Parser.WriteComboString(lit);
                });
                return s;
            };
            ClientSession.ParseModTarget = function (s, datum) {
                var c = (new Parser(s, 0)).ParseComboComponents();
                datum.definition = c[0];
                datum.ukeys = new Array();
                datum.lkeys = new Array();
                for (var i = 2; i < c.length; i++) {
                    var s = c[i];
                    if (s.charAt(0) === "+")
                        datum.lkeys.push(s.slice(1));
                    else
                        datum.ukeys.push(s);
                }
            };
            ClientSession.prototype.isFaulted = function () {
                return this.faulted;
            };
            ClientSession.prototype.isMarooned = function () {
                return this.marooned;
            };
            ClientSession.prototype.isClosed = function () {
                return this.closed;
            };
            ClientSession.prototype.stopAsync = function () {
                return TDev.Promise.as();
            };
            ClientSession.prototype.send_layer = function (layer) {
                var _this = this;
                var packets = this.EncodeLayer(layer, 2 /* CLIENT_LAYER_TO_SERVER */, this.ws);
                this.log(TDev.Util.fmt("Sending {0}[{1},{2}]", layer.name, layer.clientround, layer.serverround));
                packets.forEach(function (p) { return p.send(_this.ws); });
            };
            ClientSession.prototype.getCloudSession = function () {
                if (!this.cachedsession) {
                    var cs = new TDev.RT.CloudSession();
                    cs._id = this.servername;
                    cs._permissions = this.permissions;
                    cs._title = this.title;
                    cs.sessionimpl = this;
                    if (cs.validate())
                        this.cachedsession = cs;
                }
                return this.cachedsession;
            };
            ClientSession.prototype.loadAsync = function (after_load_task) {
                var _this = this;
                TDev.Util.assert(this.loadtask === undefined && !this.loaded);
                if (!this.localname || this.closed)
                    return (after_load_task ? after_load_task() : TDev.Promise.as());
                var promise = this.LoadFromDiskAsync();
                promise = promise.then(function (success) {
                    if (!_this.closed) {
                        _this.intervalhandle = setInterval(function () {
                            if (!_this.closed && !_this.faulted)
                                _this.SaveAndSend();
                        }, _this.sendinterval);
                    }
                }, function (error) {
                    _this.faulted = true;
                    _this.initialize_data();
                    _this.statuschanges = true;
                    _this.log("failed to load stored session, error=" + error);
                });
                if (after_load_task)
                    promise = promise.thenalways(function () { return after_load_task(); });
                promise.thenalways(this.doorbell);
                return this.loadtask = promise;
            };
            ClientSession.prototype.LoadFromDiskAsync = function () {
                var _this = this;
                return TDev.Storage.getTableAsync("Sessions").then(function (table) {
                    _this.table = table;
                    var keys = [_this.key_Sstate(), _this.key_Cstate(), _this.key_layer("B")];
                    return table.getItemsAsync(keys).then(function (results) {
                        var S = results[keys[0]];
                        var C = results[keys[1]];
                        var B = results[keys[2]];
                        if (!S) {
                            _this.Sstate_needsave = true;
                            _this.loaded = true;
                            _this.statuschanges = true;
                            if (_this.trace_save_and_load)
                                _this.trace_load();
                            return _this.table.getValueAsync(_this.key_sessionlist()).then(function (val) {
                                var kvpairs = {};
                                kvpairs[_this.key_sessionlist()] = (val || "") + _this.localname + " ";
                                return _this.table.setItemsAsync(kvpairs);
                            });
                        }
                        else {
                            _this.S_fromJSONstring(S);
                            if (C)
                                _this.C_fromJSONstring(C);
                            var baselayer = _this.get_layer("B");
                            if (B) {
                                var packets = JSON.parse(B);
                                packets.forEach(function (p) { return _this.ProcessLoadedPacket(p, baselayer); });
                            }
                            keys = new Array();
                            for (var i = baselayer.clientround + 1; i <= _this.localround; i++)
                                keys.push(_this.key_layer("D" + i));
                            return _this.table.getItemsAsync(keys).then(function (result) {
                                keys.forEach(function (k) {
                                    var packetsjson = result[k];
                                    if (packetsjson) {
                                        var packets = JSON.parse(packetsjson);
                                        var datalayer = _this.create_layer(k.substr(k.indexOf("/") + 1));
                                        datalayer.clientround = Number(k.substr(k.indexOf("/") + 2));
                                        packets.forEach(function (p) { return _this.ProcessLoadedPacket(p, datalayer); });
                                    }
                                    else if (k !== _this.key_layer("D" + _this.localround)) {
                                        baselayer.clientround = baselayer.clientround + 1;
                                    }
                                });
                                _this.loaded = true;
                                _this.statuschanges = true;
                                if (_this.trace_save_and_load)
                                    _this.trace_load();
                            });
                        }
                    });
                });
            };
            ClientSession.prototype.trace_load = function () {
                this.log(TDev.Util.fmt("\Loaded S:\n{0}\nLoaded C:{1}\nLoaded Data:\n{2}", this.S_toJSONstring(), this.C_toJSONstring(), this.EncodeLayer(this.get_layer("B"), 6 /* TRACE_LOAD */).map(function (p) { return p.toString(); }).join("\n")));
            };
            ClientSession.prototype.deleteLocalStorageAsync = function () {
                var _this = this;
                var keystodelete = [this.key_Sstate(), this.key_Cstate(), this.key_layer("B")];
                var baselayer = this.get_layer("B");
                for (var i = baselayer.clientround + 1; i <= this.localround; i++)
                    keystodelete.push(this.key_layer("D" + i));
                var kvpairs = [];
                keystodelete.forEach(function (k) { return kvpairs[k] = undefined; });
                return this.table.getValueAsync(this.key_sessionlist()).then(function (val) {
                    var regexp = new RegExp(_this.localname + " ", 'g');
                    kvpairs[_this.key_sessionlist()] = (val || "").replace(regexp, "");
                    return _this.table.setItemsAsync(kvpairs);
                });
            };
            ClientSession.prototype.try_reconnect_in = function (msec) {
                var _this = this;
                var curws = this.ws;
                var currentTime = new Date();
                this.nexttry = currentTime.getTime() + msec;
                this.statuschanges = true;
                this.retrypending = curws;
                TDev.Util.setTimeout(msec, function () { return _this.user_retry_now(); });
            };
            ClientSession.prototype.user_retry_now = function () {
                if (this.retrypending === this.ws) {
                    this.retrypending = undefined;
                    this.connect(this.url, this.tokensource);
                }
            };
            ClientSession.prototype.connect = function (url, tokensource) {
                var _this = this;
                this.url = url;
                this.tokensource = tokensource;
                TDev.Util.assert(this.servername !== "");
                if (this.enable_sync === undefined) {
                    this.enable_sync = true;
                }
                if (TDev.Cloud.isOffline()) {
                    this.try_reconnect_in(this.connectionretrydelay);
                    return;
                }
                if (!this.enable_sync || this.marooned || this.closed || this.faulted)
                    return;
                var need_fresh_token = this.encountered_token_expiration;
                this.delete_layer("R", false);
                this.delete_layer("S", false);
                this.receivedstatus = false;
                this.last_serverround_received = undefined;
                this.last_clientround_received = undefined;
                this.last_serverround_sent = undefined;
                this.last_clientround_sent = undefined;
                this.encountered_token_expiration = undefined;
                var gotconnection = false;
                this.tokenpromise = this.tokensource(need_fresh_token);
                var ws = new WebSocket(url);
                this.log("connecting to " + url);
                this.ws = ws;
                this.nexttry = 0;
                if (this.dochannelcompression)
                    this.ws.channelCompressor = new ChannelCompressor();
                this.ws.onmessage = function (e) {
                    if (_this.ws !== ws)
                        return;
                    if (_this.trace_incoming_packets)
                        _this.log("receive: " + e.data.replace(/\n/g, " ").substr(0, 300));
                    _this.ReceivePacket(Packet.ParsePacket(e.data, _this.ws));
                };
                this.ws.onopen = function () {
                    if (_this.ws !== ws)
                        return;
                    _this.log("connected to " + url);
                    gotconnection = true;
                    _this.nexttry = undefined;
                    _this.tokenpromise.then(function (token) {
                        if (_this.ws !== ws)
                            return;
                        _this.SendStatusPacket(token);
                    }, function (err) {
                        _this.log("could not get authentication token");
                        if (_this.ws !== ws)
                            return;
                        _this.errorcategory = "offline";
                        _this.error = "could not get authentication token from server";
                        _this.disconnect();
                        _this.try_reconnect_in(_this.connectionretrydelay);
                    }).then(function () {
                        _this.doorbell();
                    });
                };
                this.ws.onclose = function (c) {
                    var retryspeed = 1;
                    if (_this.ws !== ws)
                        return;
                    _this.log("disconnected, code=" + c.code + ", reason=" + c.reason);
                    if (c.code === 1011 || c.code === 1005 || c.code === 1000) {
                        if (c.reason.indexOf("switched server") !== -1 || c.reason.indexOf("member not found") !== -1 || c.reason.indexOf("session salt mismatch") !== -1) {
                            _this.marooned = true;
                        }
                        else if (c.reason.indexOf("connection reset") !== -1) {
                            _this.errorcategory = "connecting";
                            _this.error = "refreshing base value";
                            _this.rebase = true;
                            retryspeed = 10;
                        }
                        else if (c.reason.indexOf("cannot create session") !== -1) {
                            if (_this.membernumber !== -1) {
                                _this.marooned = true;
                            }
                            else if (_this.servername.lastIndexOf(_this.user, 0) !== 0) {
                                _this.errorcategory = "not found";
                                _this.error = "possible causes: spelling error in session id, the owner has not connected to this session yet, the session has been deleted";
                                retryspeed = 2;
                            }
                            else {
                                _this.errorcategory = "not found";
                                _this.error = "cannot create session on server" + c.reason.substr(21);
                                retryspeed = 1;
                            }
                        }
                        else if (c.reason.indexOf("Cannot reconnect: member still connected on existing socket") !== -1) {
                            _this.errorcategory = "connecting";
                            _this.error = "cleaning up old connection";
                            retryspeed = 7;
                        }
                        else if (c.reason.indexOf("access denied: readonly.") !== -1) {
                            _this.errorcategory = "connecting";
                            _this.error = "reconnecting as readonly";
                            _this.readonly = true;
                            retryspeed = 10;
                        }
                        else if (c.reason.indexOf("access denied: ") !== -1) {
                            _this.error = c.reason.substr(15);
                            if (c.reason.indexOf("old script version") !== -1 || c.reason.indexOf("outdated script, must update first") !== -1) {
                                _this.errorcategory = "need update";
                                retryspeed = 0.01;
                            }
                            else
                                _this.errorcategory = "access denied";
                        }
                        else if (c.reason.indexOf("Token Expired") !== -1) {
                            _this.errorcategory = "connecting";
                            _this.error = c.reason;
                            _this.encountered_token_expiration = true;
                            retryspeed = 10;
                        }
                        else if (c.reason.indexOf("failed to migrate session") !== -1 || c.reason.indexOf("Migrating session to new script version") !== -1) {
                            _this.errorcategory = "transitioning";
                            _this.error = "server is migrating session to newer script version";
                            retryspeed = 10;
                        }
                        else if (c.reason.indexOf("reset") !== -1) {
                            _this.errorcategory = "transitioning";
                            _this.error = c.reason;
                            retryspeed = 10;
                        }
                        else if (c.reason.indexOf("server: ") !== -1) {
                            _this.errorcategory = "transitioning";
                            _this.error = c.reason;
                        }
                        else {
                            _this.errorcategory = "not working";
                            _this.error = "server error: " + c.reason;
                        }
                    }
                    else if (c.code === 1006) {
                        _this.errorcategory = "offline";
                        _this.error = gotconnection ? "lost connection to server" : "could not connect to server";
                        retryspeed = gotconnection ? 10 : 1;
                    }
                    else {
                        _this.errorcategory = "not working";
                        _this.error = "websocket error " + c.code + " clean=" + c.wasClean + " reason=" + c.reason;
                    }
                    _this.try_reconnect_in(_this.connectionretrydelay / retryspeed);
                    _this.presence = [];
                    _this.statuschanges = true;
                    _this.doorbell();
                };
            };
            ClientSession.prototype.disconnect = function () {
                var curws = this.ws;
                if (curws !== undefined) {
                    this.ws = undefined;
                    this.nexttry = undefined;
                    curws.close();
                    this.statuschanges = true;
                }
            };
            ClientSession.prototype.finishPendingOperationsAsync = function () {
                var _this = this;
                if (!this.localname || !this.loadtask)
                    return TDev.Promise.as();
                if (this.closetask)
                    return this.closetask;
                return this.loadtask.then(function () { return TDev.Promise.join([
                    _this.last_C_save.then(function (saveok) {
                        _this.SaveAndSend();
                        return _this.last_C_save;
                    }, function (savefailure) {
                        _this.faulted = true;
                        TDev.Util.oops("session save failed... local storage full?");
                    }),
                    _this.last_S_save.then(function (saveok) {
                        _this.MergeAndSaveSB();
                        return _this.last_S_save;
                    }, function (savefailure) {
                        _this.faulted = true;
                        TDev.Util.oops("session save failed... local storage full?");
                    })
                ]); });
            };
            ClientSession.prototype.closeAsync = function (deletelocalstorage) {
                var _this = this;
                this.closed = true;
                var loadfirst = this.loadtask;
                if (this.intervalhandle)
                    clearInterval(this.intervalhandle);
                this.disconnect();
                this.user_unlink();
                if (!loadfirst) {
                    if (deletelocalstorage)
                        return this.closetask = this.deleteLocalStorageAsync();
                    else
                        return this.closetask = TDev.Promise.as();
                }
                if (!(this.localname && deletelocalstorage)) {
                    return this.closetask = loadfirst.then(function () { return _this.finishPendingOperationsAsync(); });
                }
                else {
                    return this.closetask = loadfirst.then(function () { return TDev.Promise.join([_this.last_C_save, _this.last_S_save]).then(function () {
                        return _this.deleteLocalStorageAsync();
                    }); });
                }
            };
            ClientSession.prototype.MergeAndSaveSB = function () {
                var _this = this;
                TDev.Util.assert(this.loaded);
                if (this.faulted)
                    return false;
                var save = false;
                var visiblechanges = false;
                var statuschanges = false;
                var changes = {};
                var layers_to_delete = new Array();
                var serverlayer = this.get_layer("S");
                if (serverlayer) {
                    var newround = serverlayer.clientround;
                    for (var i = newround + 1; i <= this.localround; i++) {
                        var unconfirmedlayer = this.get_layer("D" + i);
                        if (unconfirmedlayer && unconfirmedlayer.grounded)
                            serverlayer.invalidate_all();
                    }
                    if (!this.readblock) {
                        var oldbaseround = this.get_layer("B").clientround;
                        visiblechanges = this.collapse_layers("B", "S");
                        statuschanges = (newround === this.localround - 1);
                        this.get_layer("B").cleanIfNeeded(this.scrublimit);
                        for (var i = oldbaseround + 1; i <= newround; i++) {
                            var datalayer = "D" + i;
                            this.delete_layer(datalayer, true);
                            if (this.localname) {
                                changes[this.key_layer(datalayer)] = undefined;
                                save = true;
                            }
                        }
                    }
                    else {
                        if (serverlayer.serverround >= this.readblock) {
                            serverlayer.grounded = true;
                            this.collapse_layers("B", "S");
                            var oldbaseround = this.get_layer("B").clientround;
                            var newround = serverlayer.clientround;
                            visiblechanges = true;
                            statuschanges = true;
                            for (var i = oldbaseround + 1; i <= newround; i++) {
                                var datalayer = "D" + i;
                                this.delete_layer(datalayer, true);
                                if (this.localname) {
                                    changes[this.key_layer(datalayer)] = undefined;
                                    save = true;
                                }
                            }
                            this.readblock = undefined;
                        }
                    }
                }
                if (this.localname && !this.faulted) {
                    var packets;
                    var baselayer;
                    if (visiblechanges) {
                        changes[this.key_layer("B")] = JSON.stringify(packets = this.EncodeLayer(baselayer = this.get_layer("B"), 1 /* CLIENT_BASE_TO_DISK */));
                        save = true;
                    }
                    if (this.Sstate_needsave) {
                        save = true;
                        this.Sstate_needsave = false;
                    }
                    if (save) {
                        changes[this.key_Sstate()] = this.S_toJSONstring();
                        var savemsg = "(" + (packets ? ("B[" + baselayer.clientround + "," + baselayer.serverround + "]: " + packets.length + " pkts") : "status only") + ")";
                        if (this.trace_saving)
                            this.log("saving merged data " + savemsg);
                        if (this.trace_save_and_load)
                            this.log(TDev.Util.fmt("\nSaving S:\n{0}\nSaving B:\n{1}", changes[this.key_Sstate()], packets ? packets.map(function (p) { return p.toString(); }).join("\n") : "none"));
                        this.last_S_save = this.table.setItemsAsync(changes).then(function (saveok) {
                            if (_this.trace_saving)
                                _this.log("saved merged data " + savemsg);
                            if (_this.ring_doorbell_when_done) {
                                _this.ring_doorbell_when_done = false;
                                _this.last_S_save = TDev.Promise.as();
                                _this.doorbell();
                            }
                        }, function (savefailure) {
                            _this.log("!! failure while saving data " + savemsg);
                            TDev.Util.oops("save failed... local storage full?");
                        });
                    }
                }
                return visiblechanges || statuschanges;
            };
            ClientSession.prototype.SaveAndSend = function () {
                var _this = this;
                TDev.Util.assert(this.loaded);
                if (this.last_C_save._state === 0 /* Pending */)
                    return this.last_C_save;
                if (this.ShouldSend()) {
                    var oldlayer = this.get_layer("D" + this.localround);
                    if (!oldlayer)
                        oldlayer = this.create_layer("D" + this.localround, this.localround);
                    var baselayer = this.get_layer("B");
                    this.localround += 1;
                    var newlayer = this.create_layer("D" + this.localround, this.localround);
                    TDev.Util.check(baselayer.serverround !== undefined, "undefined serverround on baselayer");
                    var serverround = oldlayer.serverround = baselayer.serverround;
                    var clientround = oldlayer.clientround;
                    if (!this.localname) {
                        this.send_layer(oldlayer);
                        return TDev.Promise.as();
                    }
                    else {
                        var curws = this.ws;
                        return this.SaveToDiskAsync([oldlayer, newlayer]).then(function () {
                            if (_this.ws === curws)
                                _this.send_layer(oldlayer);
                        });
                    }
                    this.CLstate_needsave = false;
                }
                else if (this.localname && this.CLstate_needsave) {
                    var locallayer = this.get_layer("D" + this.localround);
                    if (!locallayer)
                        locallayer = this.create_layer("D" + this.localround, this.localround);
                    var promise = this.SaveToDiskAsync([locallayer]);
                    this.CLstate_needsave = false;
                    return promise;
                }
            };
            ClientSession.prototype.cleanOutstandingLayers = function () {
                var blayer = this.get_layer("B");
                var deleted = [];
                for (var i = blayer.clientround + 1; i <= this.localround; i++) {
                    this.delete_layer("D" + i, true);
                    deleted.push("D" + i);
                }
                this.localround = blayer.clientround + 1;
                return deleted;
            };
            ClientSession.prototype.RemoveFromDiskAsync = function (layers) {
                var _this = this;
                var kvpairs = {};
                kvpairs[this.key_Cstate()] = this.C_toJSONstring();
                kvpairs[this.key_Sstate()] = this.S_toJSONstring();
                layers.forEach(function (l) { return kvpairs[_this.key_layer(l)] = undefined; });
                return this.table.setItemsAsync(kvpairs);
            };
            ClientSession.prototype.SaveToDiskAsync = function (layers) {
                var _this = this;
                if (this.faulted)
                    return TDev.Promise.as();
                var kvpairs = {};
                kvpairs[this.key_Cstate()] = this.C_toJSONstring();
                layers.forEach(function (l) {
                    var p = _this.EncodeLayer(l, 0 /* CLIENT_LAYER_TO_DISK */);
                    kvpairs[_this.key_layer(l.name)] = JSON.stringify(p);
                });
                var currentws = this.ws;
                var savemsg = "(" + layers.map(function (l) { return (l.name + "[" + l.clientround + ", " + l.serverround + "]"); }).join("/") + ")";
                if (this.trace_saving)
                    this.log("saving data " + savemsg);
                this.last_C_save = this.table.setItemsAsync(kvpairs).then(function (saveok) {
                    if (_this.ws === currentws)
                        return TDev.Promise.as(currentws);
                    if (_this.trace_saving)
                        _this.log("saved data " + savemsg);
                }, function (savefailure) {
                    _this.log("!! failure while saving data " + savemsg);
                    TDev.Util.oops("save failed... local storage full?");
                    _this.faulted = true;
                });
                return this.last_C_save;
            };
            ClientSession.prototype.ShouldSend = function () {
                var _this = this;
                if (this.faulted)
                    return false;
                if (this.ws === undefined || this.ws.readyState != WebSocket.OPEN || !this.receivedstatus)
                    return false;
                if (this.readonly || this.ws.bufferedAmount != 0)
                    return false;
                var baselayer = this.get_layer("B");
                if (this.writeblock !== undefined) {
                    if (baselayer.serverround < this.writeblock)
                        return false;
                    this.writeblock = undefined;
                    this.statuschanges = true;
                    var newround = this.localround;
                    for (var i = baselayer.clientround + 1; i < newround; i++) {
                        this.send_layer(this.get_layer("D" + i));
                    }
                }
                if (this.localround - baselayer.clientround > this.pendingroundlimit)
                    return false;
                if (!this.unsent_changes() && !this.fences.some(function (f) { return (_this.localround === f.round); }))
                    return false;
                return true;
            };
            ClientSession.prototype.user_issue_fence = function (continuation, exclusive) {
                this.fences.push(new Fence(continuation, this.loaded ? this.localround : 0, exclusive));
                this.user_yield();
            };
            ClientSession.prototype.user_set_doorbell = function (doorbell) {
                this.doorbell = doorbell;
            };
            ClientSession.prototype.user_enable_sync = function (enable) {
                if (enable !== this.enable_sync) {
                    this.enable_sync = enable;
                    if (enable)
                        this.try_reconnect_in(500);
                    else
                        this.disconnect();
                    this.Sstate_needsave = true;
                    this.statuschanges = true;
                    this.doorbell();
                }
            };
            ClientSession.prototype.user_sync_enabled = function () {
                return (this.enable_sync === undefined || this.enable_sync);
            };
            ClientSession.prototype.user_get_next_connection_attempt = function () {
                return (this.marooned || this.closed || this.faulted) ? undefined : this.nexttry;
            };
            ClientSession.prototype.user_get_missing_rounds = function () {
                if (!this.faulted && this.loaded && !this.marooned && !this.closed && this.ws && this.ws.readyState === WebSocket.OPEN && this.receivedstatus) {
                    var baselayer = this.get_layer("B");
                    if (this.readblock)
                        return this.readblock - (this.get_layer("S") ? this.get_layer("S").serverround : 0);
                    else if (this.writeblock)
                        return this.writeblock - baselayer.serverround;
                    else if (this.localround - 1 > baselayer.clientround)
                        return (this.localround - 1 - baselayer.clientround);
                    else if (this.previewround > baselayer.serverround)
                        return (this.previewround - baselayer.serverround);
                    else
                        return this.NumberWaitingRpcs();
                }
                else
                    return 0;
            };
            ClientSession.prototype.user_is_websocket_open = function () {
                return this.ws && this.ws.readyState === WebSocket.OPEN;
            };
            ClientSession.prototype.user_get_percent_full = function () {
                return (this.receivedserverinfo && this.percentfull) || 0;
            };
            ClientSession.prototype.user_get_presence = function () {
                if (!this.presence && this.membernumber !== -1)
                    return [{ userId: this.user, sessionId: this.membernumber }];
                else
                    return this.presence;
            };
            ClientSession.prototype.user_get_connectionstatus = function (include_details) {
                var status = this.user_get_connectionstatus_full();
                if (include_details)
                    return status.status + " (" + status.description + ")";
                else
                    return status.status;
            };
            ClientSession.prototype.user_get_connectionstatus_full = function () {
                var retrymsg = "";
                if (this.faulted) {
                    return {
                        type: 0 /* Error */,
                        status: TDev.lf("not working"),
                        description: TDev.lf("local cache corrupted or storage full")
                    };
                }
                else if (!this.loaded) {
                    return {
                        type: 2 /* Ok */,
                        status: TDev.lf("loading"),
                        description: TDev.lf("retrieving state from local storage")
                    };
                }
                else if (this.marooned) {
                    return {
                        type: 0 /* Error */,
                        status: TDev.lf("isolated"),
                        description: TDev.lf("cloud session was deleted on server")
                    };
                }
                else if (this.closed) {
                    return {
                        type: 0 /* Error */,
                        status: TDev.lf("closed"),
                        description: ""
                    };
                }
                else if (this.ws === undefined) {
                    if (this.enable_sync === false)
                        return {
                            type: 1 /* Warning */,
                            status: TDev.lf("disabled"),
                            description: TDev.lf("sync was disabled on purpose")
                        };
                    else if (TDev.Cloud.isOffline())
                        return {
                            type: 1 /* Warning */,
                            status: TDev.lf("offline"),
                            description: TDev.lf("touchdevelop is in offline mode{0}", retrymsg)
                        };
                    else {
                        return {
                            type: 0 /* Error */,
                            status: TDev.lf("offline"),
                            description: retrymsg
                        };
                    }
                }
                else if (this.ws.readyState === WebSocket.CONNECTING) {
                    return {
                        type: 1 /* Warning */,
                        status: TDev.lf("connecting"),
                        description: TDev.lf("trying to contact server")
                    };
                }
                else if (this.ws.readyState === WebSocket.OPEN) {
                    var baselayer = this.get_layer("B");
                    if (!this.receivedstatus)
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connecting"),
                            description: TDev.lf("waiting for server connection")
                        };
                    else if (this.readblock)
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connecting"),
                            description: TDev.lf("receiving server data")
                        };
                    else if (this.writeblock)
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connecting"),
                            description: TDev.lf("checking changes on server")
                        };
                    else if (this.localround - 1 > baselayer.clientround)
                        return {
                            type: 2 /* Ok */,
                            status: "connected",
                            description: this.NumberWaitingRpcs() ? TDev.lf(" waiting for server") : TDev.lf(" sending changes")
                        };
                    else if (this.previewround > baselayer.serverround)
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connected"),
                            description: TDev.lf("receiving changes")
                        };
                    else if (this.unsent_changes() || this.get_layer("T"))
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connected"),
                            description: TDev.lf("local changes pending")
                        };
                    else if (this.NumberWaitingRpcs())
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connected"),
                            description: TDev.lf("waiting for server")
                        };
                    else
                        return {
                            type: 2 /* Ok */,
                            status: TDev.lf("connected"),
                            description: ""
                        };
                }
                else
                    return {
                        type: 0 /* Error */,
                        status: this.errorcategory,
                        description: (this.error) ? this.error + retrymsg : ""
                    };
            };
            ClientSession.prototype.NumberWaitingRpcs = function () {
                return 0;
            };
            ClientSession.prototype.user_set_userdata = function (key, val, equals) {
                if (equals === undefined || !equals(this.userdata[key], val)) {
                    this.userdata[key] = val;
                    this.Sstate_needsave = true;
                }
            };
            ClientSession.prototype.user_get_userdata = function (key) {
                return this.userdata[key];
            };
            ClientSession.prototype.user_push = function () {
                if (!this.loaded)
                    return;
                this.checkinvariants();
                var locallayer = this.get_layer("D" + this.localround);
                if (!locallayer)
                    locallayer = this.create_layer("D" + this.localround, this.localround);
                var transactionlayer = this.get_layer("T");
                if (transactionlayer) {
                    var changed = this.collapse_layers(locallayer.name, "T");
                    locallayer.cleanIfNeeded(this.scrublimit);
                    this.CLstate_needsave = this.CLstate_needsave || changed;
                }
                this.SaveAndSend();
                this.checkinvariants();
            };
            ClientSession.prototype.user_yield = function () {
                if (!this.loaded)
                    return;
                this.checkinvariants();
                var statuschanges = this.statuschanges;
                this.statuschanges = false;
                var locallayer = this.get_layer("D" + this.localround);
                if (!locallayer)
                    locallayer = this.create_layer("D" + this.localround, this.localround);
                var transactionlayer = this.get_layer("T");
                if (transactionlayer) {
                    var changed = this.collapse_layers(locallayer.name, "T");
                    locallayer.cleanIfNeeded(this.scrublimit);
                    this.CLstate_needsave = this.CLstate_needsave || changed;
                }
                if (this.last_S_save._state === 0 /* Pending */) {
                    this.ring_doorbell_when_done = true;
                    return false;
                }
                var datachanges = this.MergeAndSaveSB();
                this.SaveAndSend();
                this.checkinvariants();
                if (this.fences.length > 0) {
                    var round = this.get_layer("B").clientround;
                    this.fences = this.fences.filter(function (f) {
                        if (round < f.round)
                            return true;
                        f.continuation();
                        return false;
                    });
                }
                return datachanges || statuschanges;
            };
            ClientSession.prototype.protocolversion = function () {
                return "3.0";
            };
            ClientSession.prototype.SendStatusPacket = function (token) {
                var baselayer = this.get_layer("B");
                var keystring = "";
                if (this.includeKeysInStatus) {
                    var keys = [];
                    this.forEachValidDatum(baselayer, function (datum) { return keys.push(datum.target()); });
                    keystring = keys.join("?").replace("|", "/");
                }
                var p = Packet.MakeStatusPacket(this.protocolversion() + (this.dochannelcompression ? "C" : "") + (this.readonly ? "R" : ""), this.servername, this.membernumber.toString(), this.user, this.title, this.disambiguator, baselayer.clientround.toString(), this.rebase ? "0" : baselayer.serverround.toString(), token, this.script, this.permissions, keystring);
                this.rebase = false;
                this.assertConsistency(this.receivedstatus === false);
                this.assertConsistency(this.last_serverround_sent === undefined);
                this.assertConsistency(this.last_serverround_received === undefined);
                this.assertConsistency(this.last_clientround_sent === undefined);
                this.assertConsistency(this.last_clientround_received === undefined);
                p.send(this.ws);
            };
            ClientSession.prototype.ReceivePacket = function (p) {
                if (p.code === "sts") {
                    this.ReceiveStatusPacket(p);
                    this.doorbell();
                }
                else if (p.code === "inf") {
                    this.ReceiveInfoPacket(p);
                    this.doorbell();
                }
                else if (p.code === "frm") {
                    this.ReceiveFramePacket(p);
                    this.doorbell();
                }
                else {
                    var receivelayer = this.get_layer("R") || this.create_layer("R");
                    if (p.code === "new") {
                        p.serveritemcount = this.serveritemcount;
                        this.serveritemcount += 1;
                        this.ProcessNewPacket(p, receivelayer, this.ws.channelCompressor);
                    }
                    else if (p.code === "del") {
                        this.ProcessDelPacket(p, receivelayer);
                    }
                    else if (p.code === "cld") {
                        if (this.ws.channelCompressor)
                            p.definition = this.ws.channelCompressor.InBound(p.definition, p.lkeys);
                        if (p.definition === "*")
                            this.ProcessClearRootPacket(p, receivelayer);
                    }
                    else if (p.code === "clp") {
                        if (this.ws.channelCompressor)
                            p.definition = this.ws.channelCompressor.InBound(p.definition, p.lkeys);
                    }
                    else {
                        TDev.Util.assert(p.code === "mod");
                        this.ProcessModPacket(p, receivelayer, this.ws.channelCompressor);
                    }
                }
            };
            ClientSession.prototype.ProcessLoadedPacket = function (p, l) {
                if (typeof p === "string")
                    p = Packet.ParsePacket(p, this.ws, true);
                if (p.code === "new") {
                    var item = this.ProcessNewPacket(p, l);
                    this.add_item_to_index(item);
                }
                else if (p.code === "del") {
                    var item = this.ProcessDelPacket(p, l);
                    if (item)
                        item.invalidate(true);
                }
                else if (p.code === "mod") {
                    var lval = this.ProcessModPacket(p, l);
                    this.add_lval_to_index(lval);
                }
                else if (p.code === "cld" && p.definition === "*") {
                    this.ProcessClearRootPacket(p, l);
                    if (l.name != "B") {
                        var baselayer = this.get_layer("B");
                        baselayer.invalidate_all();
                        var baseround = baselayer.clientround;
                        var localround = this.localround;
                        for (var i = baselayer.clientround + 1; i < l.clientround; i++) {
                            var datalayer = this.get_layer("D" + i);
                            datalayer && datalayer.invalidate_all();
                        }
                    }
                }
                else if (p.code === "cop") {
                    var json = JSON.parse(p.lkeys[0]);
                    var libName = json.path.split("/")[0];
                    var actionName = json.path.split("/")[1];
                    var cop = {
                        libName: libName,
                        actionName: actionName,
                        paramNames: Object.keys(json.params),
                        returnNames: json.returnNames,
                        args: json.params,
                        opid: json.opid === undefined ? undefined : Number(json.opid),
                        uidcountstart: json.uidcountstart === undefined ? undefined : Number(json.uidcountstart),
                        uidcountstop: json.uidcountstop === undefined ? undefined : Number(json.uidcountstop),
                        optype: json.optype || 0 /* UNKNOWN */
                    };
                    l.CommitCloudOperation(cop);
                }
                else {
                    TDev.Util.assert(p.code === "frm");
                    this.ProcessFramePacket(p, l);
                }
            };
            ClientSession.prototype.ReceiveInfoPacket = function (p) {
                this.receivedserverinfo = true;
                this.previewround = Number(p.lkeys[0]);
                this.percentfull = Number(p.lkeys[1]);
                var userIds = p.lkeys[2].split(",");
                var sessionIds = p.lkeys[3].split(",");
                TDev.Util.assert(userIds.length == sessionIds.length);
                this.presence = userIds.map(function (userId, i) { return ({ userId: userId, sessionId: parseInt(sessionIds[i]) }); });
                this.statuschanges = true;
            };
            ClientSession.prototype.ReceiveStatusPacket = function (p) {
                var version = p.lkeys[0];
                var servername = p.lkeys[1];
                var membernumber = Number(p.lkeys[2]);
                var user = p.lkeys[3];
                var description = p.lkeys[4];
                var disambiguator = p.lkeys[5];
                var curserverround = Number(p.lkeys[6]);
                var serverround = Number(p.lkeys[7]);
                var token = p.lkeys[8];
                var script = p.lkeys[9];
                var permissions = p.lkeys[10];
                var clientUserId = p.lkeys[11];
                this.clientUserId = clientUserId;
                if (description)
                    this.title = description;
                this.disambiguator = disambiguator;
                this.permissions = permissions;
                this.statusPacket = p;
                this.previewround = curserverround;
                TDev.Util.assert(version === this.protocolversion());
                TDev.Util.assert(servername === this.servername);
                TDev.Util.assert(this.membernumber === -1 || this.membernumber === membernumber);
                TDev.Util.assert(membernumber > 0);
                this.membernumber = membernumber;
                TDev.Util.assert(user === this.user);
                var baselayer = this.get_layer("B");
                this.assertConsistency(serverround === baselayer.serverround || serverround === 0);
                this.assertConsistency(curserverround >= baselayer.serverround);
                var rebase = (this.receivedstatus);
                this.receivedstatus = true;
                if (rebase) {
                    this.delete_layer("R", false);
                    this.delete_layer("S", false);
                }
                else {
                    this.assertConsistency(this.last_clientround_received === undefined);
                }
                this.last_serverround_received = serverround;
                this.last_clientround_received = 0;
                if (rebase || (serverround < baselayer.serverround))
                    this.readblock = curserverround;
                if (!rebase && (baselayer.clientround < this.localround - 1))
                    this.writeblock = curserverround;
                this.statuschanges = true;
                this.Sstate_needsave = true;
            };
            ClientSession.prototype.ReceiveFramePacket = function (p) {
                var clientround = Number(p.lkeys[0]);
                var serverround = Number(p.lkeys[1]);
                this.assertConsistency(this.receivedstatus);
                this.assertConsistency(serverround > this.last_serverround_received || this.acceptsUpdates);
                this.assertConsistency(clientround >= this.last_clientround_received);
                this.assertConsistency((!this.last_serverround_sent) || serverround > this.last_serverround_sent || this.acceptsUpdates);
                this.assertConsistency((!this.last_clientround_sent) || clientround <= this.last_clientround_sent);
                this.last_clientround_received = clientround;
                this.last_serverround_received = serverround;
                var baselayer = this.get_layer("B");
                this.assertConsistency(serverround >= baselayer.serverround || this.acceptsUpdates);
                this.assertConsistency(clientround >= baselayer.clientround);
                var serverlayer = this.get_layer("S") || this.create_layer("S", clientround, serverround);
                this.assertConsistency(serverround >= serverlayer.serverround || this.acceptsUpdates);
                this.assertConsistency(clientround >= serverlayer.clientround);
                var receivelayer = this.get_layer("R");
                if (receivelayer)
                    this.collapse_layers("S", "R");
                this.get_layer("S").cleanIfNeeded(this.scrublimit);
                serverlayer.serverround = serverround;
                serverlayer.clientround = clientround;
                if (this.fences.some(function (f) { return f.exclusive; })) {
                    this.user_yield();
                }
            };
            ClientSession.prototype.ProcessFramePacket = function (p, layer) {
                layer.clientround = Number(p.lkeys[0]);
                layer.serverround = p.lkeys[1] == "" ? undefined : Number(p.lkeys[1]);
                if (p.lkeys[2]) {
                    var x = layer.clientrounds = {};
                    p.lkeys[2].split(",").forEach(function (s) {
                        var pair = s.split(":");
                        x[Number(pair[0])] = Number(pair[1]);
                    });
                }
            };
            ClientSession.prototype.ProcessNewPacket = function (p, layer, comp) {
                var uid = p.ukeys.shift();
                var ukeys = p.ukeys;
                var lkeys = p.lkeys;
                var fromCloudOp = p.fromCloudOp;
                var definition = comp ? comp.InBound(p.definition, lkeys) : p.definition;
                var entry = this.get_item(uid);
                if (!entry) {
                    entry = new Item();
                    entry.session = this;
                    entry.definition = definition;
                    entry.uid = uid;
                    entry.ukeys = ukeys;
                    entry.lkeys = lkeys;
                    entry.linkDeps();
                    entry.fromCloudOp = fromCloudOp;
                    this.add_item(entry);
                }
                else {
                    this.assertConsistency(entry.uid === uid);
                    this.assertConsistency(entry.definition === definition);
                    this.assertConsistency(ukeys.length === entry.ukeys.length);
                    for (var i = 0; i < ukeys.length; i++)
                        this.assertConsistency(ukeys[i] === entry.ukeys[i]);
                    this.assertConsistency(lkeys.length === entry.lkeys.length);
                    for (var i = 0; i < lkeys.length; i++)
                        this.assertConsistency(lkeys[i] === entry.lkeys[i]);
                }
                this.assertConsistency((uid.indexOf(".") !== -1) || (Number(uid) <= this.uidcount));
                entry.recordCreation(layer, p.serveritemcount);
                return entry;
            };
            ClientSession.prototype.ProcessDelPacket = function (p, layer) {
                var uid = p.ukeys[0];
                var entry = this.get_item(uid);
                if (entry) {
                    this.assertConsistency(entry.uid === uid);
                    entry.recordDeletion(layer);
                }
                return entry;
            };
            ClientSession.prototype.ProcessModPacket = function (p, layer, comp, member) {
                var ukeys = p.ukeys;
                var lkeys = p.lkeys;
                var definition = comp ? comp.InBound(p.definition, lkeys) : p.definition;
                var fromCloudOp = p.fromCloudOp;
                var op = lkeys.pop();
                if (op.lastIndexOf("^#", 0) === 0) {
                    var c = (new Parser(op.substr(2), 0)).ParseComboComponents();
                    op = c.map(function (code) { return comp ? comp.InBound(code, lkeys) : code; });
                    if (this.astencoding)
                        op = this.astencoding.fromstrings(op);
                }
                var target = ClientSession.MakeModTarget(definition, ukeys, lkeys);
                var lval = this.get_lval(target);
                if (!lval) {
                    lval = new LVal();
                    lval.session = this;
                    lval.definition = definition;
                    lval.ukeys = ukeys;
                    lval.lkeys = lkeys;
                    lval.parseDefinition();
                    lval.entry = this.user_get_entry(lval.indexdomain, ukeys, lkeys);
                    lval.linkDeps();
                    lval.fromCloudOp = fromCloudOp;
                    this.add_lval(lval);
                }
                else {
                    this.assertConsistency(lval.definition === definition);
                    this.assertConsistency(ukeys.length === lval.ukeys.length);
                    for (var i = 0; i < ukeys.length; i++)
                        this.assertConsistency(ukeys[i] === lval.ukeys[i]);
                    this.assertConsistency(lkeys.length === lval.lkeys.length);
                    for (var i = 0; i < lkeys.length; i++)
                        this.assertConsistency(lkeys[i] === lval.lkeys[i]);
                }
                if (member !== undefined && lval.codomain.indexOf("^") === 0) {
                    if (op.indexOf(".") !== 0) {
                        op = member + "." + op;
                    }
                }
                lval.recordOperation(layer, op);
                return lval;
            };
            ClientSession.prototype.ProcessClearRootPacket = function (p, layer) {
                TDev.Util.assert(p.code === "cld" && p.definition === "*");
                layer.grounded = true;
            };
            return ClientSession;
        })();
        Revisions.ClientSession = ClientSession;
        var NodeSession = (function (_super) {
            __extends(NodeSession, _super);
            function NodeSession(nodeserver, servername, localname, user) {
                _super.call(this, servername, localname, user);
                this.returnMap = {};
                this.sendCloudOperations = true;
                this.includeKeysInStatus = true;
                this.acceptsUpdates = true;
                this.requiresAuth = false;
                this.recording = null;
                TDev.Util.assert(!!nodeserver);
                this.nodeserver = nodeserver;
            }
            NodeSession.prototype.hasNodeConnection = function () {
                return this.ws !== undefined && this.ws.readyState === WebSocket.OPEN;
            };
            NodeSession.prototype.stopAsync = function () {
                this.disconnect();
                return TDev.Promise.as();
            };
            NodeSession.prototype.ReceivePacket = function (p) {
                if (p.code === 'rpc') {
                    this.ReceiveOperation(p);
                    this.doorbell();
                }
                else {
                    return _super.prototype.ReceivePacket.call(this, p);
                }
            };
            NodeSession.prototype.user_start_cloud_operation = function (libName, actionName, paramNames, returnNames, args, optype) {
                TDev.Util.assert(this.recording == null);
                TDev.Util.assert(this.recordinground == null);
                TDev.Util.assert(optype == 2 /* OFFLINE */);
                this.log("start recording operation: " + actionName);
                var script = TDev.Runtime.theRuntime.compiled.libScripts[libName];
                this.recording = {
                    libName: libName,
                    actionName: actionName,
                    paramNames: paramNames,
                    returnNames: returnNames,
                    uidcountstart: this.uidcount,
                    args: args,
                    optype: optype
                };
                this.recordinground = this.localround;
            };
            NodeSession.prototype.user_stop_cloud_operation = function (libName, actionName, paramNames, returnNames, args) {
                TDev.Util.assert(this.recording.libName == libName);
                TDev.Util.assert(this.recording.actionName == actionName);
                TDev.Util.assert(this.recording.paramNames == paramNames);
                TDev.Util.assert(this.recording.returnNames == returnNames);
                TDev.Util.assert(this.recording.args == args);
                TDev.Util.assert(this.recordinground == this.localround);
                this.log("done recording operation: " + actionName);
                var tlayer = this.get_layer("T") || this.create_layer("T");
                this.recording.uidcountstop = this.uidcount;
                tlayer.CommitCloudOperation(this.recording);
                this.recording = null;
                this.recordinground = null;
            };
            NodeSession.prototype.user_rpc_cloud_operation = function (libName, actionName, paramNames, returnNames, args) {
                this.log("record rpc operation: " + actionName);
                var promise = new TDev.PromiseInv();
                var script = TDev.Runtime.theRuntime.compiled.libScripts[libName];
                var tlayer = this.get_layer("T") || this.create_layer("T");
                this.uidcount += 1;
                var opid = this.uidcount;
                this.returnMap[opid] = promise;
                var cop = {
                    libName: libName,
                    actionName: actionName,
                    paramNames: paramNames,
                    returnNames: returnNames,
                    args: args,
                    opid: opid,
                    optype: 1 /* RPC */
                };
                tlayer.CommitCloudOperation(cop);
                this.user_yield();
                return promise;
            };
            NodeSession.prototype.NumberWaitingRpcs = function () {
                return Object.keys(this.returnMap).length;
            };
            NodeSession.prototype.ReceiveOperation = function (p) {
                var _this = this;
                var json = JSON.parse(p.lkeys[0]);
                var opid = Number(json.opid);
                var res = json.params;
                var path = json.path;
                if (path === "err") {
                    this.RemoveFromDiskAsync(this.cleanOutstandingLayers()).thenalways(function () {
                        if (opid === -1 || _this.returnMap[opid] === undefined) {
                            TDev.Runtime.theRuntime.handleException(res);
                        }
                        else {
                            _this.returnMap[opid].error(res);
                        }
                    }).done();
                }
                else {
                    if (this.returnMap[opid] !== undefined) {
                        this.returnMap[opid].success(res);
                        delete this.returnMap[opid];
                    }
                }
            };
            NodeSession.prototype.unsent_changes = function () {
                var locallayer = this.get_layer("D" + this.localround);
                if (locallayer && ((locallayer.data.length != 0 || locallayer.grounded) || locallayer.cloudOperations && locallayer.cloudOperations.length > 0))
                    return true;
                return false;
            };
            NodeSession.prototype.collapse_layers = function (firstname, secondname, keepsecond) {
                var l1 = this.get_layer(firstname);
                var l2 = this.get_layer(secondname);
                if (!l1.grounded) {
                    l1.mergeCloudOperations(l2);
                }
                return _super.prototype.collapse_layers.call(this, firstname, secondname, keepsecond);
            };
            return NodeSession;
        })(ClientSession);
        Revisions.NodeSession = NodeSession;
        var ServerSession = (function (_super) {
            __extends(ServerSession, _super);
            function ServerSession(nodeserver, servername, localname, user, rt, wsServer) {
                _super.call(this, nodeserver, servername, localname, user);
                this.rt = rt;
                this.wsServer = wsServer;
                this.sendCloudOperations = false;
                this.concatIdToItem = true;
                this.includeKeysInStatus = false;
                this.requiresAuth = false;
                this.current_membernumber = 0;
                this.membernumber = 0;
                this.disambiguators = {};
                this.schema = {};
                this.full_keys = {};
                this.types = {};
                this.transactionFailed = false;
                this.transactionRunning = false;
            }
            ServerSession.prototype.log = function (msg) {
                TDev.Util.log(msg);
            };
            ServerSession.prototype.user_create_item = function (definition, ukeys, lkeys) {
                var k = new Item();
                k.session = this;
                k.definition = definition;
                TDev.Util.assert(this.loaded || this.faulted);
                if (this.uidcountstart === undefined || this.uidcountstart > this.uidcountstop) {
                    this.uidcount++;
                    var uid = "0." + this.uidcount;
                }
                else {
                    this.uidcountstart++;
                    var uid = this.membernumber + "." + this.uidcountstart;
                }
                k.uid = uid;
                k.ukeys = ukeys;
                k.lkeys = lkeys;
                TDev.Util.assert(!this.get_item(k.uid));
                if (this.readonly) {
                    k.deleted = true;
                    return k;
                }
                k.linkDeps();
                this.add_item(k);
                if (!k.has_deleted_dependencies()) {
                    var transactionlayer = this.get_layer("T") || this.create_layer("T");
                    k.recordCreation(transactionlayer);
                    this.add_item_to_index(k);
                }
                return k;
            };
            ServerSession.prototype.create_layer = function (name, clientround, serverround) {
                if (serverround === undefined) {
                    serverround = clientround;
                }
                return _super.prototype.create_layer.call(this, name, clientround, serverround);
            };
            ServerSession.prototype.get_unsaved_layer = function () {
                var locallayer = this.get_layer("D" + this.localround);
                if (!locallayer)
                    locallayer = this.create_layer("D" + this.localround, this.localround, this.localround);
                return locallayer;
            };
            ServerSession.prototype.collapse_layers = function (first, second, keep_second) {
                var l1 = this.get_layer(first);
                var l2 = this.get_layer(second);
                if (l2.clientrounds !== undefined) {
                    if (l1.clientrounds === undefined) {
                        l1.clientrounds = {};
                    }
                    Object.keys(l2.clientrounds).forEach(function (c) {
                        if (l1.clientrounds[c] !== undefined && l2.clientrounds[c] !== undefined)
                            TDev.Util.assert(l1.clientrounds[c] <= l2.clientrounds[c]);
                        l1.clientrounds[c] = l2.clientrounds[c];
                    });
                }
                return _super.prototype.collapse_layers.call(this, first, second, keep_second);
            };
            ServerSession.prototype.user_start_transaction = function (membernumber, clientRound) {
                var tlayer = this.get_layer("T") || this.create_layer("T");
                if (clientRound !== undefined) {
                    tlayer.clientrounds = {};
                    tlayer.clientrounds[membernumber] = clientRound;
                }
                this.checkinvariants();
                return tlayer;
            };
            ServerSession.prototype.user_end_transaction = function () {
                var tlayer = this.get_layer("T") || this.create_layer("T");
                var unsavedlayer = this.get_unsaved_layer();
                this.collapse_layers(unsavedlayer.name, "T");
                unsavedlayer.cleanIfNeeded(this.scrublimit);
                this.Sstate_needsave = true;
            };
            ServerSession.prototype.user_rollback_transaction = function () {
                var tlayer = this.get_layer("T");
                TDev.Util.assert(tlayer !== undefined, "transaction layer has to be created by user_start_transaction before calling user_rollback_transaction");
                this.delete_layer("T", true);
            };
            ServerSession.prototype.user_yield = function () {
                if (this.transactionRunning)
                    return false;
                return _super.prototype.user_yield.call(this);
            };
            ServerSession.prototype.user_push = function () {
                if (this.transactionRunning)
                    return;
                return _super.prototype.user_push.call(this);
            };
            ServerSession.prototype.MergeAndSaveSB = function () {
                return false;
            };
            ServerSession.prototype.sendLayerToClient = function (layer, socket) {
                var _this = this;
                var packets = this.EncodeLayer(layer, 4 /* SERVER_LAYER_TO_CLIENT */, socket);
                var clientround = (layer.clientrounds && layer.clientrounds[socket.membernumber]) || socket.lastclientroundsent;
                var serverround = layer.serverround;
                this.updateForClient(packets, clientround, socket.membernumber);
                packets.forEach(function (p) { return _this.sendPacketToClient(_this, p, socket); });
                TDev.Util.assert(clientround >= socket.lastclientroundsent);
                TDev.Util.assert(serverround > socket.lastserverroundsent);
                socket.lastclientroundsent = clientround;
                socket.lastserverroundsent = serverround;
            };
            ServerSession.prototype.sendUpdatesToClient = function (socket) {
                var _this = this;
                if (socket.keyset.has_unsent_keys()) {
                    var layer = this.get_layer("B");
                    var packets = this.EncodeLayer(layer, 5 /* SERVER_UPDATES_TO_CLIENT */, socket);
                    if (packets.length > 2) {
                        var clientround = (layer.clientrounds && layer.clientrounds[socket.membernumber]) || socket.lastclientroundsent;
                        TDev.Util.assert(clientround >= socket.lastclientroundsent);
                        this.updateForClient(packets, clientround, socket.membernumber);
                        packets.slice(1).forEach(function (p) { return (p.code !== "cld") ? _this.sendPacketToClient(_this, p, socket) : undefined; });
                    }
                }
            };
            ServerSession.prototype.sendPacketToClient = function (session, p, socket) {
                var s = p.toString();
                session.log(socket.membernumber.toString() + "< " + s);
                socket.send(s);
            };
            ServerSession.prototype.updateForClient = function (packets, clientround, membernumber) {
                var _this = this;
                if (packets.length > 0) {
                    packets[packets.length - 1].lkeys[0] = String(clientround);
                }
                for (var i = 0; i < packets.length - 1; i++) {
                    var packet = packets[i];
                    packet.ukeys = packet.ukeys.map(function (uid) { return _this.filteruid(uid, membernumber); });
                    if (packet.code == "mod" && packet.definition.indexOf("^") !== -1) {
                        var l = packet.lkeys.length - 1;
                        var k = packet.lkeys[l];
                        packet.lkeys[l] = this.filteruid(k, membernumber);
                    }
                }
                return packets;
            };
            ServerSession.prototype.filteruid = function (uid, member) {
                var r = /^\d+/.exec(uid);
                var m = r ? r[0] : undefined;
                if (m === String(member)) {
                    return uid.slice(uid.indexOf(".") + 1);
                }
                else {
                    return uid;
                }
            };
            ServerSession.prototype.update_keysets = function (layer) {
                var _this = this;
                this.forEachValidDatum(layer, function (d, op) {
                    if (d instanceof Item) {
                        if (op[0] === "C") {
                            var def = /^\w+/.exec(d.definition)[0];
                            d.uid;
                            if (_this.types[def].replication === "full") {
                                _this.add_item_to_keysets(d);
                            }
                        }
                        else {
                            TDev.Util.assert(op === "D");
                            TDev.Util.assert(!layer.grounded);
                        }
                    }
                    else if (d instanceof LVal) {
                    }
                });
                this.add_closure_to_keysets();
            };
            ServerSession.prototype.add_item_to_keysets = function (item) {
                this.sockets().forEach(function (s) { return s.keyset.add(item.uid); });
            };
            ServerSession.prototype.add_closure_to_keysets = function () {
                var _this = this;
                this.sockets().forEach(function (s) { return _this.add_closure_to_keyset(s.keyset); });
            };
            ServerSession.prototype.add_closure_to_keyset = function (keyset) {
                var added = true;
                while (added) {
                    added = this.add_closure_to_keyset_it(keyset);
                }
            };
            ServerSession.prototype.add_closure_to_keyset_it = function (keyset) {
                var _this = this;
                keyset.track();
                var blayer = this.get_layer("B");
                this.forEachValidDatum(blayer, function (datum) {
                    if (datum instanceof Item) {
                        var item = datum;
                        if (_this.all_keys_in_keyset(item.ukeys, keyset)) {
                            keyset.add(item.uid);
                        }
                        return;
                    }
                    if (datum instanceof LVal) {
                        var lval = datum;
                        if (/^\w+\[.*\]/.exec(lval.indexdomain)) {
                            if (keyset.contains(lval.lkeys[0])) {
                                _this.add_lval_to_keyset(lval, keyset);
                            }
                            return;
                        }
                        if (/\w+\(.*\)/.exec(lval.indexdomain)) {
                            if (keyset.contains(lval.ukeys[0])) {
                                _this.add_lval_to_keyset(lval, keyset);
                            }
                        }
                        return;
                    }
                    if (datum instanceof Entry) {
                        var entry = datum;
                        if (_this.get_replication_type(entry) === "partial") {
                            if (keyset.contains(entry.lkeys[0])) {
                                if (entry.definition.charAt(entry.definition.length - 1) === "]") {
                                    var types = entry.definition.slice(entry.definition.indexOf("["), entry.definition.lastIndexOf("]")).split(",");
                                    for (var i = 0; i < types.length; i++) {
                                        if (types[i].indexOf("(") !== -1) {
                                            keyset.add(entry.ukeys[i]);
                                        }
                                    }
                                }
                            }
                        }
                        return;
                    }
                    TDev.Util.assert(false);
                });
                return keyset.track();
            };
            ServerSession.prototype.add_lval_to_keyset = function (lval, keyset) {
                var key = lval.target();
                keyset.add(key);
                var datum = this.data[key];
                if (datum instanceof Item) {
                    var item = datum;
                    if (this.all_keys_in_keyset(item.ukeys, keyset)) {
                        keyset.add(item.uid);
                    }
                }
            };
            ServerSession.prototype.all_keys_in_keyset = function (keys, keyset) {
                var _this = this;
                return keys.reduce(function (included, uid) {
                    var item = _this.get_item(uid);
                    return included && (item === undefined || keyset.contains(uid));
                }, true);
            };
            ServerSession.prototype.initializeKeyset = function (socket, keys) {
                var _this = this;
                if (keys.length !== 1 || keys[0] !== "") {
                    keys.forEach(function (k) { return socket.keyset.keys[k] = true; });
                }
                if (socket.clientUserId !== undefined) {
                    socket.keyset.add(socket.clientUserId);
                }
                var blayer = this.get_layer("B");
                this.forEachValidDatum(blayer, function (datum) {
                    if (datum instanceof Item) {
                        var item = datum;
                        if (_this.get_replication_type(item) === "full") {
                            socket.keyset.add(item.uid);
                        }
                    }
                });
                this.add_closure_to_keyset(socket.keyset);
            };
            ServerSession.prototype.addKeysFromLayer = function (layer, keyset) {
                this.forEachValidDatum(layer, function (d) { return keyset.add(d.target()); });
            };
            ServerSession.prototype.setupKeyset = function (socket) {
                socket.keyset = new Keyset(this);
            };
            ServerSession.prototype.getMetaData = function () {
                var _this = this;
                if (this.rt === undefined)
                    return;
                var datas = this.rt.datas;
                Object.keys(datas).forEach(function (d) {
                    var lib = datas[d];
                    Object.keys(lib).forEach(function (n) {
                        if (/^\$\w+/.exec(n)) {
                            var name = n.slice(1);
                            _this.types[name] = { replication: (lib[n] ? lib[n].replication : undefined) };
                        }
                    });
                });
            };
            ServerSession.prototype.get_replication_type = function (datum) {
                var def = /^\w+/.exec(datum.definition);
                if (!def)
                    return undefined;
                var repl = this.types[def[0]];
                if (!repl)
                    return undefined;
                return repl.replication;
            };
            ServerSession.prototype.isOriginAllowed = function (origin) {
                return true;
            };
            ServerSession.prototype.connect = function (url, tokensource) {
                this.url = url;
                if (this.closed || this.faulted)
                    return;
                this.hasPartialData = this.rt.compiled.hasPartialData;
                this.hasLocalData = this.rt.compiled.hasLocalData;
                this.setupWebSockets();
                this.getMetaData();
            };
            ServerSession.prototype.sockets = function () {
                return this.wsServer.connections().filter(function (c) { return c.isTdWebSocket; });
            };
            ServerSession.prototype.setupWebSockets = function () {
                var _this = this;
                this.log('setting up websockets server');
                this.wsServer.addHandler(function (request, next) {
                    if (request.path() != "/") {
                        next();
                        return;
                    }
                    if (!_this.isOriginAllowed(request.origin())) {
                        request.reject();
                        _this.log(TDev.Util.fmt("WebSocket connection from {0} rejected", request.origin()));
                        return;
                    }
                    _this.log(TDev.Util.fmt("WS request from {0}", request.origin()));
                    var socket = request.accept();
                    socket.isTdWebSocket = true;
                    _this.log(TDev.Util.fmt("accepted socket {0}", request.remoteAddress()));
                    var buffer = [];
                    var receivedStatus = false;
                    _this.setupKeyset(socket);
                    request.onMessage(function (str, buff) {
                        if (buff) {
                            _this.log('ERROR: Received Binary Message of ' + buff.length + ' bytes');
                        }
                        else {
                            _this.log((socket.membernumber || "?") + "> " + str);
                            var p = Packet.ParsePacket(str, socket);
                            if (p.code === "sts") {
                                _this.handleStatusPacket(p, socket);
                                receivedStatus = true;
                                return;
                            }
                            TDev.Util.assert(receivedStatus);
                            if (p.code === "frm") {
                                _this.queuePackets(buffer, p, socket, request, socket.membernumber);
                                buffer = [];
                            }
                            else {
                                buffer.push(p);
                            }
                        }
                    });
                    request.onClose(function (reasonCode, description) {
                        receivedStatus = false;
                        _this.log(' Peer ' + request.remoteAddress() + ' disconnected.');
                    });
                });
            };
            ServerSession.prototype.handleStatusPacket = function (p, socket) {
                var version = p.lkeys[0];
                var servername = p.lkeys[1];
                var membernumber = Number(p.lkeys[2]);
                var user = p.lkeys[3];
                var description = p.lkeys[4];
                var disambiguator = p.lkeys[5];
                var last_clientround = Number(p.lkeys[6]);
                var last_serverround = Number(p.lkeys[7]);
                var token = p.lkeys[8];
                var script = p.lkeys[9];
                var permissions = p.lkeys[10];
                var keysoruser = p.lkeys[11];
                var keys = keysoruser.replace("/", "|").replace(/(^\d+(?!\.))|(\|\d+(?!\.))|(\?\d+(?!\.))/g, function (d) {
                    if (d.indexOf("|") === 0) {
                        return ("|" + p.lkeys[2] + "." + d.slice(1));
                    }
                    else if (d.indexOf("?") === 0) {
                        return ("?" + p.lkeys[2] + "." + d.slice(1));
                    }
                    else {
                        return (p.lkeys[2] + "." + d);
                    }
                }).split("?");
                var rt = TDev.Runtime.theRuntime;
                if (rt.authValidator) {
                    var clientUserId = "";
                    rt.wrapFromHandler(function () {
                        clientUserId = rt.runUserAction(rt.authValidator, [token]);
                        if (clientUserId && !/:/.test(clientUserId))
                            TDev.Util.userError("user id returned from validator has to have a namespace (eg., fb:123456)");
                    });
                    if (!clientUserId) {
                        this.log("invalid authorization attempt");
                    }
                    else {
                        this.log("authorized as " + clientUserId);
                        socket.keyset.add(clientUserId);
                    }
                    p.lkeys[11] = clientUserId;
                    socket.clientUserId = clientUserId;
                }
                if (servername !== Revisions.nodesessionid(this.rt.host.currentGuid)) {
                    return socket.close(1000, "switched script");
                }
                var baselayer = this.get_layer("B");
                var startFrom = 0;
                if (membernumber === -1) {
                    TDev.Util.assert(disambiguator === "");
                    membernumber = ++this.current_membernumber;
                    disambiguator = (+new Date()).toString(36);
                    p.lkeys[5] = disambiguator;
                    p.lkeys[2] = (membernumber).toString();
                    this.disambiguators[membernumber] = disambiguator;
                }
                else {
                    if (membernumber > this.current_membernumber || this.disambiguators[membernumber] !== disambiguator) {
                        return socket.close(1000, "switched server");
                    }
                    if (last_serverround <= baselayer.serverround && this.get_layer("D" + (last_serverround + 1).toString()) && baselayer.clientrounds && baselayer.clientrounds[membernumber] >= last_clientround) {
                        startFrom = last_serverround;
                    }
                }
                p.lkeys[6] = String(baselayer.serverround);
                p.lkeys[7] = String(startFrom);
                socket.membernumber = membernumber;
                this.sendPacketToClient(this, p, socket);
                this.initializeKeyset(socket, keys);
                this.CLstate_needsave = true;
                if (baselayer.serverround === 0) {
                    this.log("Sending Nothing");
                    socket.lastclientroundsent = 0;
                    socket.lastserverroundsent = 0;
                    return;
                }
                if (startFrom === 0) {
                    this.log("Sending Base (" + baselayer.serverround + ")");
                    socket.lastclientroundsent = 0;
                    socket.lastserverroundsent = 0;
                    this.sendLayerToClient(baselayer, socket);
                }
                else {
                    this.log("Sending " + (baselayer.serverround - startFrom).toString() + " Deltas");
                    socket.lastclientroundsent = last_clientround;
                    socket.lastserverroundsent = startFrom;
                    for (var i = startFrom + 1; i <= baselayer.serverround; i++) {
                        var dlayer = this.get_layer("D" + i);
                        this.sendLayerToClient(dlayer, socket);
                    }
                    this.log("Sending Updates");
                    this.sendUpdatesToClient(socket);
                }
            };
            ServerSession.prototype.queuePackets = function (packets, frame, socket, request, membernumber) {
                var _this = this;
                var clientRound = Number(frame.lkeys[0]);
                this.rt.queueAsync(function (rt, args) {
                    _this.user_start_transaction(membernumber, clientRound);
                    _this.transactionRunning = true;
                    _this.membernumber = membernumber;
                });
                packets.forEach(function (p) {
                    if (p.code === "cop") {
                        if (_this.transactionFailed)
                            return;
                        var json = JSON.parse(p.lkeys[0]);
                        var path = json.path;
                        var params = json.params;
                        var opid = json.opid;
                        var optype = json.optype;
                        var uidcountstart = (isNaN(Number(json.uidcountstart))) ? undefined : Number(json.uidcountstart);
                        var uidcountstop = (isNaN(Number(json.uidcountstop))) ? undefined : Number(json.uidcountstoptart);
                        var promise = _this.queueOperation(path, params, request.origin, socket.membernumber, socket, uidcountstart, uidcountstop);
                        promise.then(function (res) {
                            var tlayer = _this.get_layer("T") || _this.create_layer("T");
                            tlayer.CommitCloudOperation({
                                libName: path.split("/")[0],
                                actionName: path.split("/")[1],
                                paramNames: Object.keys(params),
                                returnNames: [],
                                args: [],
                                optype: optype,
                                opid: opid,
                                res: res,
                                socket: socket
                            });
                        }, function (err) {
                            _this.sendError(opid, err, socket);
                        });
                    }
                    else {
                        _this.rt.queueAsync(function (rt, args) {
                            var tlayer = _this.get_layer("T") || _this.create_layer("T");
                            var key = _this.handleCloudPacket(p, tlayer, request, socket);
                        });
                    }
                });
                this.rt.queueAsync(function (rt, args) {
                    _this.membernumber = 0;
                    if (_this.transactionFailed) {
                        _this.user_rollback_transaction();
                        _this.transactionFailed = false;
                    }
                    else {
                        _this.addKeysFromLayer(_this.get_layer("T"), socket.keyset);
                        _this.user_end_transaction();
                        _this.log("finished handling cloud request");
                        _this.SaveAndSend();
                    }
                    _this.transactionRunning = false;
                });
            };
            ServerSession.prototype.queueOperation = function (path, params, host, membernumber, socket, uidcountstart, uidcountstop) {
                var _this = this;
                var promiseInv = new TDev.PromiseInv();
                var req = {
                    method: "WS",
                    headers: { host: host.replace(/^[a-z]+:\/\//, "") },
                    url: "/api/" + path,
                    body: params,
                    connection: socket,
                    tdQueryString: {},
                };
                var sReq = TDev.RT.ServerRequest.mk(req, promiseInv);
                if (socket.clientUserId)
                    sReq._user = TDev.RT.User.mk(socket.clientUserId);
                sReq.setJsonBody(params);
                sReq._api_path = path;
                this.currentOp = promiseInv;
                promiseInv.thenalways(function () {
                    if (_this.currentOp === promiseInv) {
                        _this.currentOp = undefined;
                    }
                });
                this.rt.queueAsync(function (rt, args) {
                    _this.membernumber = membernumber;
                    _this.uidcountstart = uidcountstart;
                    _this.uidcountstop = uidcountstop;
                });
                var promise = this.rt.dispatchServerRequest(sReq, promiseInv);
                this.rt.queueAsync(function (rt, args) {
                    _this.membernumber = 0;
                    _this.uidcountstart = undefined;
                    _this.uidcountstop = undefined;
                });
                return promise;
            };
            ServerSession.prototype.abortCurrentTransaction = function (bug) {
                if (this.currentOp != undefined) {
                    this.currentOp.error(bug);
                    this.transactionFailed = true;
                    this.log("rolled back transaction because of error");
                }
                this.log(bug.exceptionMessage);
            };
            ServerSession.prototype.handleCloudPacket = function (p, layer, request, socket) {
                TDev.Util.assert(layer !== undefined);
                this.completeIds(p, layer, socket.membernumber);
                if (p.code === "new") {
                    this.log("Handling new effect");
                    p.serveritemcount = this.serveritemcount;
                    this.serveritemcount += 1;
                    var entry = this.ProcessNewPacket(p, layer);
                    return entry.uid;
                }
                else if (p.code === "del") {
                    this.log("Handling del effect");
                    this.ProcessDelPacket(p, layer);
                }
                else if (p.code === "cld") {
                    this.log("Handling cld effect");
                    if (p.definition === "*")
                        this.ProcessClearRootPacket(p, layer);
                }
                else if (p.code === "clp") {
                    this.log("Handling clp effect");
                }
                else {
                    TDev.Util.assert(p.code === "mod");
                    this.log("Handling mod effect");
                    var lval = this.ProcessModPacket(p, layer, undefined, socket.membernumber);
                    return lval.target();
                }
                return undefined;
            };
            ServerSession.prototype.completeIds = function (p, layer, membernumber) {
                p.ukeys.forEach(function (uid) {
                    var uid = p.ukeys[0];
                    if (uid.indexOf(".") === -1) {
                        p.ukeys[0] = String(membernumber) + "." + uid;
                    }
                });
            };
            ServerSession.prototype.sendResults = function (layer) {
                var _this = this;
                if (layer.cloudOperations !== undefined) {
                    layer.cloudOperations.forEach(function (cop) {
                        if (cop.opid !== undefined) {
                            TDev.Util.assert(cop.socket !== undefined);
                            TDev.Util.assert(cop.res !== undefined);
                            _this.sendResult(cop.opid, cop.res, cop.socket);
                        }
                    });
                }
            };
            ServerSession.prototype.sendResult = function (opid, res, socket) {
                var p = Packet.MakeRpcPacket("", res, opid);
                socket.send(p.toString());
            };
            ServerSession.prototype.sendError = function (opid, err, socket) {
                var p = Packet.MakeRpcPacket("err", err, opid);
                socket.send(p.toString());
            };
            ServerSession.prototype.SaveAndSend = function (serverround) {
                var _this = this;
                TDev.Util.assert(this.loaded);
                var promise = TDev.Promise.as();
                if (serverround !== undefined && this.localround > serverround) {
                    return this.last_C_save;
                }
                if (this.last_C_save._state === 0 /* Pending */) {
                    return this.last_C_save.then(function () { return _this.SaveAndSend(serverround); });
                }
                var ulayer = this.get_layer("D" + this.localround);
                if (ulayer && ulayer.hasData()) {
                    var oldlayer = this.get_unsaved_layer();
                    var baselayer = this.get_layer("B");
                    this.localround += 1;
                    var newlayer = this.create_layer("D" + this.localround, this.localround, this.localround);
                    this.collapse_layers("B", oldlayer.name, true);
                    this.last_C_save = this.SaveToDiskAsync().then(function () {
                        _this.update_keysets(oldlayer);
                        _this.log("Broadcasting Layer " + oldlayer.name);
                        _this.sockets().forEach(function (s) {
                            if (s.lastserverroundsent < oldlayer.serverround) {
                                TDev.Util.assert(s.lastserverroundsent == oldlayer.serverround - 1);
                                _this.sendLayerToClient(oldlayer, s);
                            }
                            else
                                TDev.Util.assert(s.lastserverroundsent == oldlayer.serverround);
                        });
                        _this.log("Sending Updates");
                        _this.sockets().forEach(function (s) { return _this.sendUpdatesToClient(s); });
                        _this.sendResults(oldlayer);
                        oldlayer.removeCloudOperations();
                    });
                    promise = this.last_C_save;
                    this.CLstate_needsave = false;
                }
                else if (this.CLstate_needsave) {
                    promise = this.SaveToDiskAsync();
                    this.CLstate_needsave = false;
                    return promise;
                }
                return promise;
            };
            ServerSession.prototype.S_toJSONstring = function () {
                return JSON.stringify({
                    uidcount: this.uidcount,
                    localround: this.localround,
                    disambiguators: this.disambiguators,
                    current_membernumber: this.current_membernumber
                });
            };
            ServerSession.prototype.S_fromJSONstring = function (s) {
                var json = JSON.parse(s);
                this.uidcount = json.uidcount;
                this.disambiguators = json.disambiguators || {};
                this.localround = json.localround;
                this.current_membernumber = json.current_membernumber;
            };
            ServerSession.prototype.SaveToDiskAsync = function () {
                var _this = this;
                var baselayer = this.get_layer("B");
                var kvpairs = {};
                kvpairs[this.key_Sstate()] = this.S_toJSONstring();
                var packets = this.EncodeLayer(baselayer, 3 /* SERVER_BASE_TO_DISK */);
                kvpairs[this.key_layer("B")] = JSON.stringify(packets);
                this.log("saving state...");
                if (this.trace_save_and_load)
                    this.log(TDev.Util.fmt("\nSaved Metadata:\n{0}\nSaved Data:\n{1}", kvpairs[this.key_Sstate()], packets.map(function (p) { return p.toString(); }).join("\n")));
                this.last_C_save = this.table.setItemsAsync(kvpairs).then(function (saveok) {
                    _this.log("saved state.");
                    return TDev.Promise.as();
                }, function (savefailure) {
                    _this.log("!! failure while saving data ");
                    TDev.Util.oops("save failed... local storage full?");
                    _this.faulted = true;
                    throw savefailure;
                });
                return this.last_C_save;
            };
            ServerSession.prototype.LoadFromDiskAsync = function () {
                var _this = this;
                return TDev.Storage.getTableAsync("Sessions").then(function (table) {
                    _this.table = table;
                    var keys = [_this.key_Sstate(), _this.key_layer("B")];
                    return table.getItemsAsync(keys).then(function (results) {
                        var S = results[keys[0]];
                        var B = results[keys[1]];
                        var baselayer = _this.get_layer("B");
                        if (!S) {
                            _this.Sstate_needsave = true;
                        }
                        else {
                            _this.S_fromJSONstring(S);
                            if (B) {
                                var packets = JSON.parse(B);
                                packets.forEach(function (p) { return _this.ProcessLoadedPacket(p, baselayer); });
                            }
                        }
                        if (baselayer.serverround < _this.localround - 1) {
                            _this.log("Corrupted files - lost " + (_this.localround - baselayer.serverround - 1) + " rounds. ");
                            _this.localround = baselayer.serverround + 1;
                        }
                        _this.loaded = true;
                        _this.statuschanges = true;
                        if (_this.trace_save_and_load)
                            _this.log(TDev.Util.fmt("\Loaded Metadata:\n{0}\nLoaded Data:\n{1}", _this.S_toJSONstring(), _this.EncodeLayer(_this.get_layer("B"), 6 /* TRACE_LOAD */).map(function (p) { return p.toString(); }).join("\n")));
                    });
                });
            };
            ServerSession.prototype.user_sync_enabled = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_enable_sync = function (b) {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_issue_fence = function (continuation, exclusive) {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_get_connectionstatus = function (include_details) {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_get_next_connection_attempt = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_get_missing_rounds = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_is_websocket_open = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_retry_now = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.user_get_percent_full = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.isFaulted = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.isClosed = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.isMarooned = function () {
                throw new Error("Should not be called on the server");
            };
            ServerSession.prototype.getCloudSession = function () {
                throw new Error("Should not be called on the server");
            };
            return ServerSession;
        })(NodeSession);
        Revisions.ServerSession = ServerSession;
        var Keyset = (function () {
            function Keyset(session) {
                this.session = session;
                this.keys = {};
                this.delta = {};
            }
            Keyset.prototype.add = function (key) {
                TDev.Util.assert(key !== undefined);
                if (this.keys[key])
                    return;
                this.added = true;
                this.delta[key] = true;
                this.keys[key] = true;
            };
            Keyset.prototype.remove = function (key) {
                delete this.keys[key];
                delete this.delta[key];
            };
            Keyset.prototype.contains = function (key) {
                return this.keys[key] !== undefined;
            };
            Keyset.prototype.contains_and_clr = function (key) {
                var contains = this.contains(key);
                if (contains) {
                    if (this.delta[key] !== undefined) {
                        this.session.log("sending " + key);
                    }
                    delete this.delta[key];
                }
                else {
                    this.session.log(TDev.Util.fmt("Does not contain: {0}", key));
                }
                return contains;
            };
            Keyset.prototype.is_unsent_and_clr = function (key) {
                var is_unsent = this.delta[key] !== undefined;
                if (is_unsent) {
                    this.session.log("send update for " + key);
                    delete this.delta[key];
                }
                return is_unsent;
            };
            Keyset.prototype.has_unsent_keys = function () {
                return Object.keys(this.delta).length > 0;
            };
            Keyset.prototype.key_sent = function (key) {
                delete this.delta[key];
            };
            Keyset.prototype.unsent_keys = function () {
                return this.delta;
            };
            Keyset.prototype.reset_delta = function () {
                this.delta = {};
            };
            Keyset.prototype.track = function () {
                var res = this.added;
                this.added = false;
                return res;
            };
            return Keyset;
        })();
        Revisions.Keyset = Keyset;
        var Packet = (function () {
            function Packet() {
            }
            Packet.MakeStatusPacket = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var p = new Packet();
                p.code = "sts";
                p.ukeys = [];
                p.lkeys = args;
                return p;
            };
            Packet.MakeNewPacket = function (definition, uid, ukeys, lkeys, serveritemcount, comp) {
                var addedliterals = [];
                var p = new Packet();
                p.code = "new";
                p.ukeys = [uid].concat(ukeys);
                if (comp) {
                    p.lkeys = lkeys.slice(0);
                    p.definition = comp.OutBound(definition, p.lkeys);
                }
                else {
                    p.lkeys = lkeys;
                    p.definition = definition;
                }
                p.serveritemcount = serveritemcount;
                return p;
            };
            Packet.MakeDelPacket = function (uid) {
                var p = new Packet();
                p.code = "del";
                p.ukeys = [uid];
                p.lkeys = [];
                return p;
            };
            Packet.MakeCldStarPacket = function (comp) {
                var p = new Packet();
                p.code = "cld";
                p.ukeys = [];
                p.lkeys = [];
                p.definition = comp ? comp.OutBound("*", p.lkeys) : "*";
                return p;
            };
            Packet.MakeModPacket = function (definition, op, ukeys, lkeys, scheme, comp) {
                var p = new Packet();
                p.code = "mod";
                var addedliterals = [];
                if (typeof (op) !== "string") {
                    TDev.Util.assert(Array.isArray(op));
                    if (scheme)
                        op = scheme.tostrings(op);
                    op = "^#" + op.map(function (s) { return Parser.WriteComboString(comp ? comp.OutBound(s, addedliterals) : s); }).join("|");
                }
                addedliterals.reverse();
                addedliterals.push(op);
                p.definition = comp ? comp.OutBound(definition, addedliterals) : definition;
                p.ukeys = ukeys;
                p.lkeys = lkeys.concat(addedliterals);
                return p;
            };
            Packet.MakeFramePacket = function (layer, withClientRounds) {
                var p = new Packet();
                p.code = "frm";
                p.ukeys = [];
                p.lkeys = [layer.clientround.toString()];
                p.lkeys.push(layer.serverround === undefined ? "" : layer.serverround.toString());
                if (withClientRounds && layer.clientrounds)
                    p.lkeys.push(Object.keys(layer.clientrounds).map(function (c) { return c + ":" + layer.clientrounds[c].toString(); }).join(","));
                return p;
            };
            Packet.MakeCopPacket = function (path, params, opid, uidcountstart, uidcountstop) {
                var json = {
                    path: path,
                    params: params,
                    opid: opid,
                    uidcountstart: uidcountstart,
                    uidcountstop: uidcountstop
                };
                var p = new Packet();
                p.code = "cop";
                p.ukeys = [];
                p.lkeys = [JSON.stringify(json)];
                return p;
            };
            Packet.MakeRpcPacket = function (path, params, opid) {
                var json = {
                    path: path,
                    params: params,
                    opid: opid
                };
                var p = new Packet();
                p.code = "rpc";
                p.ukeys = [];
                p.lkeys = [JSON.stringify(json)];
                return p;
            };
            Packet.ParsePacket = function (from, ws, fromDisk) {
                var p = new Packet();
                var code = from.slice(0, 3);
                var c = (new Parser(from, 0)).ParseComboComponents();
                var i = 0;
                p.code = c[i++];
                p.definition = c[i++];
                if (fromDisk) {
                    p.fromCloudOp = Boolean(c[i++]);
                }
                p.ukeys = new Array();
                p.lkeys = new Array();
                for (; i < c.length; i++) {
                    var s = c[i];
                    var first = s.charAt(0);
                    if (first === "+")
                        p.lkeys.push(s.slice(1));
                    else if (first === "-")
                        p.serveritemcount = Number(s.slice(1));
                    else
                        p.ukeys.push(s);
                }
                return p;
            };
            Packet.prototype.toString = function () {
                var s = this.code + "|" + (this.definition ? Parser.WriteComboString(this.definition) : "");
                this.ukeys.forEach(function (uid) {
                    s = s + "|" + uid;
                });
                this.lkeys.forEach(function (lit) {
                    s = s + "|+" + Parser.WriteComboString(lit);
                });
                if (this.serveritemcount !== undefined)
                    s = s + "|-" + this.serveritemcount;
                return s;
            };
            Packet.prototype.send = function (ws) {
                TDev.Util.check(this.code !== "frm" || this.lkeys[1] !== undefined, "undefined serverround sent frame");
                ws.send(this.toString());
            };
            return Packet;
        })();
        Revisions.Packet = Packet;
        var ChannelCompressor = (function () {
            function ChannelCompressor() {
                this.map = {};
                this.hash = {};
                this.localcount = 0;
            }
            ChannelCompressor.prototype.InBound = function (code, lkeys) {
                TDev.Util.assert(code.length > 0);
                var n;
                var s;
                if (code[0] === '+') {
                    n = Number(code.substr(1));
                    TDev.Util.assert(n !== undefined);
                    s = lkeys.pop();
                    this.map[n] = s;
                    this.hash[s] = n;
                }
                else {
                    n = Number(code);
                    TDev.Util.assert(n !== undefined);
                    s = this.map[n];
                    TDev.Util.assert(s !== undefined);
                }
                return s;
            };
            ChannelCompressor.prototype.OutBound = function (s, lkeys) {
                var code;
                var key = this.hash[s];
                if (key !== undefined) {
                    code = key.toString();
                }
                else {
                    code = "+" + (--this.localcount).toString();
                    this.map[this.localcount] = s;
                    this.hash[s] = this.localcount;
                    lkeys.push(s);
                }
                return code;
            };
            return ChannelCompressor;
        })();
        Revisions.ChannelCompressor = ChannelCompressor;
        var Parser = (function () {
            function Parser(text, pos) {
                this.DefinitionEscapeChar = '$';
                this.DefinitionMetaCharacters = "([,])";
                this.ComboEscapeChar = '@';
                this.ComboMetaCharacters = "|";
                this.text = text;
                this.pos = pos;
            }
            Parser.MakeDomain = function (name, type, components) {
                var s = Parser.WriteDefinitionString(name);
                if (type !== Parser.DOMAIN_BUILTIN) {
                    s += (type === Parser.DOMAIN_DYNAMIC ? "(" : "[");
                    s += components.join(",");
                    s += (type === Parser.DOMAIN_DYNAMIC ? ")" : "]");
                }
                return s;
            };
            Parser.MakeProperty = function (name, domain, codomain) {
                return Parser.WriteDefinitionString(name) + "," + codomain + "[" + domain + "]";
            };
            Parser.MakeKeyString = function (ukeys, lkeys) {
                var s = "";
                ukeys.forEach(function (uid) {
                    s = s + "|" + uid;
                });
                lkeys.forEach(function (lit) {
                    s = s + "|+" + Parser.WriteComboString(lit);
                });
                return s;
            };
            Parser.prototype.ParseKeyString = function (ukeys, lkeys) {
                var c = this.ParseComboComponents();
                for (var i = 0; i < c.length; i++) {
                    var s = c[i];
                    if (s.charAt(0) === "+")
                        lkeys.push(s.slice(1));
                    else
                        ukeys.push(s);
                }
            };
            Parser.prototype.ParseComboComponents = function () {
                var result = new Array();
                while (this.pos < this.text.length) {
                    result.push(this.ParseComboString());
                    this.pos++;
                }
                return result;
            };
            Parser.WriteDefinitionString = function (s) {
                var regexp = /[\$\(\[.\]\)]/g;
                return s.replace(regexp, '$$$&');
            };
            Parser.WriteComboString = function (s) {
                var regexp = /[@\|]/g;
                return s.replace(regexp, '@$&');
            };
            Parser.prototype.ParseDefinitionString = function () {
                return this.ParseString(this.DefinitionEscapeChar, this.DefinitionMetaCharacters);
            };
            Parser.prototype.ParseComboString = function () {
                return this.ParseString(this.ComboEscapeChar, this.ComboMetaCharacters);
            };
            Parser.prototype.ParseString = function (escapechar, metachars) {
                var result = "";
                while (this.pos < this.text.length) {
                    var c = this.text.charAt(this.pos);
                    this.pos += 1;
                    if (c === escapechar) {
                        result = result + (this.text.charAt(this.pos) || escapechar);
                        this.pos += 1;
                    }
                    else if (metachars.indexOf(c) != -1) {
                        this.pos -= 1;
                        return result;
                    }
                    else {
                        result = result + c;
                    }
                }
                return result;
            };
            Parser.DOMAIN_BUILTIN = 0;
            Parser.DOMAIN_STATIC = 1;
            Parser.DOMAIN_DYNAMIC = 2;
            return Parser;
        })();
        Revisions.Parser = Parser;
    })(Revisions = TDev.Revisions || (TDev.Revisions = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Revisions;
    (function (Revisions) {
        var SessionTests = (function () {
            function SessionTests(rt) {
                this.rt = rt;
            }
            SessionTests.prototype.runtest = function (which) {
                if (typeof this[which] === "function") {
                    this.print("running test \"" + which + "\"");
                    this[which]();
                }
                else
                    this.print("no such test: \"" + which + "\"");
            };
            SessionTests.prototype.print = function (s) {
                this.rt.postBoxedText(s, "");
            };
            SessionTests.prototype.fail = function (msg) {
                this.print("FAILED: " + msg);
            };
            SessionTests.prototype.assert = function (cond) {
                if (!cond)
                    this.print("FAILED");
            };
            SessionTests.prototype.randomsuffix = function () {
                var d = new Date();
                var ms = d.getMilliseconds();
                return String.fromCharCode("a".charCodeAt(0) + ms % 26) + String.fromCharCode("a".charCodeAt(0) + Math.floor(ms / 26) % 26);
            };
            SessionTests.prototype.refreshtoken = function () {
                var _this = this;
                Revisions.getRevisionServiceTokenAsync().then(function (token) {
                    _this.print("success:");
                    _this.print("token=" + token);
                }, function (e) {
                    _this.fail("error: " + e);
                });
            };
            SessionTests.prototype.list = function () {
                var _this = this;
                var user = TDev.Cloud.getUserId();
                this.print("issuing get request for sessions by user " + user + "...");
                Revisions.queryMySessionsOnRevisionServerAsync(this.rt).then(function (s) {
                    _this.print("success:");
                    s.forEach(function (si) {
                        _this.print("");
                        _this.print("id=" + si._id);
                        _this.print("d=" + si._title);
                    });
                }, function (e) {
                    _this.fail("error: " + e);
                });
            };
            SessionTests.prototype.deletetests = function () {
                var _this = this;
                var user = TDev.Cloud.getUserId();
                this.print("issuing get request for sessions by user " + user + "...");
                Revisions.queryMySessionsOnRevisionServerAsync(this.rt).then(function (s) {
                    _this.print("success:");
                    s.forEach(function (si) {
                        if (si._title.indexOf("test session for") == 0) {
                            _this.print("deleting " + si._id);
                            Revisions.deleteSessionAsync(_this.rt.sessions.getCloudSessionDescriptor(s._id, s._title, s._permissions), _this.rt).then(function (ack) {
                                _this.print("successfully deleted " + si._id);
                            }, function (err) {
                                _this.fail("error deleting " + si._id + ": " + err);
                            }).done();
                        }
                    });
                }, function (e) {
                    _this.fail("error: " + e);
                });
            };
            SessionTests.prototype.connect1 = function () {
                var _this = this;
                this.print("connecting...");
                var sfx = this.randomsuffix();
                var testname = "connectone" + sfx;
                var s = new TDev.Revisions.ClientSession(TDev.Cloud.getUserId() + "0" + testname, "a" + sfx, TDev.Cloud.getUserId());
                s.connect(this.rt.sessions.url_ws(), Revisions.getRevisionServiceTokenAsync);
                this.print("create elt...");
                var dcustomer = "customer()";
                var alice = s.user_create_item(dcustomer, [], []);
                var items = s.user_get_items_in_domain(dcustomer);
                this.assert(items.length == 1);
                this.assert(items[0] === alice);
                this.print("issuing fence 1...");
                s.user_issue_fence(function () {
                    _this.print("fence 1 completed.");
                    var items = s.user_get_items_in_domain(dcustomer);
                    _this.assert(items.length == 1);
                    _this.assert(items[0] === alice);
                    _this.print("delete elt...");
                    s.user_delete_item(alice);
                    var items = s.user_get_items_in_domain(dcustomer);
                    _this.assert(items.length == 0);
                    _this.print("issuing fence 2...");
                    s.user_issue_fence(function () {
                        _this.print("fence 2 completed.");
                        var items = s.user_get_items_in_domain(dcustomer);
                        _this.assert(items.length == 0);
                        _this.print("DATA:");
                        var lines = s.user_dump_stable_data(function (b) { return _this.assert(b); });
                        lines.forEach(function (l) { return _this.print(l); });
                        _this.print("test completed.");
                    }, true);
                }, true);
            };
            SessionTests.prototype.connect2 = function () {
                var _this = this;
                this.print("connecting...");
                var testname = TDev.Cloud.getUserId() + "0" + "connecttwo" + this.randomsuffix();
                var s = new TDev.Revisions.ClientSession(testname, testname, TDev.Cloud.getUserId());
                s.connect(this.rt.sessions.url_ws(), Revisions.getRevisionServiceTokenAsync);
                var st = s.user_get_value(s.user_get_lval("mystring,string[void[]]", [], []));
                var db = s.user_get_value(s.user_get_lval("mydouble,double[void[]]", [], []));
                this.assert(st === "");
                this.assert(db === 0.0);
                this.print("writing data...");
                s.user_modify_lval(s.user_get_lval("mystring,string[void[]]", [], []), "");
                s.user_modify_lval(s.user_get_lval("mydouble,double[void[]]", [], []), 3.14);
                var st = s.user_get_value(s.user_get_lval("mystring,string[void[]]", [], []));
                var db = s.user_get_value(s.user_get_lval("mydouble,double[void[]]", [], []));
                this.assert(st === "");
                this.assert(db === 3.14);
                this.print("yielding...");
                s.user_yield();
                s.user_modify_lval(s.user_get_lval("mystring,string[void[]]", [], []), "new");
                s.user_modify_lval(s.user_get_lval("mydouble,double[void[]]", [], []), "A-3");
                var st = s.user_get_value(s.user_get_lval("mystring,string[void[]]", [], []));
                var db = s.user_get_value(s.user_get_lval("mydouble,double[void[]]", [], []));
                this.assert(st === "new");
                this.assert(db - 0.14 < 0.000000001);
                this.print("issuing fence 1...");
                s.user_issue_fence(function () {
                    _this.print("fence 1 completed.");
                    var st = s.user_get_value(s.user_get_lval("mystring,string[void[]]", [], []));
                    var db = s.user_get_value(s.user_get_lval("mydouble,double[void[]]", [], []));
                    _this.assert(st === "new");
                    _this.assert(db - 0.14 < 0.000000001);
                    _this.print("DATA:");
                    var lines = s.user_dump_stable_data(function (b) { return _this.assert(b); });
                    lines.forEach(function (l) { return _this.print(l); });
                    _this.print("test completed.");
                }, true);
            };
            SessionTests.prototype.serverpersistence1 = function () {
                var _this = this;
                this.print("connecting first session...");
                var sfx = this.randomsuffix();
                var testname = TDev.Cloud.getUserId() + "0serverpersistenceone" + sfx;
                var s = new TDev.Revisions.ClientSession(testname, "a", TDev.Cloud.getUserId());
                s.connect(this.rt.sessions.url_ws(), Revisions.getRevisionServiceTokenAsync);
                this.print("data...");
                var alice = s.user_create_item("customer()", [], []);
                var bob = s.user_create_item("customer()", [], []);
                var charlie = s.user_create_item("customer()", [], []);
                var delta = s.user_create_item("customer()", [], []);
                s.user_modify_lval(s.user_get_lval("name,string[customertable[customer()]]", [alice.uid], []), "Alice");
                s.user_modify_lval(s.user_get_lval("name,string[customertable[customer()]]", [bob.uid], []), "Bob");
                s.user_modify_lval(s.user_get_lval("name,string[customertable[customer()]]", [charlie.uid], []), "Charlie");
                s.user_modify_lval(s.user_get_lval("name,string[customertable[customer()]]", [delta.uid], []), "");
                var is = s.user_get_items_in_domain("customer()").map(function (e) { return e.target(); }).sort();
                var ref = [alice.uid, bob.uid, charlie.uid, delta.uid].sort();
                this.assert(is.length == ref.length);
                for (var i = 0; i < is.length; i++)
                    this.assert(is[i] === ref[i]);
                var ks = s.user_get_entries_in_indexdomain("customertable[customer()]").map(function (e) { return e.target(); }).sort();
                var ref = [s.user_get_entry("customertable[customer()]", [alice.uid], []), s.user_get_entry("customertable[customer()]", [bob.uid], []), s.user_get_entry("customertable[customer()]", [charlie.uid], [])].map(function (e) { return e.target(); }).sort();
                this.assert(ks.length == ref.length);
                for (var i = 0; i < ks.length; i++)
                    this.assert(ks[i] === ref[i]);
                this.print("saving...");
                s.user_issue_fence(function () {
                    _this.print("save completed.");
                    _this.print("connecting second session...");
                    s = new TDev.Revisions.ClientSession(testname, "b", TDev.Cloud.getUserId());
                    s.connect(_this.rt.sessions.url_ws(), Revisions.getRevisionServiceTokenAsync);
                    _this.print("loading...");
                    s.user_issue_fence(function () {
                        _this.print("load completed.");
                        _this.print("checking data...");
                        var is = s.user_get_items_in_domain("customer()");
                        _this.assert(is.length == 4);
                        var es = s.user_get_entries_in_indexdomain("customertable[customer()]");
                        _this.assert(es.length == 3);
                        _this.print("DATA:");
                        var lines = s.user_dump_stable_data(function (b) { return _this.assert(b); });
                        var ref = ["new|customer()|1.1", "new|customer()|1.2", "new|customer()|1.3", "new|customer()|1.4", "mod|name,string[customertable[customer()]]|1.1|+Alice", "mod|name,string[customertable[customer()]]|1.2|+Bob", "mod|name,string[customertable[customer()]]|1.3|+Charlie"];
                        _this.assert(lines.length == ref.length);
                        for (var i = 0; i < lines.length; i++) {
                            _this.assert(lines[i] === ref[i]);
                            _this.print(lines[i]);
                        }
                        _this.print("test completed.");
                    }, true);
                }, true);
            };
            return SessionTests;
        })();
        Revisions.SessionTests = SessionTests;
    })(Revisions = TDev.Revisions || (TDev.Revisions = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var SVG;
    (function (SVG) {
        var actionIcon = "M 90,129L 240,129L 240,149L 90,149L 90,129 Z M 140,169L 240,169L 240,189L 140,189L 140,169 Z M 140,209L 240,209L 240,229L 140,229L 140,209 Z M 190,249L 370,249L 370,269L 190,269L 190,249 Z M 90,289L 370,289L 370,309L 90,309L 90,289 Z M 140,329L 370,329L 370,349L 140,349L 140,329 Z M 140,369L 370,369L 370,389L 140,389L 140,369 Z M ";
        var codeSigns = {
            "\u2339": svgBoilerPlate('0 0 380 380', "<path fill='#000000' d=' M 263.5,153.201L 263.5,181.142L 263.5,181.799L 71.5,181.799L 71.5,181.142L 71.5,153.201L 71.5,152.543L 263.5,152.543L 263.5,153.201 Z M 2.79943e-005,0L 335,0L 335,335L 2.79943e-005,335L 2.79943e-005,0 Z M 24.4999,24.5L 24.4999,310.5L 310.5,310.5L 310.5,24.5L 24.4999,24.5 Z M 167.5,66.6287C 180.203,66.6287 190.5,76.926 190.5,89.6286C 190.5,102.331 180.203,112.629 167.5,112.629C 154.797,112.629 144.5,102.331 144.5,89.6286C 144.5,76.926 154.797,66.6287 167.5,66.6287 Z M 167.5,267.714C 154.797,267.714 144.5,257.416 144.5,244.714C 144.5,232.011 154.797,221.714 167.5,221.714C 180.203,221.714 190.5,232.011 190.5,244.714C 190.5,257.416 180.203,267.714 167.5,267.714 Z '/>"),
            "\u25f3": svgBoilerPlate('0 0 380 380', "<path fill='#000000' d=' M 179.812,155.187L 310.5,155.187L 310.5,24.4998L 179.812,24.4998L 179.812,155.187 Z M 155.172,179.812L 155.172,155.187L 155.188,155.187L 155.188,24.4999L 24.4999,24.4999L 24.4999,310.5L 310.5,310.5L 310.5,179.812L 155.172,179.812 Z M -2.2889e-005,0L 335,0L 335,335L -2.2889e-005,335L -2.2889e-005,0 Z '/>"),
        };
        var scriptIcons = {};
        function loadScriptIcons(icons) {
            scriptIcons = icons;
        }
        SVG.loadScriptIcons = loadScriptIcons;
        var icons = {
            findrefs: "M 100,240L 176,240L 91,155L 117,130L 202,215L 202,138L 232,168L 232,270L 130,270L 100,240 Z M 278,138L 278,215L 363,130L 388,155L 303,240L 380,240L 350,270L 248,270L 248,168L 278,138 Z M 240,279C 260,279 277,296 277,317C 277,337 260,354 240,354C 219,354 203,337 203,317C 203,296 219,279 240,279 Z ",
            back: "M 272,137L 213,137L 112,238L 213,340L 272,340L 196,264L 365,264L 365,213L 196,213L 272,137 Z ",
            select: "M 248,139L 313,120L 313,119L 313,119L 341,119L 341,354L 313,354L 313,354L 313,353L 248,334L 313,315L 313,158L 248,139 Z M 297,175L 297,202L 127,202L 127,175L 297,175 Z M 297,221L 297,249L 127,249L 127,221L 297,221 Z M 297,266L 297,294L 127,294L 127,266L 297,266 Z ",
            add: "M 219,119L 260,119L 260,220L 361,220L 361,261L 260,261L 260,363L 219,363L 219,261L 117,261L 117,220L 219,220L 219,119 Z ",
            color: "M 219,360C 190,355 163,341 145,322C 137,314 135,311 130,302C 115,272 113,230 125,198C 134,174 152,150 171,134C 181,127 198,118 209,115C 223,112 240,112 251,116C 262,119 268,123 275,131C 284,140 287,151 286,165C 285,169 282,180 279,190C 270,215 270,219 269,234C 268,246 268,247 267,247C 262,247 254,251 250,255C 245,259 240,266 237,278C 234,287 231,289 221,292C 216,293 213,293 213,293C 212,293 212,290 211,287C 207,273 192,265 179,269C 161,274 154,294 164,309C 169,318 182,323 192,320C 194,319 198,318 200,316L 204,314L 209,316C 213,318 232,323 237,323C 240,323 240,324 245,330C 253,341 269,343 280,336C 286,333 291,325 292,319C 292,315 293,314 298,310C 305,304 310,295 310,290C 310,286 311,286 314,284C 316,283 319,281 320,280C 322,279 322,279 324,282C 326,283 328,287 329,290C 332,295 332,297 332,307C 332,316 332,318 329,324C 322,338 302,351 272,358C 259,361 231,362 219,360 Z M 176,239C 182,236 188,230 190,224C 194,216 191,203 185,196C 172,183 150,187 142,203C 139,208 139,219 141,224C 147,238 163,245 176,239 Z M 239,193C 249,188 254,180 254,169C 254,161 252,155 246,150C 241,145 236,143 229,143C 215,143 203,152 202,166C 199,186 221,201 239,193 Z M 239,314C 232,312 218,309 214,307C 210,306 211,305 221,302C 238,299 242,295 248,276C 251,267 257,260 264,259C 269,258 270,258 272,262C 278,278 281,281 292,284C 295,285 298,287 299,288C 303,293 289,306 274,312C 267,314 249,315 239,314 Z M 294,277C 290,275 284,269 282,265C 280,260 281,254 285,249C 289,243 310,222 336,197C 366,169 374,163 385,163C 397,163 396,174 383,194C 365,221 330,260 314,271C 304,278 300,280 294,277 Z ",
            script: "M 145,329L 145,314L 176,314L 176,345L 145,345M 197,329L 197,314L 381,314L 381,345L 197,345M 145,278L 145,263L 279,263L 279,293L 145,293M 145,227L 145,212L 176,212L 176,242L 145,242M 197,227L 197,212L 381,212L 381,242L 197,242M 145,176L 145,160L 176,160L 176,191L 145,191M 197,176L 197,160L 381,160L 381,191L 197,191M 145,124L 145,108L 279,108L 279,140L 145,140",
            cursorright: "M 145,372L 204,372L 323,239L 204,105L 145,105L 264,239L 145,372",
            cursorleft: "M 323,105L 264,105L 145,238L 264,372L 323,372L 204,238L 323,105",
            actionlocation: actionIcon + "322,214L 373,162L 259,162L 259,128L 373,128L 322,77L 362,77L 430,145L 362,214L 322,214 Z ",
            actionevent: actionIcon + "333,70L 398,70L 342,128L 392,128L 289,231L 330,149L 283,149L 333,70 Z ",
            play: "M 353,238L 171,139L 171,338L 353,238 Z ",
            touchdevelop: "M 345.465,233.947C 291.077,233.947 246.745,189.615 246.745,135.22C 246.745,80.8323 291.077,36.5 345.465,36.5C 399.858,36.5 444.19,80.8323 444.19,135.22C 444.19,189.615 399.858,233.947 345.465,233.947 Z M 345.463,222.614C 393.614,222.614 432.318,183.372 432.318,135.221C 432.318,87.0756 393.614,48.3658 345.463,48.3658C 297.317,48.3658 258.612,87.0756 258.612,135.221C 258.612,183.372 297.317,222.614 345.463,222.614 Z M 303.328,181.882L 305.937,165.141L 320.075,179.26L 303.328,181.882 Z M 328.201,176.761L 308.242,156.802L 358.955,106.089L 378.914,126.055L 328.201,176.761 Z M 133.992,446.5C 79.599,446.5 35.81,402.168 35.81,347.773C 35.81,293.381 79.599,249.053 133.992,249.053C 188.386,249.053 232.712,293.381 232.712,347.773C 232.712,402.168 188.386,446.5 133.992,446.5 Z M 133.992,435.168C 182.143,435.168 221.387,395.925 221.387,347.773C 221.387,299.622 182.143,260.918 133.992,260.918C 85.8401,260.918 47.1367,299.622 47.1367,347.773C 47.1367,395.925 85.8401,435.168 133.992,435.168 Z M 173.078,347.868L 114.177,392.131L 114.177,303.592L 173.078,347.868 Z M 345.463,445.961C 291.075,445.961 246.743,401.629 246.743,347.235C 246.743,292.842 291.075,248.51 345.463,248.51C 399.856,248.51 444.188,292.842 444.188,347.235C 444.188,401.629 399.856,445.961 345.463,445.961 Z M 345.463,434.091C 393.615,434.091 432.318,395.386 432.318,347.235C 432.318,299.083 393.615,259.841 345.463,259.841C 297.318,259.841 258.613,299.083 258.613,347.235C 258.613,395.386 297.312,434.091 345.463,434.091 Z M 333.523,375.804C 331.45,375.804 329.71,375.145 328.277,373.801C 326.825,372.472 326.116,370.863 326.116,368.997C 326.116,367.12 326.825,365.498 328.277,364.133C 329.71,362.786 331.45,362.112 333.523,362.112C 335.614,362.112 337.392,362.786 338.858,364.133C 340.31,365.498 341.03,367.12 341.03,368.997C 341.03,370.863 340.31,372.472 338.858,373.801C 337.392,375.145 335.614,375.804 333.523,375.804 Z M 333.523,334.701C 331.45,334.701 329.71,334.044 328.277,332.711C 326.825,331.364 326.116,329.781 326.116,327.915C 326.116,326.018 326.825,324.389 328.277,323.044C 329.71,321.679 331.45,321.009 333.523,321.009C 335.614,321.009 337.392,321.679 338.858,323.044C 340.31,324.389 341.03,326.018 341.03,327.915C 341.03,329.781 340.31,331.364 338.858,332.711C 337.392,334.044 335.614,334.701 333.523,334.701 Z M 357.258,391.612L 347.198,391.612C 357.816,378.771 363.131,363.751 363.131,346.558C 363.131,329.223 357.797,314.016 347.146,300.981L 357.314,300.981C 368.189,313.553 373.643,328.779 373.643,346.659C 373.643,364.477 368.171,379.46 357.258,391.612 Z M 133.993,233.947C 79.5998,233.947 35.8108,189.615 35.8108,135.221C 35.8108,80.8326 79.5998,36.5003 133.993,36.5003C 188.387,36.5003 232.713,80.8326 232.713,135.221C 232.713,189.615 188.387,233.947 133.993,233.947 Z M 133.993,222.614C 182.144,222.614 221.388,183.372 221.388,135.221C 221.388,87.0753 182.144,48.3655 133.993,48.3655C 85.8409,48.3655 47.1375,87.0753 47.1375,135.221C 47.1375,183.372 85.8409,222.614 133.993,222.614 Z M 136.692,149.79C 118.172,149.79 102.702,134.863 102.702,116.345C 102.702,97.8058 118.172,82.8937 136.692,82.8937C 155.223,82.8937 170.137,97.8058 170.137,116.345C 170.137,134.863 155.223,149.79 136.692,149.79 Z M 136.692,141.156C 137.65,141.156 138.594,141.103 139.521,141.002L 146.401,117.422L 126.981,117.422L 133.35,140.941C 134.445,141.083 135.56,141.156 136.692,141.156 Z M 161.502,116.345C 161.502,102.459 150.578,91.5262 136.692,91.5262C 122.823,91.5262 111.335,102.459 111.335,116.345C 111.335,126.766 117.829,135.542 126.946,139.255L 119.969,115.261L 119.969,114.723L 119.969,114.184C 120.07,113.796 120.257,113.426 120.507,113.107C 120.764,112.663 121.14,112.287 121.584,112.024C 121.903,111.78 122.273,111.593 122.661,111.485L 123.206,111.485L 150.178,111.485L 150.716,111.485L 151.255,112.024L 151.793,112.024L 152.338,112.562L 152.875,113.107C 153.127,113.42 153.308,113.79 153.413,114.184C 153.476,114.542 153.476,114.904 153.413,115.261L 146.442,139.221C 155.365,135.488 161.502,126.734 161.502,116.345 Z M 120.12,159.268L 120.201,153.333L 152.92,153.383L 152.882,156.713L 120.12,159.268 Z M 120.12,161.685L 152.882,159.031L 152.851,163.6L 120.12,166.211L 120.12,161.685 Z M 120.238,168.579L 152.882,166.004L 152.851,170.024L 120.633,172.51L 120.238,168.579 Z M 121.272,174.789L 121.323,174.909L 126.537,174.376L 147.255,172.685L 152.432,172.353L 152.332,172.922L 151.624,174.914C 151.279,175.759 150.848,176.761 150.228,177.812C 149.62,178.846 148.825,179.934 147.617,180.968C 146.408,182.006 144.769,183.008 142.972,183.747C 141.193,184.492 139.247,184.994 137.556,185.181C 135.859,185.369 134.444,185.27 132.998,184.943C 131.565,184.611 130.081,184.061 128.817,183.404C 127.539,182.765 126.488,182.006 125.523,181.143C 124.553,180.279 123.657,179.277 122.968,178.206C 122.298,177.155 121.807,176.044 121.323,174.909L 121.272,174.914L 121.272,174.789 Z M 383.229,121.735L 363.808,101.776L 367.583,97.9995L 369.08,96.5852C 374.22,91.4259 382.828,92.2712 387.975,97.4176C 393.134,102.577 393.71,111.16 388.551,116.319C 388.209,116.66 388.35,116.62 387.544,117.422L 383.229,121.735 Z ",
            undo: "M 256,133C 228,133 202,143 183,163C 174,172 166,183 161,194L 121,148L 121,260L 220,260L 186,221C 189,208 195,195 205,185C 219,172 237,164 256,164C 275,164 293,172 306,185C 320,199 327,217 327,236C 327,255 320,273 306,287C 300,293 300,303 306,309C 310,312 314,314 318,314C 322,314 326,312 329,309C 348,290 359,264 359,236C 359,208 348,182 329,163C 309,143 283,133 256,133 Z ",
            cut: "M 328,324C 325,330 322,333 318,333C 315,333 311,331 308,327L 289,301L 289,299L 276,282L 273,277C 277,272 283,267 291,267C 299,267 307,272 316,281C 331,297 332,315 328,324 Z M 173,326C 165,335 157,334 153,324C 149,315 149,297 165,281C 174,272 182,267 189,267C 197,267 204,273 208,277L 196,293L 192,299L 192,300L 173,326 Z M 333,265C 320,251 305,243 291,243C 277,243 266,251 258,258L 256,254L 262,246L 292,227L 336,156L 336,109L 241,235L 146,109L 146,156L 189,227L 219,246L 225,255L 223,258C 215,251 204,243 189,243C 175,243 161,251 148,265C 124,289 124,317 131,334C 137,348 152,357 165,357C 171,357 192,342 193,341L 204,325L 241,275L 278,326L 290,342C 290,343 310,357 316,357C 330,357 343,348 349,334C 356,317 357,289 333,265 Z ",
            search: "M 277,139C 310,139 338,166 338,200C 338,233 310,261 277,261C 243,261 216,233 216,200C 216,166 243,139 277,139 Z M 156,354L 233,277C 246,284 261,288 277,288C 325,288 365,248 365,200C 365,151 325,112 277,112C 228,112 189,151 189,200C 189,218 194,235 204,249L 127,325C 123,329 122,334 122,339C 122,345 123,350 127,354C 135,362 148,362 156,354 Z ",
            history: "M 343,215L 378,181L 343,146L 257,146L 257,112L 223,112L 223,146L 154,146L 154,215L 223,215L 223,232L 136,232L 102,267L 136,301L 223,301L 223,388L 257,388L 257,301L 326,301L 326,232L 257,232L 257,215L 343,215 Z ",
            edit: "M 135,344L 141,303L 175,337L 135,344 Z M 195,331L 147,283L 269,160L 318,209L 195,331 Z M 328,198L 281,150L 290,141L 294,137C 306,125 327,127 340,139C 352,152 353,173 341,185C 340,186 340,186 339,188L 328,198 Z ",
            backspace: "M 242,198L 267,224L 293,198L 308,213L 282,238L 308,264L 293,279L 267,253L 242,279L 227,264L 253,238L 227,213L 242,198 Z M 75,238L 173,161L 349,161L 349,316L 173,316L 75,238 Z M 105,238L 182,300L 333,300L 333,177L 182,177L 105,238 Z ",
            hammer: "M 251,118C 256,115 268,109 283,109C 298,109 316,116 328,123C 340,130 346,137 349,141C 352,145 352,145 350,147C 348,150 343,154 344,160C 345,166 352,174 357,175C 362,176 367,171 370,169C 373,167 375,170 377,172C 378,174 380,177 380,179C 380,181 379,183 373,189C 367,195 356,206 351,212C 345,217 345,217 343,217C 342,217 339,217 337,216C 334,215 332,212 332,209C 331,207 332,204 333,202C 334,200 336,198 337,196C 338,194 338,192 336,190C 334,187 330,185 327,183C 323,181 320,181 318,182C 315,183 312,185 298,198C 284,211 259,234 246,247C 234,259 234,260 234,261C 235,263 235,264 232,268C 229,272 223,278 209,291C 195,305 174,326 163,337C 152,348 152,348 150,348C 149,348 146,348 142,344C 138,341 133,335 130,331C 128,327 128,326 142,312C 156,298 185,270 199,256C 214,242 214,242 215,242C 216,243 218,243 220,244C 221,244 221,244 234,232C 247,220 272,195 284,183C 297,170 297,170 298,166C 300,163 303,156 302,149C 302,142 297,134 291,130C 285,125 276,124 269,124C 262,123 255,123 252,122C 248,122 246,122 251,118 Z ",
            circleplus: "M 236.481,4.8425C 365.798,4.8425 470.63,109.674 470.63,238.991C 470.63,368.307 365.798,473.139 236.481,473.139C 107.165,473.139 2.33301,368.307 2.33301,238.991C 2.33301,109.674 107.165,4.8425 236.481,4.8425 Z M 236.481,26.9594C 119.379,26.9594 24.4499,121.889 24.4499,238.991C 24.4499,356.092 119.38,451.022 236.481,451.022C 353.583,451.022 448.513,356.092 448.513,238.991C 448.513,121.889 353.583,26.9594 236.481,26.9594 Z M 255.648,137.451L 255.648,219.824L 338.02,219.824L 338.02,258.157L 255.648,258.157L 255.648,340.53L 217.315,340.53L 217.315,258.157L 134.942,258.157L 134.942,219.824L 217.315,219.824L 217.315,137.451L 255.648,137.451 Z ",
            cancel: "M 172.862,139.945L 240.453,207.537L 308.045,139.945L 339.499,171.399L 271.907,238.991L 339.499,306.582L 308.045,338.036L 240.453,270.445L 172.862,338.036L 141.408,306.582L 208.999,238.991L 141.408,171.399L 172.862,139.945 Z ",
            stop: "M 153,153L 326,153L 326,326L 153,326L 153,326 Z ",
            gameboard: "M 154.865,98.1082L 154.865,154.865L 211.622,154.865L 211.622,98.1089L 154.865,98.1082 Z M 98.1082,90.0002L 381.892,90.0002L 390,90.0002L 390,390L 381.892,390L 98.1082,390L 90.0001,390L 90.0001,90.0001L 98.1082,90.0002 Z M 98.1081,325.136L 154.865,325.136L 154.865,268.379L 98.108,268.379L 98.1081,325.136 Z M 98.108,211.622L 154.865,211.622L 154.865,154.866L 98.1081,154.865L 98.108,211.622 Z M 381.892,154.865L 325.135,154.865L 325.135,98.1089L 268.378,98.109L 268.378,154.866L 325.135,154.866L 325.135,211.622L 381.892,211.622L 381.892,154.865 Z M 381.892,268.379L 325.135,268.379L 325.135,325.136L 381.892,325.136L 381.892,268.379 Z M 325.135,268.379L 325.135,211.622L 268.378,211.622L 268.378,268.379L 325.135,268.379 Z M 325.135,381.892L 325.135,325.136L 268.378,325.136L 268.378,381.892L 325.135,381.892 Z M 211.622,381.892L 211.622,325.136L 154.865,325.136L 154.865,381.892L 211.622,381.892 Z M 211.622,154.865L 211.622,211.622L 268.378,211.622L 268.378,154.866L 211.622,154.865 Z M 268.378,268.379L 211.622,268.379L 211.622,325.136L 268.378,325.136L 268.378,268.379 Z M 154.865,268.379L 211.622,268.379L 211.622,211.622L 154.865,211.622L 154.865,268.379 Z ",
            follower: "M 240.779,79.9986C 226.097,79.9986 214.194,91.9003 214.194,106.582C 214.194,121.258 226.097,133.16 240.779,133.16C 255.455,133.16 267.357,121.258 267.357,106.582C 267.357,91.9003 255.455,79.9986 240.779,79.9986 Z M 213.625,146.396C 204.769,146.396 195.965,149.489 189.708,154.791C 183.446,160.1 179.802,167.559 179.802,175.059L 179.802,175.818C 179.784,176.15 179.784,176.476 179.802,176.808L 179.802,288.21C 179.749,293.4 185.117,298.181 191.107,298.258C 197.202,298.335 202.802,293.5 202.743,288.21L 202.743,192.312L 210.1,192.312L 210.1,285.515L 210.137,285.515L 210.137,385.659C 210.041,392.01 215.729,397.883 222.081,397.983C 225.321,398.03 228.562,396.721 230.855,394.427C 233.143,392.136 234.458,388.901 234.404,385.659L 234.404,285.515L 246.538,285.515L 246.538,385.659C 246.443,392.01 252.13,397.883 258.482,397.983C 261.722,398.03 264.963,396.721 267.257,394.427C 269.544,392.136 270.859,388.901 270.806,385.659L 270.806,285.515L 270.847,285.515L 270.847,192.312L 278.163,192.312L 278.163,289.614C 278.082,294.827 283.49,299.638 289.504,299.698C 295.6,299.757 301.187,294.905 301.104,289.614L 301.104,178.247C 301.116,177.958 301.116,177.666 301.104,177.377L 301.104,175.059C 301.104,167.559 297.461,160.1 291.204,154.791C 284.942,149.489 276.137,146.396 267.279,146.396",
            nicehammer: "M 260.037,115.075C 264.533,111.92 274.714,105.811 288.337,105.666C 301.96,105.52 319.025,111.338 330.176,117.64C 341.326,123.943 346.562,130.73 349.18,134.172C 351.798,137.614 351.798,137.711 349.956,139.796C 348.114,141.88 344.429,145.953 345.496,151.48C 346.562,157.006 352.38,163.988 357.276,164.909C 362.173,165.83 366.148,160.691 368.96,159.091C 371.772,157.491 373.421,159.43 374.923,161.612C 376.426,163.794 377.784,166.218 378.123,168.108C 378.462,169.999 377.784,171.357 372.439,177.102C 367.094,182.846 357.083,192.979 351.956,198.118C 346.829,203.257 346.587,203.402 345.241,203.499C 343.896,203.596 341.448,203.645 339.29,202.433C 337.133,201.221 335.266,198.748 334.612,196.421C 333.957,194.094 334.515,191.912 335.727,189.961C 336.939,188.01 338.805,186.289 339.593,184.519C 340.381,182.749 340.09,180.931 338.236,178.726C 336.381,176.52 332.964,173.926 329.873,172.544C 326.782,171.163 324.019,170.993 321.413,171.829C 318.807,172.666 316.359,174.508 301.52,188.886C 286.681,203.265 259.451,230.18 245.902,244.041C 232.352,257.902 232.484,258.71 232.743,259.951C 233.003,261.191 233.391,262.863 230.837,266.31C 228.284,269.757 222.789,274.978 206.547,291.429C 190.305,307.88 163.316,335.561 149.773,349.402C 136.23,363.242 136.133,363.242 134.792,363.242C 133.45,363.242 130.865,363.242 127.168,360.337C 123.471,357.433 118.664,351.623 116.26,348.331C 113.856,345.038 113.856,344.262 130.465,327.068C 147.073,309.873 180.29,276.26 196.996,259.518C 213.702,242.776 213.896,242.906 214.962,243.197C 216.029,243.487 217.968,243.94 219.164,244.198C 220.36,244.457 220.812,244.522 234.532,230.753C 248.252,216.985 275.239,189.383 288.782,175.405C 302.324,161.426 302.421,161.071 303.762,157.855C 305.103,154.639 307.689,148.563 306.913,142.034C 306.138,135.505 302.001,128.524 296.215,124.646C 290.43,120.767 282.996,119.992 276.338,119.507C 269.68,119.022 263.798,118.828 260.263,118.63C 256.728,118.432 255.54,118.23 260.037,115.075 Z ",
            resume: "M 379.088,238.991L 200.911,336.845L 200.911,141.136L 379.088,238.991 Z M 150.921,141.091L 181.27,141.091L 181.27,336.89L 150.921,336.89L 150.921,141.091 Z ",
            pausesq: "M 256.877,141.174L 295.645,141.174L 295.645,336.807L 256.877,336.807L 256.877,141.174 Z M 185.261,141.174L 224.029,141.174L 224.029,336.807L 185.261,336.807L 185.261,141.174 Z ",
            experiment: "M 364.4,192.137L 364.363,192.112L 225.122,99.8953L 232.252,89.1295L 291.226,128.169L 336.644,128.169L 246.104,68.215L 253.232,57.4525L 392.51,149.694C 404.23,157.456 407.439,173.25 399.676,184.97C 391.914,196.69 376.121,199.899 364.4,192.137 Z M 200.75,294.907C 206.525,294.907 211.207,299.589 211.207,305.364C 211.207,311.139 206.525,315.82 200.75,315.82C 194.975,315.82 190.293,311.139 190.293,305.364C 190.293,299.589 194.975,294.907 200.75,294.907 Z M 223.827,267.863C 229.602,267.863 234.284,272.545 234.284,278.32C 234.284,284.095 229.602,288.777 223.827,288.777C 218.052,288.777 213.37,284.095 213.37,278.32C 213.37,272.545 218.052,267.863 223.827,267.863 Z M 217.343,195.686C 223.118,195.686 227.8,200.368 227.8,206.143C 227.8,211.918 223.118,216.6 217.343,216.6C 211.568,216.6 206.886,211.918 206.886,206.143C 206.886,200.368 211.568,195.686 217.343,195.686 Z M 95.4793,378.08L 190.255,258.966L 190.255,138.415L 204.394,138.415L 204.394,267.793L 159.43,325.71L 275.622,325.71L 230.659,267.792L 230.659,138.415L 244.797,138.415L 244.797,258.966L 339.573,378.08L 95.4793,378.08 Z M 183.646,337.876C 177.87,337.876 173.189,342.558 173.189,348.333C 173.189,354.108 177.87,358.79 183.646,358.79C 189.421,358.79 194.102,354.108 194.102,348.333C 194.102,342.558 189.421,337.876 183.646,337.876 Z M 238.19,328.321C 232.415,328.321 227.733,333.002 227.733,338.777C 227.733,344.553 232.415,349.234 238.19,349.234C 243.965,349.234 248.647,344.553 248.647,338.777C 248.647,333.002 243.965,328.321 238.19,328.321 Z ",
            stackpoint: "M 288.576,32.0641L 464.928,240.48L 288.576,464.928L 288.576,320.64C 235.136,320.64 181.696,320.64 133.6,293.839C 85.5041,267.039 42.752,213.438 29.392,162.67C 16.032,111.902 32.064,63.9671 48.0961,16.032C 74.8161,69.472 101.536,122.912 141.616,149.632C 181.696,176.352 235.136,176.352 288.576,176.352L 288.576,32.0641 Z",
            breakpoint: "M 240.48,64.1281C 143.084,64.1281 64.128,143.084 64.128,240.48C 64.128,337.877 143.084,416.832 240.48,416.832C 337.877,416.832 416.832,337.877 416.832,240.48C 416.832,143.084 337.877,64.1281 240.48,64.1281 Z",
            currentpoint: "M 288.576, 32.0641L 464.928, 240.48L 288.576, 464.928L 288.576, 320.64L 64.128, 320.64L 64.128, 176.352L 288.576, 176.352L 288.576, 32.0641 Z",
            stepin: "M 288.576,272.544L 384.768,272.544L 384.768,368.736L 288.576,368.736L 288.576,272.544 Z M 208.416,256.512L 272.544,320.64L 208.416,384.768L 144.288,384.768L 176.352,352.704C 133.6,352.704 90.848,352.704 69.472,312.624C 48.096,272.544 48.096,192.384 77.488,152.304C 106.88,112.224 165.664,112.224 224.448,112.224L 224.448,176.352C 187.04,176.352 149.632,176.352 130.928,195.056C 112.224,213.76 112.224,251.168 122.912,269.872C 133.6,288.576 154.976,288.576 176.352,288.576L 144.288,256.512L 208.416,256.512 Z",
            stepover: "M 224,160L 320,160L 320,256L 224,256L 224,160 Z M 288,288L 352,352L 288,416L 224,416L 256,384C 202.667,384 149.333,384 122.667,330.667C 96,277.333 96,170.667 122.667,117.333C 149.333,64 202.667,64 256,64L 256,128C 224,128 192,128 176,160C 160,192 160,256 176,288C 192,320 224,320 256,320L 224,288L 288,288 Z",
            stepout: "M 272.544,288.576L 368.736,288.576L 368.736,384.768L 272.544,384.768L 272.544,288.576 Z M 296.926,224.448L 361.054,160.32L 296.926,96.192L 232.798,96.192L 264.862,128.256C 200.734,128.256 136.606,128.256 104.542,168.336C 72.478,208.416 72.478,288.576 101.87,328.656C 131.262,368.736 190.046,368.736 248.83,368.736L 248.83,304.608C 211.422,304.608 174.014,304.608 155.31,285.904C 136.606,267.2 136.606,229.792 157.982,211.088C 179.358,192.384 222.11,192.384 264.862,192.384L 232.798,224.448L 296.926,224.448 Z",
            bug: "M 292.799,197.661C 299.238,200.966 301.197,209.996 297.176,217.83C 295.167,221.744 292.045,224.618 288.62,226.103C 290.629,232.763 291.696,240.224 291.803,248.223C 297.67,249.987 304.994,252.703 309.852,254.9C 315.641,257.519 317.928,259.4 320.115,265.05C 322.302,270.701 324.39,280.121 325.146,292.748C 325.902,305.375 325.326,321.209 323.033,323.428C 320.74,325.646 316.73,314.249 314.514,303.137C 312.299,292.025 311.878,281.197 311.642,275.628C 311.406,270.06 311.355,269.751 309.385,268.48C 307.415,267.209 303.526,264.976 299.269,263.357C 296.524,262.313 293.626,261.524 291.2,261.006C 289.985,272.614 286.958,284.971 282.073,297.402C 283.702,298.245 285.222,299.07 286.539,299.83C 291.843,302.893 293.856,304.916 295.416,310.544C 296.976,316.172 298.081,325.406 297.604,337.59C 297.126,349.774 295.066,364.908 292.655,366.818C 290.244,368.728 287.483,357.413 286.417,346.543C 285.35,335.673 285.978,325.247 286.282,319.883C 286.586,314.519 286.566,314.218 284.797,312.811C 283.32,311.636 280.623,309.691 277.486,307.941C 276.823,309.327 276.136,310.713 275.426,312.096C 270.586,321.523 265.021,330.133 258.986,337.767C 260.824,339.452 262.539,341.108 263.918,342.54C 267.756,346.525 268.998,348.784 268.944,354.059C 268.89,359.334 267.54,367.625 264.079,378.081C 260.617,388.536 255.044,401.156 252.475,402.211C 249.905,403.266 250.338,392.755 252.13,383.054C 253.923,373.352 257.075,364.46 258.68,359.881C 260.286,355.301 260.344,355.035 259.161,353.371C 257.977,351.708 255.552,348.648 252.632,345.966C 252.515,345.858 252.397,345.751 252.278,345.645C 230.233,369.66 203.612,381.193 183.106,373.604L 239.423,257.632L 177.902,371.186C 158.057,359.941 151.05,330.794 157.811,297.747C 157.357,297.637 156.901,297.533 156.444,297.438C 152.473,296.61 148.483,296.418 146.395,296.426C 144.306,296.434 144.12,296.641 141.27,300.707C 138.42,304.772 132.907,312.695 125.911,319.97C 118.915,327.245 110.436,333.872 109.78,331.107C 109.124,328.341 116.292,316.183 122.92,307.071C 129.548,297.959 135.636,291.893 139.989,288.703C 144.342,285.513 146.961,285.198 152.562,286.012C 154.806,286.339 157.529,286.846 160.333,287.449C 163.024,278.004 166.804,268.366 171.693,258.842C 172.45,257.367 173.225,255.912 174.017,254.478C 170.422,252.71 166.829,251.497 164.827,250.928C 162.603,250.296 162.341,250.46 158.063,253.911C 153.785,257.362 145.492,264.101 135.819,269.696C 126.146,275.291 115.094,279.742 115.244,276.599C 115.394,273.456 126.747,262.72 136.591,255.057C 146.435,247.395 154.771,242.808 160.38,240.749C 165.989,238.689 168.871,239.157 174.58,241.74C 176.221,242.483 178.097,243.401 180.059,244.415C 187.485,233.022 195.966,223.249 204.893,215.474C 202.919,213.6 200.195,211.32 197.31,209.409C 193.426,206.836 189.251,204.934 187.02,204.054C 184.789,203.174 184.501,203.316 179.731,206.44C 174.961,209.564 165.709,215.671 155.15,220.455C 144.59,225.24 132.725,228.702 133.202,225.472C 133.679,222.243 146.499,212.323 157.447,205.422C 168.395,198.521 177.471,194.64 183.473,193.089C 189.474,191.538 192.401,192.317 198.03,195.568C 203.089,198.491 210.331,203.411 215.377,207.398C 220.512,203.941 225.713,201.157 230.873,199.111C 230.904,196.199 231.633,193.135 233.128,190.224C 237.47,181.765 246.627,177.801 253.58,181.37C 258.671,183.984 261.168,189.911 260.437,196.218C 261.218,196.418 261.993,196.644 262.759,196.896C 271.644,169.666 279.848,143.046 281.456,122.34C 283.248,99.2486 276.837,83.5108 271.788,73.9875C 266.739,64.4644 263.051,61.1559 263.828,58.6207C 264.604,56.0857 269.845,54.3239 275.163,57.0064C 280.481,59.6888 285.876,66.8152 288.889,82.9933C 291.903,99.1714 292.534,124.401 287.268,146.464C 282.807,165.148 274.117,181.562 264.779,197.627C 265.844,198.05 266.893,198.525 267.923,199.053C 269.165,199.691 270.36,200.397 271.507,201.166C 279.203,190.277 287.4,179.795 298.365,171.556C 311.758,161.494 329.278,154.778 341.378,152.35C 353.477,149.922 360.155,151.782 363.759,154.849C 367.362,157.916 367.89,162.191 366.408,163.47C 364.926,164.75 361.434,163.035 353.226,162.105C 345.018,161.176 332.094,161.032 316.844,168.885C 303.547,175.733 288.482,188.661 273.19,202.368C 273.822,202.846 274.437,203.346 275.037,203.865C 279.377,197.427 286.935,194.65 292.799,197.661 Z ",
            twobugs: " M 217.767,207.218C 222.158,209.472 223.494,215.63 220.751,220.973C 219.381,223.642 217.252,225.602 214.917,226.614C 216.287,231.156 217.014,236.245 217.088,241.7C 219.876,242.538 223.148,243.692 225.996,244.821C 228.874,241.683 233.516,237.555 237.748,234.26C 244.462,229.035 250.146,225.907 253.971,224.502C 257.796,223.098 259.762,223.417 263.655,225.179L 267.392,227.003C 272.456,219.233 278.24,212.568 284.327,207.266C 282.981,205.989 281.123,204.433 279.156,203.13C 276.507,201.376 273.66,200.078 272.139,199.478C 270.617,198.878 270.421,198.975 267.168,201.105C 263.915,203.236 257.605,207.401 250.404,210.663C 243.204,213.926 235.112,216.287 235.437,214.085C 235.763,211.883 244.505,205.118 251.971,200.412C 259.437,195.705 265.627,193.059 269.719,192.001C 273.812,190.943 275.808,191.474 279.647,193.692C 283.097,195.685 288.036,199.04 291.477,201.759C 294.979,199.402 298.526,197.503 302.044,196.107C 302.065,194.121 302.563,192.032 303.582,190.047C 306.543,184.278 312.788,181.575 317.53,184.009C 321.001,185.791 322.704,189.833 322.205,194.135L 323.789,194.597C 329.848,176.027 335.443,157.874 336.539,143.753C 337.762,128.006 333.39,117.274 329.946,110.779C 326.503,104.285 323.988,102.029 324.518,100.3C 325.047,98.5709 328.621,97.3695 332.248,99.1988C 335.874,101.028 339.554,105.888 341.609,116.921C 343.664,127.953 344.094,145.159 340.503,160.204C 337.461,172.947 331.535,184.14 325.166,195.096L 327.311,196.068C 328.158,196.503 328.972,196.984 329.755,197.509C 335.003,190.083 340.593,182.935 348.071,177.317C 357.204,170.454 369.152,165.875 377.403,164.219C 385.655,162.563 390.209,163.831 392.666,165.923C 395.124,168.015 395.484,170.93 394.473,171.802C 393.462,172.675 391.081,171.505 385.483,170.871C 379.886,170.238 371.072,170.139 360.673,175.495C 351.605,180.165 341.331,188.981 330.903,198.328L 332.162,199.35C 335.122,194.959 340.276,193.066 344.275,195.119C 348.666,197.373 350.002,203.531 347.26,208.873C 345.89,211.542 343.76,213.502 341.425,214.515C 342.795,219.056 343.523,224.145 343.596,229.6C 347.597,230.803 352.592,232.655 355.904,234.153C 359.852,235.939 361.412,237.222 362.903,241.075C 364.395,244.929 365.818,251.352 366.334,259.963C 366.849,268.575 366.457,279.373 364.893,280.886C 363.329,282.399 360.595,274.627 359.084,267.048C 357.573,259.47 357.286,252.086 357.125,248.289C 356.964,244.491 356.929,244.28 355.586,243.414C 354.242,242.547 351.59,241.025 348.687,239.92C 346.815,239.208 344.839,238.67 343.185,238.317C 342.356,246.233 340.292,254.66 336.96,263.138L 340.006,264.793C 343.623,266.882 344.996,268.261 346.06,272.1C 347.123,275.938 347.877,282.235 347.552,290.544C 347.226,298.853 345.821,309.174 344.177,310.476C 342.533,311.778 340.65,304.063 339.922,296.65C 339.195,289.237 339.623,282.126 339.831,278.468C 340.038,274.811 340.024,274.605 338.818,273.646C 337.811,272.845 335.972,271.518 333.832,270.324L 332.427,273.158C 329.127,279.587 325.332,285.458 321.216,290.664C 322.47,291.814 323.639,292.943 324.58,293.92C 327.197,296.637 328.044,298.178 328.007,301.775C 327.97,305.372 327.05,311.027 324.689,318.157C 322.329,325.287 318.528,333.893 316.776,334.612C 315.023,335.331 315.318,328.164 316.541,321.548C 317.763,314.932 319.913,308.868 321.008,305.745C 322.102,302.622 322.142,302.44 321.335,301.306C 320.528,300.172 318.874,298.085 316.883,296.256L 316.642,296.037C 301.608,312.414 283.454,320.279 269.469,315.104L 307.875,236.016L 265.921,313.455C 252.387,305.786 247.609,285.909 252.22,263.373L 251.287,263.162C 248.579,262.597 245.858,262.466 244.434,262.472C 243.01,262.477 242.883,262.619 240.939,265.391C 240.523,265.984 240.025,266.698 239.45,267.501C 239.603,268.945 239.73,270.466 239.826,272.063C 240.341,280.674 239.948,291.472 238.385,292.985C 236.821,294.498 234.086,286.726 232.576,279.148C 232.414,278.34 232.267,277.533 232.132,276.734C 231.592,277.334 231.036,277.934 230.465,278.528C 226.488,282.664 221.807,286.493 220.101,286.559C 220.855,290.418 221.309,295.86 221.043,302.644C 220.718,310.953 219.312,321.273 217.668,322.575C 216.024,323.878 214.142,316.162 213.414,308.749C 212.687,301.336 213.115,294.226 213.322,290.568C 213.53,286.91 213.516,286.705 212.31,285.745C 211.303,284.944 209.463,283.617 207.324,282.424L 205.919,285.258C 202.619,291.687 198.824,297.558 194.708,302.764C 195.961,303.913 197.131,305.042 198.072,306.019C 200.688,308.737 201.535,310.277 201.499,313.875C 201.462,317.472 200.542,323.126 198.181,330.256C 195.82,337.387 192.02,345.993 190.267,346.712C 188.515,347.431 188.81,340.263 190.033,333.648C 191.255,327.032 193.405,320.968 194.499,317.845C 195.594,314.722 195.634,314.54 194.827,313.406C 194.02,312.271 192.366,310.185 190.375,308.355L 190.133,308.136C 175.1,324.513 156.946,332.379 142.961,327.203L 181.367,248.116L 139.412,325.554C 125.879,317.886 121.1,298.009 125.711,275.472L 124.779,275.261C 122.071,274.697 119.35,274.566 117.926,274.571C 116.502,274.577 116.374,274.718 114.431,277.491C 112.487,280.263 108.728,285.666 103.957,290.627C 99.1859,295.589 93.4034,300.108 92.9563,298.222C 92.5091,296.336 97.3974,288.045 101.917,281.831C 106.437,275.617 110.589,271.48 113.558,269.305C 116.526,267.129 118.312,266.915 122.131,267.47C 123.662,267.692 125.519,268.038 127.431,268.45C 129.266,262.009 131.844,255.436 135.178,248.941L 136.763,245.965C 134.312,244.759 131.861,243.932 130.496,243.544C 128.979,243.113 128.8,243.225 125.883,245.578C 122.966,247.932 117.31,252.527 110.714,256.343C 104.117,260.158 96.5803,263.194 96.6827,261.051C 96.7851,258.907 104.527,251.585 111.24,246.36C 117.953,241.135 123.638,238.007 127.463,236.602C 131.288,235.198 133.254,235.517 137.147,237.278L 140.883,239.102C 145.947,231.333 151.731,224.668 157.819,219.366C 156.473,218.088 154.615,216.533 152.648,215.23C 149.999,213.475 147.152,212.178 145.63,211.578C 144.109,210.978 143.913,211.074 140.66,213.205C 137.407,215.336 131.097,219.5 123.896,222.763C 116.695,226.026 108.604,228.387 108.929,226.184C 109.254,223.982 117.997,217.217 125.463,212.511C 132.929,207.805 139.118,205.158 143.211,204.1C 147.304,203.043 149.3,203.574 153.139,205.791C 156.589,207.784 161.528,211.14 164.968,213.858C 168.471,211.501 172.018,209.602 175.536,208.207C 175.557,206.221 176.055,204.132 177.074,202.147C 180.035,196.378 186.28,193.675 191.021,196.109C 194.493,197.891 196.196,201.933 195.697,206.234L 197.281,206.697C 203.34,188.127 208.935,169.974 210.031,155.853C 211.254,140.106 206.882,129.373 203.438,122.879C 199.995,116.384 197.48,114.128 198.01,112.399C 198.539,110.671 202.113,109.469 205.739,111.298C 209.366,113.128 213.045,117.988 215.1,129.02C 217.155,140.053 217.586,157.258 213.995,172.304C 210.953,185.046 205.026,196.239 198.658,207.195L 200.802,208.168C 201.649,208.603 202.464,209.084 203.246,209.609C 208.495,202.183 214.085,195.035 221.563,189.416C 230.696,182.554 242.644,177.974 250.895,176.319C 259.146,174.663 263.701,175.931 266.158,178.023C 268.615,180.114 268.976,183.029 267.965,183.902C 266.954,184.775 264.572,183.605 258.975,182.971C 253.377,182.337 244.564,182.239 234.164,187.595C 225.097,192.265 214.823,201.081 204.394,210.428L 205.654,211.449C 208.614,207.059 213.768,205.165 217.767,207.218 Z M 236.395,253.175C 236.976,254.676 237.547,256.568 238.057,258.827C 238.774,258.2 239.446,257.66 240.066,257.205C 243.035,255.03 244.82,254.815 248.64,255.37C 250.17,255.593 252.027,255.939 253.939,256.35C 255.774,249.909 258.352,243.336 261.686,236.841L 263.271,233.865C 260.82,232.66 258.37,231.832 257.004,231.444C 255.487,231.014 255.308,231.125 252.391,233.479C 249.474,235.832 243.818,240.428 237.222,244.243C 235.307,245.351 233.312,246.393 231.448,247.262C 233.949,248.636 235.194,250.072 236.395,253.175 Z M 230.617,260.388C 230.456,256.591 230.421,256.38 229.078,255.513C 227.734,254.647 225.082,253.124 222.179,252.02C 220.307,251.308 218.331,250.77 216.676,250.417C 215.848,258.333 213.783,266.76 210.452,275.237L 213.498,276.893C 217.114,278.982 218.488,280.361 219.551,284.199C 219.592,284.345 219.632,284.494 219.671,284.647C 220.669,281.477 224.674,274.889 228.426,269.732C 229.279,268.559 230.118,267.46 230.94,266.435C 230.765,263.992 230.681,261.904 230.617,260.388 Z ",
            bandage: "M 248.07,189.861L 289.582,231.373L 343.085,177.87C 350.508,170.447 350.508,158.412 343.085,150.989L 328.454,136.358C 321.031,128.935 308.996,128.935 301.574,136.358L 248.07,189.861 Z M 289.582,231.373L 232.836,288.12L 240.453,295.737L 297.2,238.991L 289.582,231.373 Z M 232.836,288.12L 191.324,246.608L 137.821,300.111C 130.398,307.534 130.398,319.569 137.821,326.992L 152.452,341.623C 159.875,349.046 171.91,349.046 179.333,341.623L 232.836,288.12 Z M 191.324,246.608L 248.07,189.861L 240.453,182.244L 183.707,238.991L 191.324,246.608 Z M 253.315,251.852C 255.495,249.672 255.495,246.138 253.315,243.958C 251.135,241.778 247.601,241.778 245.421,243.958C 243.241,246.138 243.241,249.672 245.421,251.852C 247.601,254.032 251.135,254.032 253.315,251.852 Z M 235.271,269.896C 237.451,267.717 237.451,264.182 235.271,262.002C 233.091,259.822 229.556,259.822 227.376,262.002C 225.196,264.182 225.196,267.717 227.376,269.896C 229.556,272.077 233.091,272.077 235.271,269.896 Z M 271.359,233.809C 273.539,231.629 273.539,228.094 271.359,225.914C 269.179,223.734 265.644,223.734 263.464,225.914C 261.284,228.094 261.284,231.629 263.464,233.809C 265.644,235.989 269.179,235.989 271.359,233.809 Z M 235.486,234.023C 237.666,231.843 237.666,228.309 235.486,226.129C 233.306,223.949 229.771,223.949 227.591,226.129C 225.411,228.309 225.411,231.843 227.591,234.023C 229.771,236.203 233.306,236.203 235.486,234.023 Z M 217.442,252.067C 219.622,249.887 219.622,246.353 217.442,244.173C 215.262,241.993 211.727,241.993 209.547,244.173C 207.367,246.353 207.367,249.887 209.547,252.067C 211.727,254.247 215.262,254.247 217.442,252.067 Z M 253.53,215.979C 255.71,213.799 255.71,210.265 253.53,208.085C 251.35,205.905 247.815,205.905 245.635,208.085C 243.455,210.265 243.455,213.799 245.635,215.979C 247.815,218.159 251.35,218.159 253.53,215.979 Z M 334.194,126.317L 353.126,145.25C 363.568,155.692 363.568,172.622 353.126,183.064L 297.2,238.991L 353.126,294.917C 363.568,305.359 363.568,322.289 353.126,332.732L 334.194,351.664C 323.752,362.106 306.822,362.106 296.38,351.664L 240.453,295.737L 184.527,351.664C 174.084,362.106 157.154,362.106 146.712,351.664L 127.78,332.732C 117.338,322.289 117.338,305.359 127.78,294.917L 183.707,238.991L 127.78,183.064C 117.338,172.622 117.338,155.692 127.78,145.25L 146.712,126.318C 157.154,115.875 174.084,115.875 184.527,126.318L 240.453,182.244L 296.38,126.318C 306.822,115.875 323.752,115.875 334.194,126.317 Z ",
            eye: "M 349.943,192.816C 353.79,209.607 345.604,223.355 341.548,218.002C 321.074,196.481 291.853,180.14 240.803,180.14C 195.394,180.14 141.395,202.522 131.663,234.793C 130.839,232.063 128.494,234.793 131.663,224.233C 143.803,188.948 198.826,159.234 265.989,159.234C 316.361,159.234 346.03,167.63 349.943,192.816 Z M 224.012,243.188L 209.43,227.165C 207.876,231.401 207.385,236.692 207.385,242.433C 207.385,256.342 215.617,268.375 224.012,268.375C 240.803,268.375 257.594,259.979 257.594,243.188C 257.594,229.278 238.086,217.246 224.176,217.246C 221.994,217.246 220.084,217.524 218.413,218.045L 224.012,243.188 Z M 299.735,250.828C 299.735,283.284 268.787,309.596 240.967,309.596C 213.147,309.596 182.199,283.284 182.199,250.828C 182.199,232.076 192.529,215.376 206.618,204.616C 170.27,212.023 141.014,230.95 133.526,255.781C 143.258,288.052 189.753,310.352 240.803,310.352C 291.853,310.352 338.348,288.052 348.08,255.781C 340.622,231.053 311.576,212.179 275.436,204.708C 289.464,215.471 299.735,232.13 299.735,250.828 Z M 280.633,283.423C 284.181,279.111 287.039,274.209 289.039,268.888L 264.787,254.886C 263.82,260.607 260.841,265.644 256.604,269.245L 256.745,269.632L 256.389,269.426C 252.205,272.899 246.83,274.987 240.967,274.987L 240.826,274.987L 250.404,301.301C 256.041,300.254 261.354,298.286 266.182,295.558C 271.719,292.43 276.618,288.304 280.633,283.423 Z M 349.741,247.386C 349.875,248.771 349.943,250.17 349.943,251.584C 349.943,254.442 349.664,257.243 349.125,259.979C 342.32,294.497 294.038,318.747 240.803,318.747C 187.568,318.747 139.286,294.497 132.481,259.979C 131.941,257.243 131.663,254.442 131.663,251.584C 131.663,250.17 131.731,248.771 131.865,247.386C 135.425,210.652 185.435,184.421 240.803,184.421C 296.171,184.421 346.181,210.652 349.741,247.386 Z M 240.803,335.538L 240.803,327.142L 240.803,335.538 Z M 240.803,142.443L 240.803,150.839L 240.803,142.443 Z",
            timer: "M 346.944,236.425C 346.944,290.093 298.523,333.6 238.792,333.6C 179.062,333.6 130.64,290.093 130.64,236.425C 130.64,186.531 172.492,145.419 226.373,139.884L 226.373,136.022C 211.128,132.468 200.029,121.559 200.029,108.653C 200.029,92.8638 216.641,80.064 237.132,80.064C 257.623,80.064 274.235,92.8638 274.235,108.653C 274.235,121.528 263.19,132.415 248.003,135.996L 248.003,139.598C 266.312,140.985 283.322,146.471 297.894,155.03L 313.116,139.487L 313.581,139.835C 313.62,139.783 313.662,139.734 313.708,139.686C 315.542,137.779 322.03,140.116 328.199,144.906C 334.129,149.51 337.605,154.704 336.238,156.794L 337.022,157.382L 321.223,173.514C 337.265,190.466 346.944,212.43 346.944,236.425 Z M 248.003,132.297C 260.554,128.861 269.541,119.629 269.541,108.78C 269.541,95.0001 255.043,83.8294 237.16,83.8294C 219.277,83.8294 204.779,95.0001 204.779,108.78C 204.779,119.645 213.793,128.889 226.373,132.312L 226.373,122.218L 220.168,122.218L 220.168,102.783L 254.235,102.783L 254.235,122.218L 248.003,122.218L 248.003,132.297 Z M 238.792,148.968C 185.035,148.968 141.456,188.124 141.456,236.425C 141.456,284.727 185.035,323.883 238.792,323.883C 292.549,323.883 336.128,284.727 336.128,236.425C 336.128,188.124 292.549,148.968 238.792,148.968 Z M 291.264,180.523L 256.618,235C 256.697,235.615 256.738,236.24 256.738,236.874C 256.738,245.765 248.716,252.972 238.821,252.972C 228.926,252.972 220.904,245.765 220.904,236.874C 220.904,228.4 228.191,221.455 237.442,220.822L 291.264,180.523 Z M 187.778,207.084C 186.399,208.951 185.144,210.899 184.022,212.917L 159.076,199.977C 160.24,197.982 161.494,196.036 162.833,194.143L 187.778,207.084 Z M 211.527,188.204C 209.281,189.212 207.113,190.34 205.034,191.579L 190.632,169.166C 192.738,167.963 194.904,166.836 197.125,165.791L 211.527,188.204 Z M 159.076,274.963L 184.022,262.022C 185.143,264.041 186.399,265.988 187.778,267.856L 162.833,280.796C 161.494,278.904 160.24,276.958 159.076,274.963 Z M 190.632,305.774L 205.034,283.36C 207.113,284.6 209.28,285.728 211.527,286.736L 197.125,309.149C 194.904,308.103 192.738,306.977 190.632,305.774 Z M 314.872,280.796L 289.927,267.856C 291.306,265.988 292.562,264.041 293.684,262.022L 318.629,274.963C 317.465,276.958 316.211,278.904 314.872,280.796 Z M 280.581,309.149L 266.179,286.736C 268.425,285.728 270.593,284.6 272.671,283.36L 287.074,305.774C 284.967,306.977 282.801,308.103 280.581,309.149 Z M 293.684,212.917C 292.562,210.899 291.306,208.951 289.927,207.083L 314.872,194.143C 316.211,196.036 317.465,197.982 318.629,199.977L 293.684,212.917 Z M 272.671,191.579C 270.593,190.34 268.425,189.212 266.179,188.204L 280.581,165.79C 282.801,166.836 284.967,167.963 287.074,169.166L 272.671,191.579 Z M 328.788,240.84L 299.989,240.84C 300.064,239.725 300.102,238.601 300.102,237.47C 300.102,236.338 300.064,235.215 299.989,234.1L 328.788,234.1L 328.865,237.47L 328.788,240.84 Z M 148.917,234.1L 177.716,234.1C 177.641,235.214 177.603,236.338 177.603,237.47C 177.603,238.601 177.641,239.725 177.716,240.839L 148.917,240.839L 148.841,237.47L 148.917,234.1 Z M 235.102,318.277L 235.102,292.401C 236.343,292.468 237.593,292.503 238.853,292.503C 240.112,292.503 241.363,292.468 242.603,292.401L 242.603,318.277L 238.853,318.346L 235.102,318.277 Z M 235.102,182.538L 235.102,156.662L 238.853,156.593L 242.603,156.662L 242.603,182.538C 241.363,182.471 240.112,182.437 238.853,182.437C 237.593,182.437 236.343,182.471 235.102,182.538 Z",
            chip: "M 136.738,226.451L 170.519,226.451L 170.519,195.786L 136.738,195.786L 136.738,170.707L 170.519,170.707L 170.519,135.695C 170.519,130.129 175.032,125.617 180.598,125.617L 300.309,125.617C 305.875,125.617 310.387,130.129 310.387,135.695L 310.387,170.707L 344.168,170.707L 344.168,195.786L 310.387,195.786L 310.387,226.451L 344.168,226.451L 344.168,251.53L 310.387,251.53L 310.387,282.184L 344.168,282.184L 344.168,307.263L 310.387,307.263L 310.387,342.286C 310.387,347.852 305.875,352.364 300.309,352.364L 180.598,352.364C 175.032,352.364 170.519,347.852 170.519,342.286L 170.519,307.263L 136.738,307.263L 136.738,282.184L 170.519,282.184L 170.519,251.53L 136.738,251.53L 136.738,226.451 Z ",
            "delete": " M 248,316C 231,316 215,311 202,302L 314,190C 323,203 328,219 328,236C 328,280 292,316 248,316 Z M 248,155C 264,155 280,160 293,169L 181,281C 172,268 167,252 167,236C 167,191 203,155 248,155 Z M 248,125C 187,125 137,174 137,236C 137,297 187,346 248,346C 309,346 358,297 358,236C 358,174 309,125 248,125 Z ",
            clock2: "M 240,83.3306C 326,83.3306 396,153 396,238C 396,324 326,394 240,394C 154,394 84.7931,324 84.7931,238C 84.7931,153 154,83.3306 240,83.3306 Z M 240,117C 173,117 119,172 119,238C 119,305 173,360 240,360C 307,360 361,305 361,238C 361,172 307,117 240,117 Z M 226,134L 257,134L 257,222L 344,222L 344,254L 257,254L 226,254L 226,222L 226,134 Z ",
            brokenheart: "M 330.477,132.197C 356.937,138.77 391.78,171.336 377.523,214.52C 363.524,256.922 300.573,315.649 236.736,374.673L 236.661,377.192L 236.462,377.511L 236.458,377.474C 236.027,377.024 235.597,376.574 235.166,376.125C 234.604,376.645 234.041,377.165 233.478,377.686L 234.248,375.165C 173.755,311.965 113.848,249.002 102.394,205.56C 90.7992,161.586 128.204,131.166 155.016,126.221C 181.828,121.275 198.047,141.805 213.619,155.886L 213.62,155.898L 216.057,174.84L 207.556,193.875L 234.339,205.886L 223.103,240.42L 244.574,264.845L 225.139,285.432L 246.366,312.2L 228.578,323.124L 237.755,340.49L 236.989,366.187L 244.202,342.568L 239.924,323.398L 259.961,317.546L 246.537,286.132L 270.708,271.392L 256.431,242.173L 276.367,211.819L 253.695,193.176L 266.91,177.053L 269.626,158.078C 286.004,144.978 304.064,125.636 330.477,132.197 Z ",
            wholeheart: "M 298.517,129.106C 306.097,129.106 313.441,130.486 320.548,133.247C 327.655,136.007 333.928,140.168 339.366,145.73C 344.805,151.292 349.162,158.296 352.437,166.742C 355.712,175.188 357.35,185.159 357.35,196.653C 357.35,209.467 355.3,221.404 351.201,232.466C 347.102,243.529 341.715,253.932 335.04,263.675C 328.366,273.419 320.837,282.545 312.452,291.053C 304.068,299.56 295.581,307.687 286.991,315.433C 278.401,323.178 270.099,330.594 262.086,337.681C 254.072,344.767 247.182,351.709 241.414,358.507L 239.683,358.507C 233.915,351.709 227.066,344.767 219.135,337.681C 211.204,330.594 202.943,323.178 194.353,315.433C 185.763,307.687 177.276,299.56 168.892,291.053C 160.507,282.545 152.978,273.419 146.304,263.675C 139.629,253.932 134.243,243.529 130.143,232.466C 126.044,221.404 123.994,209.467 123.994,196.653C 123.994,185.159 125.632,175.188 128.907,166.742C 132.183,158.296 136.539,151.292 141.978,145.73C 147.416,140.168 153.689,136.007 160.796,133.247C 167.903,130.486 175.247,129.106 182.827,129.106C 190.12,129.106 196.681,130.064 202.511,131.98C 208.34,133.896 213.593,136.491 218.27,139.767C 222.946,143.042 227.045,146.76 230.568,150.922C 234.09,155.083 237.129,159.326 239.683,163.652L 241.414,163.652C 244.009,159.326 247.099,155.083 250.684,150.922C 254.268,146.76 258.398,143.042 263.074,139.767C 267.751,136.491 273.004,133.896 278.833,131.98C 284.663,130.064 291.224,129.106 298.517,129.106 Z ",
            plug: "M 359.701,173.023C 369.366,173.023 377.202,180.858 377.202,190.524C 377.202,200.19 369.366,208.025 359.701,208.025L 286.266,208.025L 286.266,269.956L 359.701,269.956C 369.366,269.956 377.202,277.791 377.202,287.457C 377.202,297.123 369.366,304.958 359.701,304.958L 286.266,304.958L 286.266,341.604L 208.803,341.604L 208.803,341.45C 181.438,341.366 159.277,317.007 159.277,286.97L 159.277,286.88L 159.277,279.85L 159.277,272.47L 107.202,272.47L 107.202,205.511L 159.277,205.511L 159.277,190.702L 159.418,190.701C 159.495,160.685 181.702,136.377 209.085,136.377L 209.203,136.377L 286.266,136.377L 286.266,173.023L 359.701,173.023 Z ",
            diamond: "M 196.624,189.138L 162.308,129.7L 230.941,129.7L 196.624,189.138 Z M 283.757,189.138L 249.441,129.7L 318.074,129.7L 283.757,189.138 Z M 327.492,129.7L 361.809,189.138L 293.176,189.138L 327.492,129.7 Z M 240.51,129.7L 274.826,189.138L 206.193,189.138L 240.51,129.7 Z M 153.415,129.7L 187.731,189.138L 119.098,189.138L 153.415,129.7 Z M 240.453,392.787L 119.062,199.376L 191.65,199.376L 240.453,392.787L 206.066,199.376L 274.841,199.377L 240.453,392.787L 289.257,199.377L 361.844,199.376L 240.453,392.787 Z ",
            cloudupload: "M 307.457,322.847L 263.012,278.402L 263.012,377.169L 233.382,377.169L 233.382,278.402L 188.937,322.847L 188.937,288.279L 248.197,229.019L 307.457,288.279L 307.457,322.847 Z M 134.171,193.154L 134.264,193.154L 152.596,193.154C 155.211,174.969 170.855,160.995 189.763,160.995C 196.549,160.995 202.914,162.795 208.407,165.943C 220.476,139.797 246.926,121.653 277.612,121.653C 318.303,121.653 351.542,153.555 353.684,193.71C 374.206,197.034 389.875,214.834 389.875,236.294C 389.875,260.12 370.561,279.434 346.735,279.434L 312.878,279.434L 298.847,265.403L 342.068,265.403L 342.068,265.08C 357.647,264.738 370.171,252.001 370.171,236.34C 370.171,220.679 357.647,207.942 342.068,207.6L 342.068,207.593L 341.424,207.593L 337.448,207.593C 337.984,204.35 338.263,201.021 338.263,197.626C 338.263,164.096 311.081,136.915 277.552,136.915C 246.798,136.915 221.385,159.782 217.388,189.441C 212.187,181.43 203.163,176.132 192.901,176.132C 176.789,176.132 163.728,189.193 163.728,205.305L 163.816,207.593L 135.032,207.593C 119.156,207.593 106.286,220.464 106.286,236.34C 106.286,252.216 119.156,265.087 135.032,265.087L 135.032,265.403L 197.548,265.403L 183.516,279.434L 134.171,279.434C 110.345,279.434 91.031,260.119 91.031,236.294C 91.031,212.468 110.346,193.154 134.171,193.154 Z ",
            emptyplay: "M 368.719,238.991L 178.28,343.579L 178.28,134.402L 368.719,238.991 Z M 333.017,238.991L 195.594,163.519L 195.594,314.463L 333.017,238.991 Z ",
            braces: "M 162.632,350.534C 136.692,350.21 123.722,337.172 123.722,311.421L 123.722,273.524C 123.722,256.527 116.804,247.61 102.97,246.773L 102.97,231.209C 116.804,230.371 123.722,221.278 123.722,203.931L 123.722,167.087C 123.722,140.985 136.692,127.772 162.632,127.447L 162.632,143.012C 148.798,143.363 141.88,151.78 141.88,168.263L 141.88,205.674C 141.88,223.535 135.476,234.505 122.668,238.585L 122.668,239.112C 135.476,242.922 141.88,253.785 141.88,271.7L 141.88,308.503C 141.88,317.906 143.427,324.627 146.521,328.667C 149.615,332.707 154.985,334.808 162.632,334.97L 162.632,350.534 Z M 377.937,246.773C 364.102,247.61 357.184,256.527 357.184,273.524L 357.184,311.421C 357.184,337.172 344.214,350.21 318.274,350.534L 318.274,334.97C 325.786,334.808 331.122,332.686 334.284,328.606C 337.445,324.526 339.026,317.825 339.026,308.503L 339.026,271.7C 339.026,253.785 345.43,242.922 358.238,239.112L 358.238,238.585C 345.43,234.505 339.026,223.535 339.026,205.674L 339.026,168.263C 339.026,151.78 332.109,143.363 318.274,143.012L 318.274,127.447C 344.214,127.772 357.184,140.985 357.184,167.087L 357.184,203.931C 357.184,221.278 364.102,230.371 377.937,231.209L 377.937,246.773 Z M 179.21,177.142L 194.321,177.142L 301.697,177.142L 301.697,207.604L 194.321,207.604L 194.321,285.313L 255.16,285.313L 255.16,300.839L 179.21,300.839L 179.21,292.62L 179.21,285.313L 179.209,207.604L 179.21,177.142 Z M 201.558,213.199L 268.948,213.199L 268.948,243.661L 201.558,243.661L 201.558,213.199 Z M 201.229,249.256L 293.972,249.256L 293.972,279.718L 201.229,279.718L 201.229,249.256 Z ",
            wand: "M 341.424,128.115L 351.527,138.218L 323.055,166.69L 312.952,156.587L 341.424,128.115 Z M 351.123,249.865L 341.02,259.968L 312.548,231.496L 322.651,221.393L 351.123,249.865 Z M 257.44,156.183L 247.337,166.286L 218.865,137.814L 228.968,127.711L 257.44,156.183 Z M 372.71,189.221L 372.71,203.509L 332.444,203.509L 332.444,189.221L 372.71,189.221 Z M 291.446,147.61L 277.158,147.61L 277.158,107.344L 291.446,107.344L 291.446,147.61 Z M 281.85,158.275L 320.558,196.984L 146.905,370.637L 108.196,331.929L 281.85,158.275 Z M 234.93,216.045L 119.152,331.823L 147.01,359.681L 262.789,243.903L 234.93,216.045 Z ",
            commandline: "M 108.874,328.138L 372.032,328.138L 372.032,149.843L 108.874,149.843L 108.874,328.138 Z M 188.674,271.59L 141.412,304.72L 141.412,286.282L 175.317,265.526L 175.317,265.206L 141.412,242.848L 141.412,224.262L 188.674,258.969L 188.674,271.59 Z M 200.548,287.425L 241.265,287.425L 241.265,302.664L 200.548,302.664L 200.548,287.425 Z ",
            split: "M 168.96,188.271L 130.92,226.311L 215.453,226.311L 215.453,251.67L 130.92,251.67L 168.96,289.71L 139.373,289.71L 88.6535,238.99L 139.373,188.271L 168.96,188.271 Z M 311.946,289.71L 349.986,251.671L 265.453,251.671L 265.453,226.311L 349.986,226.311L 311.946,188.271L 341.533,188.271L 392.253,238.991L 341.533,289.71L 311.946,289.71 Z M 226.511,75.2216L 254.395,75.2216L 254.395,402.76L 226.511,402.76L 226.511,75.2216 Z ",
            "package": "M 142.374,266.405L 233.787,266.405L 233.787,350.836L 142.374,350.836L 142.374,266.405 Z M 247.119,266.405L 338.532,266.405L 338.532,350.836L 247.119,350.836L 247.119,266.405 Z M 350.276,186.1L 350.276,254.025L 247.119,254.025L 247.119,191.217C 245.407,191.325 243.69,191.427 241.973,191.529C 241.966,191.6 241.959,191.67 241.952,191.74L 233.788,191.24L 233.788,254.025L 130.63,254.025L 130.63,186.1L 197.792,186.1C 191.84,184.338 186.527,181.957 182.152,178.668C 168.397,168.327 163.909,149.012 172.104,135.939C 180.298,122.867 201.175,116.039 215.515,120.428C 229.855,124.818 237.66,140.427 240.977,154.182C 241.177,155.013 241.361,155.837 241.53,156.655C 241.677,155.953 241.837,155.246 242.008,154.535C 245.28,140.966 252.979,125.569 267.125,121.238C 281.272,116.908 301.865,123.644 309.949,136.539C 318.033,149.434 313.606,168.488 300.037,178.689C 295.655,181.983 290.32,184.354 284.34,186.1L 350.276,186.1 Z M 232.489,181.725C 233.312,173.359 234.135,164.993 231.803,155.323C 229.472,145.654 223.986,134.682 213.905,131.596C 203.824,128.51 189.149,133.31 183.388,142.499C 177.628,151.689 180.782,165.267 190.452,172.536C 200.121,179.805 216.305,180.765 232.489,181.725 Z M 250.381,181.706C 266.346,180.758 282.311,179.811 291.85,172.641C 301.388,165.47 304.5,152.075 298.818,143.01C 293.135,133.945 278.658,129.21 268.714,132.254C 258.769,135.298 253.357,146.122 251.057,155.661C 248.757,165.199 249.569,173.452 250.381,181.706 Z ",
            smiliesad: "M 197.203,320.447C 191.802,320.447 187.205,318.673 183.41,315.127C 179.615,311.58 177.717,307.325 177.717,302.362C 177.717,297.341 179.615,293.028 183.41,289.423C 187.205,285.818 191.802,284.015 197.203,284.015C 202.691,284.015 207.355,285.818 211.193,289.423C 215.032,293.028 216.951,297.341 216.951,302.362C 216.951,307.325 215.032,311.58 211.193,315.127C 207.355,318.673 202.691,320.447 197.203,320.447 Z M 197.203,211.151C 191.802,211.151 187.205,209.378 183.41,205.831C 179.615,202.284 177.717,198.03 177.717,193.067C 177.717,188.046 179.615,183.733 183.41,180.127C 187.205,176.522 191.802,174.72 197.203,174.72C 202.691,174.72 207.355,176.522 211.193,180.127C 215.032,183.733 216.951,188.046 216.951,193.067C 216.951,198.03 215.032,202.284 211.193,205.831C 207.355,209.378 202.691,211.151 197.203,211.151 Z M 320.642,362.484L 292.618,362.484C 264.593,330.168 250.581,290.321 250.581,242.942C 250.581,195.388 264.593,154.898 292.618,121.473L 320.642,121.473C 292.618,156.153 278.605,196.555 278.605,242.679C 278.605,288.394 292.618,328.329 320.642,362.484 Z ",
            signalalt: "M 125.019,266.274L 169.669,266.274L 169.669,324.752L 125.019,324.752L 125.019,266.274 Z M 183.23,228.487L 227.88,228.487L 227.88,324.752L 183.23,324.752L 183.23,228.487 Z M 241.441,192.022L 286.091,192.022L 286.091,324.752L 241.441,324.752L 241.441,192.022 Z M 299.32,155.063L 343.97,155.063L 343.97,324.752L 299.32,324.752L 299.32,155.063 Z M 305.697,162.256L 305.697,317.208L 337.594,317.208L 337.594,162.256L 305.697,162.256 Z M 247.817,200.291L 247.817,317.208L 279.714,317.208L 279.714,200.291L 247.817,200.291 Z M 189.317,235.184L 189.317,317.208L 221.214,317.208L 221.214,235.184L 189.317,235.184 Z M 131.065,274.708L 131.065,317.208L 162.962,317.208L 162.962,274.708L 131.065,274.708 Z ",
            signal: "M 125.011,266.081L 169.661,266.081L 169.661,324.559L 125.011,324.559L 125.011,266.081 Z M 183.222,228.294L 227.872,228.294L 227.872,324.559L 183.222,324.559L 183.222,228.294 Z M 241.432,191.83L 286.082,191.83L 286.082,324.559L 241.432,324.559L 241.432,191.83 Z M 299.312,154.87L 343.962,154.87L 343.962,324.559L 299.312,324.559L 299.312,154.87 Z ",
            lock: "M 151.624,205.982L 167.789,205.982C 171.332,160.444 202.513,124.832 240.453,124.832C 278.394,124.832 309.574,160.444 313.118,205.982L 329.282,205.982L 329.282,353.149L 151.624,353.149L 151.624,205.982 Z M 240.453,149.899C 216.112,149.899 196.02,177.033 193.033,205.982L 287.874,205.982C 284.886,177.033 264.794,149.899 240.453,149.899 Z M 240.453,244.36C 231.985,244.36 225.12,251.225 225.12,259.693C 225.12,265.145 227.965,269.932 232.251,272.651L 227.403,315.19L 253.503,315.19L 248.655,272.651C 252.941,269.932 255.786,265.145 255.786,259.693C 255.786,251.225 248.921,244.36 240.453,244.36 Z ",
            emptycircle: "M 240.453,101.462C 316.408,101.462 377.982,163.036 377.982,238.991C 377.982,314.946 316.408,376.519 240.453,376.519C 164.498,376.519 102.924,314.946 102.924,238.991C 102.924,163.036 164.498,101.462 240.453,101.462 Z M 240.453,135.773C 183.447,135.773 137.235,181.985 137.235,238.991C 137.235,295.996 183.447,342.209 240.453,342.209C 297.459,342.209 343.671,295.996 343.671,238.991C 343.671,181.985 297.459,135.773 240.453,135.773 Z ",
            group: "M 146.602,137.257C 155.992,137.257 163.608,144.873 163.608,154.267C 163.608,163.658 155.992,171.273 146.602,171.273C 137.208,171.273 129.591,163.658 129.591,154.267C 129.591,144.873 137.208,137.257 146.602,137.257 Z M 129.227,179.743L 163.558,179.743C 169.226,179.743 174.86,181.722 178.867,185.115C 182.87,188.511 185.201,193.284 185.201,198.083L 185.201,199.566L 185.201,200.123L 185.201,271.383C 185.255,274.768 181.679,277.873 177.779,277.835C 173.931,277.797 170.47,274.719 170.523,271.383L 170.523,209.123L 165.841,209.123L 165.841,268.76L 165.815,268.76L 165.815,332.839C 165.849,334.913 165.007,336.983 163.544,338.449C 162.076,339.916 160.002,340.754 157.93,340.724C 153.865,340.66 150.226,336.902 150.287,332.839L 150.287,268.76L 142.523,268.76L 142.523,332.839C 142.557,334.913 141.715,336.983 140.252,338.449C 138.785,339.916 136.711,340.754 134.638,340.724C 130.573,340.66 126.934,336.902 126.995,332.839L 126.995,268.76L 126.972,268.76L 126.972,209.123L 122.264,209.123L 122.264,270.484C 122.302,273.869 118.719,276.963 114.818,276.914C 110.986,276.864 107.551,273.805 107.585,270.484L 107.585,199.202L 107.585,198.569L 107.585,198.083C 107.585,193.284 109.916,188.511 113.923,185.115C 117.927,181.722 123.56,179.743 129.227,179.743 Z M 240.662,137.257C 250.052,137.257 257.668,144.873 257.668,154.267C 257.668,163.658 250.052,171.273 240.662,171.273C 231.267,171.273 223.651,163.658 223.651,154.267C 223.651,144.873 231.267,137.257 240.662,137.257 Z M 223.287,179.743L 257.618,179.743C 263.286,179.743 268.92,181.722 272.927,185.115C 276.93,188.511 279.261,193.284 279.261,198.083L 279.261,199.566L 279.261,200.123L 279.261,271.383C 279.315,274.768 275.739,277.873 271.839,277.835C 267.991,277.797 264.53,274.719 264.583,271.383L 264.583,209.123L 259.901,209.123L 259.901,268.76L 259.875,268.76L 259.875,332.839C 259.909,334.912 259.067,336.983 257.604,338.449C 256.136,339.916 254.062,340.754 251.989,340.724C 247.925,340.66 244.286,336.902 244.347,332.839L 244.347,268.76L 236.583,268.76L 236.583,332.839C 236.617,334.912 235.775,336.983 234.312,338.449C 232.844,339.916 230.77,340.754 228.697,340.724C 224.633,340.66 220.994,336.902 221.055,332.839L 221.055,268.76L 221.032,268.76L 221.032,209.123L 216.324,209.123L 216.324,270.484C 216.362,273.869 212.778,276.963 208.878,276.914C 205.046,276.864 201.611,273.805 201.645,270.484L 201.645,199.202L 201.645,198.569L 201.645,198.083C 201.645,193.284 203.976,188.511 207.983,185.115C 211.987,181.722 217.62,179.743 223.287,179.743 Z M 334.722,137.258C 344.112,137.258 351.728,144.873 351.728,154.267C 351.728,163.658 344.112,171.273 334.722,171.273C 325.327,171.273 317.711,163.658 317.711,154.267C 317.711,144.873 325.327,137.258 334.722,137.258 Z M 317.347,179.743L 351.678,179.743C 357.346,179.743 362.98,181.722 366.987,185.115C 370.99,188.511 373.321,193.284 373.321,198.083L 373.321,199.566L 373.321,200.123L 373.321,271.383C 373.375,274.768 369.799,277.873 365.899,277.835C 362.051,277.797 358.59,274.719 358.642,271.383L 358.642,209.123L 353.961,209.123L 353.961,268.76L 353.935,268.76L 353.935,332.839C 353.969,334.913 353.127,336.983 351.664,338.449C 350.196,339.916 348.122,340.754 346.049,340.724C 341.985,340.66 338.345,336.902 338.407,332.839L 338.407,268.76L 330.643,268.76L 330.643,332.839C 330.677,334.913 329.835,336.983 328.372,338.449C 326.904,339.916 324.83,340.754 322.757,340.724C 318.693,340.66 315.054,336.902 315.115,332.839L 315.115,268.76L 315.091,268.76L 315.091,209.123L 310.384,209.123L 310.384,270.484C 310.421,273.869 306.838,276.963 302.938,276.914C 299.105,276.864 295.671,273.805 295.705,270.484L 295.705,199.202L 295.705,198.569L 295.705,198.083C 295.705,193.284 298.036,188.511 302.043,185.115C 306.046,181.722 311.68,179.743 317.347,179.743 Z ",
            im: "M 393.488,206.958L 393.488,321.247L 357.423,321.247L 357.423,369.234L 328.898,321.247L 196.081,321.247L 196.081,206.958L 393.488,206.958 Z M 87.4178,146.461L 292.537,146.461L 292.537,193.312L 182.971,193.312L 182.971,265.214L 154.531,265.214L 124.892,315.075L 124.892,265.214L 87.4178,265.214L 87.4178,146.461 Z ",
            arrowdownl: "M 183.668,152.318L 141.826,194.16L 141.826,337.618L 285.284,337.618L 327.126,295.776L 219.532,295.776L 339.08,176.228L 303.216,140.364L 183.668,259.911L 183.668,152.318 Z ",
        };
        var iconMapping = {
            "document": "fa-file-o",
            copy: "fa-files-o",
            paste: "fa-clipboard",
            recyclelib: "fa-recycle",
            settings: "fa-cogs",
            save: "fa-floppy-o",
            email: "fa-envelope-o",
            cycle: "fa-refresh",
            folder: "fa-folder-open",
            video: "fa-video-camera",
            rewind: "fa-backward",
            sharethis: "fa-share-alt",
            subtract: "fa-minus",
            heart: "fa-heart-o",
            award: "fa-trophy",
        };
        var fontAwesomeIconsByDaveGandy = {
            "cutlery": "M640 1472v-640q0 -61 -35.5 -111t-92.5 -70v-779q0 -52 -38 -90t-90 -38h-128q-52 0 -90 38t-38 90v779q-57 20 -92.5 70t-35.5 111v640q0 26 19 45t45 19t45 -19t19 -45v-416q0 -26 19 -45t45 -19t45 19t19 45v416q0 26 19 45t45 19t45 -19t19 -45v-416q0 -26 19 -45 t45 -19t45 19t19 45v416q0 26 19 45t45 19t45 -19t19 -45zM1408 1472v-1600q0 -52 -38 -90t-90 -38h-128q-52 0 -90 38t-38 90v512h-224q-13 0 -22.5 9.5t-9.5 22.5v800q0 132 94 226t226 94h256q26 0 45 -19t19 -45z",
            "rocket": "M1440 1088q0 40 -28 68t-68 28t-68 -28t-28 -68t28 -68t68 -28t68 28t28 68zM1664 1376q0 -249 -75.5 -430.5t-253.5 -360.5q-81 -80 -195 -176l-20 -379q-2 -16 -16 -26l-384 -224q-7 -4 -16 -4q-12 0 -23 9l-64 64q-13 14 -8 32l85 276l-281 281l-276 -85q-3 -1 -9 -1 q-14 0 -23 9l-64 64q-17 19 -5 39l224 384q10 14 26 16l379 20q96 114 176 195q188 187 358 258t431 71q14 0 24 -9.5t10 -22.5z",
            "code-fork": "M288 64q0 40 -28 68t-68 28t-68 -28t-28 -68t28 -68t68 -28t68 28t28 68zM288 1216q0 40 -28 68t-68 28t-68 -28t-28 -68t28 -68t68 -28t68 28t28 68zM928 1088q0 40 -28 68t-68 28t-68 -28t-28 -68t28 -68t68 -28t68 28t28 68zM1024 1088q0 -52 -26 -96.5t-70 -69.5 q-2 -287 -226 -414q-68 -38 -203 -81q-128 -40 -169.5 -71t-41.5 -100v-26q44 -25 70 -69.5t26 -96.5q0 -80 -56 -136t-136 -56t-136 56t-56 136q0 52 26 96.5t70 69.5v820q-44 25 -70 69.5t-26 96.5q0 80 56 136t136 56t136 -56t56 -136q0 -52 -26 -96.5t-70 -69.5v-497 q54 26 154 57q55 17 87.5 29.5t70.5 31t59 39.5t40.5 51t28 69.5t8.5 91.5q-44 25 -70 69.5t-26 96.5q0 80 56 136t136 56t136 -56t56 -136z",
            "indent": "M352 704q0 -14 -9 -23l-288 -288q-9 -9 -23 -9q-13 0 -22.5 9.5t-9.5 22.5v576q0 13 9.5 22.5t22.5 9.5q14 0 23 -9l288 -288q9 -9 9 -23zM1792 224v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1728q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1728q13 0 22.5 -9.5 t9.5 -22.5zM1792 608v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1088q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1088q13 0 22.5 -9.5t9.5 -22.5zM1792 992v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1088q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1088 q13 0 22.5 -9.5t9.5 -22.5zM1792 1376v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1728q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1728q13 0 22.5 -9.5t9.5 -22.5z",
            "history": "M1536 640q0 -156 -61 -298t-164 -245t-245 -164t-298 -61q-172 0 -327 72.5t-264 204.5q-7 10 -6.5 22.5t8.5 20.5l137 138q10 9 25 9q16 -2 23 -12q73 -95 179 -147t225 -52q104 0 198.5 40.5t163.5 109.5t109.5 163.5t40.5 198.5t-40.5 198.5t-109.5 163.5 t-163.5 109.5t-198.5 40.5q-98 0 -188 -35.5t-160 -101.5l137 -138q31 -30 14 -69q-17 -40 -59 -40h-448q-26 0 -45 19t-19 45v448q0 42 40 59q39 17 69 -14l130 -129q107 101 244.5 156.5t284.5 55.5q156 0 298 -61t245 -164t164 -245t61 -298zM896 928v-448q0 -14 -9 -23 t-23 -9h-320q-14 0 -23 9t-9 23v64q0 14 9 23t23 9h224v352q0 14 9 23t23 9h64q14 0 23 -9t9 -23z",
            "file-image-o": "M1468 1156q28 -28 48 -76t20 -88v-1152q0 -40 -28 -68t-68 -28h-1344q-40 0 -68 28t-28 68v1600q0 40 28 68t68 28h896q40 0 88 -20t76 -48zM1024 1400v-376h376q-10 29 -22 41l-313 313q-12 12 -41 22zM1408 -128v1024h-416q-40 0 -68 28t-28 68v416h-768v-1536h1280z M1280 320v-320h-1024v192l192 192l128 -128l384 384zM448 512q-80 0 -136 56t-56 136t56 136t136 56t136 -56t56 -136t-56 -136t-136 -56z",
            "trash": "M512 160v704q0 14 -9 23t-23 9h-64q-14 0 -23 -9t-9 -23v-704q0 -14 9 -23t23 -9h64q14 0 23 9t9 23zM768 160v704q0 14 -9 23t-23 9h-64q-14 0 -23 -9t-9 -23v-704q0 -14 9 -23t23 -9h64q14 0 23 9t9 23zM1024 160v704q0 14 -9 23t-23 9h-64q-14 0 -23 -9t-9 -23v-704 q0 -14 9 -23t23 -9h64q14 0 23 9t9 23zM480 1152h448l-48 117q-7 9 -17 11h-317q-10 -2 -17 -11zM1408 1120v-64q0 -14 -9 -23t-23 -9h-96v-948q0 -83 -47 -143.5t-113 -60.5h-832q-66 0 -113 58.5t-47 141.5v952h-96q-14 0 -23 9t-9 23v64q0 14 9 23t23 9h309l70 167 q15 37 54 63t79 26h320q40 0 79 -26t54 -63l70 -167h309q14 0 23 -9t9 -23z",
            "binoculars": "M704 1216v-768q0 -26 -19 -45t-45 -19v-576q0 -26 -19 -45t-45 -19h-512q-26 0 -45 19t-19 45v512l249 873q7 23 31 23h424zM1024 1216v-704h-256v704h256zM1792 320v-512q0 -26 -19 -45t-45 -19h-512q-26 0 -45 19t-19 45v576q-26 0 -45 19t-19 45v768h424q24 0 31 -23z M736 1504v-224h-352v224q0 14 9 23t23 9h288q14 0 23 -9t9 -23zM1408 1504v-224h-352v224q0 14 9 23t23 9h288q14 0 23 -9t9 -23z",
            "globe": "M768 1408q209 0 385.5 -103t279.5 -279.5t103 -385.5t-103 -385.5t-279.5 -279.5t-385.5 -103t-385.5 103t-279.5 279.5t-103 385.5t103 385.5t279.5 279.5t385.5 103zM1042 887q-2 -1 -9.5 -9.5t-13.5 -9.5q2 0 4.5 5t5 11t3.5 7q6 7 22 15q14 6 52 12q34 8 51 -11 q-2 2 9.5 13t14.5 12q3 2 15 4.5t15 7.5l2 22q-12 -1 -17.5 7t-6.5 21q0 -2 -6 -8q0 7 -4.5 8t-11.5 -1t-9 -1q-10 3 -15 7.5t-8 16.5t-4 15q-2 5 -9.5 10.5t-9.5 10.5q-1 2 -2.5 5.5t-3 6.5t-4 5.5t-5.5 2.5t-7 -5t-7.5 -10t-4.5 -5q-3 2 -6 1.5t-4.5 -1t-4.5 -3t-5 -3.5 q-3 -2 -8.5 -3t-8.5 -2q15 5 -1 11q-10 4 -16 3q9 4 7.5 12t-8.5 14h5q-1 4 -8.5 8.5t-17.5 8.5t-13 6q-8 5 -34 9.5t-33 0.5q-5 -6 -4.5 -10.5t4 -14t3.5 -12.5q1 -6 -5.5 -13t-6.5 -12q0 -7 14 -15.5t10 -21.5q-3 -8 -16 -16t-16 -12q-5 -8 -1.5 -18.5t10.5 -16.5 q2 -2 1.5 -4t-3.5 -4.5t-5.5 -4t-6.5 -3.5l-3 -2q-11 -5 -20.5 6t-13.5 26q-7 25 -16 30q-23 8 -29 -1q-5 13 -41 26q-25 9 -58 4q6 1 0 15q-7 15 -19 12q3 6 4 17.5t1 13.5q3 13 12 23q1 1 7 8.5t9.5 13.5t0.5 6q35 -4 50 11q5 5 11.5 17t10.5 17q9 6 14 5.5t14.5 -5.5 t14.5 -5q14 -1 15.5 11t-7.5 20q12 -1 3 17q-5 7 -8 9q-12 4 -27 -5q-8 -4 2 -8q-1 1 -9.5 -10.5t-16.5 -17.5t-16 5q-1 1 -5.5 13.5t-9.5 13.5q-8 0 -16 -15q3 8 -11 15t-24 8q19 12 -8 27q-7 4 -20.5 5t-19.5 -4q-5 -7 -5.5 -11.5t5 -8t10.5 -5.5t11.5 -4t8.5 -3 q14 -10 8 -14q-2 -1 -8.5 -3.5t-11.5 -4.5t-6 -4q-3 -4 0 -14t-2 -14q-5 5 -9 17.5t-7 16.5q7 -9 -25 -6l-10 1q-4 0 -16 -2t-20.5 -1t-13.5 8q-4 8 0 20q1 4 4 2q-4 3 -11 9.5t-10 8.5q-46 -15 -94 -41q6 -1 12 1q5 2 13 6.5t10 5.5q34 14 42 7l5 5q14 -16 20 -25 q-7 4 -30 1q-20 -6 -22 -12q7 -12 5 -18q-4 3 -11.5 10t-14.5 11t-15 5q-16 0 -22 -1q-146 -80 -235 -222q7 -7 12 -8q4 -1 5 -9t2.5 -11t11.5 3q9 -8 3 -19q1 1 44 -27q19 -17 21 -21q3 -11 -10 -18q-1 2 -9 9t-9 4q-3 -5 0.5 -18.5t10.5 -12.5q-7 0 -9.5 -16t-2.5 -35.5 t-1 -23.5l2 -1q-3 -12 5.5 -34.5t21.5 -19.5q-13 -3 20 -43q6 -8 8 -9q3 -2 12 -7.5t15 -10t10 -10.5q4 -5 10 -22.5t14 -23.5q-2 -6 9.5 -20t10.5 -23q-1 0 -2.5 -1t-2.5 -1q3 -7 15.5 -14t15.5 -13q1 -3 2 -10t3 -11t8 -2q2 20 -24 62q-15 25 -17 29q-3 5 -5.5 15.5 t-4.5 14.5q2 0 6 -1.5t8.5 -3.5t7.5 -4t2 -3q-3 -7 2 -17.5t12 -18.5t17 -19t12 -13q6 -6 14 -19.5t0 -13.5q9 0 20 -10t17 -20q5 -8 8 -26t5 -24q2 -7 8.5 -13.5t12.5 -9.5l16 -8t13 -7q5 -2 18.5 -10.5t21.5 -11.5q10 -4 16 -4t14.5 2.5t13.5 3.5q15 2 29 -15t21 -21 q36 -19 55 -11q-2 -1 0.5 -7.5t8 -15.5t9 -14.5t5.5 -8.5q5 -6 18 -15t18 -15q6 4 7 9q-3 -8 7 -20t18 -10q14 3 14 32q-31 -15 -49 18q0 1 -2.5 5.5t-4 8.5t-2.5 8.5t0 7.5t5 3q9 0 10 3.5t-2 12.5t-4 13q-1 8 -11 20t-12 15q-5 -9 -16 -8t-16 9q0 -1 -1.5 -5.5t-1.5 -6.5 q-13 0 -15 1q1 3 2.5 17.5t3.5 22.5q1 4 5.5 12t7.5 14.5t4 12.5t-4.5 9.5t-17.5 2.5q-19 -1 -26 -20q-1 -3 -3 -10.5t-5 -11.5t-9 -7q-7 -3 -24 -2t-24 5q-13 8 -22.5 29t-9.5 37q0 10 2.5 26.5t3 25t-5.5 24.5q3 2 9 9.5t10 10.5q2 1 4.5 1.5t4.5 0t4 1.5t3 6q-1 1 -4 3 q-3 3 -4 3q7 -3 28.5 1.5t27.5 -1.5q15 -11 22 2q0 1 -2.5 9.5t-0.5 13.5q5 -27 29 -9q3 -3 15.5 -5t17.5 -5q3 -2 7 -5.5t5.5 -4.5t5 0.5t8.5 6.5q10 -14 12 -24q11 -40 19 -44q7 -3 11 -2t4.5 9.5t0 14t-1.5 12.5l-1 8v18l-1 8q-15 3 -18.5 12t1.5 18.5t15 18.5q1 1 8 3.5 t15.5 6.5t12.5 8q21 19 15 35q7 0 11 9q-1 0 -5 3t-7.5 5t-4.5 2q9 5 2 16q5 3 7.5 11t7.5 10q9 -12 21 -2q7 8 1 16q5 7 20.5 10.5t18.5 9.5q7 -2 8 2t1 12t3 12q4 5 15 9t13 5l17 11q3 4 0 4q18 -2 31 11q10 11 -6 20q3 6 -3 9.5t-15 5.5q3 1 11.5 0.5t10.5 1.5 q15 10 -7 16q-17 5 -43 -12zM879 10q206 36 351 189q-3 3 -12.5 4.5t-12.5 3.5q-18 7 -24 8q1 7 -2.5 13t-8 9t-12.5 8t-11 7q-2 2 -7 6t-7 5.5t-7.5 4.5t-8.5 2t-10 -1l-3 -1q-3 -1 -5.5 -2.5t-5.5 -3t-4 -3t0 -2.5q-21 17 -36 22q-5 1 -11 5.5t-10.5 7t-10 1.5t-11.5 -7 q-5 -5 -6 -15t-2 -13q-7 5 0 17.5t2 18.5q-3 6 -10.5 4.5t-12 -4.5t-11.5 -8.5t-9 -6.5t-8.5 -5.5t-8.5 -7.5q-3 -4 -6 -12t-5 -11q-2 4 -11.5 6.5t-9.5 5.5q2 -10 4 -35t5 -38q7 -31 -12 -48q-27 -25 -29 -40q-4 -22 12 -26q0 -7 -8 -20.5t-7 -21.5q0 -6 2 -16z",
            "film": "M384 -64v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM384 320v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM384 704v128q0 26 -19 45t-45 19h-128 q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM1408 -64v512q0 26 -19 45t-45 19h-768q-26 0 -45 -19t-19 -45v-512q0 -26 19 -45t45 -19h768q26 0 45 19t19 45zM384 1088v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45 t45 -19h128q26 0 45 19t19 45zM1792 -64v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM1408 704v512q0 26 -19 45t-45 19h-768q-26 0 -45 -19t-19 -45v-512q0 -26 19 -45t45 -19h768q26 0 45 19t19 45zM1792 320v128 q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM1792 704v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM1792 1088v128q0 26 -19 45t-45 19h-128q-26 0 -45 -19 t-19 -45v-128q0 -26 19 -45t45 -19h128q26 0 45 19t19 45zM1920 1248v-1344q0 -66 -47 -113t-113 -47h-1600q-66 0 -113 47t-47 113v1344q0 66 47 113t113 47h1600q66 0 113 -47t47 -113z",
            "headphones": "M1664 650q0 -166 -60 -314l-20 -49l-185 -33q-22 -83 -90.5 -136.5t-156.5 -53.5v-32q0 -14 -9 -23t-23 -9h-64q-14 0 -23 9t-9 23v576q0 14 9 23t23 9h64q14 0 23 -9t9 -23v-32q71 0 130 -35.5t93 -95.5l68 12q29 95 29 193q0 148 -88 279t-236.5 209t-315.5 78 t-315.5 -78t-236.5 -209t-88 -279q0 -98 29 -193l68 -12q34 60 93 95.5t130 35.5v32q0 14 9 23t23 9h64q14 0 23 -9t9 -23v-576q0 -14 -9 -23t-23 -9h-64q-14 0 -23 9t-9 23v32q-88 0 -156.5 53.5t-90.5 136.5l-185 33l-20 49q-60 148 -60 314q0 151 67 291t179 242.5 t266 163.5t320 61t320 -61t266 -163.5t179 -242.5t67 -291z",
            "file-text-o": "M1468 1156q28 -28 48 -76t20 -88v-1152q0 -40 -28 -68t-68 -28h-1344q-40 0 -68 28t-28 68v1600q0 40 28 68t68 28h896q40 0 88 -20t76 -48zM1024 1400v-376h376q-10 29 -22 41l-313 313q-12 12 -41 22zM1408 -128v1024h-416q-40 0 -68 28t-28 68v416h-768v-1536h1280z M384 736q0 14 9 23t23 9h704q14 0 23 -9t9 -23v-64q0 -14 -9 -23t-23 -9h-704q-14 0 -23 9t-9 23v64zM1120 512q14 0 23 -9t9 -23v-64q0 -14 -9 -23t-23 -9h-704q-14 0 -23 9t-9 23v64q0 14 9 23t23 9h704zM1120 256q14 0 23 -9t9 -23v-64q0 -14 -9 -23t-23 -9h-704 q-14 0 -23 9t-9 23v64q0 14 9 23t23 9h704z",
            "calculator": "M384 0q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM768 0q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM384 384q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5 t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1152 0q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM768 384q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5 t37.5 90.5zM384 768q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1152 384q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM768 768q0 53 -37.5 90.5t-90.5 37.5 t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1536 0v384q0 52 -38 90t-90 38t-90 -38t-38 -90v-384q0 -52 38 -90t90 -38t90 38t38 90zM1152 768q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5z M1536 1088v256q0 26 -19 45t-45 19h-1280q-26 0 -45 -19t-19 -45v-256q0 -26 19 -45t45 -19h1280q26 0 45 19t19 45zM1536 768q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1664 1408v-1536q0 -52 -38 -90t-90 -38 h-1408q-52 0 -90 38t-38 90v1536q0 52 38 90t90 38h1408q52 0 90 -38t38 -90z",
            "check-square-o": "M1408 606v-318q0 -119 -84.5 -203.5t-203.5 -84.5h-832q-119 0 -203.5 84.5t-84.5 203.5v832q0 119 84.5 203.5t203.5 84.5h832q63 0 117 -25q15 -7 18 -23q3 -17 -9 -29l-49 -49q-10 -10 -23 -10q-3 0 -9 2q-23 6 -45 6h-832q-66 0 -113 -47t-47 -113v-832 q0 -66 47 -113t113 -47h832q66 0 113 47t47 113v254q0 13 9 22l64 64q10 10 23 10q6 0 12 -3q20 -8 20 -29zM1639 1095l-814 -814q-24 -24 -57 -24t-57 24l-430 430q-24 24 -24 57t24 57l110 110q24 24 57 24t57 -24l263 -263l647 647q24 24 57 24t57 -24l110 -110 q24 -24 24 -57t-24 -57z",
            "gift": "M928 180v56v468v192h-320v-192v-468v-56q0 -25 18 -38.5t46 -13.5h192q28 0 46 13.5t18 38.5zM472 1024h195l-126 161q-26 31 -69 31q-40 0 -68 -28t-28 -68t28 -68t68 -28zM1160 1120q0 40 -28 68t-68 28q-43 0 -69 -31l-125 -161h194q40 0 68 28t28 68zM1536 864v-320 q0 -14 -9 -23t-23 -9h-96v-416q0 -40 -28 -68t-68 -28h-1088q-40 0 -68 28t-28 68v416h-96q-14 0 -23 9t-9 23v320q0 14 9 23t23 9h440q-93 0 -158.5 65.5t-65.5 158.5t65.5 158.5t158.5 65.5q107 0 168 -77l128 -165l128 165q61 77 168 77q93 0 158.5 -65.5t65.5 -158.5 t-65.5 -158.5t-158.5 -65.5h440q14 0 23 -9t9 -23z",
            "paint-brush": "M1615 1536q70 0 122.5 -46.5t52.5 -116.5q0 -63 -45 -151q-332 -629 -465 -752q-97 -91 -218 -91q-126 0 -216.5 92.5t-90.5 219.5q0 128 92 212l638 579q59 54 130 54zM706 502q39 -76 106.5 -130t150.5 -76l1 -71q4 -213 -129.5 -347t-348.5 -134q-123 0 -218 46.5 t-152.5 127.5t-86.5 183t-29 220q7 -5 41 -30t62 -44.5t59 -36.5t46 -17q41 0 55 37q25 66 57.5 112.5t69.5 76t88 47.5t103 25.5t125 10.5z",
            "list-ol": "M381 -84q0 -80 -54.5 -126t-135.5 -46q-106 0 -172 66l57 88q49 -45 106 -45q29 0 50.5 14.5t21.5 42.5q0 64 -105 56l-26 56q8 10 32.5 43.5t42.5 54t37 38.5v1q-16 0 -48.5 -1t-48.5 -1v-53h-106v152h333v-88l-95 -115q51 -12 81 -49t30 -88zM383 543v-159h-362 q-6 36 -6 54q0 51 23.5 93t56.5 68t66 47.5t56.5 43.5t23.5 45q0 25 -14.5 38.5t-39.5 13.5q-46 0 -81 -58l-85 59q24 51 71.5 79.5t105.5 28.5q73 0 123 -41.5t50 -112.5q0 -50 -34 -91.5t-75 -64.5t-75.5 -50.5t-35.5 -52.5h127v60h105zM1792 224v-192q0 -13 -9.5 -22.5 t-22.5 -9.5h-1216q-13 0 -22.5 9.5t-9.5 22.5v192q0 14 9 23t23 9h1216q13 0 22.5 -9.5t9.5 -22.5zM384 1123v-99h-335v99h107q0 41 0.5 122t0.5 121v12h-2q-8 -17 -50 -54l-71 76l136 127h106v-404h108zM1792 736v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1216q-13 0 -22.5 9.5 t-9.5 22.5v192q0 14 9 23t23 9h1216q13 0 22.5 -9.5t9.5 -22.5zM1792 1248v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1216q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1216q13 0 22.5 -9.5t9.5 -22.5z",
            "gamepad": "M832 448v128q0 14 -9 23t-23 9h-192v192q0 14 -9 23t-23 9h-128q-14 0 -23 -9t-9 -23v-192h-192q-14 0 -23 -9t-9 -23v-128q0 -14 9 -23t23 -9h192v-192q0 -14 9 -23t23 -9h128q14 0 23 9t9 23v192h192q14 0 23 9t9 23zM1408 384q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5 t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1664 640q0 53 -37.5 90.5t-90.5 37.5t-90.5 -37.5t-37.5 -90.5t37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1920 512q0 -212 -150 -362t-362 -150q-192 0 -338 128h-220q-146 -128 -338 -128q-212 0 -362 150 t-150 362t150 362t362 150h896q212 0 362 -150t150 -362z",
            "user": "M1408 131q0 -120 -73 -189.5t-194 -69.5h-874q-121 0 -194 69.5t-73 189.5q0 53 3.5 103.5t14 109t26.5 108.5t43 97.5t62 81t85.5 53.5t111.5 20q9 0 42 -21.5t74.5 -48t108 -48t133.5 -21.5t133.5 21.5t108 48t74.5 48t42 21.5q61 0 111.5 -20t85.5 -53.5t62 -81 t43 -97.5t26.5 -108.5t14 -109t3.5 -103.5zM1088 1024q0 -159 -112.5 -271.5t-271.5 -112.5t-271.5 112.5t-112.5 271.5t112.5 271.5t271.5 112.5t271.5 -112.5t112.5 -271.5z",
            "file-o": "M1468 1156q28 -28 48 -76t20 -88v-1152q0 -40 -28 -68t-68 -28h-1344q-40 0 -68 28t-28 68v1600q0 40 28 68t68 28h896q40 0 88 -20t76 -48zM1024 1400v-376h376q-10 29 -22 41l-313 313q-12 12 -41 22zM1408 -128v1024h-416q-40 0 -68 28t-28 68v416h-768v-1536h1280z ",
            "bolt": "M885 970q18 -20 7 -44l-540 -1157q-13 -25 -42 -25q-4 0 -14 2q-17 5 -25.5 19t-4.5 30l197 808l-406 -101q-4 -1 -12 -1q-18 0 -31 11q-18 15 -13 39l201 825q4 14 16 23t28 9h328q19 0 32 -12.5t13 -29.5q0 -8 -5 -18l-171 -463l396 98q8 2 12 2q19 0 34 -15z",
            "book": "M1639 1058q40 -57 18 -129l-275 -906q-19 -64 -76.5 -107.5t-122.5 -43.5h-923q-77 0 -148.5 53.5t-99.5 131.5q-24 67 -2 127q0 4 3 27t4 37q1 8 -3 21.5t-3 19.5q2 11 8 21t16.5 23.5t16.5 23.5q23 38 45 91.5t30 91.5q3 10 0.5 30t-0.5 28q3 11 17 28t17 23 q21 36 42 92t25 90q1 9 -2.5 32t0.5 28q4 13 22 30.5t22 22.5q19 26 42.5 84.5t27.5 96.5q1 8 -3 25.5t-2 26.5q2 8 9 18t18 23t17 21q8 12 16.5 30.5t15 35t16 36t19.5 32t26.5 23.5t36 11.5t47.5 -5.5l-1 -3q38 9 51 9h761q74 0 114 -56t18 -130l-274 -906 q-36 -119 -71.5 -153.5t-128.5 -34.5h-869q-27 0 -38 -15q-11 -16 -1 -43q24 -70 144 -70h923q29 0 56 15.5t35 41.5l300 987q7 22 5 57q38 -15 59 -43zM575 1056q-4 -13 2 -22.5t20 -9.5h608q13 0 25.5 9.5t16.5 22.5l21 64q4 13 -2 22.5t-20 9.5h-608q-13 0 -25.5 -9.5 t-16.5 -22.5zM492 800q-4 -13 2 -22.5t20 -9.5h608q13 0 25.5 9.5t16.5 22.5l21 64q4 13 -2 22.5t-20 9.5h-608q-13 0 -25.5 -9.5t-16.5 -22.5z",
            "table": "M512 160v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM512 544v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1024 160v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23 v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM512 928v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1024 544v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1536 160v192 q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1024 928v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1536 544v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192 q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1536 928v192q0 14 -9 23t-23 9h-320q-14 0 -23 -9t-9 -23v-192q0 -14 9 -23t23 -9h320q14 0 23 9t9 23zM1664 1248v-1088q0 -66 -47 -113t-113 -47h-1344q-66 0 -113 47t-47 113v1088q0 66 47 113t113 47h1344q66 0 113 -47t47 -113 z",
            "list-ul": "M384 128q0 -80 -56 -136t-136 -56t-136 56t-56 136t56 136t136 56t136 -56t56 -136zM384 640q0 -80 -56 -136t-136 -56t-136 56t-56 136t56 136t136 56t136 -56t56 -136zM1792 224v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1216q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5 t22.5 9.5h1216q13 0 22.5 -9.5t9.5 -22.5zM384 1152q0 -80 -56 -136t-136 -56t-136 56t-56 136t56 136t136 56t136 -56t56 -136zM1792 736v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1216q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1216q13 0 22.5 -9.5t9.5 -22.5z M1792 1248v-192q0 -13 -9.5 -22.5t-22.5 -9.5h-1216q-13 0 -22.5 9.5t-9.5 22.5v192q0 13 9.5 22.5t22.5 9.5h1216q13 0 22.5 -9.5t9.5 -22.5z",
            "th-list": "M512 288v-192q0 -40 -28 -68t-68 -28h-320q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h320q40 0 68 -28t28 -68zM512 800v-192q0 -40 -28 -68t-68 -28h-320q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h320q40 0 68 -28t28 -68zM1792 288v-192q0 -40 -28 -68t-68 -28h-960 q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h960q40 0 68 -28t28 -68zM512 1312v-192q0 -40 -28 -68t-68 -28h-320q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h320q40 0 68 -28t28 -68zM1792 800v-192q0 -40 -28 -68t-68 -28h-960q-40 0 -68 28t-28 68v192q0 40 28 68t68 28 h960q40 0 68 -28t28 -68zM1792 1312v-192q0 -40 -28 -68t-68 -28h-960q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h960q40 0 68 -28t28 -68z",
            "subscript": "M897 167v-167h-248l-159 252l-24 42q-8 9 -11 21h-3l-9 -21q-10 -20 -25 -44l-155 -250h-258v167h128l197 291l-185 272h-137v168h276l139 -228q2 -4 23 -42q8 -9 11 -21h3q3 9 11 21l25 42l140 228h257v-168h-125l-184 -267l204 -296h109zM1536 -50v-206h-514l-4 27 q-3 45 -3 46q0 64 26 117t65 86.5t84 65t84 54.5t65 54t26 64q0 38 -29.5 62.5t-70.5 24.5q-51 0 -97 -39q-14 -11 -36 -38l-105 92q26 37 63 66q80 65 188 65q110 0 178 -59.5t68 -158.5q0 -66 -34.5 -118.5t-84 -86t-99.5 -62.5t-87 -63t-41 -73h232v80h126z",
            "list-alt": "M384 352v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-64q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h64q13 0 22.5 -9.5t9.5 -22.5zM384 608v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-64q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h64q13 0 22.5 -9.5t9.5 -22.5z M384 864v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-64q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h64q13 0 22.5 -9.5t9.5 -22.5zM1536 352v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-960q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h960q13 0 22.5 -9.5t9.5 -22.5z M1536 608v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-960q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h960q13 0 22.5 -9.5t9.5 -22.5zM1536 864v-64q0 -13 -9.5 -22.5t-22.5 -9.5h-960q-13 0 -22.5 9.5t-9.5 22.5v64q0 13 9.5 22.5t22.5 9.5h960q13 0 22.5 -9.5 t9.5 -22.5zM1664 160v832q0 13 -9.5 22.5t-22.5 9.5h-1472q-13 0 -22.5 -9.5t-9.5 -22.5v-832q0 -13 9.5 -22.5t22.5 -9.5h1472q13 0 22.5 9.5t9.5 22.5zM1792 1248v-1088q0 -66 -47 -113t-113 -47h-1472q-66 0 -113 47t-47 113v1088q0 66 47 113t113 47h1472q66 0 113 -47 t47 -113z",
            "facebook": "M959 1524v-264h-157q-86 0 -116 -36t-30 -108v-189h293l-39 -296h-254v-759h-306v759h-255v296h255v218q0 186 104 288.5t277 102.5q147 0 228 -12z",
            "twitter": "M1620 1128q-67 -98 -162 -167q1 -14 1 -42q0 -130 -38 -259.5t-115.5 -248.5t-184.5 -210.5t-258 -146t-323 -54.5q-271 0 -496 145q35 -4 78 -4q225 0 401 138q-105 2 -188 64.5t-114 159.5q33 -5 61 -5q43 0 85 11q-112 23 -185.5 111.5t-73.5 205.5v4q68 -38 146 -41 q-66 44 -105 115t-39 154q0 88 44 163q121 -149 294.5 -238.5t371.5 -99.5q-8 38 -8 74q0 134 94.5 228.5t228.5 94.5q140 0 236 -102q109 21 205 78q-37 -115 -142 -178q93 10 186 50z",
            "upload": "M1280 64q0 26 -19 45t-45 19t-45 -19t-19 -45t19 -45t45 -19t45 19t19 45zM1536 64q0 26 -19 45t-45 19t-45 -19t-19 -45t19 -45t45 -19t45 19t19 45zM1664 288v-320q0 -40 -28 -68t-68 -28h-1472q-40 0 -68 28t-28 68v320q0 40 28 68t68 28h427q21 -56 70.5 -92 t110.5 -36h256q61 0 110.5 36t70.5 92h427q40 0 68 -28t28 -68zM1339 936q-17 -40 -59 -40h-256v-448q0 -26 -19 -45t-45 -19h-256q-26 0 -45 19t-19 45v448h-256q-42 0 -59 40q-17 39 14 69l448 448q18 19 45 19t45 -19l448 -448q31 -30 14 -69z",
            "files-o": "M1696 1152q40 0 68 -28t28 -68v-1216q0 -40 -28 -68t-68 -28h-960q-40 0 -68 28t-28 68v288h-544q-40 0 -68 28t-28 68v672q0 40 20 88t48 76l408 408q28 28 76 48t88 20h416q40 0 68 -28t28 -68v-328q68 40 128 40h416zM1152 939l-299 -299h299v299zM512 1323l-299 -299 h299v299zM708 676l316 316v416h-384v-416q0 -40 -28 -68t-68 -28h-416v-640h512v256q0 40 20 88t48 76zM1664 -128v1152h-384v-416q0 -40 -28 -68t-68 -28h-416v-640h896z",
            "recycle": "M836 367l-15 -368l-2 -22l-420 29q-36 3 -67 31.5t-47 65.5q-11 27 -14.5 55t4 65t12 55t21.5 64t19 53q78 -12 509 -28zM449 953l180 -379l-147 92q-63 -72 -111.5 -144.5t-72.5 -125t-39.5 -94.5t-18.5 -63l-4 -21l-190 357q-17 26 -18 56t6 47l8 18q35 63 114 188 l-140 86zM1680 436l-188 -359q-12 -29 -36.5 -46.5t-43.5 -20.5l-18 -4q-71 -7 -219 -12l8 -164l-230 367l211 362l7 -173q170 -16 283 -5t170 33zM895 1360q-47 -63 -265 -435l-317 187l-19 12l225 356q20 31 60 45t80 10q24 -2 48.5 -12t42 -21t41.5 -33t36 -34.5 t36 -39.5t32 -35zM1550 1053l212 -363q18 -37 12.5 -76t-27.5 -74q-13 -20 -33 -37t-38 -28t-48.5 -22t-47 -16t-51.5 -14t-46 -12q-34 72 -265 436l313 195zM1407 1279l142 83l-220 -373l-419 20l151 86q-34 89 -75 166t-75.5 123.5t-64.5 80t-47 46.5l-17 13l405 -1 q31 3 58 -10.5t39 -28.5l11 -15q39 -61 112 -190z",
            "clipboard": "M768 -128h896v640h-416q-40 0 -68 28t-28 68v416h-384v-1152zM1024 1312v64q0 13 -9.5 22.5t-22.5 9.5h-704q-13 0 -22.5 -9.5t-9.5 -22.5v-64q0 -13 9.5 -22.5t22.5 -9.5h704q13 0 22.5 9.5t9.5 22.5zM1280 640h299l-299 299v-299zM1792 512v-672q0 -40 -28 -68t-68 -28 h-960q-40 0 -68 28t-28 68v160h-544q-40 0 -68 28t-28 68v1344q0 40 28 68t68 28h1088q40 0 68 -28t28 -68v-328q21 -13 36 -28l408 -408q28 -28 48 -76t20 -88z",
            "download": "M1280 192q0 26 -19 45t-45 19t-45 -19t-19 -45t19 -45t45 -19t45 19t19 45zM1536 192q0 26 -19 45t-45 19t-45 -19t-19 -45t19 -45t45 -19t45 19t19 45zM1664 416v-320q0 -40 -28 -68t-68 -28h-1472q-40 0 -68 28t-28 68v320q0 40 28 68t68 28h465l135 -136 q58 -56 136 -56t136 56l136 136h464q40 0 68 -28t28 -68zM1339 985q17 -41 -14 -70l-448 -448q-18 -19 -45 -19t-45 19l-448 448q-31 29 -14 70q17 39 59 39h256v448q0 26 19 45t45 19h256q26 0 45 -19t19 -45v-448h256q42 0 59 -39z",
            "camera": "M960 864q119 0 203.5 -84.5t84.5 -203.5t-84.5 -203.5t-203.5 -84.5t-203.5 84.5t-84.5 203.5t84.5 203.5t203.5 84.5zM1664 1280q106 0 181 -75t75 -181v-896q0 -106 -75 -181t-181 -75h-1408q-106 0 -181 75t-75 181v896q0 106 75 181t181 75h224l51 136 q19 49 69.5 84.5t103.5 35.5h512q53 0 103.5 -35.5t69.5 -84.5l51 -136h224zM960 128q185 0 316.5 131.5t131.5 316.5t-131.5 316.5t-316.5 131.5t-316.5 -131.5t-131.5 -316.5t131.5 -316.5t316.5 -131.5z",
            "cog": "M1024 640q0 106 -75 181t-181 75t-181 -75t-75 -181t75 -181t181 -75t181 75t75 181zM1536 749v-222q0 -12 -8 -23t-20 -13l-185 -28q-19 -54 -39 -91q35 -50 107 -138q10 -12 10 -25t-9 -23q-27 -37 -99 -108t-94 -71q-12 0 -26 9l-138 108q-44 -23 -91 -38 q-16 -136 -29 -186q-7 -28 -36 -28h-222q-14 0 -24.5 8.5t-11.5 21.5l-28 184q-49 16 -90 37l-141 -107q-10 -9 -25 -9q-14 0 -25 11q-126 114 -165 168q-7 10 -7 23q0 12 8 23q15 21 51 66.5t54 70.5q-27 50 -41 99l-183 27q-13 2 -21 12.5t-8 23.5v222q0 12 8 23t19 13 l186 28q14 46 39 92q-40 57 -107 138q-10 12 -10 24q0 10 9 23q26 36 98.5 107.5t94.5 71.5q13 0 26 -10l138 -107q44 23 91 38q16 136 29 186q7 28 36 28h222q14 0 24.5 -8.5t11.5 -21.5l28 -184q49 -16 90 -37l142 107q9 9 24 9q13 0 25 -10q129 -119 165 -170q7 -8 7 -22 q0 -12 -8 -23q-15 -21 -51 -66.5t-54 -70.5q26 -50 41 -98l183 -28q13 -2 21 -12.5t8 -23.5z",
            "cogs": "M896 640q0 106 -75 181t-181 75t-181 -75t-75 -181t75 -181t181 -75t181 75t75 181zM1664 128q0 52 -38 90t-90 38t-90 -38t-38 -90q0 -53 37.5 -90.5t90.5 -37.5t90.5 37.5t37.5 90.5zM1664 1152q0 52 -38 90t-90 38t-90 -38t-38 -90q0 -53 37.5 -90.5t90.5 -37.5 t90.5 37.5t37.5 90.5zM1280 731v-185q0 -10 -7 -19.5t-16 -10.5l-155 -24q-11 -35 -32 -76q34 -48 90 -115q7 -10 7 -20q0 -12 -7 -19q-23 -30 -82.5 -89.5t-78.5 -59.5q-11 0 -21 7l-115 90q-37 -19 -77 -31q-11 -108 -23 -155q-7 -24 -30 -24h-186q-11 0 -20 7.5t-10 17.5 l-23 153q-34 10 -75 31l-118 -89q-7 -7 -20 -7q-11 0 -21 8q-144 133 -144 160q0 9 7 19q10 14 41 53t47 61q-23 44 -35 82l-152 24q-10 1 -17 9.5t-7 19.5v185q0 10 7 19.5t16 10.5l155 24q11 35 32 76q-34 48 -90 115q-7 11 -7 20q0 12 7 20q22 30 82 89t79 59q11 0 21 -7 l115 -90q34 18 77 32q11 108 23 154q7 24 30 24h186q11 0 20 -7.5t10 -17.5l23 -153q34 -10 75 -31l118 89q8 7 20 7q11 0 21 -8q144 -133 144 -160q0 -9 -7 -19q-12 -16 -42 -54t-45 -60q23 -48 34 -82l152 -23q10 -2 17 -10.5t7 -19.5zM1920 198v-140q0 -16 -149 -31 q-12 -27 -30 -52q51 -113 51 -138q0 -4 -4 -7q-122 -71 -124 -71q-8 0 -46 47t-52 68q-20 -2 -30 -2t-30 2q-14 -21 -52 -68t-46 -47q-2 0 -124 71q-4 3 -4 7q0 25 51 138q-18 25 -30 52q-149 15 -149 31v140q0 16 149 31q13 29 30 52q-51 113 -51 138q0 4 4 7q4 2 35 20 t59 34t30 16q8 0 46 -46.5t52 -67.5q20 2 30 2t30 -2q51 71 92 112l6 2q4 0 124 -70q4 -3 4 -7q0 -25 -51 -138q17 -23 30 -52q149 -15 149 -31zM1920 1222v-140q0 -16 -149 -31q-12 -27 -30 -52q51 -113 51 -138q0 -4 -4 -7q-122 -71 -124 -71q-8 0 -46 47t-52 68 q-20 -2 -30 -2t-30 2q-14 -21 -52 -68t-46 -47q-2 0 -124 71q-4 3 -4 7q0 25 51 138q-18 25 -30 52q-149 15 -149 31v140q0 16 149 31q13 29 30 52q-51 113 -51 138q0 4 4 7q4 2 35 20t59 34t30 16q8 0 46 -46.5t52 -67.5q20 2 30 2t30 -2q51 71 92 112l6 2q4 0 124 -70 q4 -3 4 -7q0 -25 -51 -138q17 -23 30 -52q149 -15 149 -31z",
            "floppy-o": "M384 0h768v384h-768v-384zM1280 0h128v896q0 14 -10 38.5t-20 34.5l-281 281q-10 10 -34 20t-39 10v-416q0 -40 -28 -68t-68 -28h-576q-40 0 -68 28t-28 68v416h-128v-1280h128v416q0 40 28 68t68 28h832q40 0 68 -28t28 -68v-416zM896 928v320q0 13 -9.5 22.5t-22.5 9.5 h-192q-13 0 -22.5 -9.5t-9.5 -22.5v-320q0 -13 9.5 -22.5t22.5 -9.5h192q13 0 22.5 9.5t9.5 22.5zM1536 896v-928q0 -40 -28 -68t-68 -28h-1344q-40 0 -68 28t-28 68v1344q0 40 28 68t68 28h928q40 0 88 -20t76 -48l280 -280q28 -28 48 -76t20 -88z",
            "refresh": "M1511 480q0 -5 -1 -7q-64 -268 -268 -434.5t-478 -166.5q-146 0 -282.5 55t-243.5 157l-129 -129q-19 -19 -45 -19t-45 19t-19 45v448q0 26 19 45t45 19h448q26 0 45 -19t19 -45t-19 -45l-137 -137q71 -66 161 -102t187 -36q134 0 250 65t186 179q11 17 53 117 q8 23 30 23h192q13 0 22.5 -9.5t9.5 -22.5zM1536 1280v-448q0 -26 -19 -45t-45 -19h-448q-26 0 -45 19t-19 45t19 45l138 138q-148 137 -349 137q-134 0 -250 -65t-186 -179q-11 -17 -53 -117q-8 -23 -30 -23h-199q-13 0 -22.5 9.5t-9.5 22.5v7q65 268 270 434.5t480 166.5 q146 0 284 -55.5t245 -156.5l130 129q19 19 45 19t45 -19t19 -45z",
            "envelope-o": "M1664 32v768q-32 -36 -69 -66q-268 -206 -426 -338q-51 -43 -83 -67t-86.5 -48.5t-102.5 -24.5h-1h-1q-48 0 -102.5 24.5t-86.5 48.5t-83 67q-158 132 -426 338q-37 30 -69 66v-768q0 -13 9.5 -22.5t22.5 -9.5h1472q13 0 22.5 9.5t9.5 22.5zM1664 1083v11v13.5t-0.5 13 t-3 12.5t-5.5 9t-9 7.5t-14 2.5h-1472q-13 0 -22.5 -9.5t-9.5 -22.5q0 -168 147 -284q193 -152 401 -317q6 -5 35 -29.5t46 -37.5t44.5 -31.5t50.5 -27.5t43 -9h1h1q20 0 43 9t50.5 27.5t44.5 31.5t46 37.5t35 29.5q208 165 401 317q54 43 100.5 115.5t46.5 131.5z M1792 1120v-1088q0 -66 -47 -113t-113 -47h-1472q-66 0 -113 47t-47 113v1088q0 66 47 113t113 47h1472q66 0 113 -47t47 -113z",
            "video-camera": "M1792 1184v-1088q0 -42 -39 -59q-13 -5 -25 -5q-27 0 -45 19l-403 403v-166q0 -119 -84.5 -203.5t-203.5 -84.5h-704q-119 0 -203.5 84.5t-84.5 203.5v704q0 119 84.5 203.5t203.5 84.5h704q119 0 203.5 -84.5t84.5 -203.5v-165l403 402q18 19 45 19q12 0 25 -5 q39 -17 39 -59z",
            "folder-open": "M1879 584q0 -31 -31 -66l-336 -396q-43 -51 -120.5 -86.5t-143.5 -35.5h-1088q-34 0 -60.5 13t-26.5 43q0 31 31 66l336 396q43 51 120.5 86.5t143.5 35.5h1088q34 0 60.5 -13t26.5 -43zM1536 928v-160h-832q-94 0 -197 -47.5t-164 -119.5l-337 -396l-5 -6q0 4 -0.5 12.5 t-0.5 12.5v960q0 92 66 158t158 66h320q92 0 158 -66t66 -158v-32h544q92 0 158 -66t66 -158z",
            "forward": "M45 -115q-19 -19 -32 -13t-13 32v1472q0 26 13 32t32 -13l710 -710q8 -8 13 -19v710q0 26 13 32t32 -13l710 -710q19 -19 19 -45t-19 -45l-710 -710q-19 -19 -32 -13t-13 32v710q-5 -10 -13 -19z",
            "backward": "M1619 1395q19 19 32 13t13 -32v-1472q0 -26 -13 -32t-32 13l-710 710q-8 9 -13 19v-710q0 -26 -13 -32t-32 13l-710 710q-19 19 -19 45t19 45l710 710q19 19 32 13t13 -32v-710q5 11 13 19z",
            "question": "M704 280v-240q0 -16 -12 -28t-28 -12h-240q-16 0 -28 12t-12 28v240q0 16 12 28t28 12h240q16 0 28 -12t12 -28zM1020 880q0 -54 -15.5 -101t-35 -76.5t-55 -59.5t-57.5 -43.5t-61 -35.5q-41 -23 -68.5 -65t-27.5 -67q0 -17 -12 -32.5t-28 -15.5h-240q-15 0 -25.5 18.5 t-10.5 37.5v45q0 83 65 156.5t143 108.5q59 27 84 56t25 76q0 42 -46.5 74t-107.5 32q-65 0 -108 -29q-35 -25 -107 -115q-13 -16 -31 -16q-12 0 -25 8l-164 125q-13 10 -15.5 25t5.5 28q160 266 464 266q80 0 161 -31t146 -83t106 -127.5t41 -158.5z",
            "share-alt": "M1216 512q133 0 226.5 -93.5t93.5 -226.5t-93.5 -226.5t-226.5 -93.5t-226.5 93.5t-93.5 226.5q0 12 2 34l-360 180q-92 -86 -218 -86q-133 0 -226.5 93.5t-93.5 226.5t93.5 226.5t226.5 93.5q126 0 218 -86l360 180q-2 22 -2 34q0 133 93.5 226.5t226.5 93.5 t226.5 -93.5t93.5 -226.5t-93.5 -226.5t-226.5 -93.5q-126 0 -218 86l-360 -180q2 -22 2 -34t-2 -34l360 -180q92 86 218 86z",
            "pause": "M1536 1344v-1408q0 -26 -19 -45t-45 -19h-512q-26 0 -45 19t-19 45v1408q0 26 19 45t45 19h512q26 0 45 -19t19 -45zM640 1344v-1408q0 -26 -19 -45t-45 -19h-512q-26 0 -45 19t-19 45v1408q0 26 19 45t45 19h512q26 0 45 -19t19 -45z",
            "star": "M1664 889q0 -22 -26 -48l-363 -354l86 -500q1 -7 1 -20q0 -21 -10.5 -35.5t-30.5 -14.5q-19 0 -40 12l-449 236l-449 -236q-22 -12 -40 -12q-21 0 -31.5 14.5t-10.5 35.5q0 6 2 20l86 500l-364 354q-25 27 -25 48q0 37 56 46l502 73l225 455q19 41 49 41t49 -41l225 -455 l502 -73q56 -9 56 -46z",
            "minus": "M1408 800v-192q0 -40 -28 -68t-68 -28h-1216q-40 0 -68 28t-28 68v192q0 40 28 68t68 28h1216q40 0 68 -28t28 -68z",
            "check": "M1671 970q0 -40 -28 -68l-724 -724l-136 -136q-28 -28 -68 -28t-68 28l-136 136l-362 362q-28 28 -28 68t28 68l136 136q28 28 68 28t68 -28l294 -295l656 657q28 28 68 28t68 -28l136 -136q28 -28 28 -68z",
            "heart-o": "M1664 940q0 81 -21.5 143t-55 98.5t-81.5 59.5t-94 31t-98 8t-112 -25.5t-110.5 -64t-86.5 -72t-60 -61.5q-18 -22 -49 -22t-49 22q-24 28 -60 61.5t-86.5 72t-110.5 64t-112 25.5t-98 -8t-94 -31t-81.5 -59.5t-55 -98.5t-21.5 -143q0 -168 187 -355l581 -560l580 559 q188 188 188 356zM1792 940q0 -221 -229 -450l-623 -600q-18 -18 -44 -18t-44 18l-624 602q-10 8 -27.5 26t-55.5 65.5t-68 97.5t-53.5 121t-23.5 138q0 220 127 344t351 124q62 0 126.5 -21.5t120 -58t95.5 -68.5t76 -68q36 36 76 68t95.5 68.5t120 58t126.5 21.5 q224 0 351 -124t127 -344z",
            "trophy": "M458 653q-74 162 -74 371h-256v-96q0 -78 94.5 -162t235.5 -113zM1536 928v96h-256q0 -209 -74 -371q141 29 235.5 113t94.5 162zM1664 1056v-128q0 -71 -41.5 -143t-112 -130t-173 -97.5t-215.5 -44.5q-42 -54 -95 -95q-38 -34 -52.5 -72.5t-14.5 -89.5q0 -54 30.5 -91 t97.5 -37q75 0 133.5 -45.5t58.5 -114.5v-64q0 -14 -9 -23t-23 -9h-832q-14 0 -23 9t-9 23v64q0 69 58.5 114.5t133.5 45.5q67 0 97.5 37t30.5 91q0 51 -14.5 89.5t-52.5 72.5q-53 41 -95 95q-113 5 -215.5 44.5t-173 97.5t-112 130t-41.5 143v128q0 40 28 68t68 28h288v96 q0 66 47 113t113 47h576q66 0 113 -47t47 -113v-96h288q40 0 68 -28t28 -68z",
            "bell": "M912 -160q0 16 -16 16q-59 0 -101.5 42.5t-42.5 101.5q0 16 -16 16t-16 -16q0 -73 51.5 -124.5t124.5 -51.5q16 0 16 16zM1728 128q0 -52 -38 -90t-90 -38h-448q0 -106 -75 -181t-181 -75t-181 75t-75 181h-448q-52 0 -90 38t-38 90q50 42 91 88t85 119.5t74.5 158.5 t50 206t19.5 260q0 152 117 282.5t307 158.5q-8 19 -8 39q0 40 28 68t68 28t68 -28t28 -68q0 -20 -8 -39q190 -28 307 -158.5t117 -282.5q0 -139 19.5 -260t50 -206t74.5 -158.5t85 -119.5t91 -88z",
            "wrench": "M384 64q0 26 -19 45t-45 19t-45 -19t-19 -45t19 -45t45 -19t45 19t19 45zM1028 484l-682 -682q-37 -37 -90 -37q-52 0 -91 37l-106 108q-38 36 -38 90q0 53 38 91l681 681q39 -98 114.5 -173.5t173.5 -114.5zM1662 919q0 -39 -23 -106q-47 -134 -164.5 -217.5 t-258.5 -83.5q-185 0 -316.5 131.5t-131.5 316.5t131.5 316.5t316.5 131.5q58 0 121.5 -16.5t107.5 -46.5q16 -11 16 -28t-16 -28l-293 -169v-224l193 -107q5 3 79 48.5t135.5 81t70.5 35.5q15 0 23.5 -10t8.5 -25z",
        };
        function svgBoilerPlate(viewPort, svg, iconName) {
            if (iconName === void 0) { iconName = ""; }
            return "<svg class='svg svg-icon-" + iconName + "' viewBox='" + viewPort + "'" + " preserveAspectRatio='xMinYMin' xmlns='http://www.w3.org/2000/svg'>" + svg + "</svg>";
        }
        SVG.svgBoilerPlate = svgBoilerPlate;
        var loginButton = svgBoilerPlate('0 0 480 100', '<path fill="#F1511B" d="M 304.013,30.6004L 287.456,30.5787L 287.456,14.0221L 304.012,14.0221L 304.013,30.6004 Z "/>' + '<path fill="#7FCB28" d="M 322.293,30.5783L 305.731,30.5848L 305.736,14.0221L 322.293,14.0221L 322.293,30.5783 Z "/>' + '<path fill="#00ADEE" d="M 304.012,48.8651L 287.456,48.8651L 287.456,32.309L 303.997,32.3036L 304.012,48.8651 Z "/>' + '<path fill="#FABC09" d="M 322.293,48.8651L 305.736,48.8651L 305.747,32.3192L 322.293,32.309L 322.293,48.8651 Z "/>' + '<path fill="#DF4A32" d="M 374.073,59.2197L 401.083,59.2197C 401.73,59.2197 402.255,59.7444 402.255,60.3916L 402.255,87.4013C 402.255,88.0485 401.73,88.5732 401.083,88.5732L 393.197,88.5732L 388.656,88.5732L 374.073,88.5732C 373.426,88.5732 372.901,88.0485 372.901,87.4013L 372.901,60.3916C 372.901,59.7444 373.426,59.2197 374.073,59.2197 Z M 386.737,63.2903L 388.618,63.2903L 390.501,62.1863L 384.402,62.1863C 383.593,62.1863 382.725,62.2811 381.8,62.4701C 380.865,62.6892 379.964,63.1573 379.097,63.874C 377.835,65.099 377.204,66.4629 377.204,67.9665C 377.204,69.2112 377.649,70.3014 378.54,71.2373C 379.391,72.243 380.629,72.7558 382.252,72.7757C 382.559,72.7757 382.886,72.7558 383.232,72.7159L 383.046,73.2413C 382.97,73.4215 382.931,73.647 382.931,73.9171C 382.931,74.3678 383.032,74.7534 383.232,75.0737C 383.404,75.4043 383.6,75.7147 383.82,76.005C 383.109,76.025 382.215,76.1142 381.138,76.2734C 380.051,76.4622 379.013,76.8399 378.025,77.4066C 377.146,77.9331 376.538,78.5444 376.202,79.2404C 375.857,79.9362 375.684,80.5672 375.684,81.1339C 375.684,82.2968 376.215,83.2957 377.279,84.1308C 378.332,85.0252 379.927,85.4825 382.063,85.5025C 384.615,85.4626 386.568,84.8502 387.922,83.6651C 389.226,82.5198 389.879,81.2053 389.879,79.7217C 389.86,78.676 389.623,77.8295 389.166,77.1822C 388.681,76.5448 388.117,75.9625 387.474,75.4345L 386.44,74.5832C 386.29,74.4337 386.137,74.2596 385.978,74.0603C 385.792,73.8512 385.699,73.5874 385.699,73.2686C 385.699,72.94 385.79,72.6512 385.971,72.4022C 386.126,72.1631 386.294,71.9492 386.475,71.7599L 387.375,70.9384C 387.629,70.6694 387.87,70.3758 388.097,70.057C 388.561,69.3997 388.802,68.5236 388.82,67.428C 388.82,66.8304 388.753,66.3076 388.619,65.8595C 388.456,65.4114 388.269,65.0231 388.059,64.6945C 387.838,64.3459 387.613,64.0521 387.383,63.8131C 387.144,63.5841 386.928,63.4098 386.737,63.2903 Z M 387.915,80.9187C 387.915,81.8748 387.546,82.6566 386.808,83.2644C 386.051,83.882 384.953,84.2006 383.516,84.2207C 381.914,84.2006 380.651,83.8421 379.729,83.145C 378.758,82.4475 378.272,81.5611 378.272,80.4855C 378.272,79.9376 378.384,79.4696 378.607,79.0811C 378.802,78.7125 379.039,78.4036 379.321,78.1548C 379.612,77.9159 379.899,77.7314 380.18,77.6021L 380.836,77.333C 381.496,77.1337 382.142,76.9894 382.773,76.8999C 383.414,76.8401 383.812,76.8201 383.968,76.8401L 384.652,76.87C 385.789,77.6668 386.624,78.339 387.158,78.8871C 387.663,79.4644 387.915,80.1418 387.915,80.9187 Z M 383.663,71.9419C 383.027,71.9419 382.462,71.7476 381.968,71.3582C 381.474,70.9691 381.07,70.4952 380.758,69.9363C 380.112,68.739 379.79,67.5862 379.79,66.4785C 379.77,65.6406 379.991,64.8822 380.453,64.2035C 381,63.555 381.688,63.2207 382.514,63.2007C 383.139,63.2207 383.692,63.4054 384.173,63.7545C 384.644,64.1237 385.023,64.6027 385.312,65.1914C 385.927,66.4188 386.234,67.6362 386.234,68.8436C 386.234,69.1232 386.212,69.4674 386.168,69.8763C 386.094,70.2856 385.928,70.6846 385.67,71.0736C 385.135,71.6227 384.466,71.9121 383.663,71.9419 Z M 400.017,71.7155L 396.809,71.7155L 396.809,68.4458L 394.931,68.4458L 394.931,71.7155L 391.703,71.7155L 391.703,73.5403L 391.723,73.5403L 391.723,73.6096L 394.931,73.6096L 394.931,76.8175L 396.809,76.8175L 396.809,73.6096L 400.095,73.6096L 400.095,71.7318L 400.017,71.7318L 400.017,71.7155 Z "/>' + '<path fill="#3F008F" d="M 447.118,85.0025L 442.792,84.4735L 443.273,80.6767L 447.599,81.205L 447.118,85.0025 Z M 451.446,61.9735L 447.311,78.657L 444.089,78.2252L 444.042,61.0608L 451.446,61.9735 Z M 436.542,82.1673C 434.069,84.0011 431.003,85.0745 427.368,85.3876L 422.716,85.3876C 419.055,85.0745 415.993,84.0011 413.561,82.1673C 410.581,79.9555 409.09,77.0707 409.09,73.5128C 409.09,70.0033 410.581,67.1659 413.561,64.9548C 416.494,62.6954 420.34,61.5899 425.051,61.5899C 429.715,61.5899 433.561,62.6954 436.542,64.9548C 439.474,67.1659 440.965,70.0033 440.965,73.5128C 440.965,77.0707 439.474,79.9555 436.542,82.1673 Z M 434.33,70.5798L 434.907,69.7628L 430.965,69.7146L 426.782,69.7146L 426.975,70.5798L 429.474,70.9648C 429.426,71.4932 428.129,72.6952 425.677,74.5702C 423.802,72.2144 422.407,70.3401 421.494,68.9941L 424.426,68.7048L 424.523,68.0311C 423.225,67.936 421.59,67.936 419.619,67.9836C 416.782,67.936 415.244,67.936 415.099,68.0311L 415.099,68.8488L 417.888,69.2332C 418.369,69.6182 419.379,70.7245 420.917,72.5995C 422.407,74.4269 423.177,75.4843 423.273,75.7729L 423.321,77.0232L 423.321,77.6472C 423.321,78.657 423.273,79.2343 423.177,79.3293C 423.033,79.4747 422.6,79.5704 421.878,79.6187L 420.484,79.6662L 420.34,80.5321L 424.667,80.4838L 429.522,80.4838L 429.571,79.5704L 426.59,79.5222L 426.398,77.6961L 426.446,76.9742L 426.542,75.7729C 426.686,75.3396 427.551,74.4745 429.234,73.1284C 430.821,71.83 431.734,71.1563 432.071,71.0613L 434.33,70.5798 Z "/>' + '<path fill="#000000" d="M 448.753,81.205L 448.417,81.205L 448.417,80.9653L 449.33,80.9653L 449.33,81.205L 448.994,81.205L 448.994,82.1184L 448.753,82.1184L 448.753,81.205 Z M 449.811,81.3015L 449.811,82.1184L 449.571,82.1184L 449.571,80.9653L 449.859,80.9653L 450.196,81.5418L 450.532,80.9653L 450.772,80.9653L 450.772,82.1184L 450.532,82.1184L 450.532,81.3015L 450.196,81.8787L 450.147,81.8787L 449.811,81.3015 Z "/>' + '<path fill="#3B5998" d="M 362.345,88.5734L 354.865,88.5734L 354.865,77.2061L 358.68,77.2061L 359.251,72.7761L 354.865,72.7761L 354.865,69.9477C 354.865,68.6651 355.221,67.791 357.06,67.791L 359.406,67.7899L 359.406,63.8277C 359,63.7738 357.608,63.6532 355.988,63.6532C 352.605,63.6532 350.29,65.7177 350.29,69.5091L 350.29,72.7761L 346.465,72.7761L 346.465,77.2061L 350.29,77.2061L 350.29,88.5734L 336.231,88.5734C 335.336,88.5734 334.611,87.848 334.611,86.9534L 334.611,60.8398C 334.611,59.9449 335.336,59.2197 336.231,59.2197L 362.345,59.2197C 363.239,59.2197 363.965,59.9449 363.965,60.8398L 363.965,86.9534C 363.965,87.848 363.239,88.5734 362.345,88.5734 Z "/>' + '<path fill="#686868" d="M 345.055,34.0982L 350.422,20.9961L 355.338,20.9961L 355.338,41.8745L 351.737,41.8745L 351.737,28.6072L 351.897,24.8576L 351.822,24.8576C 351.685,25.4729 351.535,26.1565 351.394,26.507L 345.163,41.8745L 342.802,41.8745L 336.525,26.6446L 336.046,24.8576L 335.972,24.8576L 336.068,26.1946L 336.118,29.0398L 336.118,41.8745L 332.742,41.8745L 332.742,20.9961L 337.86,20.9961L 343.095,34.128C 343.554,35.2844 343.847,36.1942 344.022,36.8356L 344.077,36.8356L 345.055,34.0982 Z M 358.728,41.8747L 358.728,26.9128L 362.247,26.9128L 362.247,41.8747L 358.728,41.8747 Z M 360.524,20.5542C 361.133,20.5542 361.648,20.7572 362.054,21.1582C 362.46,21.5597 362.666,22.0478 362.666,22.61C 362.666,23.183 362.454,23.667 362.037,24.0493C 361.622,24.4293 361.113,24.6219 360.524,24.6219C 359.935,24.6219 359.427,24.4293 359.017,24.049C 358.605,23.667 358.396,23.183 358.396,22.61C 358.396,22.0279 358.607,21.5336 359.024,21.1421C 359.439,20.7522 359.944,20.5542 360.524,20.5542 Z M 374.707,26.7628C 375.387,26.9041 375.935,27.0894 376.336,27.3139L 376.383,27.3408L 376.383,30.7383L 376.235,30.631C 375.169,29.8574 374.042,29.4655 372.885,29.4655C 371.533,29.4655 370.422,29.9241 369.584,30.8282C 368.743,31.7343 368.317,32.9631 368.317,34.4804C 368.317,35.9881 368.726,37.1847 369.533,38.0378C 370.338,38.89 371.446,39.3221 372.827,39.3221C 373.324,39.3221 373.891,39.2119 374.513,38.9948C 375.137,38.7781 375.716,38.4765 376.235,38.0986L 376.383,37.9909L 376.383,41.2148L 376.337,41.2417C 375.192,41.9013 373.764,42.2356 372.091,42.2356C 370.659,42.2356 369.364,41.9207 368.243,41.3005C 367.122,40.679 366.236,39.7833 365.61,38.6372C 364.985,37.4933 364.668,36.1969 364.668,34.7828C 364.668,33.1691 364.994,31.7227 365.638,30.4834C 366.283,29.2413 367.233,28.2648 368.46,27.5811C 369.685,26.8979 371.125,26.552 372.741,26.552C 373.369,26.552 374.03,26.6228 374.707,26.7628 Z M 386.304,26.6528C 386.891,26.6528 387.355,26.7232 387.682,26.8624L 387.739,26.8864L 387.739,30.4347L 387.591,30.3278C 387.428,30.2105 387.152,30.0987 386.771,29.9959C 386.385,29.8927 386.03,29.8405 385.712,29.8405C 384.777,29.8405 384.011,30.2449 383.436,31.0429C 382.854,31.85 382.559,32.9189 382.559,34.2207L 382.559,41.8745L 379.04,41.8745L 379.04,26.9126L 382.559,26.9126L 382.559,29.5033L 382.596,29.5033C 382.926,28.6622 383.355,27.9881 383.95,27.4967C 384.628,26.937 385.42,26.6528 386.304,26.6528 Z M 398.661,38.0724C 399.328,37.2372 399.666,35.99 399.666,34.3647C 399.666,32.76 399.307,31.5278 398.599,30.7029C 397.894,29.8813 396.911,29.4657 395.676,29.4657C 394.402,29.4657 393.392,29.9008 392.673,30.7597C 391.951,31.6231 391.584,32.8652 391.584,34.4513C 391.584,35.9896 391.951,37.1999 392.673,38.0488C 393.391,38.8936 394.411,39.322 395.704,39.322C 397.005,39.322 398,38.9019 398.661,38.0724 Z M 395.863,26.5518C 398.187,26.5518 400.031,27.2433 401.341,28.6077C 402.651,29.9708 403.315,31.8688 403.315,34.2491C 403.315,36.6588 402.607,38.6127 401.211,40.057C 399.815,41.5026 397.893,42.2355 395.502,42.2355C 393.207,42.2355 391.352,41.539 389.989,40.1664C 388.626,38.7933 387.935,36.9094 387.935,34.5669C 387.935,32.1 388.642,30.1262 390.039,28.7009C 391.436,27.2748 393.396,26.5518 395.863,26.5518 Z M 411.121,33.0948C 412.514,33.6559 413.512,34.2914 414.087,34.9833C 414.666,35.6802 414.96,36.5453 414.96,37.5538C 414.96,38.9529 414.414,40.096 413.337,40.9529C 412.267,41.8039 410.801,42.2356 408.979,42.2356C 408.39,42.2356 407.711,42.1573 406.962,42.0023C 406.213,41.8478 405.577,41.6514 405.073,41.4189L 405.019,41.3937L 405.019,37.9631L 405.167,38.0696C 405.772,38.5046 406.443,38.8448 407.161,39.081C 407.879,39.3175 408.534,39.4373 409.11,39.4373C 410.658,39.4373 411.411,38.9488 411.411,37.9428C 411.411,37.5894 411.337,37.304 411.19,37.0947C 411.04,36.8813 410.773,36.6617 410.397,36.4438L 408.596,35.6048C 407.631,35.1897 406.902,34.782 406.431,34.3933C 405.955,34.0014 405.597,33.5332 405.366,33.0016C 405.136,32.4734 405.019,31.8494 405.019,31.1471C 405.019,29.7957 405.56,28.679 406.626,27.8276C 407.688,26.9812 409.076,26.5519 410.754,26.5519C 411.267,26.5519 411.858,26.6128 412.51,26.7334C 413.164,26.8548 413.701,27.0048 414.11,27.1796L 414.166,27.2036L 414.166,30.4573L 414.02,30.3583C 413.578,30.0571 413.047,29.8109 412.444,29.6274C 411.84,29.4435 411.233,29.3498 410.639,29.3498C 409.999,29.3498 409.489,29.494 409.123,29.7778C 408.759,30.06 408.582,30.4088 408.582,30.8439C 408.582,31.3348 408.725,31.7222 409.008,31.9965C 409.3,32.2795 410.011,32.649 411.121,33.0948 Z M 427.222,38.0724C 427.888,37.2371 428.226,35.99 428.226,34.3646C 428.226,32.7599 427.868,31.5277 427.16,30.7029C 426.455,29.8812 425.471,29.4657 424.236,29.4657C 422.963,29.4657 421.952,29.9007 421.234,30.7596C 420.511,31.623 420.145,32.8651 420.145,34.4512C 420.145,35.9895 420.511,37.1998 421.234,38.0487C 421.952,38.8935 422.972,39.3219 424.265,39.3219C 425.566,39.3219 426.561,38.9018 427.222,38.0724 Z M 424.423,26.5518C 426.747,26.5518 428.591,27.2433 429.902,28.6076C 431.212,29.9707 431.876,31.8687 431.876,34.249C 431.876,36.6587 431.168,38.6126 429.771,40.0569C 428.375,41.5025 426.454,42.2354 424.063,42.2354C 421.768,42.2354 419.913,41.5389 418.55,40.1663C 417.186,38.7932 416.495,36.9093 416.495,34.5668C 416.495,32.0999 417.203,30.1261 418.599,28.7008C 419.997,27.2747 421.956,26.5518 424.423,26.5518 Z M 450.642,29.7826L 447.077,29.7826L 447.077,36.8463C 447.077,37.7525 447.24,38.3993 447.56,38.7692C 447.877,39.1359 448.387,39.3215 449.077,39.3215L 449.78,39.2022L 450.497,38.8894L 450.642,38.7928L 450.642,41.691L 450.595,41.7179C 450.383,41.8393 450.023,41.9533 449.493,42.0672C 448.974,42.1787 448.464,42.2354 447.98,42.2354C 445.036,42.2354 443.544,40.6312 443.544,37.467L 443.544,29.7826L 438.263,29.7826L 438.263,41.8745L 434.7,41.8745L 434.7,29.7826L 432.218,29.7826L 432.218,26.9122L 434.7,26.9122L 434.7,24.841C 434.7,23.8007 434.929,22.8606 435.383,22.0469C 435.837,21.2319 436.485,20.5909 437.31,20.1414C 438.133,19.6939 439.078,19.4669 440.118,19.4669C 440.943,19.4669 441.608,19.5559 442.097,19.7321L 442.159,19.754L 442.159,22.7773L 442.028,22.7189C 441.503,22.4848 440.981,22.3659 440.478,22.3659C 439.779,22.3659 439.23,22.5905 438.846,23.0338C 438.459,23.4808 438.263,24.152 438.263,25.0287L 438.263,26.9122L 443.544,26.9122L 443.544,23.5314L 443.609,23.5111L 446.957,22.4865L 447.077,22.4496L 447.077,26.9122L 450.642,26.9122L 450.642,29.7826 Z "/>' + '<path fill="#686868" d="M 295.763,86.9415C 293.441,86.9415 291.587,86.2508 290.201,84.8695C 288.815,83.4882 288.122,81.6565 288.122,79.3746C 288.122,76.891 288.844,74.9517 290.289,73.5563C 291.734,72.161 293.681,71.4635 296.131,71.4635C 298.484,71.4635 300.317,72.1418 301.63,73.4982C 302.944,74.8547 303.6,76.7375 303.6,79.1466C 303.6,81.503 302.892,83.3913 301.477,84.8114C 300.062,86.2314 298.157,86.9415 295.763,86.9415 Z M 295.935,74.1424C 294.627,74.1424 293.593,74.5982 292.833,75.5097C 292.074,76.4213 291.694,77.6786 291.694,79.2816C 291.694,80.8257 292.078,82.0418 292.847,82.9301C 293.616,83.8185 294.646,84.2627 295.935,84.2627C 297.25,84.2627 298.261,83.8262 298.968,82.9534C 299.675,82.0806 300.028,80.8381 300.028,79.2258C 300.028,77.6042 299.675,76.3515 298.968,75.4679C 298.261,74.5843 297.25,74.1424 295.935,74.1424 Z M 315.506,75.0354C 315.091,74.6385 314.494,74.4401 313.716,74.4401C 312.699,74.4401 311.85,74.8927 311.169,75.7981C 310.489,76.7035 310.148,77.9344 310.148,79.4908L 310.148,86.6438L 306.874,86.6438L 306.874,71.7612L 310.148,71.7612L 310.148,74.7749L 310.209,74.7749C 310.544,73.7332 311.059,72.9208 311.755,72.3379C 312.451,71.7549 313.227,71.4635 314.083,71.4635C 314.706,71.4635 315.181,71.5581 315.506,71.7472L 315.506,75.0354 Z "/>' + '<path fill="#686868" d="M 28.7274,69.3415L 28.7274,61.271C 29.4541,61.9977 30.3205,62.6527 31.3267,63.2362C 32.3329,63.8197 33.4002,64.3105 34.5287,64.7088C 35.6572,65.1071 36.7839,65.4163 37.9089,65.6364C 39.0339,65.8565 40.0715,65.9666 41.0218,65.9666C 44.3338,65.9666 46.8021,65.39 48.4267,64.2372C 50.0513,63.0842 50.8636,61.4142 50.8636,59.2272C 50.8636,58.1162 50.5928,57.1537 50.0513,56.3396C 49.5098,55.5256 48.7534,54.7814 47.7821,54.1071C 46.8109,53.4328 45.6702,52.7865 44.36,52.1681L 40.1414,50.2343C 38.5343,49.3888 37.0355,48.5312 35.645,47.6612C 34.2545,46.7913 33.0456,45.8288 32.0185,44.7737C 30.9913,43.7185 30.186,42.529 29.6026,41.2048C 29.0191,39.8807 28.7274,38.3278 28.7274,36.5459C 28.7274,34.3519 29.2252,32.446 30.221,30.8285C 31.2167,29.2109 32.5321,27.8745 34.1671,26.8194C 35.8022,25.7644 37.6608,24.9818 39.7431,24.4717C 41.8253,23.9616 43.9495,23.7065 46.1156,23.7065C 51.0488,23.7065 54.6438,24.2655 56.9007,25.3835L 56.9007,33.0977C 54.2036,30.8617 50.7343,29.7437 46.493,29.7437C 45.3191,29.7437 44.1522,29.859 42.9922,30.0896C 41.8323,30.3202 40.7929,30.7027 39.8741,31.2373C 38.9553,31.7718 38.2093,32.4566 37.6364,33.2915C 37.0634,34.1266 36.7769,35.1345 36.7769,36.3153C 36.7769,37.3565 36.997,38.2578 37.4372,39.0195C 37.8774,39.7811 38.522,40.4764 39.371,41.1052C 40.22,41.7341 41.2576,42.3473 42.4839,42.9447L 46.734,44.8889C 48.39,45.7344 49.9517,46.6253 51.4191,47.5616C 52.8865,48.498 54.1774,49.5304 55.2919,50.6588C 56.4064,51.7873 57.2885,53.0415 57.9384,54.4215C 58.5882,55.8016 58.9131,57.372 58.9131,59.1328C 58.9131,61.5016 58.431,63.5 57.4667,65.1281C 56.5025,66.7561 55.2028,68.0802 53.5677,69.1004C 51.9327,70.1206 50.0531,70.8595 47.9289,71.3172C 45.8047,71.7749 43.5582,72.0037 41.1895,72.0037C 40.3999,72.0037 39.4304,71.9425 38.281,71.8203C 37.1315,71.698 35.9542,71.5216 34.7488,71.291C 33.5435,71.0604 32.4028,70.7809 31.3267,70.4525C 30.2507,70.1241 29.3842,69.7538 28.7274,69.3415 Z M 69.5934,30.4146C 68.3147,30.4146 67.2212,30.0077 66.3128,29.1936C 65.4044,28.3795 64.9502,27.3437 64.9502,26.0859C 64.9502,24.8352 65.4044,23.7906 66.3128,22.9521C 67.2212,22.1136 68.3147,21.6944 69.5934,21.6944C 70.921,21.6944 72.0442,22.1136 72.9631,22.9521C 73.8819,23.7906 74.3414,24.8352 74.3414,26.0859C 74.3414,27.2738 73.8819,28.2922 72.9631,29.1412C 72.0442,29.9902 70.921,30.4146 69.5934,30.4146 Z M 73.6706,71.3331L 66.2918,71.3331L 66.2918,37.7934L 73.5497,37.8614L 73.6706,71.3331 Z M 113.918,68.8385C 113.918,81.2343 107.829,87.4321 95.6495,87.4321C 91.3523,87.4321 87.6035,86.6809 84.4032,85.1787L 84.4032,78.041C 88.0297,80.2769 91.471,81.395 94.7272,81.395C 102.602,81.395 106.539,77.3807 106.539,69.3521L 106.539,65.5999L 106.414,65.5999C 103.926,69.8692 100.188,72.0039 95.1988,72.0039C 91.1601,72.0039 87.904,70.5225 85.4304,67.5598C 82.9568,64.5972 81.7201,60.6213 81.7201,55.6323C 81.7201,49.9724 83.0494,45.4725 85.7082,42.1326C 88.3669,38.7926 92.0161,37.1226 96.6557,37.1226C 101.044,37.1226 104.296,38.9288 106.414,42.5414L 106.539,42.5414L 106.539,37.7933L 113.918,37.7933L 113.918,68.8385 Z M 106.613,55.9572L 106.613,51.6389C 106.613,49.2982 105.856,47.2998 104.344,45.6438C 102.831,43.9877 100.943,43.1597 98.6786,43.1597C 95.8906,43.1597 93.7088,44.2148 92.1331,46.325C 90.5574,48.4352 89.7696,51.3875 89.7696,55.1816C 89.7696,58.4517 90.526,61.0668 92.0388,63.0267C 93.5515,64.9867 95.5552,65.9667 98.0497,65.9667C 100.586,65.9667 102.647,65.0304 104.234,63.1577C 105.82,61.2851 106.613,58.8849 106.613,55.9572 Z M 153.495,71.333L 146.116,71.333L 146.116,52.5193C 146.116,46.2795 143.884,43.1597 139.419,43.1597C 137.085,43.1597 135.158,44.0244 133.638,45.7538C 132.119,47.4832 131.359,49.6615 131.359,52.2887L 131.359,71.333L 123.98,71.333L 123.98,37.7933L 131.359,37.7933L 131.359,43.4846L 131.485,43.4846C 133.986,39.2432 137.595,37.1225 142.312,37.1225C 145.945,37.1225 148.717,38.3034 150.628,40.6652C 152.54,43.0269 153.495,46.4368 153.495,50.8948L 153.495,71.333 Z M 184.299,30.4146C 183.02,30.4146 181.927,30.0075 181.019,29.1935C 180.11,28.3794 179.656,27.3436 179.656,26.0858C 179.656,24.8351 180.11,23.7904 181.019,22.952C 181.927,22.1135 183.02,21.6942 184.299,21.6942C 185.627,21.6942 186.75,22.1135 187.669,22.952C 188.588,23.7904 189.047,24.8351 189.047,26.0858C 189.047,27.2737 188.588,28.2921 187.669,29.1411C 186.75,29.9901 185.627,30.4146 184.299,30.4146 Z M 188.376,71.333L 180.998,71.333L 180.998,37.7932L 188.344,37.8003L 188.376,71.333 Z M 227.953,71.3329L 220.574,71.3329L 220.574,52.5193C 220.574,46.2795 218.342,43.1596 213.877,43.1596C 211.543,43.1596 209.616,44.0243 208.097,45.7537C 206.577,47.4831 205.817,49.6614 205.817,52.2887L 205.817,71.3329L 198.438,71.3329L 198.438,37.7932L 205.817,37.7932L 205.817,43.4845L 205.943,43.4845C 208.444,39.2431 212.053,37.1224 216.77,37.1224C 220.403,37.1224 223.175,38.3033 225.087,40.6651C 226.998,43.0269 227.953,46.4367 227.953,50.8947L 227.953,71.3329 Z "/>' + '', 'login');
        var tdLogoHoriz = svgBoilerPlate('-20 -15 455 58', '<path fill="#5ACC13" d="M 144.047,34.0633C 152.854,34.0633 160.032,26.8941 160.032,18.0977C 160.032,9.30162 152.854,2.13243 144.047,2.13243C 135.24,2.13243 128.062,9.30162 128.062,18.0977C 128.062,26.8941 135.24,34.0633 144.047,34.0633 Z M 144.047,32.1437C 136.25,32.1437 129.984,25.8845 129.984,18.0977C 129.984,10.3109 136.251,3.96493 144.047,3.96493C 151.844,3.96493 158.11,10.3109 158.11,18.0977C 158.11,25.8845 151.844,32.1437 144.047,32.1437 Z M 142.113,22.7178C 142.452,22.7178 142.74,22.6112 142.977,22.3938C 143.213,22.1789 143.329,21.9187 143.329,21.617C 143.329,21.3135 143.213,21.0512 142.977,20.8303C 142.74,20.6126 142.452,20.5035 142.113,20.5035C 141.778,20.5035 141.496,20.6126 141.264,20.8303C 141.029,21.0512 140.914,21.3135 140.914,21.617C 140.914,21.9187 141.029,22.1789 141.264,22.3938C 141.496,22.6112 141.778,22.7178 142.113,22.7178 Z M 142.113,16.0708C 142.452,16.0708 142.74,15.9646 142.977,15.7489C 143.213,15.5312 143.329,15.2751 143.329,14.9734C 143.329,14.6666 143.213,14.4033 142.977,14.1858C 142.74,13.965 142.452,13.8566 142.113,13.8566C 141.778,13.8566 141.496,13.965 141.264,14.1858C 141.029,14.4033 140.914,14.6666 140.914,14.9734C 140.914,15.2751 141.029,15.5312 141.264,15.7489C 141.496,15.9646 141.778,16.0708 142.113,16.0708 Z M 145.957,25.2742C 147.724,23.309 148.61,20.8861 148.61,18.0047C 148.61,15.1131 147.727,12.6509 145.966,10.6178L 144.319,10.6178C 146.044,12.7258 146.908,15.1849 146.908,17.9883C 146.908,20.7687 146.047,23.1975 144.328,25.2742L 145.957,25.2742 Z M 15.8976,34.0625C 24.7052,34.0625 31.8824,26.8933 31.8824,18.0969C 31.8824,9.30157 24.7052,2.13238 15.8976,2.13238C 7.09033,2.13238 -7.77965e-006,9.30157 -7.77965e-006,18.0969C -7.77965e-006,26.8933 7.09033,34.0625 15.8976,34.0625 Z M 15.8976,32.2297C 8.10089,32.2297 1.83402,25.8838 1.83402,18.0969C 1.83402,10.3111 8.10089,4.05116 15.8976,4.05116C 23.6944,4.05116 30.0487,10.3111 30.0487,18.0969C 30.0487,25.8838 23.6944,32.2297 15.8976,32.2297 Z M 16.3347,20.453C 19.3352,20.453 21.7501,18.0391 21.7501,15.0444C 21.7501,12.0464 19.3352,9.63488 16.3347,9.63488C 13.3359,9.63488 10.8311,12.0464 10.8311,15.0444C 10.8311,18.0391 13.3359,20.453 16.3347,20.453 Z M 16.3347,19.0567C 16.1515,19.0567 15.9708,19.0449 15.7936,19.0221L 14.7623,15.2186L 17.9069,15.2186L 16.7929,19.0318C 16.6427,19.0483 16.4898,19.0567 16.3347,19.0567 Z M 20.352,15.0444C 20.352,16.7246 19.3582,18.1402 17.9135,18.744L 19.0423,14.8692C 19.0524,14.8114 19.0524,14.7529 19.0423,14.695C 19.0251,14.6313 18.9958,14.5714 18.9551,14.5209L 18.8681,14.4328L 18.7799,14.3457L 18.6927,14.3457L 18.6055,14.2586L 18.5183,14.2586L 14.1511,14.2586L 14.0629,14.2586C 14.0001,14.2759 13.9401,14.3063 13.8885,14.3457C 13.8166,14.3882 13.7556,14.4491 13.7141,14.5209C 13.6736,14.5725 13.6432,14.6323 13.6269,14.695L 13.6269,14.7821L 13.6269,14.8692L 14.7566,18.7495C 13.2804,18.1489 12.2288,16.7297 12.2288,15.0444C 12.2288,12.7988 14.0891,11.0309 16.3347,11.0309C 18.5832,11.0309 20.352,12.7988 20.352,15.0444 Z M 13.6513,21.9858L 18.9561,21.5727L 18.9624,21.034L 13.6645,21.026L 13.6513,21.9858 Z M 13.6513,22.3766L 13.6513,23.1086L 18.9512,22.6864L 18.9562,21.9474L 13.6513,22.3766 Z M 13.6706,23.4914L 13.7344,24.1272L 18.9513,23.7252L 18.9562,23.0752L 13.6706,23.4914 Z M 13.838,24.4958L 13.838,24.516L 13.8462,24.5151L 13.838,24.4958 Z M 13.8462,24.5151C 13.9245,24.6987 14.004,24.8784 14.1125,25.0484C 14.2241,25.2215 14.3692,25.3835 14.5262,25.5232C 14.6824,25.6629 14.8527,25.7855 15.0595,25.8889C 15.2643,25.9952 15.5046,26.0841 15.7366,26.1378C 15.9707,26.1906 16.1999,26.2067 16.4747,26.1764C 16.7485,26.146 17.0635,26.0649 17.3516,25.9444C 17.6425,25.8249 17.908,25.6629 18.1037,25.4949C 18.2994,25.3278 18.4281,25.1518 18.5265,24.9846C 18.6269,24.8146 18.6967,24.6526 18.7525,24.516L 18.8672,24.1938L 18.8833,24.1018L 18.045,24.1555L 14.6905,24.4289L 13.8462,24.5151 Z M 58.7067,34.0625C 67.5139,34.0625 74.6922,26.8933 74.6922,18.0969C 74.6922,9.30154 67.5139,2.13235 58.7067,2.13235C 49.9001,2.13235 42.7218,9.30154 42.7218,18.0969C 42.7218,26.8933 49.9001,34.0625 58.7067,34.0625 Z M 58.7063,32.2299C 50.9106,32.2299 44.6434,25.8839 44.6434,18.0971C 44.6434,10.3113 50.9106,4.05133 58.7063,4.05133C 66.503,4.05133 72.7698,10.3113 72.7698,18.0971C 72.7698,25.8839 66.503,32.2299 58.7063,32.2299 Z M 51.8838,25.6428L 54.5955,25.2188L 52.3063,22.9356L 51.8838,25.6428 Z M 55.9113,24.8147L 64.1227,16.6148L 60.8909,13.386L 52.6795,21.587L 55.9113,24.8147 Z M 64.8214,15.9162L 65.52,15.2187C 65.6506,15.089 65.6278,15.0956 65.6831,15.0404C 66.5185,14.2061 66.4252,12.8181 65.5898,11.9838C 64.7565,11.1515 63.3626,11.0148 62.5304,11.8491L 62.288,12.0778L 61.6768,12.6885L 64.8214,15.9162 Z M 101.238,34.0624C 110.045,34.0624 117.223,26.8932 117.223,18.0968C 117.223,9.30075 110.045,2.13233 101.238,2.13233C 92.4305,2.13233 85.3402,9.30075 85.3402,18.0968C 85.3402,26.8932 92.4305,34.0624 101.238,34.0624 Z M 101.238,32.23C 93.4411,32.23 87.1742,25.8837 87.1742,18.0969C 87.1742,10.3101 93.4411,4.05118 101.238,4.05118C 109.035,4.05118 115.389,10.3101 115.389,18.0969C 115.389,25.8837 109.035,32.23 101.238,32.23 Z M 107.567,18.1122L 98.0294,10.9521L 98.0294,25.2702L 107.567,18.1122 Z "/>' + '<path fill="#000000" d="M 201.679,28.4272C 200.753,28.851 199.884,29.0629 199.072,29.0629C 196.153,29.0629 194.694,27.3434 194.694,23.9042L 194.694,10.8501L 191.208,10.8501L 191.208,9.30013L 194.694,9.30013L 194.694,4.09301L 195.664,3.77817C 196,3.68936 196.323,3.59248 196.634,3.48754L 196.634,9.30013L 201.679,9.30013L 201.679,10.8501L 196.634,10.8501L 196.634,23.6923C 196.634,25.0365 196.843,26.0093 197.259,26.6107C 197.675,27.2122 198.383,27.5129 199.381,27.5129C 200.092,27.5129 200.858,27.2788 201.679,26.8105L 201.679,28.4272 Z M 213.331,29.0629C 210.458,29.0629 208.185,28.1406 206.514,26.2959C 204.842,24.4512 204.007,22.0535 204.007,19.1029C 204.007,15.91 204.881,13.4134 206.629,11.6131C 208.377,9.81281 210.68,8.91267 213.538,8.91267C 216.347,8.91267 218.565,9.80676 220.192,11.5949C 221.818,13.3831 222.632,15.8595 222.632,19.0241C 222.632,22.0152 221.802,24.4361 220.143,26.2868C 218.484,28.1376 216.213,29.0629 213.331,29.0629 Z M 213.459,10.4627C 211.171,10.4627 209.347,11.2276 207.987,12.7575C 206.627,14.2873 205.947,16.4145 205.947,19.1392C 205.947,21.662 206.611,23.6883 207.939,25.2182C 209.266,26.748 211.082,27.5129 213.386,27.5129C 215.726,27.5129 217.529,26.7601 218.794,25.2545C 220.059,23.7489 220.692,21.66 220.692,18.9878C 220.692,16.2389 220.062,14.1309 218.803,12.6636C 217.544,11.1963 215.763,10.4627 213.459,10.4627 Z M 240.093,28.6754L 240.093,25.085L 240.02,25.085C 238.666,27.7369 236.583,29.0629 233.769,29.0629C 229.19,29.0629 226.9,26.193 226.9,20.4531L 226.9,9.30017L 228.84,9.30017L 228.84,20.0413C 228.84,22.657 229.266,24.5562 230.117,25.7389C 230.967,26.9216 232.306,27.5129 234.133,27.5129C 235.908,27.5129 237.344,26.8519 238.444,25.53C 239.543,24.208 240.093,22.4471 240.093,20.2472L 240.093,9.30017L 242.033,9.30017L 242.033,28.6754L 240.093,28.6754 Z M 260.967,27.7733C 259.496,28.633 257.74,29.0629 255.699,29.0629C 252.999,29.0629 250.822,28.1658 249.169,26.3716C 247.516,24.5774 246.689,22.2291 246.689,19.3269C 246.689,16.2753 247.619,13.7767 249.478,11.8311C 251.338,9.88546 253.728,8.91266 256.651,8.91266C 258.158,8.91266 259.623,9.20732 261.046,9.79665L 261.046,11.7523C 259.636,10.8926 258.09,10.4627 256.408,10.4627C 254.096,10.4627 252.222,11.275 250.785,12.8997C 249.348,14.5244 248.629,16.6285 248.629,19.2118C 248.629,21.7104 249.287,23.7186 250.603,25.2363C 251.919,26.754 253.654,27.5129 255.808,27.5129C 257.784,27.5129 259.504,26.9942 260.967,25.9569L 260.967,27.7733 Z M 278.507,28.6754L 278.507,17.0866C 278.507,14.7979 278.097,13.1217 277.276,12.0581C 276.456,10.9945 275.177,10.4627 273.439,10.4627C 271.802,10.4627 270.362,11.1105 269.119,12.4063C 267.876,13.702 267.255,15.5588 267.255,17.9767L 267.255,28.6754L 265.314,28.6754L 265.314,2.67029e-005L 267.255,2.67029e-005L 267.255,12.8483L 267.333,12.8483C 268.861,10.2245 271.084,8.91265 274.003,8.91265C 276.1,8.91265 277.699,9.58473 278.798,10.9289C 279.898,12.2731 280.447,14.2005 280.447,16.7112L 280.447,28.6754L 278.507,28.6754 Z M 303.341,28.6754L 299.072,28.6754L 299.072,25.309L 299,25.309C 297.597,27.8116 295.439,29.0629 292.525,29.0629C 290.16,29.0629 288.267,28.2011 286.847,26.4776C 285.426,24.754 284.716,22.4087 284.716,19.4419C 284.716,16.2571 285.501,13.706 287.071,11.7887C 288.641,9.87132 290.734,8.91265 293.349,8.91265C 295.94,8.91265 297.823,9.95609 299,12.043L 299.072,12.043L 299.072,2.28882e-005L 303.341,2.28882e-005L 303.341,28.6754 Z M 299.133,19.8052L 299.133,17.2925C 299.133,15.9281 298.698,14.7717 297.827,13.8231C 296.955,12.8745 295.847,12.4002 294.501,12.4002C 292.909,12.4002 291.656,13.0057 290.742,14.2166C 289.829,15.4276 289.372,17.1088 289.372,19.2603C 289.372,21.2099 289.81,22.7498 290.688,23.8801C 291.565,25.0103 292.743,25.5754 294.222,25.5754C 295.681,25.5754 296.865,25.0284 297.772,23.9345C 298.679,22.8407 299.133,21.4642 299.133,19.8052 Z M 326.234,20.1503L 312.653,20.1503C 312.706,21.886 313.274,23.2241 314.357,24.1646C 315.44,25.1051 316.93,25.5754 318.825,25.5754C 320.951,25.5754 322.904,24.9295 324.682,23.6379L 324.682,27.3252C 322.855,28.4837 320.442,29.0629 317.443,29.0629C 314.496,29.0629 312.185,28.189 310.51,26.4412C 308.835,24.6934 307.997,22.2332 307.997,19.0604C 307.997,16.0654 308.919,13.6253 310.762,11.7402C 312.605,9.85517 314.894,8.91264 317.631,8.91264C 320.367,8.91264 322.485,9.75728 323.985,11.4466C 325.484,13.1359 326.234,15.4801 326.234,18.4792L 326.234,20.1503 Z M 321.578,17.0503C 321.566,15.581 321.196,14.4386 320.468,13.6233C 319.741,12.8079 318.736,12.4002 317.455,12.4002C 316.198,12.4002 315.134,12.8291 314.263,13.6868C 313.392,14.5446 312.855,15.6657 312.653,17.0503L 321.578,17.0503 Z M 346.799,9.30015L 339.148,28.6754L 334.298,28.6754L 327.01,9.30015L 331.788,9.30015L 336.256,22.8507C 336.595,23.8478 336.806,24.7176 336.887,25.4603L 336.947,25.4603C 337.064,24.5279 337.246,23.6823 337.493,22.9234L 342.179,9.30015L 346.799,9.30015 Z M 366.589,20.1503L 353.008,20.1503C 353.06,21.886 353.628,23.2241 354.711,24.1646C 355.795,25.1051 357.284,25.5754 359.18,25.5754C 361.306,25.5754 363.258,24.9295 365.036,23.6379L 365.036,27.3252C 363.209,28.4837 360.796,29.0629 357.797,29.0629C 354.851,29.0629 352.54,28.189 350.864,26.4412C 349.189,24.6934 348.351,22.2331 348.351,19.0604C 348.351,16.0653 349.273,13.6253 351.116,11.7402C 352.959,9.85516 355.249,8.91264 357.985,8.91264C 360.722,8.91264 362.84,9.75727 364.339,11.4466C 365.839,13.1358 366.589,15.48 366.589,18.4792L 366.589,20.1503 Z M 361.932,17.0503C 361.92,15.581 361.55,14.4386 360.823,13.6233C 360.095,12.8079 359.091,12.4002 357.809,12.4002C 356.552,12.4002 355.488,12.8291 354.617,13.6868C 353.746,14.5446 353.21,15.6657 353.008,17.0503L 361.932,17.0503 Z M 374.349,28.6754L 370.081,28.6754L 370.081,0L 374.349,0L 374.349,28.6754 Z M 388.967,29.0629C 385.939,29.0629 383.522,28.1638 381.715,26.3655C 379.909,24.5672 379.005,22.1827 379.005,19.2118C 379.005,15.9786 379.947,13.4537 381.831,11.6373C 383.714,9.82084 386.252,8.91263 389.446,8.91263C 392.513,8.91263 394.903,9.79562 396.615,11.5616C 398.327,13.3276 399.182,15.7787 399.182,18.9151C 399.182,21.9829 398.26,24.4411 396.415,26.2898C 394.57,28.1386 392.087,29.0629 388.967,29.0629 Z M 389.191,12.4002C 387.485,12.4002 386.137,12.9935 385.147,14.1803C 384.157,15.367 383.662,17.0038 383.662,19.0907C 383.662,21.1009 384.163,22.6842 385.165,23.8407C 386.168,24.9971 387.509,25.5754 389.191,25.5754C 390.905,25.5754 392.222,25.0072 393.144,23.871C 394.065,22.7347 394.526,21.117 394.526,19.018C 394.526,16.9069 394.065,15.2762 393.144,14.1258C 392.222,12.9754 390.905,12.4002 389.191,12.4002 Z M 407.798,25.7449L 407.719,25.7449L 407.719,37.588L 403.451,37.588L 403.451,9.30013L 407.719,9.30013L 407.719,12.7574L 407.798,12.7574C 409.326,10.1942 411.561,8.91262 414.503,8.91262C 417.009,8.91262 418.963,9.77341 420.363,11.495C 421.764,13.2166 422.464,15.5285 422.464,18.4307C 422.464,21.6478 421.674,24.2241 420.093,26.1597C 418.513,28.0952 416.355,29.0629 413.618,29.0629C 411.1,29.0629 409.16,27.9569 407.798,25.7449 Z M 407.683,18.1704L 407.683,20.5499C 407.683,21.9506 408.138,23.1383 409.05,24.1131C 409.961,25.088 411.12,25.5754 412.527,25.5754C 414.172,25.5754 415.463,24.9477 416.401,23.6923C 417.339,22.437 417.808,20.6851 417.808,18.4368C 417.808,16.5477 417.371,15.0693 416.498,14.0017C 415.625,12.934 414.441,12.4002 412.945,12.4002C 411.365,12.4002 410.093,12.9501 409.129,14.0501C 408.165,15.1501 407.683,16.5235 407.683,18.1704 Z "/>');
        var horizontalMarker = svgBoilerPlate('0 0 100 30', "<path fill='#E72A59' d='M 0.583332,10.9896L 71.726,10.9896C 73.4524,5.17697 78.8353,0.937502 85.2083,0.937502C 92.9748,0.937502 99.2708,7.2335 99.2708,15C 99.2708,22.7665 92.9748,29.0625 85.2083,29.0625C 78.8353,29.0625 73.4524,24.823 71.726,19.0104L 0.583332,19.0104L 0.583332,10.9896 Z'/>" + "<path fill='#FFFFFF' d='M 85.2083,5.52735C 90.4399,5.52735 94.681,9.76839 94.681,15C 94.681,20.2316 90.4399,24.4727 85.2083,24.4727C 79.9767,24.4727 75.7158,20.2316 75.7357,15C 75.7552,9.85417 79.9767,5.52735 85.2083,5.52735 Z '/>");
        var verticalMarker = svgBoilerPlate('0 0 30 100', "<path fill='#E72A59' d='M 19.0104,0.583336L 19.0104,71.726C 24.823,73.4524 29.0625,78.8353 29.0625,85.2083C 29.0625,92.9748 22.7665,99.2708 15,99.2708C 7.23349,99.2708 0.937499,92.9748 0.937499,85.2083C 0.937499,78.8353 5.17696,73.4524 10.9896,71.726L 10.9896,0.583336L 19.0104,0.583336 Z'/>" + "<path fill='#FFFFFF' d='M 24.4727,85.2083C 24.4727,90.4399 20.2316,94.681 15,94.681C 9.7684,94.681 5.52735,90.4399 5.52735,85.2083C 5.52735,79.9767 9.76844,75.7158 15,75.7357C 20.1458,75.7552 24.4727,79.9767 24.4727,85.2083 Z'/>");
        var tdLogo = svgBoilerPlate('0 0 2200 480', "<path class='hidden-portrait' fill='rgba(0,0,0,0.5)' d='M 123.068,183.634L 107.205,183.634L 107.205,123.831C 107.205,118.935 107.522,112.939 108.155,105.843L 107.907,105.843C 106.999,109.886 106.186,112.788 105.47,114.548L 78.7846,183.634L 68.5812,183.634L 41.8336,115.064C 41.0763,113.042 40.2845,109.969 39.4583,105.843L 39.2105,105.843C 39.596,109.542 39.7888,115.58 39.7888,123.955L 39.7888,183.634L 23.9261,183.634L 23.9261,91.2171L 47.2038,91.2171L 70.4401,152.774C 72.2164,157.491 73.3731,161.011 73.9101,163.335L 74.2199,163.335C 75.7346,158.481 76.967,154.871 77.9171,152.505L 101.587,91.2171L 123.068,91.2171L 123.068,183.634 Z M 146.759,103.1C 144.239,103.1 142.084,102.299 140.294,100.697C 138.504,99.0948 137.609,97.0559 137.609,94.5805C 137.609,92.1188 138.504,90.0627 140.294,88.4124C 142.084,86.7622 144.239,85.937 146.759,85.937C 149.375,85.937 151.588,86.7622 153.399,88.4124C 155.21,90.0627 156.115,92.1188 156.115,94.5805C 156.115,96.9184 155.21,98.9229 153.399,100.594C 151.588,102.265 149.375,103.1 146.759,103.1 Z M 154.793,183.635L 140.252,183.635L 140.252,117.623L 154.793,117.623L 154.793,183.635 Z M 219.566,180.499C 214.278,183.47 208.02,184.955 200.791,184.955C 190.987,184.955 183.073,181.912 177.048,175.827C 171.024,169.741 168.012,161.858 168.012,152.176C 168.012,141.367 171.245,132.685 177.709,126.132C 184.174,119.579 192.818,116.303 203.641,116.303C 209.659,116.303 214.967,117.362 219.566,119.479L 219.566,133.466C 215.049,129.945 210.23,128.185 205.108,128.185C 198.898,128.185 193.806,130.303 189.834,134.538C 185.861,138.774 183.875,144.317 183.875,151.165C 183.875,157.931 185.747,163.274 189.493,167.194C 193.238,171.113 198.264,173.073 204.571,173.073C 209.872,173.073 214.87,171.312 219.566,167.792L 219.566,180.499 Z M 269.798,132.146C 267.953,130.385 265.302,129.505 261.846,129.505C 257.33,129.505 253.56,131.513 250.538,135.529C 247.515,139.544 246.004,145.004 246.004,151.908L 246.004,183.635L 231.463,183.635L 231.463,117.623L 246.004,117.623L 246.004,130.99L 246.273,130.99C 247.76,126.369 250.049,122.766 253.14,120.181C 256.232,117.595 259.677,116.303 263.478,116.303C 266.246,116.303 268.352,116.722 269.798,117.561L 269.798,132.146 Z M 307.7,184.955C 297.386,184.955 289.152,181.892 282.997,175.765C 276.842,169.638 273.764,161.514 273.764,151.392C 273.764,140.376 276.973,131.774 283.389,125.585C 289.806,119.397 298.453,116.302 309.331,116.302C 319.783,116.302 327.924,119.311 333.755,125.328C 339.587,131.344 342.502,139.696 342.502,150.381C 342.502,160.833 339.36,169.208 333.074,175.507C 326.788,181.806 318.33,184.955 307.7,184.955 Z M 308.464,128.185C 302.653,128.185 298.061,130.206 294.687,134.25C 291.314,138.293 289.627,143.87 289.627,150.979C 289.627,157.828 291.334,163.222 294.749,167.163C 298.164,171.103 302.736,173.073 308.464,173.073C 314.302,173.073 318.791,171.137 321.931,167.266C 325.07,163.394 326.64,157.883 326.64,150.732C 326.64,143.539 325.07,137.983 321.931,134.064C 318.791,130.144 314.302,128.185 308.464,128.185 Z M 350.434,181.139L 350.434,166.471C 355.97,170.872 362.077,173.073 368.755,173.073C 377.691,173.073 382.16,170.714 382.16,165.997C 382.16,164.498 381.778,163.226 381.013,162.181C 380.249,161.135 379.216,160.207 377.915,159.396C 376.614,158.584 375.079,157.859 373.309,157.219L 367.392,155.043C 364.707,153.984 362.287,152.856 360.132,151.66C 357.977,150.463 356.183,149.109 354.751,147.596C 353.319,146.084 352.242,144.365 351.519,142.439C 350.796,140.514 350.434,138.272 350.434,135.714C 350.434,132.551 351.192,129.763 352.706,127.349C 354.221,124.936 356.255,122.907 358.81,121.264C 361.364,119.62 364.263,118.382 367.505,117.55C 370.748,116.718 374.104,116.302 377.574,116.302C 383.716,116.302 389.21,117.3 394.057,119.294L 394.057,133.466C 389.526,129.945 384.322,128.185 378.442,128.185C 376.597,128.185 374.931,128.357 373.443,128.7C 371.956,129.044 370.686,129.519 369.633,130.124C 368.579,130.729 367.76,131.458 367.175,132.31C 366.59,133.163 366.297,134.105 366.297,135.137C 366.297,136.539 366.596,137.732 367.195,138.716C 367.794,139.699 368.683,140.565 369.86,141.315C 371.037,142.064 372.445,142.749 374.084,143.367L 379.764,145.389C 382.573,146.531 385.099,147.7 387.344,148.896C 389.588,150.092 391.502,151.45 393.086,152.97C 394.669,154.489 395.888,156.24 396.742,158.22C 397.595,160.2 398.022,162.559 398.022,165.296C 398.022,168.624 397.237,171.525 395.668,174.001C 394.098,176.476 392.005,178.526 389.389,180.148C 386.773,181.771 383.75,182.978 380.321,183.769C 376.893,184.559 373.278,184.955 369.478,184.955C 362.152,184.955 355.805,183.683 350.434,181.139 Z M 438.568,184.955C 428.254,184.955 420.02,181.891 413.865,175.765C 407.71,169.638 404.632,161.514 404.632,151.392C 404.632,140.376 407.841,131.774 414.257,125.585C 420.674,119.397 429.321,116.302 440.199,116.302C 450.651,116.302 458.792,119.311 464.623,125.327C 470.455,131.344 473.371,139.695 473.371,150.381C 473.371,160.833 470.228,169.208 463.942,175.507C 457.656,181.806 449.198,184.955 438.568,184.955 Z M 439.332,128.185C 433.521,128.185 428.929,130.206 425.555,134.249C 422.182,138.293 420.495,143.869 420.495,150.979C 420.495,157.828 422.202,163.222 425.617,167.162C 429.032,171.103 433.604,173.073 439.332,173.073C 445.17,173.073 449.659,171.137 452.799,167.266C 455.938,163.394 457.508,157.883 457.508,150.732C 457.508,143.539 455.938,137.983 452.799,134.064C 449.659,130.144 445.17,128.185 439.332,128.185 Z M 520.298,97.8189C 518.191,96.9387 515.789,96.4987 513.09,96.4987C 505.516,96.4987 501.73,100.576 501.73,108.731L 501.73,117.623L 517.654,117.623L 517.654,129.505L 501.792,129.505L 501.792,183.635L 487.251,183.635L 487.251,129.505L 475.354,129.505L 475.354,117.623L 487.251,117.623L 487.251,106.978C 487.251,100.061 489.554,94.6042 494.16,90.609C 498.766,86.6139 504.525,84.6164 511.437,84.6164C 515.169,84.6164 518.123,85.0084 520.298,85.7922L 520.298,97.8189 Z M 561.938,182.686C 559.047,184.198 555.246,184.955 550.537,184.955C 537.869,184.955 531.535,178.842 531.535,166.616L 531.535,129.505L 520.96,129.505L 520.96,117.622L 531.535,117.622L 531.535,102.13L 546.076,97.8188L 546.076,117.622L 561.938,117.622L 561.938,129.505L 546.076,129.505L 546.076,162.263C 546.076,166.141 546.788,168.912 548.213,170.576C 549.638,172.241 552.01,173.073 555.329,173.073C 557.876,173.073 560.079,172.192 561.938,170.432L 561.938,182.686 Z M 678.265,183.634L 660.316,183.634L 645.528,158.364C 644.316,156.04 643.129,154.056 641.965,152.413C 640.802,150.769 639.621,149.422 638.423,148.37C 637.225,147.318 635.917,146.551 634.498,146.07C 633.08,145.588 631.49,145.348 629.727,145.348L 624.068,145.348L 624.068,183.634L 608.205,183.634L 608.205,91.2175L 638.072,91.2175C 642.34,91.2175 646.265,91.7263 649.845,92.744C 653.424,93.7617 656.543,95.302 659.201,97.3649C 661.858,99.4278 663.938,102 665.438,105.08C 666.939,108.161 667.69,111.757 667.69,115.869C 667.69,119.101 667.225,122.065 666.296,124.76C 665.366,127.455 664.044,129.855 662.33,131.96C 660.616,134.064 658.547,135.858 656.123,137.344C 653.7,138.829 650.981,139.977 647.965,140.789L 647.965,141.036C 649.521,141.999 650.878,143.058 652.034,144.213C 653.19,145.368 654.289,146.554 655.328,147.771C 656.368,148.989 657.397,150.371 658.416,151.918L 661.803,157.312L 678.265,183.634 Z M 624.068,103.1L 624.068,133.465L 636.233,133.465C 638.478,133.465 640.554,133.098 642.461,132.362C 644.368,131.626 646.017,130.56 647.408,129.164C 648.798,127.768 649.883,126.073 650.661,124.079C 651.439,122.085 651.828,119.85 651.828,117.375C 651.828,112.892 650.495,109.392 647.831,106.875C 645.167,104.358 641.342,103.1 636.357,103.1L 624.068,103.1 Z M 739.733,154.589L 693.467,154.589C 693.646,160.503 695.581,165.062 699.271,168.266C 702.961,171.47 708.035,173.072 714.494,173.072C 721.736,173.072 728.387,170.872 734.446,166.471L 734.446,179.034C 728.222,182.981 720.001,184.955 709.784,184.955C 699.746,184.955 691.873,181.977 686.166,176.022C 680.458,170.068 677.604,161.685 677.604,150.876C 677.604,140.672 680.744,132.358 687.023,125.936C 693.302,119.513 701.102,116.302 710.425,116.302C 719.747,116.302 726.962,119.18 732.071,124.935C 737.179,130.691 739.733,138.678 739.733,148.896L 739.733,154.589 Z M 723.871,144.027C 723.829,139.021 722.569,135.129 720.091,132.351C 717.612,129.573 714.191,128.184 709.826,128.184C 705.543,128.184 701.918,129.646 698.951,132.568C 695.984,135.49 694.156,139.31 693.467,144.027L 723.871,144.027 Z M 745.021,181.138L 745.021,166.471C 750.557,170.872 756.664,173.072 763.342,173.072C 772.279,173.072 776.747,170.714 776.747,165.997C 776.747,164.498 776.365,163.226 775.601,162.18C 774.836,161.135 773.804,160.207 772.502,159.396C 771.201,158.584 769.666,157.859 767.896,157.219L 761.979,155.043C 759.294,153.984 756.874,152.856 754.719,151.66C 752.564,150.463 750.77,149.109 749.338,147.596C 747.906,146.083 746.829,144.364 746.106,142.439C 745.383,140.513 745.021,138.272 745.021,135.714C 745.021,132.551 745.779,129.762 747.294,127.349C 748.808,124.935 750.843,122.907 753.397,121.263C 755.951,119.62 758.85,118.382 762.093,117.55C 765.335,116.718 768.692,116.302 772.162,116.302C 778.303,116.302 783.797,117.299 788.644,119.293L 788.644,133.465C 784.114,129.945 778.909,128.184 773.029,128.184C 771.184,128.184 769.518,128.356 768.031,128.7C 766.543,129.044 765.273,129.518 764.22,130.123C 763.167,130.728 762.347,131.457 761.762,132.31C 761.177,133.163 760.884,134.105 760.884,135.136C 760.884,136.539 761.184,137.732 761.783,138.715C 762.382,139.699 763.27,140.565 764.447,141.315C 765.624,142.064 767.032,142.748 768.671,143.367L 774.351,145.389C 777.16,146.53 779.687,147.699 781.931,148.896C 784.176,150.092 786.09,151.45 787.673,152.97C 789.257,154.489 790.475,156.239 791.329,158.22C 792.183,160.2 792.61,162.559 792.61,165.295C 792.61,168.624 791.825,171.525 790.255,174.001C 788.685,176.476 786.592,178.525 783.976,180.148C 781.36,181.771 778.337,182.978 774.909,183.769C 771.48,184.559 767.865,184.955 764.065,184.955C 756.74,184.955 750.392,183.683 745.021,181.138 Z M 861.348,154.589L 815.082,154.589C 815.261,160.503 817.196,165.062 820.886,168.266C 824.576,171.47 829.651,173.072 836.109,173.072C 843.351,173.072 850.002,170.872 856.061,166.471L 856.061,179.034C 849.837,182.981 841.616,184.955 831.399,184.955C 821.361,184.955 813.488,181.977 807.781,176.022C 802.073,170.068 799.219,161.685 799.219,150.876C 799.219,140.672 802.359,132.358 808.638,125.936C 814.917,119.513 822.717,116.302 832.04,116.302C 841.362,116.302 848.577,119.18 853.686,124.935C 858.794,130.691 861.348,138.677 861.348,148.896L 861.348,154.589 Z M 845.486,144.027C 845.444,139.021 844.184,135.129 841.706,132.351C 839.227,129.573 835.806,128.184 831.44,128.184C 827.158,128.184 823.533,129.645 820.566,132.568C 817.599,135.49 815.771,139.31 815.082,144.027L 845.486,144.027 Z M 922.156,183.634L 907.615,183.634L 907.615,172.557L 907.367,172.557C 902.81,180.822 896.138,184.955 887.353,184.955C 880.881,184.955 875.81,183.205 872.141,179.705C 868.471,176.205 866.636,171.567 866.636,165.79C 866.636,153.413 873.797,146.2 888.117,144.151L 907.677,141.387C 907.677,132.585 903.243,128.184 894.375,128.184C 886.554,128.184 879.511,130.887 873.246,136.291L 873.246,122.718C 880.172,118.441 888.172,116.302 897.246,116.302C 913.853,116.302 922.156,124.485 922.156,140.85L 922.156,183.634 Z M 907.677,150.628L 893.983,152.547C 889.728,153.097 886.53,154.128 884.389,155.641C 882.248,157.154 881.177,159.808 881.177,163.604C 881.177,166.382 882.165,168.654 884.141,170.422C 886.117,172.189 888.758,173.072 892.062,173.072C 896.565,173.072 900.293,171.484 903.247,168.307C 906.2,165.13 907.677,161.135 907.677,156.322L 907.677,150.628 Z M 975.032,132.145C 973.187,130.385 970.536,129.504 967.08,129.504C 962.563,129.504 958.794,131.512 955.772,135.528C 952.749,139.544 951.238,145.003 951.238,151.907L 951.238,183.634L 936.697,183.634L 936.697,117.622L 951.238,117.622L 951.238,130.99L 951.506,130.99C 952.994,126.369 955.283,122.766 958.374,120.18C 961.465,117.595 964.911,116.302 968.712,116.302C 971.479,116.302 973.586,116.721 975.032,117.56L 975.032,132.145 Z M 1030.55,180.499C 1025.26,183.469 1019.01,184.955 1011.78,184.955C 1001.97,184.955 994.059,181.912 988.035,175.826C 982.01,169.741 978.998,161.857 978.998,152.175C 978.998,141.366 982.231,132.685 988.696,126.132C 995.16,119.578 1003.8,116.302 1014.63,116.302C 1020.64,116.302 1025.95,117.361 1030.55,119.479L 1030.55,133.465C 1026.04,129.944 1021.22,128.184 1016.09,128.184C 1009.88,128.184 1004.79,130.302 1000.82,134.538C 996.847,138.774 994.861,144.316 994.861,151.165C 994.861,157.931 996.734,163.274 1000.48,167.193C 1004.22,171.113 1009.25,173.072 1015.56,173.072C 1020.86,173.072 1025.86,171.312 1030.55,167.791L 1030.55,180.499 Z M 1100.61,183.634L 1086.07,183.634L 1086.07,147.699C 1086.07,134.689 1081.65,128.184 1072.81,128.184C 1068.36,128.184 1064.62,130.068 1061.57,133.836C 1058.52,137.605 1056.99,142.418 1056.99,148.276L 1056.99,183.634L 1042.45,183.634L 1042.45,85.9361L 1056.99,85.9361L 1056.99,128.824L 1057.24,128.824C 1062.22,120.476 1069.36,116.302 1078.64,116.302C 1093.29,116.302 1100.61,125.234 1100.61,143.099L 1100.61,183.634 Z'/>" + "<path class='hidden-portrait' fill='rgba(90,204,19,1)' d='M 79.2551,407.646C 73.0826,410.476 67.2875,411.891 61.8697,411.891C 42.4088,411.891 32.6784,400.409 32.6784,377.446L 32.6784,290.281L 9.43052,290.281L 9.43052,279.931L 32.6784,279.931L 32.6784,245.162L 39.1474,243.06C 41.3846,242.467 43.5409,241.82 45.6164,241.12L 45.6164,279.931L 79.2551,279.931L 79.2551,290.281L 45.6164,290.281L 45.6164,376.031C 45.6164,385.006 47.0045,391.501 49.7808,395.517C 52.5571,399.533 57.274,401.541 63.9317,401.541C 68.6756,401.541 73.7834,399.978 79.2551,396.852L 79.2551,407.646 Z M 156.963,411.891C 137.799,411.891 122.644,405.733 111.499,393.415C 100.353,381.098 94.7804,365.088 94.7804,345.386C 94.7804,324.066 100.609,307.396 112.267,295.375C 123.924,283.355 139.282,277.344 158.338,277.344C 177.071,277.344 191.862,283.314 202.711,295.254C 213.56,307.194 218.985,323.729 218.985,344.86C 218.985,364.832 213.452,380.997 202.388,393.355C 191.323,405.712 176.181,411.891 156.963,411.891 Z M 157.813,287.694C 142.557,287.694 130.393,292.801 121.323,303.016C 112.253,313.232 107.718,327.435 107.718,345.628C 107.718,362.474 112.146,376.004 121,386.219C 129.854,396.434 141.964,401.541 157.327,401.541C 172.933,401.541 184.955,396.515 193.392,386.462C 201.828,376.408 206.047,362.46 206.047,344.618C 206.047,326.263 201.848,312.187 193.452,302.39C 185.056,292.593 173.176,287.694 157.813,287.694 Z M 335.426,409.304L 335.426,385.33L 334.941,385.33C 325.912,403.037 312.017,411.891 293.257,411.891C 262.718,411.891 247.448,392.728 247.448,354.402L 247.448,279.932L 260.386,279.932L 260.386,351.652C 260.386,369.118 263.223,381.799 268.897,389.696C 274.571,397.593 283.499,401.541 295.682,401.541C 307.515,401.541 317.098,397.128 324.429,388.301C 331.761,379.474 335.426,367.716 335.426,353.027L 335.426,279.932L 348.364,279.932L 348.364,409.304L 335.426,409.304 Z M 474.631,403.28C 464.82,409.021 453.108,411.891 439.496,411.891C 421.491,411.891 406.976,405.901 395.952,393.921C 384.928,381.94 379.415,366.261 379.415,346.882C 379.415,326.506 385.615,309.822 398.014,296.831C 410.413,283.84 426.356,277.344 445.844,277.344C 455.898,277.344 465.669,279.312 475.156,283.247L 475.156,296.305C 465.749,290.564 455.44,287.694 444.227,287.694C 428.809,287.694 416.309,293.118 406.727,303.966C 397.145,314.815 392.353,328.864 392.353,346.114C 392.353,362.797 396.74,376.206 405.514,386.34C 414.287,396.474 425.857,401.541 440.224,401.541C 453.404,401.541 464.873,398.078 474.631,391.151L 474.631,403.28 Z M 591.598,409.304L 591.598,331.923C 591.598,316.641 588.862,305.449 583.391,298.347C 577.919,291.245 569.388,287.694 557.798,287.694C 546.881,287.694 537.279,292.02 528.991,300.672C 520.702,309.323 516.558,321.721 516.558,337.866L 516.558,409.304L 503.62,409.304L 503.62,217.833L 516.558,217.833L 516.558,303.623L 517.084,303.623C 527.272,286.104 542.097,277.344 561.558,277.344C 575.547,277.344 586.207,281.832 593.539,290.807C 600.871,299.782 604.536,312.652 604.536,329.416L 604.536,409.304L 591.598,409.304 Z M 757.204,409.304L 728.74,409.304L 728.74,386.825L 728.255,386.825C 718.902,403.536 704.509,411.891 685.075,411.891C 669.307,411.891 656.685,406.137 647.211,394.628C 637.737,383.119 633,367.46 633,347.65C 633,326.384 638.236,309.35 648.707,296.548C 659.179,283.745 673.134,277.344 690.573,277.344C 707.851,277.344 720.412,284.311 728.255,298.246L 728.74,298.246L 728.74,217.833L 757.204,217.833L 757.204,409.304 Z M 729.145,350.076L 729.145,333.298C 729.145,324.188 726.24,316.466 720.432,310.132C 714.623,303.798 707.231,300.631 698.255,300.631C 687.635,300.631 679.28,304.674 673.188,312.76C 667.096,320.846 664.051,332.071 664.051,346.437C 664.051,359.455 666.975,369.737 672.824,377.284C 678.673,384.831 686.53,388.604 696.396,388.604C 706.126,388.604 714.017,384.952 720.068,377.648C 726.119,370.344 729.145,361.153 729.145,350.076 Z M 909.872,352.38L 819.306,352.38C 819.657,363.97 823.444,372.904 830.667,379.184C 837.891,385.464 847.824,388.604 860.465,388.604C 874.643,388.604 887.662,384.292 899.522,375.667L 899.522,400.288C 887.338,408.023 871.247,411.891 851.247,411.891C 831.597,411.891 816.186,406.056 805.014,394.386C 793.841,382.715 788.255,366.287 788.255,345.103C 788.255,325.104 794.401,308.811 806.692,296.224C 818.983,283.637 834.252,277.344 852.5,277.344C 870.748,277.344 884.872,282.984 894.872,294.263C 904.872,305.543 909.872,321.196 909.872,341.222L 909.872,352.38 Z M 878.821,331.68C 878.74,321.87 876.274,314.242 871.422,308.798C 866.57,303.353 859.872,300.631 851.328,300.631C 842.945,300.631 835.849,303.495 830.041,309.222C 824.232,314.95 820.654,322.436 819.306,331.68L 878.821,331.68 Z M 1047.01,279.931L 995.991,409.304L 963.646,409.304L 915.047,279.931L 946.907,279.931L 976.705,370.411C 978.969,377.068 980.371,382.877 980.91,387.836L 981.314,387.836C 982.096,381.61 983.309,375.963 984.953,370.896L 1016.21,279.931L 1047.01,279.931 Z M 1178.98,352.38L 1088.42,352.38C 1088.77,363.969 1092.55,372.904 1099.78,379.184C 1107,385.464 1116.93,388.604 1129.58,388.604C 1143.75,388.604 1156.77,384.292 1168.63,375.667L 1168.63,400.288C 1156.45,408.023 1140.36,411.891 1120.36,411.891C 1100.71,411.891 1085.3,406.056 1074.12,394.385C 1062.95,382.715 1057.37,366.287 1057.37,345.103C 1057.37,325.104 1063.51,308.811 1075.8,296.224C 1088.09,283.637 1103.36,277.344 1121.61,277.344C 1139.86,277.344 1153.98,282.984 1163.98,294.263C 1173.98,305.543 1178.98,321.196 1178.98,341.221L 1178.98,352.38 Z M 1147.93,331.68C 1147.85,321.87 1145.38,314.242 1140.53,308.798C 1135.68,303.353 1128.98,300.631 1120.44,300.631C 1112.06,300.631 1104.96,303.495 1099.15,309.222C 1093.34,314.95 1089.76,322.436 1088.42,331.68L 1147.93,331.68 Z M 1230.73,409.304L 1202.27,409.304L 1202.27,217.833L 1230.73,217.833L 1230.73,409.304 Z M 1328.21,411.891C 1308.03,411.891 1291.91,405.887 1279.86,393.88C 1267.81,381.873 1261.79,365.95 1261.79,346.113C 1261.79,324.524 1268.07,307.666 1280.63,295.537C 1293.19,283.408 1310.11,277.344 1331.41,277.344C 1351.87,277.344 1367.8,283.24 1379.22,295.031C 1390.63,306.823 1396.34,323.19 1396.34,344.132C 1396.34,364.616 1390.19,381.03 1377.88,393.375C 1365.58,405.719 1349.02,411.891 1328.21,411.891 Z M 1329.71,300.631C 1318.34,300.631 1309.35,304.593 1302.74,312.517C 1296.14,320.441 1292.84,331.37 1292.84,345.305C 1292.84,358.727 1296.18,369.299 1302.86,377.021C 1309.55,384.743 1318.5,388.604 1329.71,388.604C 1341.14,388.604 1349.93,384.81 1356.07,377.223C 1362.22,369.636 1365.29,358.835 1365.29,344.82C 1365.29,330.723 1362.22,319.835 1356.07,312.153C 1349.93,304.472 1341.14,300.631 1329.71,300.631 Z M 1453.79,389.736L 1453.27,389.736L 1453.27,468.815L 1424.8,468.815L 1424.8,279.931L 1453.27,279.931L 1453.27,303.016L 1453.79,303.016C 1463.98,285.901 1478.89,277.344 1498.51,277.344C 1515.22,277.344 1528.25,283.091 1537.59,294.587C 1546.93,306.082 1551.6,321.519 1551.6,340.898C 1551.6,362.379 1546.33,379.582 1535.79,392.505C 1525.25,405.429 1510.85,411.891 1492.61,411.891C 1475.81,411.891 1462.88,404.506 1453.79,389.736 Z M 1453.02,339.16L 1453.02,355.048C 1453.02,364.401 1456.06,372.331 1462.14,378.84C 1468.22,385.35 1475.95,388.604 1485.33,388.604C 1496.3,388.604 1504.91,384.413 1511.16,376.031C 1517.42,367.648 1520.54,355.951 1520.54,340.938C 1520.54,328.325 1517.63,318.453 1511.81,311.324C 1505.99,304.195 1498.09,300.631 1488.12,300.631C 1477.58,300.631 1469.1,304.303 1462.67,311.648C 1456.24,318.992 1453.02,328.163 1453.02,339.16 Z '/>" + "<path fill='rgba(90,204,19,1)' d='M 2010.73,226.554C 1953.37,226.554 1906.61,179.796 1906.61,122.425C 1906.61,65.0614 1953.37,18.3036 2010.73,18.3036C 2068.1,18.3036 2114.86,65.0614 2114.86,122.425C 2114.86,179.796 2068.1,226.554 2010.73,226.554 Z M 2010.73,214.601C 2061.52,214.601 2102.34,173.212 2102.34,122.426C 2102.34,71.6464 2061.52,30.8186 2010.73,30.8186C 1959.95,30.8186 1919.13,71.6464 1919.13,122.426C 1919.13,173.212 1959.95,214.601 2010.73,214.601 Z M 1966.29,171.64L 1969.04,153.983L 1983.95,168.874L 1966.29,171.64 Z M 1992.53,166.239L 1971.47,145.187L 2024.96,91.7001L 2046.01,112.758L 1992.53,166.239 Z M 1787.69,450.736C 1730.32,450.736 1684.14,403.978 1684.14,346.608C 1684.14,289.239 1730.32,242.486 1787.69,242.486C 1845.06,242.486 1891.81,289.239 1891.81,346.608C 1891.81,403.978 1845.06,450.736 1787.69,450.736 Z M 1787.69,438.785C 1838.48,438.785 1879.87,397.394 1879.87,346.608C 1879.87,295.822 1838.48,255.001 1787.69,255.001C 1736.9,255.001 1696.08,295.822 1696.08,346.608C 1696.08,397.394 1736.9,438.785 1787.69,438.785 Z M 1828.92,346.707L 1766.79,393.393L 1766.79,300.009L 1828.92,346.707 Z M 2010.73,450.168C 1953.37,450.168 1906.61,403.41 1906.61,346.04C 1906.61,288.671 1953.37,241.913 2010.73,241.913C 2068.1,241.913 2114.86,288.671 2114.86,346.04C 2114.86,403.41 2068.1,450.168 2010.73,450.168 Z M 2010.73,437.649C 2061.52,437.649 2102.34,396.826 2102.34,346.04C 2102.34,295.254 2061.52,253.865 2010.73,253.865C 1959.95,253.865 1919.13,295.254 1919.13,346.04C 1919.13,396.826 1959.95,437.649 2010.73,437.649 Z M 1998.14,376.172C 1995.95,376.172 1994.12,375.477 1992.61,374.059C 1991.07,372.658 1990.33,370.96 1990.33,368.993C 1990.33,367.013 1991.07,365.302 1992.61,363.862C 1994.12,362.442 1995.95,361.73 1998.14,361.73C 2000.34,361.73 2002.22,362.442 2003.77,363.862C 2005.3,365.302 2006.06,367.013 2006.06,368.993C 2006.06,370.96 2005.3,372.658 2003.77,374.059C 2002.22,375.477 2000.34,376.172 1998.14,376.172 Z M 1998.14,332.82C 1995.95,332.82 1994.12,332.127 1992.61,330.721C 1991.07,329.301 1990.33,327.631 1990.33,325.663C 1990.33,323.662 1991.07,321.944 1992.61,320.526C 1994.12,319.086 1995.95,318.379 1998.14,318.379C 2000.34,318.379 2002.22,319.086 2003.77,320.526C 2005.3,321.944 2006.06,323.662 2006.06,325.663C 2006.06,327.631 2005.3,329.301 2003.77,330.721C 2002.22,332.127 2000.34,332.82 1998.14,332.82 Z M 2023.17,392.845L 2012.56,392.845C 2023.76,379.301 2029.37,363.46 2029.37,345.326C 2029.37,327.042 2023.74,311.003 2012.51,297.255L 2023.23,297.255C 2034.7,310.515 2040.45,326.574 2040.45,345.433C 2040.45,364.226 2034.68,380.028 2023.17,392.845 Z M 1787.69,226.554C 1730.32,226.554 1684.14,179.796 1684.14,122.426C 1684.14,65.0618 1730.32,18.3039 1787.69,18.3039C 1845.06,18.3039 1891.81,65.0618 1891.81,122.426C 1891.81,179.796 1845.06,226.554 1787.69,226.554 Z M 1787.69,214.6C 1838.48,214.6 1879.87,173.212 1879.87,122.426C 1879.87,71.6461 1838.48,30.8183 1787.69,30.8183C 1736.91,30.8183 1696.08,71.6461 1696.08,122.426C 1696.08,173.212 1736.91,214.6 1787.69,214.6 Z M 1790.54,137.792C 1771.01,137.792 1754.69,122.048 1754.69,102.517C 1754.69,82.9636 1771.01,67.2356 1790.54,67.2356C 1810.08,67.2356 1825.81,82.9636 1825.81,102.517C 1825.81,122.048 1810.08,137.792 1790.54,137.792 Z M 1790.54,128.685C 1791.55,128.685 1792.54,128.63 1793.52,128.523L 1800.78,103.653L 1780.3,103.653L 1787.01,128.459C 1788.17,128.608 1789.34,128.685 1790.54,128.685 Z M 1816.71,102.517C 1816.71,87.871 1805.18,76.3404 1790.54,76.3404C 1775.91,76.3404 1763.79,87.871 1763.79,102.517C 1763.79,113.508 1770.64,122.764 1780.26,126.681L 1772.9,101.374L 1772.9,100.806L 1772.9,100.238C 1773.01,99.8292 1773.2,99.4387 1773.47,99.1023C 1773.74,98.634 1774.14,98.2368 1774.6,97.9596C 1774.94,97.7026 1775.33,97.5048 1775.74,97.3916L 1776.31,97.3916L 1804.76,97.3916L 1805.33,97.3916L 1805.9,97.9596L 1806.47,97.9596L 1807.04,98.5276L 1807.61,99.1023C 1807.87,99.4319 1808.06,99.8224 1808.17,100.238C 1808.24,100.615 1808.24,100.997 1808.17,101.374L 1800.82,126.645C 1810.23,122.708 1816.71,113.475 1816.71,102.517 Z M 1773.06,147.789L 1773.15,141.529L 1807.65,141.581L 1807.61,145.094L 1773.06,147.789 Z M 1773.06,150.338L 1807.61,147.539L 1807.58,152.358L 1773.06,155.112L 1773.06,150.338 Z M 1773.18,157.609L 1807.61,154.894L 1807.58,159.133L 1773.6,161.755L 1773.18,157.609 Z M 1774.28,164.159L 1774.33,164.285L 1779.83,163.723L 1801.68,161.939L 1807.14,161.59L 1807.03,162.19L 1806.29,164.291C 1805.92,165.182 1805.47,166.238 1804.81,167.347C 1804.17,168.438 1803.34,169.585 1802.06,170.676C 1800.79,171.771 1799.06,172.828 1797.16,173.607C 1795.29,174.393 1793.23,174.922 1791.45,175.12C 1789.66,175.318 1788.17,175.213 1786.64,174.868C 1785.13,174.518 1783.57,173.938 1782.23,173.245C 1780.88,172.571 1779.78,171.771 1778.76,170.86C 1777.74,169.949 1776.79,168.892 1776.06,167.763C 1775.36,166.654 1774.84,165.482 1774.33,164.285L 1774.28,164.291L 1774.28,164.159 Z M 2050.56,108.202L 2030.08,87.1506L 2034.06,83.1679L 2035.64,81.6763C 2041.06,76.2347 2050.14,77.1262 2055.57,82.5542C 2061.01,87.9958 2061.62,97.0484 2056.18,102.49C 2055.82,102.85 2055.97,102.807 2055.11,103.653L 2050.56,108.202 Z '/>");
        var videoPlay = svgBoilerPlate('0 0 320 180', '<g transform="translate(0,-872.36218)"><path d="m193.35,76.144a35.355,35.355,0,1,1,-70.711,0,35.355,35.355,0,1,1,70.711,0z" fill-opacity="0.41269842000000001" transform="matrix(1.4083841,0,0,1.4083841,-58.307492,855.21509)" stroke="#FFF" stroke-miterlimit="10" stroke-dasharray="none" stroke-width="6.85040394999999960" fill="#000"/><path fill="#FFF" d="m151.19,939.89-0.21124,46.293,36.567-22.321z"/></g>', "videoplay");
        var appStudio = svgBoilerPlate('0 0 160 22', "<path fill='yellow' d='M 38.062,6.02484L 35.0155,16.7177L 33.5379,16.7177L 31.3203,8.90332C 31.2258,8.57076 31.169,8.20796 31.1497,7.81494L 31.1185,7.81494C 31.0881,8.1825 31.0232,8.54052 30.9239,8.889L 28.6895,16.7177L 27.2263,16.7177L 24.0693,6.02484L 25.4604,6.02484L 27.7525,14.2259C 27.847,14.5696 27.907,14.9276 27.9327,15.2999L 27.9711,15.2999C 27.9951,15.0358 28.0728,14.6778 28.2042,14.2259L 30.5851,6.02484L 31.7936,6.02484L 34.0785,14.2855C 34.1586,14.5688 34.2187,14.9021 34.2587,15.2856L 34.2899,15.2856C 34.3092,15.0278 34.3764,14.6849 34.4918,14.2569L 36.6949,6.02484L 38.062,6.02484 Z M 39.6359,7.33863C 39.4244,7.33863 39.2446,7.26702 39.0965,7.12381C 38.9483,6.98061 38.8742,6.79921 38.8742,6.57963C 38.8742,6.35845 38.9483,6.17506 39.0965,6.02947C 39.2446,5.88387 39.4244,5.81108 39.6359,5.81108C 39.8521,5.81108 40.0355,5.88387 40.186,6.02947C 40.3366,6.17506 40.4119,6.35845 40.4119,6.57963C 40.4119,6.78966 40.3366,6.96867 40.186,7.11666C 40.0355,7.26464 39.8521,7.33863 39.6359,7.33863 Z M 40.2147,16.7177L 38.9846,16.7177L 38.9846,9.07996L 40.2147,9.07996L 40.2147,16.7177 Z M 48.6718,16.7177L 47.4417,16.7177L 47.4417,12.4048C 47.4417,10.7993 46.8338,9.99649 45.6181,9.99649C 44.9902,9.99649 44.4709,10.224 44.06,10.6791C 43.6492,11.1342 43.4438,11.7094 43.4438,12.4048L 43.4438,16.7177L 42.2137,16.7177L 42.2137,9.07996L 43.4438,9.07996L 43.4438,10.4142L 43.475,10.4142C 44.0644,9.42286 44.9173,8.92721 46.0338,8.92721C 46.8875,8.92721 47.5406,9.19612 47.9931,9.73394C 48.4456,10.2718 48.6718,11.0483 48.6718,12.0634L 48.6718,16.7177 Z M 57.129,16.7177L 55.8988,16.7177L 55.8988,15.3525L 55.87,15.3525C 55.2998,16.3645 54.4204,16.8705 53.2319,16.8705C 52.2677,16.8705 51.4973,16.5307 50.9206,15.8513C 50.344,15.1719 50.0557,14.2474 50.0557,13.0778C 50.0557,11.8224 50.3753,10.8168 51.0143,10.0609C 51.6534,9.30511 52.5048,8.92721 53.5683,8.92721C 54.6222,8.92721 55.3887,9.35365 55.8676,10.2065L 55.8988,10.2065L 55.8988,5.41384L 57.129,5.41384L 57.129,16.7177 Z M 55.8988,13.2568L 55.8988,12.1541C 55.8988,11.5527 55.6926,11.0427 55.2802,10.6242C 54.8677,10.2057 54.3451,9.99649 53.7125,9.99649C 52.9597,9.99649 52.367,10.2638 51.9345,10.7985C 51.5021,11.3331 51.2858,12.0722 51.2858,13.0158C 51.2858,13.8766 51.4933,14.5561 51.9081,15.0541C 52.323,15.5521 52.8796,15.8012 53.5779,15.8012C 54.2667,15.8012 54.8257,15.5605 55.2549,15.0792C 55.6842,14.5978 55.8988,13.9904 55.8988,13.2568 Z M 62.3882,16.8705C 61.2574,16.8705 60.3545,16.516 59.6793,15.8071C 59.0042,15.0983 58.6666,14.1583 58.6666,12.9871C 58.6666,11.7126 59.0178,10.7173 59.7202,10.0013C 60.4225,9.28522 61.3719,8.9272 62.5684,8.9272C 63.7089,8.9272 64.5994,9.27528 65.2401,9.97143C 65.8808,10.6676 66.2012,11.6338 66.2012,12.8702C 66.2012,14.0795 65.856,15.0485 65.1657,15.7773C 64.4753,16.5061 63.5495,16.8705 62.3882,16.8705 Z M 62.4795,9.99649C 61.6835,9.99649 61.054,10.2578 60.5911,10.7806C 60.1282,11.3033 59.8967,12.0237 59.8967,12.9418C 59.8967,13.8265 60.131,14.5242 60.5995,15.035C 61.068,15.5458 61.6947,15.8012 62.4795,15.8012C 63.2804,15.8012 63.8959,15.551 64.3259,15.0505C 64.756,14.5501 64.971,13.8376 64.971,12.9131C 64.971,11.9791 64.756,11.2595 64.3259,10.7543C 63.8959,10.2491 63.2804,9.99649 62.4795,9.99649 Z M 77.4261,9.07996L 75.1196,16.7177L 73.8414,16.7177L 72.2557,11.2519C 72.1949,11.0435 72.1548,10.8072 72.1356,10.5431L 72.1044,10.5431C 72.0899,10.7213 72.0371,10.9528 71.9458,11.2376L 70.2255,16.7177L 68.993,16.7177L 66.6625,9.07996L 67.9551,9.07996L 69.548,14.8226C 69.5993,14.9976 69.6345,15.2267 69.6537,15.51L 69.7138,15.51C 69.7298,15.2904 69.7746,15.0565 69.8483,14.8083L 71.6238,9.07996L 72.7507,9.07996L 74.3436,14.8369C 74.3948,15.0215 74.4325,15.2506 74.4565,15.5243L 74.5166,15.5243C 74.5278,15.3302 74.5702,15.101 74.6439,14.8369L 76.208,9.07996L 77.4261,9.07996 Z M 77.8223,16.3979L 77.8223,15.0374C 78.46,15.5466 79.1616,15.8012 79.9269,15.8012C 80.9533,15.8012 81.4666,15.4614 81.4666,14.782C 81.4666,14.5799 81.4225,14.4085 81.3345,14.2677C 81.2464,14.1268 81.1272,14.0019 80.9769,13.8929C 80.8266,13.7839 80.6497,13.6861 80.4462,13.5993L 79.7902,13.3284C 79.4668,13.1964 79.1821,13.0623 78.9361,12.9263C 78.6901,12.7902 78.4847,12.6367 78.3199,12.4656C 78.1552,12.2946 78.0311,12.1004 77.9475,11.8833C 77.864,11.6661 77.8223,11.4119 77.8223,11.1207C 77.8223,10.7642 77.9012,10.4492 78.0591,10.1755C 78.2171,9.90181 78.4274,9.67228 78.6901,9.48691C 78.9528,9.30153 79.2527,9.1619 79.5898,9.06802C 79.9269,8.97414 80.2746,8.9272 80.6329,8.9272C 81.2692,8.9272 81.8386,9.04893 82.3412,9.29238L 82.3412,10.6075C 81.7946,10.2002 81.1659,9.99649 80.4553,9.99649C 80.2321,9.99649 80.0309,10.0212 79.8517,10.0705C 79.6725,10.1198 79.5188,10.1894 79.3905,10.2793C 79.2622,10.3692 79.1631,10.4766 79.0932,10.6015C 79.0234,10.7264 78.9884,10.8645 78.9884,11.0156C 78.9884,11.213 79.023,11.3784 79.0921,11.5121C 79.1612,11.6458 79.2625,11.7643 79.3962,11.8677C 79.5298,11.9712 79.6923,12.065 79.8836,12.1494L 80.535,12.4239C 80.86,12.5527 81.1511,12.6852 81.4085,12.8213C 81.6659,12.9573 81.8853,13.1105 82.0668,13.2807C 82.2482,13.451 82.3879,13.6471 82.4859,13.8691C 82.5838,14.091 82.6328,14.3556 82.6328,14.6627C 82.6328,15.0382 82.5538,15.3644 82.3959,15.6413C 82.238,15.9181 82.0265,16.1477 81.7615,16.3298C 81.4966,16.512 81.1917,16.6477 80.8471,16.7368C 80.5024,16.8259 80.141,16.8705 79.7629,16.8705C 79.0173,16.8705 78.3704,16.7129 77.8223,16.3979 Z M 102.487,16.5073L 101.264,16.5073L 100.239,13.8624L 96.2973,13.8624L 95.3301,16.5073L 94.1008,16.5073L 97.7159,7.25012L 98.8599,7.25012L 102.487,16.5073 Z M 99.8895,12.9367L 98.4231,9.05403C 98.376,8.92592 98.3288,8.72135 98.2817,8.44033L 98.2546,8.44033C 98.2102,8.70069 98.1589,8.90525 98.1007,9.05403L 96.6447,12.9367L 99.8895,12.9367 Z M 104.778,15.4927L 104.75,15.4927L 104.75,19.5489L 103.686,19.5489L 103.686,9.89503L 104.75,9.89503L 104.75,11.1142L 104.778,11.1142C 105.302,10.2132 106.069,9.76278 107.078,9.76278C 107.936,9.76278 108.606,10.0569 109.087,10.6451C 109.568,11.2333 109.809,12.0213 109.809,13.009C 109.809,14.1083 109.538,14.9882 108.997,15.6487C 108.455,16.3093 107.714,16.6395 106.772,16.6395C 105.91,16.6395 105.245,16.2573 104.778,15.4927 Z M 104.75,12.8912L 104.75,13.7942C 104.75,14.3287 104.93,14.7822 105.29,15.1549C 105.65,15.5275 106.107,15.7138 106.662,15.7138C 107.312,15.7138 107.822,15.4738 108.191,14.9937C 108.56,14.5136 108.744,13.8465 108.744,12.9924C 108.744,12.2734 108.572,11.7096 108.227,11.3012C 107.883,10.8927 107.416,10.6885 106.826,10.6885C 106.202,10.6885 105.7,10.8979 105.32,11.3167C 104.94,11.7354 104.75,12.2603 104.75,12.8912 Z M 112.632,15.4927L 112.605,15.4927L 112.605,19.5489L 111.54,19.5489L 111.54,9.89502L 112.605,9.89502L 112.605,11.1142L 112.632,11.1142C 113.156,10.2132 113.923,9.76278 114.932,9.76278C 115.791,9.76278 116.46,10.0569 116.941,10.6451C 117.423,11.2333 117.663,12.0213 117.663,13.009C 117.663,14.1083 117.392,14.9882 116.851,15.6487C 116.309,16.3093 115.568,16.6395 114.626,16.6395C 113.764,16.6395 113.099,16.2573 112.632,15.4927 Z M 112.605,12.8912L 112.605,13.7942C 112.605,14.3287 112.785,14.7822 113.144,15.1549C 113.504,15.5275 113.961,15.7138 114.516,15.7138C 115.167,15.7138 115.676,15.4738 116.045,14.9937C 116.414,14.5136 116.598,13.8465 116.598,12.9924C 116.598,12.2734 116.426,11.7096 116.081,11.3012C 115.737,10.8927 115.27,10.6885 114.68,10.6885C 114.056,10.6885 113.555,10.8979 113.175,11.3167C 112.795,11.7354 112.605,12.2603 112.605,12.8912 Z M 122.722,16.0672L 122.722,14.7881C 122.87,14.9314 123.048,15.0605 123.254,15.1755C 123.461,15.2906 123.679,15.3873 123.907,15.4658C 124.136,15.5444 124.366,15.6053 124.597,15.6487C 124.828,15.6921 125.041,15.7138 125.237,15.7138C 125.912,15.7138 126.416,15.5867 126.749,15.3326C 127.082,15.0784 127.248,14.713 127.248,14.2364C 127.248,13.9884 127.192,13.7721 127.08,13.5876C 126.969,13.403 126.815,13.2349 126.619,13.0834C 126.423,12.9318 126.19,12.7862 125.922,12.6463L 125.054,12.2072C 124.726,12.0433 124.421,11.878 124.137,11.7113C 123.854,11.5446 123.607,11.3607 123.397,11.1596C 123.187,10.9585 123.022,10.7305 122.902,10.4757C 122.782,10.2208 122.722,9.92189 122.722,9.57887C 122.722,9.15872 122.816,8.79332 123.006,8.48269C 123.195,8.17205 123.444,7.91617 123.751,7.71504C 124.059,7.51392 124.41,7.36411 124.804,7.26562C 125.198,7.16712 125.599,7.11787 126.008,7.11787C 126.94,7.11787 127.62,7.23979 128.047,7.48361L 128.047,8.70481C 127.493,8.264 126.783,8.04359 125.915,8.04359C 125.675,8.04359 125.435,8.06908 125.195,8.12004C 124.955,8.17101 124.742,8.25436 124.554,8.37007C 124.367,8.48579 124.215,8.63456 124.097,8.8164C 123.979,8.99823 123.92,9.22002 123.92,9.48176C 123.92,9.71732 123.965,9.92085 124.054,10.0924C 124.144,10.2639 124.276,10.4202 124.45,10.5614C 124.625,10.7026 124.838,10.8397 125.089,10.9726C 125.34,11.1055 125.629,11.2512 125.956,11.4096C 126.293,11.5722 126.612,11.7434 126.913,11.9231C 127.214,12.1029 127.478,12.3023 127.706,12.5213C 127.933,12.7404 128.113,12.9825 128.246,13.2476C 128.379,13.5128 128.446,13.8169 128.446,14.1599C 128.446,14.6145 128.355,14.9992 128.172,15.314C 127.99,15.6287 127.744,15.8846 127.435,16.0816C 127.126,16.2786 126.769,16.4208 126.365,16.5083C 125.961,16.5958 125.535,16.6395 125.087,16.6395C 124.937,16.6395 124.753,16.6268 124.534,16.6013C 124.314,16.5758 124.09,16.5386 123.862,16.4897C 123.633,16.4408 123.417,16.3802 123.213,16.3079C 123.009,16.2356 122.845,16.1553 122.722,16.0672 Z M 132.906,16.4184C 132.649,16.5658 132.311,16.6395 131.893,16.6395C 130.704,16.6395 130.11,15.9976 130.11,14.7137L 130.11,10.8207L 128.912,10.8207L 128.912,9.89502L 130.11,9.89502L 130.11,8.25848L 131.175,7.91134L 131.175,9.89502L 132.906,9.89502L 132.906,10.8207L 131.175,10.8207L 131.175,14.4967C 131.175,14.9348 131.253,15.2472 131.41,15.4338C 131.567,15.6205 131.826,15.7138 132.188,15.7138C 132.465,15.7138 132.705,15.6256 132.906,15.4493L 132.906,16.4184 Z M 139.695,16.5073L 138.63,16.5073L 138.63,15.4039L 138.603,15.4039C 138.155,16.2276 137.46,16.6395 136.519,16.6395C 134.909,16.6395 134.104,15.7042 134.104,13.8334L 134.104,9.89502L 135.169,9.89502L 135.169,13.6413C 135.169,15.023 135.716,15.7138 136.81,15.7138C 137.339,15.7138 137.775,15.5251 138.117,15.1476C 138.459,14.7702 138.63,14.277 138.63,13.6681L 138.63,9.89502L 139.695,9.89502L 139.695,16.5073 Z M 147.549,16.5073L 146.484,16.5073L 146.484,15.3253L 146.459,15.3253C 145.965,16.2015 145.204,16.6395 144.175,16.6395C 143.34,16.6395 142.673,16.3454 142.174,15.7572C 141.675,15.169 141.425,14.3686 141.425,13.3561C 141.425,12.2692 141.702,11.3986 142.255,10.7443C 142.809,10.0899 143.546,9.76277 144.466,9.76277C 145.379,9.76277 146.042,10.132 146.457,10.8703L 146.484,10.8703L 146.484,6.72113L 147.549,6.72113L 147.549,16.5073 Z M 146.484,13.5111L 146.484,12.5565C 146.484,12.0357 146.305,11.5942 145.948,11.2319C 145.591,10.8696 145.139,10.6885 144.591,10.6885C 143.939,10.6885 143.426,10.9199 143.052,11.3828C 142.677,11.8456 142.49,12.4855 142.49,13.3024C 142.49,14.0477 142.67,14.6359 143.029,15.067C 143.388,15.4982 143.87,15.7138 144.475,15.7138C 145.071,15.7138 145.555,15.5055 145.926,15.0887C 146.298,14.672 146.484,14.1461 146.484,13.5111 Z M 150.205,8.17583C 150.022,8.17583 149.866,8.11384 149.738,7.98986C 149.61,7.86588 149.546,7.70884 149.546,7.51873C 149.546,7.32726 149.61,7.16849 149.738,7.04245C 149.866,6.9164 150.022,6.85338 150.205,6.85338C 150.392,6.85338 150.551,6.9164 150.681,7.04245C 150.812,7.16849 150.877,7.32726 150.877,7.51873C 150.877,7.70057 150.812,7.85555 150.681,7.98366C 150.551,8.11177 150.392,8.17583 150.205,8.17583 Z M 150.744,16.5073L 149.679,16.5073L 149.679,9.89502L 150.744,9.89502L 150.744,16.5073 Z M 155.696,16.6395C 154.717,16.6395 153.936,16.3327 153.351,15.719C 152.767,15.1053 152.474,14.2915 152.474,13.2776C 152.474,12.1742 152.778,11.3125 153.386,10.6926C 153.995,10.0727 154.816,9.76277 155.852,9.76277C 156.84,9.76277 157.611,10.0641 158.165,10.6668C 158.72,11.2695 158.997,12.106 158.997,13.1763C 158.997,14.2233 158.698,15.0622 158.101,15.6931C 157.503,16.3241 156.702,16.6395 155.696,16.6395 Z M 155.775,10.6885C 155.086,10.6885 154.541,10.9147 154.14,11.3673C 153.74,11.8198 153.539,12.4435 153.539,13.2383C 153.539,14.0043 153.742,14.6083 154.148,15.0505C 154.553,15.4927 155.096,15.7138 155.775,15.7138C 156.469,15.7138 157.002,15.4972 157.374,15.0639C 157.746,14.6307 157.932,14.0139 157.932,13.2135C 157.932,12.4049 157.746,11.7819 157.374,11.3445C 157.002,10.9072 156.469,10.6885 155.775,10.6885 Z M 89.1029,19.6652L 88.171,19.6652L 88.171,6.44065L 89.1029,6.44065L 89.1029,19.6652 Z M 0.697352,4.92726L 8.29736,3.87696L 8.29736,11.1974L 0.697352,11.1974L 0.697352,4.92726 Z M 18.6479,2.44654L 18.6479,11.1974L 8.64479,11.1974L 8.64479,3.82895L 18.6479,2.44654 Z M 18.6479,20.3186L 8.64479,18.9061L 8.64479,11.5425L 18.6479,11.5425L 18.6479,20.3186 Z M 0.697351,17.7839L 0.697351,11.5425L 8.29736,11.5425L 8.29736,18.857L 0.697351,17.7839 Z ' />");
        var cloudpath = "<path style='fill:none;stroke:fgcolor;stroke-width:4;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:desiredopacity;stroke-dasharray:none;marker-start:none' d='M 53.728638,839.48313 C 44.890866,821.0777 75.842011,799.132 90.002668,814.85472 m 95.479832,42.85851 c -1.38106,-5.8005 4.40628,-18.7826 16.84904,-18.7826 13.54573,0 21.94059,7.3948 22.09708,21.2685 0.12491,11.0738 -9.9144,15.1917 -18.78252,15.1917 -113.282692,0 -116.668932,-0.117 -192.520858,0 -19.4386752,0.03 -13.81264047,-42.1213 18.48727,-28.1053 M 171.91337,824.7065 c -4.93156,-14.64758 -17.61648,-26.12905 -40.14249,-26.46505 -23.58689,-0.35183 -48.384356,11.52296 -51.525738,39.03198 m 118.210358,2.1465 c -2.39812,-10.1263 -12.21999,-14.27103 -22.09021,-14.82478 -25.14358,-1.41071 -32.89057,15.94078 -28.71083,28.10798 m -117.127762,6.9436 c -2.458337,-17.837 10.678185,-24.8171 21.948736,-24.6319'/>";
        var peoplepath = "<path style='fill:fgcolor;fill-opacity:desiredopacity;fill-rule:nonzero;stroke:none' d='m 166.22645,843.32735 c 2.92046,0 5.28806,3.01049 5.28806,6.72401 0,3.71352 -2.3676,6.72401 -5.28806,6.72401 -2.92065,0 -5.28825,-3.01049 -5.28825,-6.72401 0,-3.71352 2.3676,-6.72401 5.28825,-6.72401 z m 11.17157,32.21923 -22.41337,0 c 0,-5.97691 0,-11.95381 1.49422,-14.94226 1.49423,-2.98845 4.48268,-2.98845 6.91658,-2.98845 2.4341,0 4.31346,0 6.19301,0 2.60312,0 5.20644,0 6.50791,2.98845 1.30165,2.98845 1.30165,8.96535 1.30165,14.94226 z M 87.781795,843.05114 c 2.920462,0 5.288062,3.01049 5.288062,6.72401 0,3.71352 -2.3676,6.72401 -5.288062,6.72401 -2.92065,0 -5.288249,-3.01049 -5.288249,-6.72401 0,-3.71352 2.367599,-6.72401 5.288249,-6.72401 z m 11.171572,32.21923 -22.413373,0 c 0,-5.97691 0,-11.95381 1.494225,-14.94226 1.494225,-2.98845 4.482674,-2.98845 6.91658,-2.98845 2.434092,0 4.313454,0 6.193002,0 2.603126,0 5.20644,0 6.50791,2.98845 1.301656,2.98845 1.301656,8.96535 1.301656,14.94226 z m 20.869203,-32.21924 c 2.92046,0 5.28806,3.01049 5.28806,6.72401 0,3.71352 -2.3676,6.72401 -5.28806,6.72401 -2.92065,0 -5.28825,-3.01049 -5.28825,-6.72401 0,-3.71352 2.3676,-6.72401 5.28825,-6.72401 z m 11.17157,32.21923 -22.41337,0 c 0,-5.97691 0,-11.95381 1.49422,-14.94226 1.49423,-2.98845 4.48268,-2.98845 6.91658,-2.98845 2.4341,0 4.31346,0 6.19301,0 2.60312,0 5.20644,0 6.50791,2.98845 1.30165,2.98845 1.30165,8.96535 1.30165,14.94226 z M 66.249157,842.77492 c 2.920462,0 5.288062,3.01049 5.288062,6.72401 0,3.71352 -2.3676,6.72401 -5.288062,6.72401 -2.92065,0 -5.288249,-3.01049 -5.288249,-6.72401 0,-3.71352 2.367599,-6.72401 5.288249,-6.72401 z m 11.171572,32.21923 -22.413373,0 c 0,-5.97691 0,-11.95381 1.494225,-14.94226 1.494225,-2.98845 4.482674,-2.98845 6.91658,-2.98845 2.434092,0 4.313454,0 6.193002,0 2.603126,0 5.20644,0 6.50791,2.98845 1.301656,2.98845 1.301656,8.96535 1.301656,14.94226 z'/>";
        var broadcastpath = "<path style='fill:fgcolor;fill-opacity:desiredopacity;fill-rule:nonzero;stroke:none' d='m 158.25,47.375 c -2.92046,0 -5.28125,3.00523 -5.28125,6.71875 0,3.71352 2.36079,6.75 5.28125,6.75 2.92065,0 5.28125,-3.03648 5.28125,-6.75 0,-3.71352 -2.3606,-6.71875 -5.28125,-6.71875 z m -45.5625,0.28125 c -2.92046,0 -5.3125,3.00523 -5.3125,6.71875 0,3.71352 2.39204,6.71875 5.3125,6.71875 2.92065,0 5.28125,-3.00523 5.28125,-6.71875 0,-3.71352 -2.3606,-6.71875 -5.28125,-6.71875 z m 24.03125,0 c -2.92046,0 -5.28125,3.00523 -5.28125,6.71875 0,3.71352 2.36079,6.71875 5.28125,6.71875 2.92065,0 5.28125,-3.00523 5.28125,-6.71875 0,-3.71352 -2.3606,-6.71875 -5.28125,-6.71875 z m -74.4375,0.28125 c -2.92046,0 -5.3125,3.00523 -5.3125,6.71875 0,3.71352 2.39204,6.71875 5.3125,6.71875 2.92065,0 5.28125,-3.00523 5.28125,-6.71875 0,-3.71352 -2.3606,-6.71875 -5.28125,-6.71875 z m 34.932585,-5.692657 -10.799454,9.091808 -11.274272,0 0.276214,10.50813 3.443568,-0.276213 2.762136,9.509162 3.875,0 -1.933496,-8.847876 13.650304,10.65534 z M 154.875,61.6875 c -2.60312,0 -5.19853,-0.0197 -6.5,2.96875 -0.4408,1.012029 -0.71345,2.387341 -0.90625,3.96875 -0.22102,-1.459898 -0.52452,-2.736531 -1,-3.6875 -1.49423,-2.98845 -4.5036,-3 -6.9375,-3 l -6.1875,0 c -2.60312,0 -5.19853,0.01155 -6.5,3 -1.30165,2.98845 -1.3125,8.96059 -1.3125,14.9375 l 22.4375,0 c 0,-0.0947 1e-5,-0.186562 0,-0.28125 l 21.53125,0 c 0,-5.97691 -0.006,-11.94905 -1.5,-14.9375 -1.49422,-2.98845 -4.50359,-2.96875 -6.9375,-2.96875 z m -45.5625,0.25 c -2.60312,0 -5.19853,0.01155 -6.5,3 -1.30165,2.98845 -1.3125,8.96059 -1.3125,14.9375 l 22.40625,0 c 0,-5.97691 -0.006,-11.94905 -1.5,-14.9375 -1.49423,-2.98845 -4.47235,-3 -6.90625,-3 z m -50.40625,0.28125 c -2.60312,0 -5.19853,0.01155 -6.5,3 -1.30165,2.98845 -1.3125,8.96059 -1.3125,14.9375 l 22.40625,0 c 0,-5.97691 0.02547,-11.94905 -1.46875,-14.9375 -1.49423,-2.98845 -4.5036,-3 -6.9375,-3 z' transform='translate(-0.0892384, 795.39085)'/>";
        function getIconSVG(name) {
            var d = TDev.div(null);
            d.innerHTML = getIconSVGCore(name);
            var r = d.firstChild;
            TDev.HTML.setRole(r, "presentation");
            r.setAttribute("aria-label", name);
            return r;
        }
        SVG.getIconSVG = getIconSVG;
        function getIconNames() {
            return Object.keys(icons).concat(Object.keys(fontAwesomeIconsByDaveGandy).map(function (i) { return "fa-" + i; }));
        }
        SVG.getIconNames = getIconNames;
        function getAllIcons() {
            var r = "";
            getIconNames().forEach(function (i) {
                var s = getIconSVGCore(i + ",black");
                s = s.replace(/^<svg /, "<svg style='width:100%;height:100%' ");
                s = "<div style='margin:1em;display:inline-block;width:3em;height:3em;'>" + s + "<div style='font-size:0.6em;text-align:center'>" + i + "</div></div>";
                r += s;
            });
            return r;
        }
        SVG.getAllIcons = getAllIcons;
        function getIconSVGUrl(name) {
            return "data:image/svg+xml," + escape(getIconSVGCore(name));
        }
        SVG.getIconSVGUrl = getIconSVGUrl;
        function getVideoPlay(bg) {
            return TDev.Util.fmt("<img src='{0:url}' />", bg) + videoPlay;
        }
        SVG.getVideoPlay = getVideoPlay;
        function getIconSVGCore(name) {
            var toks = name.split(/,/);
            var h = 480;
            name = toks[0];
            var fill = toks[1];
            var viewDiff = 0;
            var opacity = 1;
            toks.forEach(function (s) {
                if (/clip=/.test(s)) {
                    viewDiff = s.slice(5) * 1;
                }
                if (/opacity=/.test(s)) {
                    opacity = s.slice(8) * 1;
                }
                if (/h=/.test(s)) {
                    h = s.slice(2) * 1;
                }
            });
            var lname = name.toLowerCase();
            if (iconMapping.hasOwnProperty(lname))
                lname = iconMapping[lname];
            var ic = icons[lname];
            var fa = false;
            if (!ic) {
                ic = fontAwesomeIconsByDaveGandy[lname.replace(/^fa-/, "")];
                if (ic)
                    fa = true;
            }
            if (!ic) {
                TDev.Util.log("SCRIPTICON: " + name);
                ic = icons["cancel"];
            }
            var viewPort = viewDiff + " " + viewDiff + " " + (480 - 2 * viewDiff) + " " + (h - 2 * viewDiff);
            var style = "";
            if (opacity != 1)
                style = " style='fill-opacity:" + opacity + "' ";
            if (fa)
                style += " transform='scale(0.13,-0.13) translate(1000,-2500)' ";
            var svg = svgBoilerPlate(viewPort, "<path fill='" + fill + "' " + style + " d='" + ic + "' />", name);
            return svg;
        }
        SVG.getIconSVGCore = getIconSVGCore;
        function drawSVG(ctx, name) {
            var path = icons[name.toLowerCase()] || (scriptIcons ? scriptIcons[name.toLowerCase()] : null);
            if (path == null)
                return;
            path = path.replace(/,/g, " ");
            path = path.replace(/([0-9])([A-Z])/g, (function (str, n, l) { return n + " " + l; }));
            var words = path.split(/ +/);
            var implicitCmd = "";
            var w = function (n) { return parseFloat(words[n]); };
            for (var i = 0; i < words.length;) {
                var cmd = words[i];
                if (/^[A-Za-z]$/.test(cmd))
                    i++;
                else
                    cmd = implicitCmd;
                switch (cmd) {
                    case "M":
                        ctx.moveTo(w(i + 0), w(i + 1));
                        i += 2;
                        implicitCmd = "L";
                        break;
                    case "C":
                        ctx.bezierCurveTo(w(i + 0), w(i + 1), w(i + 2), w(i + 3), w(i + 4), w(i + 5));
                        i += 6;
                        implicitCmd = "C";
                        break;
                    case "L":
                        ctx.lineTo(w(i + 0), w(i + 1));
                        i += 2;
                        implicitCmd = "L";
                        break;
                    case "Z":
                        ctx.closePath();
                        break;
                    default:
                        i++;
                        break;
                }
            }
            ctx.fill();
        }
        SVG.drawSVG = drawSVG;
        function svgToElement(svg) {
            var d = TDev.div(null);
            d.innerHTML = svg;
            return d.firstChild;
        }
        SVG.svgToElement = svgToElement;
        function codeSignHtml(name) {
            return codeSigns[name];
        }
        SVG.codeSignHtml = codeSignHtml;
        function getHorizLogo() {
            return svgToElement(tdLogoHoriz);
        }
        SVG.getHorizLogo = getHorizLogo;
        function getTopLogo() {
            return svgToElement(tdLogo);
        }
        SVG.getTopLogo = getTopLogo;
        function getLoginButton() {
            return svgToElement(loginButton);
        }
        SVG.getLoginButton = getLoginButton;
        function getHorizontalCursorMarker() {
            return svgToElement(horizontalMarker);
        }
        SVG.getHorizontalCursorMarker = getHorizontalCursorMarker;
        function getVerticalCursorMarker() {
            return svgToElement(verticalMarker);
        }
        SVG.getVerticalCursorMarker = getVerticalCursorMarker;
        function getAppStudioLogo() {
            return svgToElement(appStudio);
        }
        SVG.getAppStudioLogo = getAppStudioLogo;
        function getCloudSymbol(color, type, connected, height_in_em) {
            var opacity = connected ? "1" : "0.3";
            var extrapath = (type == "public" ? peoplepath : (type == "broadcast" ? broadcastpath : ""));
            var svg = svgToElement(svgBoilerPlate('0 795 227 82', cloudpath.replace(/fgcolor/, color).replace(/desiredopacity/, opacity) + (extrapath ? extrapath.replace(/fgcolor/, color).replace(/desiredopacity/, opacity) : "")));
            if (height_in_em) {
                svg.style.height = height_in_em.toString() + "em";
                svg.style.width = (height_in_em * 2.77).toString() + "em";
            }
            return svg;
        }
        SVG.getCloudSymbol = getCloudSymbol;
        function justName(s) {
            return s ? s.replace(/^svg:/, "").replace(/,.*/, "") : null;
        }
        SVG.justName = justName;
    })(SVG = TDev.SVG || (TDev.SVG = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var CallNode = (function () {
        function CallNode(id, action) {
            this.id = id;
            this.action = action;
        }
        return CallNode;
    })();
    TDev.CallNode = CallNode;
    var PackedStackTrace = (function () {
        function PackedStackTrace() {
            this.pack = [];
            this.path = [];
        }
        PackedStackTrace.buildFrom = function (st) {
            var ret = new PackedStackTrace();
            var pack = [];
            var actions = [];
            st.forEach(function (sf) {
                var ix = pack.indexOf(sf.pc);
                if (ix === -1) {
                    ix = pack.push(sf.pc) - 1;
                    actions.push(sf.name);
                }
                ret.path.push(ix);
            });
            pack.forEach(function (x, i) { return ret.pack.push(new CallNode(x, actions[i])); });
            return ret;
        };
        PackedStackTrace.toFakeStackTrace = function (st) {
            if (!st)
                return [];
            var fakePack = st.pack.map(function (cnode) {
                return { pc: cnode.id, name: cnode.action };
            });
            return st.path.map(function (ix) { return fakePack[ix]; });
        };
        return PackedStackTrace;
    })();
    TDev.PackedStackTrace = PackedStackTrace;
    var RunBitMap = (function () {
        function RunBitMap() {
            this.empty = true;
            this.data = {};
        }
        RunBitMap.prototype.push = function (id) {
            this.data[id] = true;
            this.empty = false;
        };
        RunBitMap.prototype.contains = function (id) {
            return !!this.data[id];
        };
        RunBitMap.prototype.toJSON = function () {
            return Object.keys(this.data);
        };
        RunBitMap.prototype.isEmpty = function () {
            return this.empty;
        };
        RunBitMap.prototype.clear = function () {
            this.empty = true;
            this.data = {};
        };
        RunBitMap.fromJSON = function (json) {
            if (json == null)
                return null;
            if (json instanceof Array) {
                var ret = new RunBitMap();
                json.forEach(function (e) {
                    if (e != undefined) {
                        ret.push(e);
                    }
                });
                return ret;
            }
            return undefined;
        };
        return RunBitMap;
    })();
    TDev.RunBitMap = RunBitMap;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    TDev.debuggerExceptions = false;
    TDev.forceLocalStorage = false;
    TDev.withTracing = false;
    TDev.dbg = false;
    TDev.isBeta = false;
    TDev.asyncEnabled = true;
    TDev.isWebWorker = false;
    TDev.noHub = false;
    function enumToString(enumType, theEnum) {
        var ret = enumType[theEnum];
        if (!ret)
            throw new Error("Cannot convert enum to string: " + theEnum);
        return ret;
    }
    TDev.enumToString = enumToString;
    function nullify(v) {
        return (v == null) ? null : v;
    }
    TDev.nullify = nullify;
    function coalesce(v) {
        return function (f) {
            if (f && (v != null))
                return coalesce(f(v));
            else if (!f)
                return v;
            else
                return coalesce(null);
        };
    }
    TDev.coalesce = coalesce;
    function tweetify(text) {
        if (!text)
            return text;
        if (text.length > 140)
            return text.substr(0, 140) + '...';
        return text;
    }
    TDev.tweetify = tweetify;
    function elt(name) {
        return document.getElementById(name);
    }
    TDev.elt = elt;
    function span(cl, kw) {
        return createElement("span", cl, kw);
    }
    TDev.span = span;
    function createElement(tag, cl, kw) {
        if (cl === void 0) { cl = null; }
        if (kw === void 0) { kw = null; }
        var elt = document.createElement(tag);
        if (cl)
            elt.className = cl;
        if (typeof kw === "string")
            elt.appendChild(document.createTextNode(kw));
        else
            elt.appendChildren(kw);
        return elt;
    }
    TDev.createElement = createElement;
    function text(s) {
        return document.createTextNode(s);
    }
    TDev.text = text;
    function img(cl, src, alt) {
        var elt = document.createElement("img");
        if (cl)
            elt.className = cl;
        elt.src = src;
        elt.alt = alt;
        return elt;
    }
    TDev.img = img;
    function spanDirAuto(txt) {
        return dirAuto(span('', txt));
    }
    TDev.spanDirAuto = spanDirAuto;
    function dirAuto(el) {
        if (el) {
            if (TDev.Browser.directionAuto)
                el.setAttribute('dir', 'auto');
            else {
                var t = el.innerText;
                var dir = /^[\s\.;:(+0-9]*[\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC]/i.test(t) ? "rtl" : "ltr";
                el.setAttribute('dir', dir);
            }
        }
        return el;
    }
    TDev.dirAuto = dirAuto;
    function div(cl) {
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        var elt = document.createElement("div");
        if (cl)
            elt.className = cl;
        elt.appendChildren(children.filter(function (e) { return e != undefined; }));
        return elt;
    }
    TDev.div = div;
    function divId(id, cls) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var d = div(cls, args);
        d.id = id;
        return d;
    }
    TDev.divId = divId;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Debug;
    (function (Debug) {
        function whenSet(f) {
            f();
        }
        Debug.whenSet = whenSet;
    })(Debug = TDev.Debug || (TDev.Debug = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var HttpLog;
    (function (HttpLog) {
        HttpLog.enabled = false;
        var theLog = [];
        var startTime = 0;
        function log(req) {
            req.timestamp = Date.now();
            if (/^[\{\[]/.test(req.contentText)) {
                req.contentJson = JSON.parse(req.contentText);
                delete req.contentText;
            }
            req.method = req.method.toUpperCase();
            if (Util.startsWith(req.url, TDev.Cloud.getServiceUrl())) {
                req.url = req.url.slice(TDev.Cloud.getServiceUrl().length).replace(/.access_token=.*/, "");
            }
            if (!startTime)
                startTime = req.timestamp;
            req.relativeTime = req.timestamp - startTime;
            theLog.push(Util.jsonClone(req));
        }
        HttpLog.log = log;
        function show() {
            theLog.forEach(function (e) { return console.log(e); });
            return theLog;
        }
        HttpLog.show = show;
    })(HttpLog = TDev.HttpLog || (TDev.HttpLog = {}));
    var Util;
    (function (Util) {
        Util.eventLogging = false;
        Util.mouseLogging = false;
        Util.cloudRun = false;
        Util.cloudRunwHeapOpt = false;
        function wordLength(s) {
            var max = 0;
            s.split(/(\s+|-)/).forEach(function (w) { return max = Math.max(w.length, max); });
            return max;
        }
        Util.wordLength = wordLength;
        function timeSince(time) {
            var now = Util.now();
            time *= 1000;
            var diff = (now - time) / 1000;
            if (isNaN(diff))
                return "";
            if (diff < -30) {
                diff = -diff;
                if (diff < 60)
                    return lf("in a few seconds");
                if (diff < 2 * 60)
                    return lf("in a minute");
                if (diff < 60 * 60)
                    return lf("in {0} minute{0:s}", Math.floor(diff / 60));
                if (diff < 2 * 60 * 60)
                    return lf("in an hour");
                if (diff < 60 * 60 * 24)
                    return lf("in {0} hour{0:s}", Math.floor(diff / 60 / 60));
                if (diff < 60 * 60 * 24 * 30)
                    return lf("in {0} day{0:s}", Math.floor(diff / 60 / 60 / 24));
                if (diff < 60 * 60 * 24 * 365)
                    return lf("in {0} month{0:s}", Math.floor(diff / 60 / 60 / 24 / 30));
                return lf("in {0} year{0:s}", Math.floor(diff / 60 / 60 / 24 / 365));
            }
            else {
                if (diff < 0)
                    return lf("now");
                if (diff < 10)
                    return lf("a few seconds ago");
                if (diff < 60)
                    return lf("{0} second{0:s} ago", Math.floor(diff));
                if (diff < 2 * 60)
                    return lf("a minute ago");
                if (diff < 60 * 60)
                    return lf("{0} minute{0:s} ago", Math.floor(diff / 60));
                if (diff < 2 * 60 * 60)
                    return lf("an hour ago");
                if (diff < 60 * 60 * 24)
                    return lf("{0} hour{0:s} ago", Math.floor(diff / 60 / 60));
                if (diff < 60 * 60 * 24 * 30)
                    return lf("{0} day{0:s} ago", Math.floor(diff / 60 / 60 / 24));
                if (diff < 60 * 60 * 24 * 365)
                    return lf("{0} month{0:s} ago", Math.floor(diff / 60 / 60 / 24 / 30));
                return lf("{0} year{0:s} ago", Math.floor(diff / 60 / 60 / 24 / 365));
            }
        }
        Util.timeSince = timeSince;
        function toAbsoluteUrl(url) {
            if (/^http(s)?:/i.test(url))
                return url;
            var a = document.createElement('a');
            a.href = url;
            return a.href;
        }
        Util.toAbsoluteUrl = toAbsoluteUrl;
        function httpGetJsonAsync(filename) {
            return httpGetTextAsync(filename).then(function (s) { return JSON.parse(s); });
        }
        Util.httpGetJsonAsync = httpGetJsonAsync;
        function forEachResponseHeader(client, action) {
            var headers = client.getAllResponseHeaders();
            if (headers) {
                headers = headers.replace(/^\s*/, '');
                headers.split('\r\n').forEach(function (line) {
                    var i = line.indexOf(': ');
                    if (i > 0)
                        action(line.substr(0, i), line.substr(i + 2));
                });
            }
        }
        Util.forEachResponseHeader = forEachResponseHeader;
        function decodeErrorMessage(errorMessage) {
            if (errorMessage)
                errorMessage = decodeURIComponent(errorMessage.replace(/[+]/g, " "));
            return errorMessage;
        }
        Util.decodeErrorMessage = decodeErrorMessage;
        function networkError(client, meth, filename) {
            var e = new Error(Util.fmt("cannot {0} '{1}'; status={2}", meth, filename, client.status));
            e.status = client.status;
            try {
                e.errorMessage = decodeErrorMessage(client.getResponseHeader("ErrorMessage"));
            }
            catch (e) {
            }
            if (e.errorMessage == undefined) {
                e.errorMessage = client.responseText;
            }
            if (client.status == 404 || client.status == 403 || client.status == 409 || client.status == 400) {
            }
            else {
                e.isNetworkError = 1;
            }
            return e;
        }
        function httpGetTextAsync(filename) {
            return Util.httpRequestAsync(toAbsoluteUrl(filename), "get", undefined);
        }
        Util.httpGetTextAsync = httpGetTextAsync;
        function httpPostRealJsonAsync(url, body) {
            return Util.httpRequestAsync(url, "POST", JSON.stringify(body), "application/json;charset=UTF-8").then(function (s) { return s ? JSON.parse(s) : {}; });
        }
        Util.httpPostRealJsonAsync = httpPostRealJsonAsync;
        function parseJsonWithHack(s) {
            if (!s)
                return {};
            try {
                return JSON.parse(s);
            }
            catch (e) {
                return JSON.parse(s.replace(/":NaN,"/g, '":0,"'));
            }
        }
        Util.parseJsonWithHack = parseJsonWithHack;
        function httpPostJsonAsync(url, body) {
            return Util.httpRequestAsync(url, "POST", JSON.stringify(body), TDev.Cloud.lite ? "application/json;charset=UTF-8" : "text/plain;charset=UTF-8").then(function (s) { return s ? parseJsonWithHack(s) : {}; });
        }
        Util.httpPostJsonAsync = httpPostJsonAsync;
        function httpPostTextAsync(url, body) {
            return Util.httpRequestAsync(url, "POST", body);
        }
        Util.httpPostTextAsync = httpPostTextAsync;
        function httpDeleteAsync(url) {
            return Util.httpRequestAsync(url, "DELETE");
        }
        Util.httpDeleteAsync = httpDeleteAsync;
        Util.httpRequestAsync = function (url, method, body, contentType) {
            if (method === void 0) { method = "GET"; }
            if (body === void 0) { body = undefined; }
            if (contentType === void 0) { contentType = null; }
            if (TDev.Cloud.isOffline())
                return TDev.Cloud.offlineErrorAsync();
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                var client;
                var resolved = false;
                function innerSuccess() {
                    onSuccess(client.responseText);
                }
                function innerError() {
                    onError(networkError(client, method, url));
                }
                function ready() {
                    if (resolved)
                        return;
                    if (client.readyState == 4) {
                        resolved = true;
                        if (client.status == 200)
                            innerSuccess();
                        else
                            innerError();
                    }
                }
                if (HttpLog.enabled)
                    HttpLog.log({
                        url: url,
                        method: method,
                        contentText: body,
                        headers: contentType ? [{ name: "Content-Type", value: contentType }] : []
                    });
                client = new XMLHttpRequest();
                client.onreadystatechange = ready;
                client.open(method, url);
                if (contentType)
                    client.setRequestHeader("Content-Type", contentType);
                if (body === undefined)
                    client.send();
                else
                    client.send(body);
            });
        };
        function betaCheck(cond, msg) {
            if (msg === void 0) { msg = ""; }
            if (TDev.isBeta)
                check(cond, msg);
        }
        Util.betaCheck = betaCheck;
        function check(cond, msg) {
            if (msg === void 0) { msg = ""; }
            try {
                if (!cond)
                    throw Error("check failed: " + msg);
            }
            catch (e) {
                try {
                    reportError("check", e, false);
                }
                catch (e) {
                }
            }
            return cond;
        }
        Util.check = check;
        function assert(cond, msg) {
            if (msg === void 0) { msg = ""; }
            if (!cond)
                throw Error("assertion failed: " + msg);
        }
        Util.assert = assert;
        function assertCode(cond) {
            if (!cond) {
                var e = Error("assertion failed");
                e.includeSource = true;
                throw e;
            }
        }
        Util.assertCode = assertCode;
        function die() {
            throw Error("OOPS");
        }
        Util.die = die;
        function oops(msg, attachments) {
            if (attachments === void 0) { attachments = null; }
            var err = new Error("OOPS: " + msg);
            if (attachments)
                err.bugAttachments = attachments;
            throw err;
        }
        Util.oops = oops;
        function abstract() {
            oops("this method should have been overriden");
            return undefined;
        }
        Util.abstract = abstract;
        function initHtmlExtensions() {
            if (window.performance && window.performance.now)
                Util.perfNow = function () { return window.performance.now(); };
            else
                Util.perfNow = function () { return Date.now(); };
            TDev.Promise.errorHandler = Util.reportError;
            TDev.Promise.checkHandler = function (msg) { return Util.check(false, msg); };
            var pelt = Element.prototype;
            pelt.removeAllChildren = function () {
                while (this.hasChildNodes()) {
                    this.removeChild(this.firstChild);
                }
            };
            pelt.removeSelf = function () {
                if (!!this.parentNode)
                    this.parentNode.removeChild(this);
            };
            pelt.setFlag = function (name, v) {
                this.setAttribute("data-" + name, v ? "yes" : "no");
            };
            pelt.getFlag = function (name) {
                var s = this.getAttribute("data-" + name);
                if (!s || s == "no")
                    return false;
                else
                    return true;
            };
            pelt.appendChildren = function (children) {
                var th = this;
                if (!children)
                    return;
                if (Array.isArray(children))
                    for (var i = 0; i < children.length; ++i)
                        th.appendChildren(children[i]);
                else if (typeof children === "string")
                    th.appendChild(TDev.text(children));
                else
                    th.appendChild(children);
            };
            pelt.setChildren = function (children) {
                this.removeAllChildren();
                this.appendChildren(children);
            };
            pelt.setChildrenIfNeeded = function (children) {
                if (Array.isArray(children) && children.length == this.childNodes.length) {
                    var ok = true;
                    for (var i = 0; i < children.length; ++i) {
                        if (this.childNodes[i] !== children[i]) {
                            ok = false;
                            break;
                        }
                    }
                    if (ok)
                        return;
                }
                this.removeAllChildren();
                this.appendChildren(children);
            };
            pelt.setPosition = function (x, y, w, h) {
                var accentBox = this;
                accentBox.style.left = x + "px";
                accentBox.style.top = y + "px";
                if (w)
                    accentBox.style.width = w + "px";
                if (h)
                    accentBox.style.height = h + "px";
            };
            pelt.offsetPosition = function () {
                return {
                    top: this.offsetTop,
                    bot: this.offsetTop + this.offsetHeight,
                    left: this.offsetLeft,
                    right: this.offsetLeft + this.offsetWidth,
                    width: this.offsetWidth,
                    height: this.offsetHeight
                };
            };
            setupTimeoutZero();
            Error.stackTraceLimit = 64;
            TDev.Browser.setInnerHTML = function (el, html) {
                el.innerHTML = TDev.HTML.sanitizeHTML(html);
            };
        }
        Util.initHtmlExtensions = initHtmlExtensions;
        var zeroTimeoutFunctions;
        var zeroTimeoutName = "tdev-zero-timeout-message";
        function setZeroTimeout(cb) {
            zeroTimeoutFunctions.push(function () {
                if (Util.eventLogging)
                    Util.log("executing zero timeout " + cb.toString());
                try {
                    cb();
                }
                catch (err) {
                    Util.reportError("zero-timeout-" + cb.toString(), err);
                }
            });
            window.postMessage(zeroTimeoutName, "*");
        }
        function setupTimeoutZero() {
            zeroTimeoutFunctions = [];
            window.addEventListener("message", function (ev) {
                if (ev.source == window && ev.data == zeroTimeoutName) {
                    ev.stopPropagation();
                    while (zeroTimeoutFunctions.length > 0) {
                        var f = zeroTimeoutFunctions.shift();
                        f();
                    }
                }
            }, true);
        }
        function initGenericExtensions() {
            var arr = Array.prototype;
            arr.peek = function () {
                return this.length === 0 ? undefined : this[this.length - 1];
            };
            arr.collect = function (fn) {
                var res = [];
                for (var i = 0; i < this.length; ++i) {
                    var tmp = fn(this[i]);
                    for (var j = 0; j < tmp.length; ++j) {
                        res.push(tmp[j]);
                    }
                }
                return res;
            };
            arr.pushRange = function (other) {
                for (var i = 0; i < other.length; ++i)
                    this.push(other[i]);
            };
            arr.max = function () {
                return Math.max.apply(null, this);
            };
            arr.min = function () {
                return Math.min.apply(null, this);
            };
            arr.spliceArr = function (f, t, a) {
                return Array.prototype.splice.apply(this, [f, t].concat(a));
            };
            arr.stableSortObjs = function (cmp) {
                for (var i = 0; i < this.length; ++i)
                    this[i].__stableSortIdx = i;
                this.sort(function (a, b) {
                    var r = cmp(a, b);
                    if (r == 0)
                        return a.__stableSortIdx - b.__stableSortIdx;
                    else
                        return r;
                });
                for (var i = 0; i < this.length; ++i)
                    delete this[i].__stableSortIdx;
            };
            arr.stableSorted = function (cmp) {
                var idx = new Array(this.length);
                for (var i = 0; i < idx.length; ++i)
                    idx[i] = i;
                var t = this;
                idx.sort(function (a, b) {
                    var r = cmp(t[a], t[b]);
                    if (r == 0)
                        return a - b;
                    else
                        return r;
                });
                for (var i = 0; i < idx.length; ++i)
                    idx[i] = t[idx[i]];
                return idx;
            };
            arr.stableSort = function (cmp) {
                var idx = this.stableSorted(cmp);
                for (var i = 0; i < this.length; ++i)
                    this[i] = idx[i];
            };
            arr.clear = function () {
                return this.splice(0, this.length);
            };
            var str = String.prototype;
            str.startsWith = function (str) {
                this.slice(0, str.length) == str;
            };
            str.endsWith = function (str) {
                this.slice(-str.length) == str;
            };
            str.count = function () {
                return this.length;
            };
            str.at = function (idx) {
                return this.charAt(idx);
            };
        }
        Util.initGenericExtensions = initGenericExtensions;
        function intersectArraysVA(arrays) {
            if (!arrays.length)
                return [];
            arrays.sort(function (a, b) { return a.length - b.length; });
            var res = [];
            arrays[0].forEach(function (e) {
                for (var i = 1; i < arrays.length; ++i)
                    if (arrays[i].indexOf(e) < 0)
                        return;
                res.push(e);
            });
            return res;
        }
        Util.intersectArraysVA = intersectArraysVA;
        function concatArraysVA(arrays) {
            var res = [];
            for (var i = 0; i < arrays.length; ++i) {
                var a = arrays[i];
                for (var j = 0; j < a.length; ++j)
                    res.push(a[j]);
            }
            return res;
        }
        Util.concatArraysVA = concatArraysVA;
        function concatArrays() {
            var arrays = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i - 0] = arguments[_i];
            }
            return concatArraysVA(arrays);
        }
        Util.concatArrays = concatArrays;
        function startsWith(s, pref) {
            if (!pref)
                return true;
            if (!s || s.length < pref.length)
                return false;
            return s.slice(0, pref.length) == pref;
        }
        Util.startsWith = startsWith;
        function stableSum(v) {
            var sum = 0.0;
            var c = 0.0;
            for (var i = 0; i < v.length; i++) {
                var y = v[i] - c;
                var t = sum + y;
                c = (t - sum) - y;
                sum = t;
            }
            return sum;
        }
        Util.stableSum = stableSum;
        function initCscript() {
            TDev.Browser.cscript = true;
            var arr = Array.prototype;
            arr.map = function (f) {
                var res = [];
                for (var i = 0; i < this.length; ++i) {
                    var tmp = f(this[i], i);
                    res.push(tmp);
                }
                return res;
            };
            arr.forEach = function (f) {
                for (var i = 0; i < this.length; ++i) {
                    f(this[i], i);
                }
            };
            arr.filter = function (f) {
                var res = [];
                for (var i = 0; i < this.length; ++i) {
                    if (f(this[i], i))
                        res.push(this[i]);
                }
                return res;
            };
            var obj = Object.prototype;
            obj.create = function (o) {
                function F() {
                }
                F.prototype = o;
                return new F();
            };
            Object.keys = function (o) {
                var res = [];
                for (var k in o) {
                    if (o.hasOwnProperty(k))
                        res.push(k);
                }
                return res;
            };
        }
        Util.initCscript = initCscript;
        function values(o) {
            return Object.keys(o).map(function (k) { return o[k]; });
        }
        Util.values = values;
        function userError(msg, pc, statusCode) {
            if (pc === void 0) { pc = ""; }
            var e = new Error(msg);
            e.programCounter = pc;
            e.isUserError = true;
            if (statusCode)
                e.statusCode = 500;
            throw e;
        }
        Util.userError = userError;
        function syntaxError(msg, declName) {
            var e = new Error(msg);
            e.syntaxErrorDeclName = declName;
            e.isUserError = true;
            throw e;
        }
        Util.syntaxError = syntaxError;
        function indexCheck(i, length) {
            i = Math.floor(i);
            if (i < 0 || i >= length)
                Util.userError("index " + i + " out of bounds (collection size: " + length + ")");
            return i;
        }
        Util.indexCheck = indexCheck;
        function isOOB(i, length) {
            i = Math.floor(i);
            return (i < 0 || i >= length);
        }
        Util.isOOB = isOOB;
        function notImplementedYet(s, apiName) {
            if (s.rt.devMode)
                Util.userError(apiName + " not implemented yet");
            return undefined;
        }
        Util.notImplementedYet = notImplementedYet;
        function notSupported(s, apiName) {
            if (s.rt.devMode)
                Util.userError(apiName + " is not supported in this version of TouchDevelop");
            return undefined;
        }
        Util.notSupported = notSupported;
        function guidGen() {
            function f() {
                return (TDev.Random.uint32() | 0x10000).toString(16).slice(-4);
            }
            return f() + f() + "-" + f() + "-4" + f().slice(-3) + "-" + f() + "-" + f() + f() + f();
        }
        Util.guidGen = guidGen;
        function guidToAlpha(guid) {
            var nohyphens = guid.replace(/-/g, 'z');
            var nonumbers = nohyphens.replace(/[0-9]/g, function (s) {
                var digit = s.charCodeAt(0) - ("0".charCodeAt(0)) + ("m".charCodeAt(0));
                return String.fromCharCode(digit);
            });
            return nonumbers;
        }
        Util.guidToAlpha = guidToAlpha;
        Util.colors = [
            "#F4BBFF",
            "#FF91A4",
            "#FF00FF",
            "#E3256B",
            "#800080",
            "#9955BB",
            "#A52A2A",
            "#B7410E",
            "#E25822",
            "#FF0038",
            "#FF2800",
            "#FF7518",
            "#FFA500",
            "#FFDF00",
            "#FDEE00",
            "#DAA520",
            "#EEDC82",
            "#F5DEB3",
            "#008080",
            "#00008B",
            "#007FFF",
            "#A1CAF1",
            "#90EE90",
            "#008000",
            "#66FF00",
            "#00CC99",
            "#004B49",
            "#85BB65",
            "#ffffff"
        ];
        function svgGravatar(id) {
            var advance = function (hash, v) { return ((hash << 16) + (hash << 6) + v - hash) << 0; };
            var hash = 0;
            for (var i = 0; i < id.length; ++i) {
                hash = advance(hash, id.charCodeAt(i));
            }
            var svg = "";
            for (var x = 0; x < 2; ++x) {
                for (var y = 0; y < 2; ++y) {
                    hash = advance(hash, 0);
                    var n = hash & 0xffff;
                    var idx = n % (Util.colors.length - 1);
                    if (n > 30000)
                        svg += Util.fmt("<circle fill='white' stroke-width='5' stroke='{0}' r='20.5' cx='{1}' cy='{2}'/>", Util.colors[idx], 25 + 50 * x, 25 + 50 * y);
                    else
                        svg += Util.fmt("<circle fill='{0}' r='23' cx='{1}' cy='{2}'/>", Util.colors[idx], 25 + 50 * x, 25 + 50 * y);
                }
            }
            return TDev.SVG.svgBoilerPlate('0 0 100 100', svg);
        }
        Util.svgGravatar = svgGravatar;
        function base64Encode(_input) {
            function _base64(_x) {
                return ((_x <= 0x19) ? (_x + 0x41) : ((_x <= 0x33) ? (_x + 0x47) : ((_x <= 0x3D) ? (_x - 0x4) : ((_x == 0x3E) ? 0x2B : 0x2F))));
            }
            ;
            var result = new Array();
            var _q = 0x0;
            var _r = 0x0;
            for (var _i = 0; _i < _input.length; _i++) {
                var _x = _input.charCodeAt(_i);
                if ((_x > 0xFF)) {
                    return undefined;
                }
                else if ((_q == 0x0)) {
                    result.push(String.fromCharCode(_base64((_x >> 0x2))));
                    _q = 0x1;
                    _r = ((_x & 0x3) << 0x4);
                }
                else if ((_q == 0x1)) {
                    result.push(String.fromCharCode(_base64((_r | (_x >> 0x4)))));
                    _q = 0x2;
                    _r = ((_x & 0xF) << 0x2);
                }
                else if ((_q == 0x2)) {
                    result.push(String.fromCharCode(_base64((_r | (_x >> 0x6))), _base64((_x & 0x3F))));
                    _q = 0x0;
                    _r = 0x0;
                }
            }
            if ((_q == 0x1)) {
                result.push(String.fromCharCode(_base64(_r), 0x3D, 0x3D));
            }
            else if ((_q == 0x2)) {
                result.push(String.fromCharCode(_base64(_r), 0x3D));
            }
            return result.join('');
        }
        Util.base64Encode = base64Encode;
        function base64EncodeBytes(_input) {
            function _base64(_x) {
                return ((_x <= 0x19) ? (_x + 0x41) : ((_x <= 0x33) ? (_x + 0x47) : ((_x <= 0x3D) ? (_x - 0x4) : ((_x == 0x3E) ? 0x2B : 0x2F))));
            }
            ;
            var result = new Array();
            var _q = 0x0;
            var _r = 0x0;
            for (var _i = 0; _i < _input.length; _i++) {
                var _x = _input[_i];
                if ((_x > 0xFF)) {
                    return undefined;
                }
                else if ((_q == 0x0)) {
                    result.push(String.fromCharCode(_base64((_x >> 0x2))));
                    _q = 0x1;
                    _r = ((_x & 0x3) << 0x4);
                }
                else if ((_q == 0x1)) {
                    result.push(String.fromCharCode(_base64((_r | (_x >> 0x4)))));
                    _q = 0x2;
                    _r = ((_x & 0xF) << 0x2);
                }
                else if ((_q == 0x2)) {
                    result.push(String.fromCharCode(_base64((_r | (_x >> 0x6))), _base64((_x & 0x3F))));
                    _q = 0x0;
                    _r = 0x0;
                }
            }
            if ((_q == 0x1)) {
                result.push(String.fromCharCode(_base64(_r), 0x3D, 0x3D));
            }
            else if ((_q == 0x2)) {
                result.push(String.fromCharCode(_base64(_r), 0x3D));
            }
            return result.join('');
        }
        Util.base64EncodeBytes = base64EncodeBytes;
        function stringToUint8Array(input) {
            var len = input.length;
            var res = new Uint8Array(len);
            for (var i = 0; i < len; ++i)
                res[i] = input.charCodeAt(i) & 0xff;
            return res;
        }
        Util.stringToUint8Array = stringToUint8Array;
        function uint8ArrayToString(input) {
            var len = input.length;
            var res = "";
            for (var i = 0; i < len; ++i)
                res += String.fromCharCode(input[i]);
            return res;
        }
        Util.uint8ArrayToString = uint8ArrayToString;
        function base64Decode(_input) {
            function _D(_x) {
                return ((_x == 0x2F) ? 0x3F : ((_x == 0x2B) ? 0x3E : ((_x <= 0x39) ? (_x + 0x4) : ((_x <= 0x5A) ? (_x - 0x41) : (_x - 0x47)))));
            }
            ;
            function _Bits(m, n, c) {
                var mask = 0;
                for (var i = 0; i <= (m - n); i++) {
                    mask = (mask << 1) + 1;
                }
                return (c >> n) & mask;
            }
            ;
            var result = new Array();
            var _q0 = true;
            var _q1 = false;
            var _q2 = false;
            var _q3 = false;
            var _q4 = false;
            var _q5 = false;
            var _r = 0x0;
            var rx = new RegExp("^([A-Za-z0-9+/=])$");
            for (var _i = 0; _i < _input.length; _i++) {
                var _x = _input.charCodeAt(_i);
                if ((!String.fromCharCode(_x).match(rx) || ((_x == 0x3D) && (_q0 || _q1)) || ((_x == 0x3D) && !(_r == 0x0)) || (!(_x == 0x3D) && _q4) || _q5)) {
                    return undefined;
                }
                else if (_q0) {
                    _r = (_D(_x) << 0x2);
                    _q0 = false;
                    _q1 = true;
                    _q2 = false;
                    _q3 = false;
                    _q4 = false;
                    _q5 = false;
                }
                else if (_q1) {
                    result.push(String.fromCharCode((_r | _Bits(0x5, 0x4, _D(_x)))));
                    _r = ((_D(_x) & 0xF) << 0x4);
                    _q0 = false;
                    _q1 = false;
                    _q2 = true;
                    _q3 = false;
                    _q4 = false;
                    _q5 = false;
                }
                else if (_q2) {
                    if ((_x == 0x3D)) {
                        _r = 0x0;
                        _q0 = false;
                        _q1 = false;
                        _q2 = false;
                        _q3 = false;
                        _q4 = true;
                        _q5 = false;
                    }
                    else {
                        result.push(String.fromCharCode((_r | _Bits(0x5, 0x2, _D(_x)))));
                        _r = ((_D(_x) & 0x3) << 0x6);
                        _q0 = false;
                        _q1 = false;
                        _q2 = false;
                        _q3 = true;
                        _q4 = false;
                        _q5 = false;
                    }
                }
                else if (_q3) {
                    if ((_x == 0x3D)) {
                        _r = 0x0;
                        _q0 = false;
                        _q1 = false;
                        _q2 = false;
                        _q3 = false;
                        _q4 = false;
                        _q5 = true;
                    }
                    else {
                        result.push(String.fromCharCode((_r | _D(_x))));
                        _r = 0x0;
                        _q0 = true;
                        _q1 = false;
                        _q2 = false;
                        _q3 = false;
                        _q4 = false;
                        _q5 = false;
                    }
                }
                else if (_q4) {
                    _r = 0x0;
                    _q0 = false;
                    _q1 = false;
                    _q2 = false;
                    _q3 = false;
                    _q4 = false;
                    _q5 = true;
                }
            }
            if (!(_q0 || _q5)) {
                return undefined;
            }
            return result.join('');
        }
        Util.base64Decode = base64Decode;
        function splitDataUrl(url) {
            if (!!url) {
                var match = /^data:([^;]+);base64,/.exec(url);
                if (!!match)
                    return {
                        contentType: match[1],
                        content: url.substr(match[0].length)
                    };
            }
            return null;
        }
        Util.splitDataUrl = splitDataUrl;
        function base64EncodeToBase64(url, mimeType) {
            var prefix = 'data:' + mimeType + ';base64,';
            if (!!url && TDev.RT.String_.starts_with(url, prefix))
                return url.substr(prefix.length);
            return undefined;
        }
        Util.base64EncodeToBase64 = base64EncodeToBase64;
        function decodeDataURL(url, mimeType) {
            if (mimeType === void 0) { mimeType = null; }
            if (!mimeType) {
                var m = url.match(/^data:([^;]+);base64,/);
                if (!m)
                    return undefined;
                mimeType = m[1];
            }
            var prefix = 'data:' + mimeType + ';base64,';
            var binaryEncoded = url.substr(prefix.length);
            var binary = atob(binaryEncoded);
            var arrayBuffer = new ArrayBuffer(binary.length);
            var array = new Uint8Array(arrayBuffer);
            for (var i = 0; i < binary.length; i++)
                array[i] = binary.charCodeAt(i) & 0xff;
            return array;
        }
        Util.decodeDataURL = decodeDataURL;
        function hex1(a) {
            var h = a & 0xF;
            h = (h <= 9 ? h + 48 : h + 55);
            return h;
        }
        ;
        function hex2(a0, a1) {
            var h = (a1 >> (4 * a0)) & 0xF;
            h = (h <= 9 ? h + 48 : h + 55);
            return h;
        }
        ;
        var entities = undefined;
        var entitiesRx = undefined;
        function htmlUnescape(_w) {
            if (!_w)
                return _w;
            if (!entities) {
                entities = {};
                entities['nbsp'] = ' ';
                entities['iexcl'] = '¬°';
                entities['cent'] = '¬¢';
                entities['pound'] = '¬£';
                entities['curren'] = '¬§';
                entities['yen'] = '¬•';
                entities['brvbar'] = '¬¶';
                entities['sect'] = '¬ß';
                entities['uml'] = '¬®';
                entities['copy'] = '¬©';
                entities['ordf'] = '¬™';
                entities['laquo'] = '¬´';
                entities['not'] = '¬¨';
                entities['shy'] = '¬≠';
                entities['reg'] = '¬Æ';
                entities['macr'] = '¬Ø';
                entities['deg'] = '¬∞';
                entities['plusmn'] = '¬±';
                entities['sup2'] = '¬≤';
                entities['sup3'] = '¬≥';
                entities['acute'] = '¬¥';
                entities['micro'] = '¬µ';
                entities['para'] = '¬∂';
                entities['middot'] = '¬∑';
                entities['cedil'] = '¬∏';
                entities['sup1'] = '¬π';
                entities['ordm'] = '¬∫';
                entities['raquo'] = '¬ª';
                entities['frac14'] = '¬º';
                entities['frac12'] = '¬Ω';
                entities['frac34'] = '¬æ';
                entities['iquest'] = '¬ø';
                entities['times'] = '√ó';
                entities['divide'] = '√∑';
                entities['Agrave'] = '√Ä';
                entities['Aacute'] = '√Å';
                entities['Acirc'] = '√Ç';
                entities['Atilde'] = '√É';
                entities['Auml'] = '√Ñ';
                entities['Aring'] = '√Ö';
                entities['AElig'] = '√Ü';
                entities['Ccedil'] = '√á';
                entities['Egrave'] = '√à';
                entities['Eacute'] = '√â';
                entities['Ecirc'] = '√ä';
                entities['Euml'] = '√ã';
                entities['Igrave'] = '√å';
                entities['Iacute'] = '√ç';
                entities['Icirc'] = '√é';
                entities['Iuml'] = '√è';
                entities['ETH'] = '√ê';
                entities['Ntilde'] = '√ë';
                entities['Ograve'] = '√í';
                entities['Oacute'] = '√ì';
                entities['Ocirc'] = '√î';
                entities['Otilde'] = '√ï';
                entities['Ouml'] = '√ñ';
                entities['Oslash'] = '√ò';
                entities['Ugrave'] = '√ô';
                entities['Uacute'] = '√ö';
                entities['Ucirc'] = '√õ';
                entities['Uuml'] = '√ú';
                entities['Yacute'] = '√ù';
                entities['THORN'] = '√û';
                entities['szlig'] = '√ü';
                entities['agrave'] = '√†';
                entities['aacute'] = '√°';
                entities['acirc'] = '√¢';
                entities['atilde'] = '√£';
                entities['auml'] = '√§';
                entities['aring'] = '√•';
                entities['aelig'] = '√¶';
                entities['ccedil'] = '√ß';
                entities['egrave'] = '√®';
                entities['eacute'] = '√©';
                entities['ecirc'] = '√™';
                entities['euml'] = '√´';
                entities['igrave'] = '√¨';
                entities['iacute'] = '√≠';
                entities['icirc'] = '√Æ';
                entities['iuml'] = '√Ø';
                entities['eth'] = '√∞';
                entities['ntilde'] = '√±';
                entities['ograve'] = '√≤';
                entities['oacute'] = '√≥';
                entities['ocirc'] = '√¥';
                entities['otilde'] = '√µ';
                entities['ouml'] = '√∂';
                entities['oslash'] = '√∏';
                entities['ugrave'] = '√π';
                entities['uacute'] = '√∫';
                entities['ucirc'] = '√ª';
                entities['uuml'] = '√º';
                entities['yacute'] = '√Ω';
                entities['thorn'] = '√æ';
                entities['yuml'] = '√ø';
                entitiesRx = new RegExp('&(' + Object.keys(entities).join('|') + ');', 'gim');
            }
            _w = _w.replace(entitiesRx, function (m, args) {
                return entities[args];
            });
            function _IsDecDig(_x) {
                return ((0x30 <= _x) && (_x <= 0x39));
            }
            ;
            function _F(_x, _y) {
                return ((0xA * _x) + (_y - 0x30));
            }
            ;
            function _D1(_x) {
                return ((_x % 0xA) + 0x30);
            }
            ;
            function _D2(_x) {
                return (((_x / 0xA) % 0xA) + 0x30);
            }
            ;
            function _D3(_x) {
                return (((_x / 0x64) % 0xA) + 0x30);
            }
            ;
            function _D4(_x) {
                return (((_x / 0x3E8) % 0xA) + 0x30);
            }
            ;
            function _D5(_x) {
                return (((_x / 0x2710) % 0xA) + 0x30);
            }
            ;
            function _IsHexDig(_x) {
                return (((0x30 <= _x) && (_x <= 0x39)) || ((0x41 <= _x) && (_x <= 0x46)));
            }
            ;
            function _Fx(_x, _y) {
                return ((_x << 0x4) | (_IsDecDig(_y) ? (_y - 0x30) : (_y - 0x37)));
            }
            ;
            function _H1(_x) {
                return (_IsDec((_x & 0xF)) ? ((_x & 0xF) + 0x30) : ((_x & 0xF) + 0x37));
            }
            ;
            function _IsDec(_x) {
                return ((0x0 <= _x) && (_x <= 0x9));
            }
            ;
            function _H2(_x) {
                return (_IsDec(((_x >> 0x4) & 0xF)) ? (((_x >> 0x4) & 0xF) + 0x30) : (((_x >> 0x4) & 0xF) + 0x37));
            }
            ;
            function _H3(_x) {
                return (_IsDec(((_x >> 0x8) & 0xF)) ? (((_x >> 0x8) & 0xF) + 0x30) : (((_x >> 0x8) & 0xF) + 0x37));
            }
            ;
            function _H4(_x) {
                return (_IsDec(((_x >> 0xC) & 0xF)) ? (((_x >> 0xC) & 0xF) + 0x30) : (((_x >> 0xC) & 0xF) + 0x37));
            }
            ;
            var result = new Array();
            var _q = 0x0;
            var _d = 0x0;
            for (var _i = 0; _i < _w.length; _i++) {
                var _c = _w.charCodeAt(_i);
                if (((_q == 0x0) && (_c == 0x26))) {
                    _q = 0x26;
                }
                else if ((_q == 0x0)) {
                    result.push(String.fromCharCode(_c));
                }
                else if (((_q == 0x26) && (_c == 0x23))) {
                    _q = 0x23;
                }
                else if (((_q == 0x26) && (_c == 0x61))) {
                    _q = 0x61;
                }
                else if (((_q == 0x26) && (_c == 0x71))) {
                    _q = 0x71;
                }
                else if (((_q == 0x26) && (_c == 0x6C))) {
                    _q = 0x6C;
                }
                else if (((_q == 0x26) && (_c == 0x67))) {
                    _q = 0x67;
                }
                else if (((_q == 0x26) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26));
                }
                else if ((_q == 0x26)) {
                    result.push(String.fromCharCode(0x26, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x23) && (_c == 0x58))) {
                    _q = 0x58;
                }
                else if (((_q == 0x23) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23));
                    _q = 0x26;
                }
                else if (((_q == 0x23) && _IsDecDig(_c))) {
                    _q = 0x1;
                    _d = (_c - 0x30);
                }
                else if ((_q == 0x23)) {
                    result.push(String.fromCharCode(0x26, 0x23, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x1) && _IsDecDig(_c))) {
                    _q = 0x2;
                    _d = _F(_d, _c);
                }
                else if (((_q == 0x1) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x1) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, _D1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x1)) {
                    result.push(String.fromCharCode(0x26, 0x23, _D1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x2) && _IsDecDig(_c))) {
                    _q = 0x3;
                    _d = _F(_d, _c);
                }
                else if (((_q == 0x2) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x2) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, _D2(_d), _D1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x2)) {
                    result.push(String.fromCharCode(0x26, 0x23, _D2(_d), _D1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x3) && _IsDecDig(_c))) {
                    _q = 0x4;
                    _d = _F(_d, _c);
                }
                else if (((_q == 0x3) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x3) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, _D3(_d), _D2(_d), _D1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x3)) {
                    result.push(String.fromCharCode(0x26, 0x23, _D3(_d), _D2(_d), _D1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x4) && _IsDecDig(_c) && (_F(_d, _c) <= 0xFFFF))) {
                    _q = 0x5;
                    _d = _F(_d, _c);
                }
                else if (((_q == 0x4) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x4) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, _D4(_d), _D3(_d), _D2(_d), _D1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x4)) {
                    result.push(String.fromCharCode(0x26, 0x23, _D4(_d), _D3(_d), _D2(_d), _D1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x5) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x5) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, _D5(_d), _D4(_d), _D3(_d), _D2(_d), _D1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x5)) {
                    result.push(String.fromCharCode(0x26, 0x23, _D5(_d), _D4(_d), _D3(_d), _D2(_d), _D1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x58) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58));
                    _q = 0x26;
                }
                else if (((_q == 0x58) && _IsHexDig(_c))) {
                    _q = 0x6;
                    _d = _Fx(0x0, _c);
                }
                else if ((_q == 0x58)) {
                    _q = 0x0;
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _c));
                    _d = 0x0;
                }
                else if (((_q == 0x6) && _IsHexDig(_c))) {
                    _q = 0x7;
                    _d = _Fx(_d, _c);
                }
                else if (((_q == 0x6) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x6) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x6)) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x7) && _IsHexDig(_c))) {
                    _q = 0x8;
                    _d = _Fx(_d, _c);
                }
                else if (((_q == 0x7) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x7) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H2(_d), _H1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x7)) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H2(_d), _H1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x8) && _IsHexDig(_c))) {
                    _q = 0x9;
                    _d = _Fx(_d, _c);
                }
                else if (((_q == 0x8) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x8) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H3(_d), _H2(_d), _H1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x8)) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H3(_d), _H2(_d), _H1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x9) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(_d));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x9) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H4(_d), _H3(_d), _H2(_d), _H1(_d)));
                    _q = 0x26;
                    _d = 0x0;
                }
                else if ((_q == 0x9)) {
                    result.push(String.fromCharCode(0x26, 0x23, 0x58, _H4(_d), _H3(_d), _H2(_d), _H1(_d), _c));
                    _q = 0x0;
                    _d = 0x0;
                }
                else if (((_q == 0x6C) && (_c == 0x74))) {
                    _q = 0x4C;
                }
                else if (((_q == 0x6C) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x6C));
                    _q = 0x26;
                }
                else if ((_q == 0x6C)) {
                    result.push(String.fromCharCode(0x26, 0x6C, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x4C) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(0x3C));
                    _q = 0x0;
                }
                else if (((_q == 0x4C) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x6C, 0x74));
                    _q = 0x26;
                }
                else if ((_q == 0x4C)) {
                    result.push(String.fromCharCode(0x26, 0x6C, 0x74, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x67) && (_c == 0x74))) {
                    _q = 0x47;
                }
                else if (((_q == 0x67) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x67));
                    _q = 0x26;
                }
                else if ((_q == 0x67)) {
                    result.push(String.fromCharCode(0x26, 0x67, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x47) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(0x3E));
                    _q = 0x0;
                }
                else if (((_q == 0x47) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x67, 0x74));
                    _q = 0x26;
                }
                else if ((_q == 0x47)) {
                    result.push(String.fromCharCode(0x26, 0x67, 0x74, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x71) && (_c == 0x75))) {
                    _q = 0x75;
                }
                else if (((_q == 0x71) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x71));
                    _q = 0x26;
                }
                else if ((_q == 0x71)) {
                    result.push(String.fromCharCode(0x26, 0x71, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x75) && (_c == 0x6F))) {
                    _q = 0x6F;
                }
                else if (((_q == 0x75) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75));
                    _q = 0x26;
                }
                else if ((_q == 0x75)) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x6F) && (_c == 0x74))) {
                    _q = 0x74;
                }
                else if (((_q == 0x6F) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F));
                    _q = 0x26;
                }
                else if ((_q == 0x6F)) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x74) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(0x22));
                    _q = 0x0;
                }
                else if (((_q == 0x74) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F, 0x74));
                    _q = 0x26;
                }
                else if ((_q == 0x74)) {
                    result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F, 0x74, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x61) && (_c == 0x6D))) {
                    _q = 0x6D;
                }
                else if (((_q == 0x61) && (_c == 0x70))) {
                    _q = 0x50;
                }
                else if (((_q == 0x61) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61));
                    _q = 0x26;
                }
                else if ((_q == 0x61)) {
                    result.push(String.fromCharCode(0x26, 0x61, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x6D) && (_c == 0x70))) {
                    _q = 0x70;
                }
                else if (((_q == 0x6D) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x6D));
                    _q = 0x26;
                }
                else if ((_q == 0x6D)) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x6D, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x70) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(0x26));
                    _q = 0x0;
                }
                else if (((_q == 0x70) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x6D, 0x70));
                    _q = 0x26;
                }
                else if ((_q == 0x70)) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x6D, 0x70, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x50) && (_c == 0x6F))) {
                    _q = 0x4F;
                }
                else if (((_q == 0x50) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70));
                    _q = 0x26;
                }
                else if ((_q == 0x50)) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x4F) && (_c == 0x73))) {
                    _q = 0x53;
                }
                else if (((_q == 0x4F) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F));
                    _q = 0x26;
                }
                else if ((_q == 0x4F)) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F, _c));
                    _q = 0x0;
                }
                else if (((_q == 0x53) && (_c == 0x3B))) {
                    result.push(String.fromCharCode(0x27));
                    _q = 0x0;
                }
                else if (((_q == 0x53) && (_c == 0x26))) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F, 0x73));
                    _q = 0x26;
                }
                else if ((_q == 0x53)) {
                    result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F, 0x73, _c));
                    _q = 0x0;
                }
                else if (true) {
                    _q = 0x0;
                    _d = 0x0;
                }
            }
            if ((_q == 0x0)) {
            }
            else if ((_q == 0x26)) {
                result.push(String.fromCharCode(0x26));
            }
            else if ((_q == 0x23)) {
                result.push(String.fromCharCode(0x26, 0x23));
            }
            else if ((_q == 0x58)) {
                result.push(String.fromCharCode(0x26, 0x23, 0x58));
            }
            else if ((_q == 0x1)) {
                result.push(String.fromCharCode(0x26, 0x23, _D1(_d)));
            }
            else if ((_q == 0x2)) {
                result.push(String.fromCharCode(0x26, 0x23, _D2(_d), _D1(_d)));
            }
            else if ((_q == 0x3)) {
                result.push(String.fromCharCode(0x26, 0x23, _D3(_d), _D2(_d), _D1(_d)));
            }
            else if ((_q == 0x4)) {
                result.push(String.fromCharCode(0x26, 0x23, _D4(_d), _D3(_d), _D2(_d), _D1(_d)));
            }
            else if ((_q == 0x5)) {
                result.push(String.fromCharCode(0x26, 0x23, _D5(_d), _D4(_d), _D3(_d), _D2(_d), _D1(_d)));
            }
            else if ((_q == 0x6)) {
                result.push(String.fromCharCode(0x26, 0x23, 0x58, _H1(_d)));
            }
            else if ((_q == 0x7)) {
                result.push(String.fromCharCode(0x26, 0x23, 0x58, _H2(_d), _H1(_d)));
            }
            else if ((_q == 0x8)) {
                result.push(String.fromCharCode(0x26, 0x23, 0x58, _H3(_d), _H2(_d), _H1(_d)));
            }
            else if ((_q == 0x9)) {
                result.push(String.fromCharCode(0x26, 0x23, 0x58, _H4(_d), _H3(_d), _H2(_d), _H1(_d)));
            }
            else if ((_q == 0x6C)) {
                result.push(String.fromCharCode(0x26, 0x6C));
            }
            else if ((_q == 0x4C)) {
                result.push(String.fromCharCode(0x26, 0x6C, 0x74));
            }
            else if ((_q == 0x67)) {
                result.push(String.fromCharCode(0x26, 0x67));
            }
            else if ((_q == 0x47)) {
                result.push(String.fromCharCode(0x26, 0x67, 0x74));
            }
            else if ((_q == 0x71)) {
                result.push(String.fromCharCode(0x26, 0x71));
            }
            else if ((_q == 0x75)) {
                result.push(String.fromCharCode(0x26, 0x71, 0x75));
            }
            else if ((_q == 0x6F)) {
                result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F));
            }
            else if ((_q == 0x74)) {
                result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F, 0x74));
            }
            else if ((_q == 0x61)) {
                result.push(String.fromCharCode(0x26, 0x61));
            }
            else if ((_q == 0x6D)) {
                result.push(String.fromCharCode(0x26, 0x61, 0x6D));
            }
            else if ((_q == 0x70)) {
                result.push(String.fromCharCode(0x26, 0x61, 0x6D, 0x70));
            }
            else if ((_q == 0x50)) {
                result.push(String.fromCharCode(0x26, 0x61, 0x70));
            }
            else if ((_q == 0x4F)) {
                result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F));
            }
            else if ((_q == 0x53)) {
                result.push(String.fromCharCode(0x26, 0x61, 0x70, 0x6F, 0x73));
            }
            else if (true) {
            }
            return result.join('');
        }
        Util.htmlUnescape = htmlUnescape;
        function htmlEscape(_input) {
            if (!_input)
                return _input;
            var result = new Array();
            var _HS = false;
            var _r = 0x0;
            for (var _i = 0; _i < _input.length; _i++) {
                var _x = _input.charCodeAt(_i);
                if (!_HS) {
                    if (String.fromCharCode(_x).match(/^([\x20\x21\x23-\x25\x28-\x3B\x3D\x3F-\x7E\xA1-\xAC\xAE-\u036F])$/)) {
                        result.push(String.fromCharCode(_x));
                    }
                    else {
                        if ((_x == 0x22)) {
                            result.push(String.fromCharCode(0x26, 0x71, 0x75, 0x6F, 0x74, 0x3B));
                        }
                        else {
                            if ((_x == 0x26)) {
                                result.push(String.fromCharCode(0x26, 0x61, 0x6D, 0x70, 0x3B));
                            }
                            else {
                                if ((_x == 0x3C)) {
                                    result.push(String.fromCharCode(0x26, 0x6C, 0x74, 0x3B));
                                }
                                else {
                                    if ((_x == 0x3E)) {
                                        result.push(String.fromCharCode(0x26, 0x67, 0x74, 0x3B));
                                    }
                                    else {
                                        if ((_x < 0x10)) {
                                            result.push(String.fromCharCode(0x26, 0x23, 0x58, hex2(0x0, _x), 0x3B));
                                        }
                                        else {
                                            if ((_x < 0x100)) {
                                                result.push(String.fromCharCode(0x26, 0x23, 0x58, hex2(0x1, _x), hex2(0x0, _x), 0x3B));
                                            }
                                            else {
                                                if ((_x < 0x1000)) {
                                                    result.push(String.fromCharCode(0x26, 0x23, 0x58, hex2(0x2, _x), hex2(0x1, _x), hex2(0x0, _x), 0x3B));
                                                }
                                                else {
                                                    if (((0xD800 <= _x) && (_x <= 0xDBFF))) {
                                                        if ((((_x >> 0x6) & 0xF) == 0xF)) {
                                                            result.push(String.fromCharCode(0x26, 0x23, 0x58, 0x31, 0x30, hex2(0x0, (_x >> 0x2))));
                                                            _HS = true;
                                                            _r = (_x & 0x3);
                                                        }
                                                        else {
                                                            result.push(String.fromCharCode(0x26, 0x23, 0x58, hex2(0x0, ((_x >> 0x6) + 0x1)), hex2(0x0, (_x >> 0x2))));
                                                            _HS = true;
                                                            _r = (_x & 0x3);
                                                        }
                                                    }
                                                    else {
                                                        if ((((0xDC00 <= _x) && (_x <= 0xDFFF)) || (_x == 0xFFFF) || (_x == 0xFFFE))) {
                                                            return undefined;
                                                        }
                                                        else {
                                                            result.push(String.fromCharCode(0x26, 0x23, 0x58, hex2(0x3, _x), hex2(0x2, _x), hex2(0x1, _x), hex2(0x0, _x), 0x3B));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (true) {
                    if (((0xDC00 <= _x) && (_x <= 0xDFFF))) {
                        result.push(String.fromCharCode(hex1(((_r << 0x2) | ((_x >> 0x8) & 0x3))), hex2(0x1, _x), hex2(0x0, _x), 0x3B));
                        _HS = false;
                        _r = 0x0;
                    }
                    else {
                        return undefined;
                    }
                }
            }
            if (_HS) {
                return undefined;
            }
            return result.join('');
        }
        Util.htmlEscape = htmlEscape;
        function formatText(s) {
            return htmlEscape(s).replace(/&#XA;/g, "<br/>\n").replace(/ /g, "&#x2005;");
        }
        Util.formatText = formatText;
        function selectOnFocusTextArea(elt) {
            elt.onfocus = function () {
                elt.select();
            };
            elt.onmouseup = function () { return false; };
        }
        Util.selectOnFocusTextArea = selectOnFocusTextArea;
        function selectOnFocus(elt) {
            elt.onfocus = function () {
                elt.select();
            };
            elt.onmouseup = function () { return false; };
        }
        Util.selectOnFocus = selectOnFocus;
        function setKeyboardFocusTextArea(elt, selectAll) {
            if (selectAll === void 0) { selectAll = false; }
            elt.focus();
            try {
                elt.setSelectionRange(selectAll ? 0 : elt.value.length, elt.value.length);
            }
            catch (e) {
            }
        }
        Util.setKeyboardFocusTextArea = setKeyboardFocusTextArea;
        function setKeyboardFocus(elt, selectAll) {
            if (selectAll === void 0) { selectAll = false; }
            elt.focus();
            if (elt.type === "text" || elt.type === "number")
                try {
                    elt.setSelectionRange(selectAll ? 0 : elt.value.length, elt.value.length);
                }
                catch (e) {
                }
        }
        Util.setKeyboardFocus = setKeyboardFocus;
        function hideKeyboard() {
            var active = document.activeElement;
            if (active && active.blur) {
                if (TDev.Browser.isAndroid) {
                    active.readonly = "readonly";
                    active.disabled = "true";
                    Util.setTimeout(10, function () {
                        active.blur();
                        active.removeAttribute("readonly");
                        active.removeAttribute("disabled");
                    });
                }
                else {
                    active.blur();
                }
            }
        }
        Util.hideKeyboard = hideKeyboard;
        function offsetIn(elt, par) {
            var x = 0;
            var y = 0;
            while (!!elt) {
                if (elt == par)
                    break;
                x += elt.offsetLeft + elt.clientLeft - elt.scrollLeft;
                y += elt.offsetTop + elt.clientTop - elt.scrollTop;
                elt = elt.offsetParent;
            }
            return { x: x, y: y };
        }
        Util.offsetIn = offsetIn;
        function children() {
            var elts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                elts[_i - 0] = arguments[_i];
            }
            var res = [];
            elts.forEach(function (elt) {
                var cn = elt.children;
                for (var i = 0; i < cn.length; ++i)
                    res.push(cn[i]);
            });
            return res;
        }
        Util.children = children;
        function childNodes() {
            var elts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                elts[_i - 0] = arguments[_i];
            }
            var res = [];
            elts.forEach(function (elt) {
                var cn = elt.childNodes;
                for (var i = 0; i < cn.length; ++i)
                    res.push(cn[i]);
            });
            return res;
        }
        Util.childNodes = childNodes;
        var transformPropertyName = "";
        var perspectivePropertyName = "";
        function setTransform(e, t, origin, perspective) {
            if (origin === void 0) { origin = undefined; }
            if (perspective === void 0) { perspective = undefined; }
            var style = e.style;
            if (!transformPropertyName) {
                if (style["transform"] !== undefined)
                    transformPropertyName = "transform";
                else
                    ["Webkit", "ms", "Moz", "O"].forEach(function (pref) {
                        var tt = pref + "Transform";
                        if (!transformPropertyName && style[tt] !== undefined) {
                            transformPropertyName = tt;
                            perspectivePropertyName = pref + "Perspective";
                        }
                    });
                if (!transformPropertyName) {
                    transformPropertyName = "transform";
                    perspectivePropertyName = "perspective";
                }
            }
            if (origin !== undefined)
                style[transformPropertyName + "Origin"] = origin;
            if (perspective !== undefined)
                style[perspectivePropertyName] = perspective;
            style[transformPropertyName] = t;
        }
        Util.setTransform = setTransform;
        function id(e) {
            return e;
        }
        Util.id = id;
        function doNothing() {
            var pars = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                pars[_i - 0] = arguments[_i];
            }
        }
        Util.doNothing = doNothing;
        ;
        var logMsgs = [];
        Util.logSz = 200;
        var logIdx = -1;
        function time(msg, f, dontDoIt) {
            if (dontDoIt === void 0) { dontDoIt = false; }
            if (dontDoIt)
                f();
            else {
                var ts = TDev.RT.Perf.start(msg);
                f();
                TDev.RT.Perf.stop(ts);
            }
        }
        Util.time = time;
        function now() {
            return Date.now();
        }
        Util.now = now;
        Util.startupTime = now();
        Util.perfNow;
        Util.externalLog = null;
        Util.remoteLogEndpoint = "";
        var remoteLogConnection = null;
        var remoteLogConnecting = false;
        function handleRemoteLog(m) {
            if (!Util.remoteLogEndpoint)
                return;
            if (!remoteLogConnecting) {
                remoteLogConnecting = true;
                var conn = new WebSocket(Util.remoteLogEndpoint);
                conn.onopen = function () {
                    console.log("Remote log connection opened");
                    remoteLogConnection = conn;
                    getLogMsgs().forEach(function (m) { return conn.send(m.elapsed + ": " + m.msg); });
                };
                conn.onclose = function () {
                    console.log("Remote log connection closed");
                    remoteLogConnection = null;
                };
                conn.onerror = function () {
                    console.log("Remote log connection error");
                    remoteLogConnection = null;
                };
            }
            if (remoteLogConnection)
                remoteLogConnection.send(m);
        }
        function log(f) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var msg = fmt_va(f, args);
            var n = now();
            var diff = (now() - Util.startupTime) / 1000;
            var m = fmt_va("{0:f04.3}: {1}", [diff, msg]);
            var lm = {
                timestamp: n,
                level: /^log:/.test(f) ? 6 : /^crash/i.test(f) ? 3 : 7,
                category: "tdlog",
                msg: msg
            };
            if (logIdx >= 0) {
                logMsgs[logIdx++] = lm;
                if (logIdx >= Util.logSz)
                    logIdx = 0;
            }
            else {
                logMsgs.push(lm);
                if (logMsgs.length >= Util.logSz)
                    logIdx = 0;
            }
            if (!/^(DBG|TICK): /.test(f))
                TDev.Ticker.tick(407 /* dbgLogEvent */, msg.slice(0, 200));
            if (TDev.Browser.cscript) {
            }
            else if (TDev.Browser.useConsoleLog) {
                if (TDev.isWebWorker)
                    console.log("WORK-TD-LOG: " + m);
                else
                    console.log("TD-LOG: " + m);
            }
            if (TDev.Browser.logToHost)
                Util.externalNotify("LOG: " + m);
            handleRemoteLog(m);
            if (Util.externalLog)
                Util.externalLog(m);
            if (!TDev.Browser.loadingDone && /debugMsg/.test(document.URL)) {
                var e = TDev.elt("statusMsg");
                if (e)
                    TDev.Browser.setInnerHTML(e, Util.formatText(m) + "</br>" + e.innerHTML);
            }
        }
        Util.log = log;
        Util.dbglog = log;
        function elapsed(start, end) {
            return ("00000000" + (end - start)).slice(-7).replace(/(\d\d\d)$/, function (k) { return "." + k; });
        }
        Util.elapsed = elapsed;
        function getLogMsgs() {
            var i = logIdx;
            var res = [];
            var wrapped = false;
            if (i < 0)
                i = 0;
            var n = now();
            while (i < logMsgs.length) {
                var c = Util.clone(logMsgs[i]);
                c.elapsed = Util.elapsed(c.timestamp, n);
                res.push(c);
                if (++i == logMsgs.length && !wrapped) {
                    wrapped = true;
                    i = 0;
                }
                if (wrapped && i >= logIdx)
                    break;
            }
            return res;
        }
        Util.getLogMsgs = getLogMsgs;
        function externalNotify(msg) {
            var w = window;
            if (w && w.external && "notify" in w.external)
                w.external.notify(msg);
        }
        Util.externalNotify = externalNotify;
        function showLog(ld) {
            Util.log("show log");
            var res = getLogMsgs().map(function (m) { return "<div class='logMsg'>" + Util.formatText(m.msg) + "</div>\n"; });
            res.reverse();
            TDev.Browser.setInnerHTML(ld, res.join(""));
        }
        Util.showLog = showLog;
        function jsonEq(a, b) {
            switch (typeof a) {
                case "string":
                case "number":
                case "boolean":
                    return a === b;
            }
            if (a === b)
                return true;
            if (a === null || a === undefined || b === null || b === undefined)
                return false;
            if (Array.isArray(a)) {
                if (Array.isArray(b)) {
                    if (a.length != b.length)
                        return false;
                    for (var i = 0; i < a.length; ++i)
                        if (!jsonEq(a[i], b[i]))
                            return false;
                    return true;
                }
                else
                    return false;
            }
            for (var p in b)
                if (b.hasOwnProperty(p) && !a.hasOwnProperty(p))
                    return false;
            for (var p in a) {
                if (a.hasOwnProperty(p)) {
                    if (!b.hasOwnProperty(p))
                        return false;
                    if (!jsonEq(a[p], b[p]))
                        return false;
                }
            }
            return true;
        }
        Util.jsonEq = jsonEq;
        function range(from, length) {
            var res = [];
            for (var i = 0; i < length; ++i)
                res.push(i + from);
            return res;
        }
        Util.range = range;
        function iterHtml(e, f) {
            if (!(e instanceof HTMLElement))
                return;
            if (f(e))
                return;
            for (var i = 0; i < e.childNodes.length; ++i) {
                var node = e.childNodes[i];
                iterHtml(node, f);
            }
        }
        Util.iterHtml = iterHtml;
        function highlightWords(e, terms, keepCache) {
            if (keepCache === void 0) { keepCache = false; }
            if (e instanceof Text) {
                var d = e.data;
                var lc = d.toLowerCase();
                var res = [];
                var prev = 0;
                for (var i = 0; i < lc.length; ++i) {
                    for (var j = 0; j < terms.length; ++j) {
                        if (terms[j].length == 0)
                            continue;
                        if (lc.slice(i, i + terms[j].length) == terms[j]) {
                            var t0 = document.createTextNode(d.slice(prev, i));
                            var t1 = TDev.span("highlight", d.slice(i, i + terms[j].length));
                            res.push(t0);
                            res.push(t1);
                            i += terms[j].length;
                            prev = i;
                            i--;
                            break;
                        }
                    }
                }
                if (prev == 0)
                    return;
                res.push(document.createTextNode(d.slice(prev, d.length)));
                var par = e.parentNode;
                if (keepCache && !par.originalCache)
                    par.originalCache = par.innerHTML;
                e.parentNode.replaceChild(TDev.span(null, res), e);
            }
            else if (e instanceof HTMLElement) {
                var ee = e;
                if (keepCache && ee.originalCache)
                    ee.innerHTML = ee.originalCache;
                for (var i = 0; i < e.childNodes.length; ++i) {
                    var node = e.childNodes[i];
                    highlightWords(node, terms);
                }
            }
        }
        Util.highlightWords = highlightWords;
        function animationProperty() {
            if (TDev.Browser.isWebkit)
                return "webkitAnimation";
            if (TDev.Browser.isGecko)
                return "MozAnimation";
            return "animation";
        }
        Util.animationProperty = animationProperty;
        function cancelAnim(elt) {
            elt.style[animationProperty()] = "";
        }
        Util.cancelAnim = cancelAnim;
        function coreAnim(name, duration, elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            var remove = function () {
                elt.removeSelf();
            };
            if (TDev.Browser.noAnimations) {
                if (/^fadeOut/.test(name)) {
                    elt.style.opacity = "0";
                    if (!andThen)
                        andThen = remove;
                }
                if (andThen)
                    Util.setTimeout(300, function () { return andThen(); });
                return;
            }
            var evtName = TDev.Browser.isWebkit ? "webkitAnimationEnd" : "animationend";
            var propName = animationProperty();
            var oldOpacity = elt.style.opacity;
            var callbackExecuted = false;
            var f = Util.catchErrors("animationEnd " + name, function () {
                if (callbackExecuted)
                    return;
                callbackExecuted = true;
                window.clearTimeout(id);
                elt.removeEventListener(evtName, f);
                elt.style[propName] = "";
                elt.style.opacity = oldOpacity;
                if (andThen)
                    andThen();
            });
            var id = Util.setTimeout(duration + 300, f);
            elt.addEventListener(evtName, f);
            if (/^fadeOut/.test(name)) {
                elt.style.opacity = "0";
                if (!andThen)
                    andThen = remove;
            }
            elt.style[propName] = name + " " + duration + "ms";
            return elt;
        }
        Util.coreAnim = coreAnim;
        function delayButton(b, time) {
            if (time === void 0) { time = 3000; }
            b.style.opacity = "0";
            b.style.visibility = "hidden";
            Util.setTimeout(time, function () {
                b.style.visibility = "";
                Util.fadeIn(b, function () {
                    b.style.opacity = '1';
                    Util.setTimeout(2000, function () { return Util.coreAnim("blinkLocation", 4000, b); });
                });
            });
            return b;
        }
        Util.delayButton = delayButton;
        function animAsync(name, duration, elt) {
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                coreAnim(name, duration, elt, function () { return onSuccess(null); });
            });
        }
        Util.animAsync = animAsync;
        var easeOut = " cubic-bezier(0.1, 0.9, 0.2, 1)";
        function showPopup(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("showPopup" + easeOut, 300, elt, andThen);
        }
        Util.showPopup = showPopup;
        function hidePopup(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("fadeOut", 100, elt, andThen);
        }
        Util.hidePopup = hidePopup;
        function fadeIn(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("fadeIn", 150, elt, andThen);
        }
        Util.fadeIn = fadeIn;
        function fadeOut(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("fadeOut", 150, elt, andThen);
        }
        Util.fadeOut = fadeOut;
        function showLeftPanel(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("showLeftPanel" + easeOut, 250, elt, andThen);
        }
        Util.showLeftPanel = showLeftPanel;
        function showRightPanel(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("showRightPanel" + easeOut, 250, elt, andThen);
        }
        Util.showRightPanel = showRightPanel;
        function showBottomPanel(elt, andThen) {
            if (andThen === void 0) { andThen = undefined; }
            return coreAnim("showBottomPanel" + easeOut, 150, elt, andThen);
        }
        Util.showBottomPanel = showBottomPanel;
        function stopEvent() {
            var e = this;
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
        function geckoKeyName(code) {
            switch (code) {
                case 0x0D: return "Enter";
                case 0x21: return "PageUp";
                case 0x22: return "PageDown";
                case 0x23: return "End";
                case 0x24: return "Home";
                case 0x25: return "Left";
                case 0x26: return "Up";
                case 0x27: return "Right";
                case 0x28: return "Down";
                case 0x2D: return "Insert";
                case 0x2E: return "Del";
                case 0x08: return "Backspace";
                case 0x11: return "Control";
                default: return null;
            }
        }
        function normalizeKeyEvent(e) {
            var keyName = e.key;
            if (e.keyIdentifier)
                keyName = e.keyIdentifier;
            switch (e.keyCode) {
                case 27:
                    keyName = "Esc";
                    break;
                case 9:
                    keyName = "Tab";
                    break;
                case 32:
                    keyName = "Space";
                    break;
                default:
                    if (TDev.Browser.isGecko && geckoKeyName(e.keyCode)) {
                        keyName = geckoKeyName(e.keyCode);
                    }
                    else {
                        var s = String.fromCharCode(e.keyCode);
                        if (/^[A-Z0-9]$/.test(s))
                            keyName = s;
                    }
                    break;
            }
            switch (keyName) {
                case "U+007F":
                    if (!e.charCode)
                        keyName = "Del";
                    break;
                case "U+0008":
                    keyName = "Backspace";
                    break;
                case "U+0020":
                    keyName = "Space";
                    break;
                case "Insert":
                    keyName = "Ins";
                    break;
                case "PageDown":
                    keyName = "PgDn";
                    break;
                case "PageUp":
                    keyName = "PgUp";
                    break;
            }
            if (e.altKey)
                keyName = "Alt-" + keyName;
            if (e.ctrlKey)
                keyName = "Ctrl-" + keyName;
            if (e.shiftKey)
                keyName = "Shift-" + keyName;
            e.keyName = keyName;
            var srcElt = e.srcElement;
            if (!srcElt)
                srcElt = e.originalTarget;
            try {
                var srcType = !srcElt ? "" : srcElt.type;
                e.fromTextBox = e.fromTextBox || srcType == "text" || srcType == "textarea" || srcElt.className == "wall-textbox";
                e.fromTextArea = e.fromTextArea || srcType == "textarea";
            }
            catch (e) {
            }
            if (srcElt && e.fromTextBox)
                TDev.LayoutMgr.instance.FlagTypingActivity(srcElt.getAttribute("id"));
            e.stopIt = stopEvent;
        }
        Util.normalizeKeyEvent = normalizeKeyEvent;
        function keyEventString(e, additionalChars) {
            if (additionalChars === void 0) { additionalChars = ""; }
            if (!e.fromTextBox) {
                var s = String.fromCharCode(e.charCode);
                if (/^[A-Za-z0-9]$/.test(s) || additionalChars.indexOf(s) >= 0)
                    return s;
            }
            return "";
        }
        Util.keyEventString = keyEventString;
        function onInputChange(e, f) {
            var current = e.value;
            e.addEventListener("input", function () {
                if (e.value != current) {
                    current = e.value;
                    f(current);
                }
            });
        }
        Util.onInputChange = onInputChange;
        function boundTo(low, x, high) {
            if (x < low)
                x = low;
            if (x > high)
                x = high;
            return x;
        }
        Util.boundTo = boundTo;
        function between(low, x, high) {
            return boundTo(low, x, high);
        }
        Util.between = between;
        function intBetween(low, x, high) {
            return Math.round(boundTo(low, x, high));
        }
        Util.intBetween = intBetween;
        function fmt_va(f, args) {
            if (args.length == 0)
                return f;
            return f.replace(/\{([0-9]+)(\:[^\}]+)?\}/g, function (s, n, spec) {
                var v = args[parseInt(n)];
                var r = "";
                var fmtMatch = /^:f(\d*)\.(\d+)/.exec(spec);
                if (fmtMatch) {
                    var precision = parseInt(fmtMatch[2]);
                    var len = parseInt(fmtMatch[1]) || 0;
                    var fillChar = /^0/.test(fmtMatch[1]) ? "0" : " ";
                    var num = v.toFixed(precision);
                    if (len > 0 && precision > 0)
                        len += precision + 1;
                    if (len > 0) {
                        while (num.length < len) {
                            num = fillChar + num;
                        }
                    }
                    r = num;
                }
                else if (spec == ":x") {
                    r = "0x" + v.toString(16);
                }
                else if (v === undefined)
                    r = "(undef)";
                else if (v === null)
                    r = "(null)";
                else if (v.toString)
                    r = v.toString();
                else
                    r = v + "";
                if (spec == ":a") {
                    if (/^\s*[euioah]/.test(r.toLowerCase()))
                        r = "an " + r;
                    else if (/^\s*[bcdfgjklmnpqrstvwxz]/.test(r.toLowerCase()))
                        r = "a " + r;
                }
                else if (spec == ":s") {
                    if (v == 1)
                        r = "";
                    else
                        r = "s";
                }
                else if (spec == ":q") {
                    r = Util.htmlEscape(r);
                }
                else if (spec == ":jq") {
                    r = Util.jsStringQuote(r);
                }
                else if (spec == ":uri") {
                    r = encodeURIComponent(r);
                }
                else if (spec == ":url") {
                    r = encodeURI(r);
                }
                else if (spec == ":%") {
                    r = (v * 100).toFixed(1).toString() + '%';
                }
                return r;
            });
        }
        Util.fmt_va = fmt_va;
        function fmt(f) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return fmt_va(f, args);
        }
        Util.fmt = fmt;
        function ensureVisible(node, parent, margin) {
            if (parent === void 0) { parent = undefined; }
            if (margin === void 0) { margin = undefined; }
            if (!parent) {
                parent = node.parentNode;
                if (!parent)
                    return;
                while (!parent.scrollEnabled) {
                    parent = parent.parentNode;
                    if (!parent)
                        return;
                }
            }
            if (!margin)
                margin = 5;
            if (margin < 1)
                margin = parent.clientHeight * margin;
            var pos = offsetIn(node, parent);
            var y0 = pos.y;
            var y1 = pos.y + node.offsetHeight;
            var target = parent.scrollTop;
            if (target < y1 - parent.clientHeight + margin)
                target = y1 - parent.clientHeight + margin;
            if (target > y0 - margin)
                target = y0 - margin;
            parent.scrollTop = target;
            if (TDev.Browser.isMobileSafari)
                Util.setTimeout(500, function () {
                    parent.scrollTop = target;
                });
        }
        Util.ensureVisible = ensureVisible;
        function flatClone(obj) {
            var r = {};
            Object.keys(obj).forEach(function (k) {
                r[k] = obj[k];
            });
            return r;
        }
        Util.flatClone = flatClone;
        function sendErrorReport(bug, willReload) {
            if (willReload === void 0) { willReload = false; }
            try {
                var bb = Util.flatClone(bug);
                bb.eventTrace = "";
                Util.log(TDev.Ticker.bugReportToString(bb));
            }
            catch (e) {
                debugger;
            }
            if (willReload) {
                try {
                    window.localStorage["storedBug"] = JSON.stringify(bug);
                    return;
                }
                catch (e) {
                    debugger;
                }
            }
            TDev.Cloud.postBugReportAsync(bug).done(function () {
            }, function (e) { return undefined; });
        }
        Util.sendErrorReport = sendErrorReport;
        var recentBugReports = {};
        function sendPendingBugReports() {
            var b = window.localStorage["storedBug"];
            if (b) {
                window.localStorage["storedBug"] = "";
                try {
                    sendErrorReport(JSON.parse(b));
                }
                catch (e) {
                    debugger;
                }
            }
        }
        Util.sendPendingBugReports = sendPendingBugReports;
        Util.navigatingAway = false;
        function navigateInWindow(url) {
            window.location.href = url;
            Util.navigatingAway = true;
        }
        Util.navigateInWindow = navigateInWindow;
        function isError(err, f) {
            return err && (f(err) || (typeof err == "object" && Object.keys(err).some(function (k) { return err[k] && f(err[k]); })));
        }
        Util.isError = isError;
        function getErrorInfo(err) {
            var res = undefined;
            if (err) {
                if (err.constructor && err.code != undefined)
                    res = err.constructor.name + " code " + err.code + ": " + err.message;
                else if (err.name)
                    res = err.name;
                else if (typeof err == "object")
                    Object.keys(err).forEach(function (k) {
                        if (res == undefined)
                            res = getErrorInfo(err[k]);
                    });
                if (err.databaseOrigin)
                    res += "; origin: " + err.databaseOrigin;
            }
            return res;
        }
        Util.getErrorInfo = getErrorInfo;
        function reportError(ctx, err, fatal) {
            if (fatal === void 0) { fatal = true; }
            if (TDev.Runtime.handleUserError(err))
                return;
            var bug = TDev.Ticker.mkBugReport(err, ctx);
            var willReload = fatal;
            var lastBugReload = window.localStorage["lastBugReload"];
            if (lastBugReload && now() - lastBugReload < 30 * 1000)
                willReload = false;
            if (TDev.dbg)
                willReload = false;
            if (isError(err, function (e) { return e.isNetworkError; })) {
                TDev.HTML.showProgressNotification(lf("we're having network connectivity problems..."));
                willReload = false;
                return;
            }
            var hashBug = TDev.Ticker.bugReportForHash(bug);
            var lastTime = recentBugReports[hashBug];
            if (lastTime && now() - lastTime < 5 * 60 * 1000) {
            }
            else {
                sendErrorReport(bug, willReload);
                if (Object.keys(recentBugReports).length > 30)
                    recentBugReports = {};
                recentBugReports[hashBug] = now();
            }
            if (isError(err, function (e) { return e.isDatabaseError; })) {
                if (false) {
                    var m = TDev.ModalDialog.info("", "");
                }
                if (!willReload) {
                    Util.navigateInWindow(window.errorUrl + "#storage," + encodeURIComponent(getErrorInfo(err)));
                    return;
                }
            }
            if (willReload && !TDev.Storage.showTemporaryWarning()) {
                try {
                    var msg = bug.exceptionMessage;
                    if (!msg)
                        msg = "OOPS";
                    window.localStorage["lastExceptionMessage"] = msg;
                    window.localStorage["lastBugReload"] = now();
                    window.location.reload();
                    return;
                }
                catch (e) {
                    debugger;
                }
            }
            try {
                if (fatal || TDev.dbg) {
                    var msgText = Util.formatText(TDev.dbg ? bug.exceptionMessage : "Something went wrong; please reload the webpage.");
                    var dmsg = TDev.div("errorNotification");
                    TDev.Browser.setInnerHTML(dmsg, msgText);
                    TDev.elt("root").appendChild(dmsg);
                    Util.setTimeout(5000, function () {
                        dmsg.removeSelf();
                    });
                }
            }
            catch (e) {
                debugger;
            }
        }
        Util.reportError = reportError;
        function catchErrors(ctx, f) {
            return function () {
                if (Util.eventLogging)
                    Util.log("catching errors in " + ctx);
                try {
                    return f.apply(this, arguments);
                }
                catch (e) {
                    if (TDev.Browser.isHeadless)
                        TDev.Promise.errorHandler(ctx, e);
                    else
                        reportError(ctx, e);
                    return undefined;
                }
            };
        }
        Util.catchErrors = catchErrors;
        function setTimeout(ms, cb) {
            if (ms == 0 && zeroTimeoutFunctions) {
                setZeroTimeout(cb);
                return -1;
            }
            else {
                return window.setTimeout(function () {
                    if (Util.eventLogging)
                        Util.log("executing timeout " + ms + " / " + cb.toString());
                    try {
                        cb();
                    }
                    catch (err) {
                        Util.reportError("timeout-" + ms + "-" + cb.toString(), err);
                    }
                }, ms);
            }
        }
        Util.setTimeout = setTimeout;
        var FNV1_prime_32 = 16777619;
        var FNV1_basis_32 = 2166136261 | 0;
        function toUTF16LE(str) {
            var res = "";
            if (!str)
                return res;
            for (var i = 0; i < str.length; ++i) {
                var code = str.charCodeAt(i);
                res += String.fromCharCode(code & 0xff);
                res += String.fromCharCode((code >> 8) & 0xff);
            }
            return res;
        }
        Util.toUTF16LE = toUTF16LE;
        function toUTF8(str) {
            var res = "";
            if (!str)
                return res;
            for (var i = 0; i < str.length; ++i) {
                var code = str.charCodeAt(i);
                if (code <= 0x7f)
                    res += str.charAt(i);
                else if (code <= 0x7ff) {
                    res += String.fromCharCode(0xc0 | (code >> 6), 0x80 | (code & 0x3f));
                }
                else {
                    if (0xd800 <= code && code <= 0xdbff) {
                        var next = str.charCodeAt(++i);
                        if (!isNaN(next))
                            code = 0x10000 + ((code - 0xd800) << 10) + (next - 0xdc00);
                    }
                    if (code <= 0xffff)
                        res += String.fromCharCode(0xe0 | (code >> 12), 0x80 | ((code >> 6) & 0x3f), 0x80 | (code & 0x3f));
                    else
                        res += String.fromCharCode(0xf0 | (code >> 18), 0x80 | ((code >> 12) & 0x3f), 0x80 | ((code >> 6) & 0x3f), 0x80 | (code & 0x3f));
                }
            }
            return res;
        }
        Util.toUTF8 = toUTF8;
        function intMult(a, b) {
            return (((a & 0xffff) * (b >>> 16) + (b & 0xffff) * (a >>> 16)) << 16) + ((a & 0xffff) * (b & 0xffff));
        }
        Util.intMult = intMult;
        function getStableHashCodeBytes(bytes) {
            var hc = FNV1_basis_32;
            if (bytes) {
                for (var i = 0; i < bytes.length; ++i)
                    hc = intMult(hc, FNV1_prime_32) ^ bytes.charCodeAt(i);
            }
            return hc;
        }
        Util.getStableHashCodeBytes = getStableHashCodeBytes;
        function getStableHashCode(str) {
            return getStableHashCodeBytes(toUTF16LE(str));
        }
        Util.getStableHashCode = getStableHashCode;
        function isntNull(o) {
            return o !== null && o !== undefined;
        }
        Util.isntNull = isntNull;
        function capitalizeFirst(s) {
            return s.slice(0, 1).toUpperCase() + s.slice(1);
        }
        Util.capitalizeFirst = capitalizeFirst;
        function tagify(name) {
            return name.replace(/([^a-zA-Z0-9])([a-z])/g, function (m, a, b) { return a + b.toUpperCase(); }).replace(/[^a-zA-Z0-9]/g, "");
        }
        Util.tagify = tagify;
        function toHashTag(name) {
            return "#" + tagify(name);
        }
        Util.toHashTag = toHashTag;
        function getHashTags(s) {
            var r = [];
            s.replace(/#(\w+)/g, function (m, h) {
                r.push(h);
                return "";
            });
            return r;
        }
        Util.getHashTags = getHashTags;
        function jsStringQuote(s) {
            return s.replace(/[^A-Z0-9a-z .!?_\-$]/g, function (c) {
                var h = c.charCodeAt(0).toString(16);
                return "\\u" + "0000".substr(0, 4 - h.length) + h;
            });
        }
        Util.jsStringQuote = jsStringQuote;
        function jsStringLiteral(s) {
            return "\"" + jsStringQuote(s) + "\"";
        }
        Util.jsStringLiteral = jsStringLiteral;
        function canvasToBlob(canvas, blobName) {
            if (blobName === void 0) { blobName = null; }
            if (canvas.mozGetAsFile) {
                var blob = canvas.mozGetAsFile(blobName || 'img.png', 'image/png');
                return blob;
            }
            if (canvas.msToBlob)
                return canvas.msToBlob();
            var dataUrl = canvas.toDataURL('image/png');
            var bytes = decodeDataURL(dataUrl, 'image/png');
            try {
                var blob = new Blob([bytes], { type: 'image/png' });
                return blob;
            }
            catch (e) {
                return null;
            }
        }
        Util.canvasToBlob = canvasToBlob;
        function stringCompare(an, bn) {
            if (an == bn)
                return 0;
            if (an < bn)
                return -1;
            return 1;
        }
        Util.stringCompare = stringCompare;
        function nameCompare(a, b) {
            return stringCompare(a.getName(), b.getName());
        }
        Util.nameCompare = nameCompare;
        function jsonClone(obj) {
            return JSON.parse(JSON.stringify(obj));
        }
        Util.jsonClone = jsonClone;
        function clone(obj) {
            var r = new obj.constructor;
            for (var k in obj) {
                if (obj.hasOwnProperty(k))
                    r[k] = obj[k];
            }
            return r;
        }
        Util.clone = clone;
        function chopArray(arr, chunkSize) {
            var res = [];
            for (var i = 0; i < arr.length; i += chunkSize)
                res.push(arr.slice(i, i + chunkSize));
            return res;
        }
        Util.chopArray = chopArray;
        function unique(arr, f) {
            var v = [];
            var r = {};
            arr.forEach(function (e) {
                var k = f(e);
                if (!r.hasOwnProperty(k)) {
                    r[k] = null;
                    v.push(e);
                }
            });
            return v;
        }
        Util.unique = unique;
        function groupBy(arr, f) {
            var r = {};
            arr.forEach(function (e) {
                var k = f(e);
                if (!r.hasOwnProperty(k))
                    r[k] = [];
                r[k].push(e);
            });
            return r;
        }
        Util.groupBy = groupBy;
        function toDictionary(arr, f) {
            var r = {};
            arr.forEach(function (e) {
                r[f(e)] = e;
            });
            return r;
        }
        Util.toDictionary = toDictionary;
        function toArray(a) {
            var r = [];
            for (var i = 0; i < a.length; ++i)
                r.push(a[i]);
            return r;
        }
        Util.toArray = toArray;
        function indexOfMatching(arr, f) {
            for (var i = 0; i < arr.length; ++i)
                if (f(arr[i]))
                    return i;
            return -1;
        }
        Util.indexOfMatching = indexOfMatching;
        function memoize(f) {
            var cache = {};
            return function (s) {
                if (cache.hasOwnProperty(s))
                    return cache[s];
                return (cache[s] = f(s));
            };
        }
        Util.memoize = memoize;
        function memoizeHashed(h, f) {
            var cache = {};
            return function (e) {
                var s = h(e);
                if (cache.hasOwnProperty(s))
                    return cache[s];
                return (cache[s] = f(e));
            };
        }
        Util.memoizeHashed = memoizeHashed;
        function even(arr) {
            var r = [];
            for (var i = 0; i < arr.length; i += 2)
                r.push(arr[i]);
            return r;
        }
        Util.even = even;
        function odd(arr) {
            var r = [];
            for (var i = 1; i < arr.length; i += 2)
                r.push(arr[i]);
            return r;
        }
        Util.odd = odd;
        function repeatString(s, n) {
            return Array(n + 1).join(s);
        }
        Util.repeatString = repeatString;
        function numberToStringNoE(v) {
            var s = v.toString();
            var m = /^([+\-])?(\d)(\.(\d*))?[eE]([+\-])?(\d+)$/.exec(s);
            if (!m)
                return s;
            var sign = m[1] || "";
            var pref = m[2];
            var suff = m[4] || "";
            var esign = m[5];
            var exp = parseInt(m[6]);
            if (esign == "-") {
                return sign + "0." + repeatString("0", exp - 1) + pref + suff;
            }
            else {
                var add = exp - suff.length;
                if (add < 0) {
                    return sign + pref + suff.slice(0, exp) + "." + suff.slice(add);
                }
                else {
                    return sign + pref + suff + repeatString("0", add);
                }
            }
        }
        Util.numberToStringNoE = numberToStringNoE;
        function msSubtract(a, b) {
            var r = {};
            Object.keys(a).forEach(function (k) {
                var d = 0;
                if (b.hasOwnProperty(k))
                    d = b[k];
                var n = a[k] - d;
                if (n > 0)
                    r[k] = n;
            });
            return r;
        }
        Util.msSubtract = msSubtract;
        function msAdd(a, b) {
            var r = {};
            Object.keys(a).forEach(function (k) {
                var d = 0;
                if (b.hasOwnProperty(k))
                    d = b[k];
                r[k] = a[k] + d;
            });
            Object.keys(b).forEach(function (k) {
                if (!a.hasOwnProperty(k))
                    r[k] = b[k];
            });
            return r;
        }
        Util.msAdd = msAdd;
        function setAdd(a, b) {
            var r = {};
            Object.keys(a).forEach(function (v) { return r[v] = true; });
            Object.keys(b).forEach(function (v) { return r[v] = true; });
            return r;
        }
        Util.setAdd = setAdd;
        function setAddTo(a, b) {
            Object.keys(b).forEach(function (v) { return a[v] = true; });
        }
        Util.setAddTo = setAddTo;
        function setIntersect(a, b) {
            var r = {};
            Object.keys(a).forEach(function (v) {
                if (b.hasOwnProperty(v))
                    r[v] = true;
            });
            return r;
        }
        Util.setIntersect = setIntersect;
        Util.onSetHash;
        Util.onGoBack;
        function setHash(s, replace) {
            if (replace === void 0) { replace = false; }
            s = s.replace(/^#/, "");
            Util.setTimeout(1, function () { return Util.onSetHash(s, replace); });
        }
        Util.setHash = setHash;
        function goBack() {
            Util.onGoBack();
        }
        Util.goBack = goBack;
        Util.translationDebug = false;
        Util.translations = {};
        function enableTranslationTracking(local) {
            if (local === void 0) { local = false; }
            translationTracker = {};
            if (local) {
                translationScheduled = true;
                Util.localTranslationTracking = true;
            }
        }
        Util.enableTranslationTracking = enableTranslationTracking;
        function dumpTranslationFreqs() {
            var lst = Object.keys(translationTracker);
            lst.sort(function (a, b) { return translationTracker[b] - translationTracker[a]; });
            var words = 0;
            var str = "";
            lst.forEach(function (e) {
                words += e.split(/\s+/).filter(function (s) { return !!s; }).length;
                str += JSON.stringify(e).slice(1).replace(/"$/, "") + "\n";
            });
            str = "# words: " + words + ", texts: " + lst.length + "\n" + str;
            return str;
        }
        Util.dumpTranslationFreqs = dumpTranslationFreqs;
        var translationTracker;
        var lastTranslationUpload = 0;
        var translationScheduled = false;
        var translationSending = false;
        Util.translationToken = "";
        Util.localTranslationTracking = false;
        function scheduleTranslations() {
            translationScheduled = true;
            Util.setTimeout(10000, function () {
                translationScheduled = false;
                translationSending = true;
                var toSend = translationTracker;
                translationTracker = {};
                Util.httpPostRealJsonAsync("https://touchdeveloptranslator.azurewebsites.net/api/Svc/submit", {
                    freqs: toSend,
                    lang: getTranslationLanguage(),
                    token: Util.translationToken,
                }).done(function (resp) {
                    translationSending = false;
                    if (Object.keys(translationTracker).length > 0 && !translationScheduled)
                        scheduleTranslations();
                }, function (err) {
                });
            });
        }
        function _localize(msg, account) {
            if (translationTracker && account) {
                translationTracker[msg] = (translationTracker[msg] || 0) + 1;
                if (!translationScheduled && !translationSending)
                    scheduleTranslations();
            }
            if (Util.translations.hasOwnProperty(msg))
                return Util.translations[msg];
            return msg;
        }
        Util._localize = _localize;
        Util._languageData;
        var translationLang = null;
        function seeTranslatedText(value) {
            if (value !== undefined) {
                if (!value)
                    window.localStorage.setItem("skipTranslatedText", "1");
                else
                    window.localStorage.removeItem("skipTranslatedText");
                return !value;
            }
            else {
                return !window.localStorage.getItem("skipTranslatedText");
            }
        }
        Util.seeTranslatedText = seeTranslatedText;
        function getTranslationLanguage() {
            return translationLang;
        }
        Util.getTranslationLanguage = getTranslationLanguage;
        Util.sForPlural = true;
        function loadUserLanguageSetting() {
            var ln = getUserLanguageSetting();
            if (ln) {
                setTranslationLangauge(ln);
                return true;
            }
            else
                return false;
        }
        Util.loadUserLanguageSetting = loadUserLanguageSetting;
        function getUserLanguageSetting() {
            return window.localStorage.getItem("userLocale") || "";
        }
        Util.getUserLanguageSetting = getUserLanguageSetting;
        function setUserLanguageSetting(culture, reloadIfNeeded) {
            if (reloadIfNeeded === void 0) { reloadIfNeeded = false; }
            var locale = culture || "";
            var currentLocale = getUserLanguageSetting();
            if (currentLocale != locale) {
                window.localStorage.setItem("userLocale", locale);
                seeTranslatedText(true);
                if (reloadIfNeeded)
                    Util.setTimeout(500, function () { return window.location.reload(); });
            }
        }
        Util.setUserLanguageSetting = setUserLanguageSetting;
        function setTranslationLangauge(ln) {
            ln = ln.slice(0, 2);
            if (ln == "zh")
                ln = "zh-CHS";
            Util.sForPlural = ln == "en" || ln == "es" || ln == "pt" || ln == "de" || ln == "fr";
            translationLang = ln;
            Util.translations = {};
            if (Util._languageData)
                Util._languageData(ln);
        }
        Util.setTranslationLangauge = setTranslationLangauge;
        function setTranslationTable(tr) {
            Util.translations = tr;
        }
        Util.setTranslationTable = setTranslationTable;
        function _setLangaugeArray(keys, trans) {
            Util.translations = {};
            trans.forEach(function (t, i) {
                if (t)
                    Util.translations[keys[i]] = t;
            });
        }
        Util._setLangaugeArray = _setLangaugeArray;
    })(Util = TDev.Util || (TDev.Util = {}));
    var numStatic = 1;
    function lf_static(format, account) {
        if (Util.translationDebug)
            return Util._localize(format, account).toUpperCase();
        else
            return Util._localize(format, account);
    }
    TDev.lf_static = lf_static;
    function lf_va(format, args) {
        var lfmt = Util._localize(format, true);
        if (!Util.sForPlural && lfmt != format && /\d:s\}/.test(lfmt)) {
            lfmt = lfmt.replace(/\{\d+:s\}/g, "");
        }
        if (Util.translationDebug)
            return Util.fmt_va(lfmt, args).toUpperCase();
        else
            return Util.fmt_va(lfmt, args);
    }
    TDev.lf_va = lf_va;
    function lf(format) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return lf_va(format, args);
    }
    TDev.lf = lf;
    var Lock = (function () {
        function Lock() {
            this.waiting = [];
            this.acquired = false;
        }
        Lock.prototype.acquire = function (f) {
            if (this.acquired) {
                this.waiting.push(f);
            }
            else {
                this.acquired = true;
                f();
            }
        };
        Lock.prototype.release = function () {
            Util.assert(this.acquired);
            if (this.waiting.length > 0) {
                var f = this.waiting.shift();
                f();
            }
            else {
                this.acquired = false;
            }
        };
        return Lock;
    })();
    TDev.Lock = Lock;
    var RefreshTimer = (function () {
        function RefreshTimer(interval, callback) {
            this.interval = interval;
            this.callback = callback;
            this.tick = 0;
        }
        RefreshTimer.prototype.restart = function () {
            var _this = this;
            this.tick++;
            var tick0 = this.tick;
            Util.setTimeout(this.interval, function () {
                if (tick0 == _this.tick) {
                    _this.callback();
                }
            });
        };
        return RefreshTimer;
    })();
    TDev.RefreshTimer = RefreshTimer;
    var KeyboardAutoUpdate = (function () {
        function KeyboardAutoUpdate(read, update) {
            this.read = read;
            this.update = update;
            this.version = 0;
            this.lastValue = null;
            this.updateValue = null;
            this.delay = TDev.Browser.isDesktop ? 300 : TDev.Browser.isCellphone ? 800 : 500;
        }
        KeyboardAutoUpdate.mkInput = function (textbox, update) {
            var kb = new KeyboardAutoUpdate(function () { return textbox.value; }, update);
            return kb;
        };
        KeyboardAutoUpdate.mkTextArea = function (textbox, update) {
            var kb = new KeyboardAutoUpdate(function () { return textbox.value; }, update);
            return kb;
        };
        KeyboardAutoUpdate.prototype.keypress = function () {
            var _this = this;
            var searchValue = this.read();
            if (searchValue == this.lastValue)
                return;
            var v = ++this.version;
            this.lastValue = searchValue;
            if (!this.update)
                return;
            if (this.delay <= 0) {
                this.update(searchValue);
            }
            else {
                Util.setTimeout(this.delay, function () {
                    if (v == _this.version && _this.update && searchValue == _this.read()) {
                        _this.update(searchValue);
                    }
                });
            }
        };
        KeyboardAutoUpdate.prototype.resultsCurrent = function (s) {
            return this.read() == s;
        };
        return KeyboardAutoUpdate;
    })();
    TDev.KeyboardAutoUpdate = KeyboardAutoUpdate;
    var CsvParser = (function () {
        function CsvParser() {
            this.m_pos = 0;
            this.m_line = 1;
            this.m_col = 1;
            this.space = ' '.charCodeAt(0);
            this.comma = ','.charCodeAt(0);
            this.semiColumn = ';'.charCodeAt(0);
            this.doubleQuote = '"'.charCodeAt(0);
            this.cr = '\r'.charCodeAt(0);
            this.lf = '\n'.charCodeAt(0);
            this.tab = '\t'.charCodeAt(0);
            this.dot = '.'.charCodeAt(0);
            this.backwack = '\\'.charCodeAt(0);
        }
        CsvParser.prototype.parse = function (text, separator) {
            if (!text)
                return null;
            this.m_text = text;
            this.m_errors = [];
            this.file = { headers: [], records: [] };
            this.m_pos = 0;
            this.m_line = 1;
            this.m_col = 1;
            this.m_separator = (separator) ? separator.charCodeAt(0) : 0;
            try {
                if (!this.parseHeader())
                    return null;
                if (this.atEnd())
                    return this.file;
                this.parseRecords();
                return this.file;
            }
            catch (e) {
                return null;
            }
        };
        CsvParser.prototype.atEnd = function () {
            return this.m_text.length == this.m_pos;
        };
        CsvParser.prototype.peek = function () {
            if (this.atEnd())
                return -1;
            return this.m_text.charCodeAt(this.m_pos);
        };
        CsvParser.prototype.read = function () {
            if (this.atEnd()) {
                this.fail("end of file.");
                throw new Error();
            }
            if (this.m_text.charCodeAt(this.m_pos) === this.lf) {
                this.m_line++;
                this.m_col = 1;
            }
            return this.m_text.charCodeAt(this.m_pos++);
        };
        CsvParser.prototype.expected = function (expectedToken) {
            this.fail("expecting: " + expectedToken);
        };
        CsvParser.prototype.fail = function (message) {
            this.m_errors.push({ line: this.m_line, column: this.m_col, message: message });
        };
        CsvParser.prototype.parseHeader = function () {
            var firstName = this.parseField();
            if (firstName == null)
                return false;
            this.file.headers.push(firstName);
            this.inferSeparator();
            while (this.peek() === this.m_separator) {
                if (!this.parseSeparator())
                    return false;
                var nextName = this.parseField();
                if (nextName == null)
                    return false;
                this.file.headers.push(nextName);
            }
            return this.parseCRLF();
        };
        CsvParser.prototype.inferSeparator = function () {
            if (this.m_separator == 0 && !this.atEnd()) {
                var c = this.peek();
                if (c == this.comma || c == this.semiColumn || c == this.tab)
                    this.m_separator = c;
            }
        };
        CsvParser.prototype.parseSeparator = function () {
            var c = this.read();
            if (c != this.m_separator) {
                this.expected(String.fromCharCode(this.m_separator));
                return false;
            }
            this.eatWhitespace();
            return true;
        };
        CsvParser.prototype.eatWhitespace = function () {
            while (!this.atEnd() && this.peek() == this.space)
                this.read();
        };
        CsvParser.prototype.parseCRLF = function () {
            this.eatWhitespace();
            this.eatCR();
            return this.parseLF();
        };
        CsvParser.prototype.parseLF = function () {
            var c = this.read();
            if (c != this.lf) {
                this.expected("<LF>");
                return false;
            }
            return true;
        };
        CsvParser.prototype.eatCR = function () {
            if (!this.atEnd() && this.peek() == this.cr)
                this.read();
        };
        CsvParser.prototype.parseRecords = function () {
            if (!this.parseRecord())
                return false;
            while (!this.atEnd()) {
                if (!this.parseCRLF())
                    return false;
                if (this.atEnd())
                    break;
                if (!this.parseRecord())
                    return false;
            }
            return true;
        };
        CsvParser.prototype.parseRecord = function () {
            var record = [];
            var firstField = this.parseField();
            if (firstField == null)
                return false;
            record.push(firstField);
            this.inferSeparator();
            while (!this.atEnd() && this.peek() === this.m_separator) {
                if (!this.parseSeparator())
                    return false;
                var nextField = this.parseField();
                if (nextField == null)
                    return false;
                record.push(nextField);
            }
            this.file.records.push(record);
            return true;
        };
        CsvParser.prototype.parseField = function () {
            if (this.peek() == this.doubleQuote)
                return this.parseEscaped();
            return this.parseNonescaped();
        };
        CsvParser.prototype.parseNonescaped = function () {
            var data = [];
            while (!this.atEnd() && !this.isSeparatorOrCRLF(this.peek())) {
                data.push(String.fromCharCode(this.read()));
            }
            return data.join('');
        };
        CsvParser.prototype.isSeparatorOrCRLF = function (val) {
            return val === this.m_separator || val === this.cr || val === this.lf;
        };
        CsvParser.isTextData = function (val) {
            return val == 0x20 || val == 0x21 || (val >= 0x23 && val <= 0x2b) || (val >= 0x2D && val <= 0x7e);
        };
        CsvParser.isEscaped = function (val) {
            return CsvParser.isTextData(val) || val == 0x2c || val == 0xD || val == 0xa;
        };
        CsvParser.prototype.parseEscaped = function () {
            var data = [];
            if (!this.parseDoubleQuote())
                return null;
            while (!this.atEnd()) {
                var c = this.read();
                if (c == this.doubleQuote) {
                    if (this.peek() == this.doubleQuote)
                        data.push(String.fromCharCode(this.read()));
                    else
                        break;
                }
                else if (c == this.backwack) {
                    if (this.peek() == this.doubleQuote)
                        data.push(String.fromCharCode(this.read()));
                }
                else
                    data.push(String.fromCharCode(c));
            }
            return data.join('');
        };
        CsvParser.prototype.parseDoubleQuote = function () {
            this.eatWhitespace();
            var c = this.read();
            if (c != this.doubleQuote) {
                this.expected("<DoubleQuote>");
                return false;
            }
            return true;
        };
        return CsvParser;
    })();
    TDev.CsvParser = CsvParser;
    var Set = (function () {
        function Set() {
            this._list = [];
        }
        Set.prototype.add = function (e) {
            if (!this.contains(e))
                this._list.push(e);
        };
        Set.prototype.contains = function (e) {
            return this._list.indexOf(e) >= 0;
        };
        Set.prototype.elts = function () {
            return this._list;
        };
        Set.prototype.length = function () {
            return this._list.length;
        };
        return Set;
    })();
    TDev.Set = Set;
    var Lcs = (function () {
        function Lcs(equal, l1, l2) {
            this.equal = equal;
            this.l1 = l1;
            this.l2 = l2;
            this.table = [];
            for (var i = -1; i < l1.length; ++i)
                this.table[i] = [];
        }
        Lcs.prototype.lcs_m = function (i, j) {
            if (this.table[i][j] !== undefined) {
                return this.table[i][j];
            }
            else {
                var r = this.lcs_i(i, j);
                this.table[i][j] = r;
                return r;
            }
        };
        Lcs.prototype.lcs_i = function (i, j) {
            var c1 = this.l1[i];
            var c2 = this.l2[j];
            if (i == -1 || j == -1) {
                return [];
            }
            else if (this.equal(c1, c2)) {
                return this.lcs_m(i - 1, j - 1).concat([c1]);
            }
            else {
                var lcs1 = i > 0 ? this.lcs_m(i - 1, j) : [];
                var lcs2 = j > 0 ? this.lcs_m(i, j - 1) : [];
                return lcs1.length > lcs2.length ? lcs1 : lcs2;
            }
        };
        Lcs.prototype.lcs = function () {
            return this.lcs_i(this.l1.length - 1, this.l2.length - 1);
        };
        return Lcs;
    })();
    TDev.Lcs = Lcs;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Random;
    (function (Random) {
        var sha256_k = new Uint32Array([
            0x428a2f98,
            0x71374491,
            0xb5c0fbcf,
            0xe9b5dba5,
            0x3956c25b,
            0x59f111f1,
            0x923f82a4,
            0xab1c5ed5,
            0xd807aa98,
            0x12835b01,
            0x243185be,
            0x550c7dc3,
            0x72be5d74,
            0x80deb1fe,
            0x9bdc06a7,
            0xc19bf174,
            0xe49b69c1,
            0xefbe4786,
            0x0fc19dc6,
            0x240ca1cc,
            0x2de92c6f,
            0x4a7484aa,
            0x5cb0a9dc,
            0x76f988da,
            0x983e5152,
            0xa831c66d,
            0xb00327c8,
            0xbf597fc7,
            0xc6e00bf3,
            0xd5a79147,
            0x06ca6351,
            0x14292967,
            0x27b70a85,
            0x2e1b2138,
            0x4d2c6dfc,
            0x53380d13,
            0x650a7354,
            0x766a0abb,
            0x81c2c92e,
            0x92722c85,
            0xa2bfe8a1,
            0xa81a664b,
            0xc24b8b70,
            0xc76c51a3,
            0xd192e819,
            0xd6990624,
            0xf40e3585,
            0x106aa070,
            0x19a4c116,
            0x1e376c08,
            0x2748774c,
            0x34b0bcb5,
            0x391c0cb3,
            0x4ed8aa4a,
            0x5b9cca4f,
            0x682e6ff3,
            0x748f82ee,
            0x78a5636f,
            0x84c87814,
            0x8cc70208,
            0x90befffa,
            0xa4506ceb,
            0xbef9a3f7,
            0xc67178f2
        ]);
        function rotr(v, b) {
            return (v >>> b) | (v << (32 - b));
        }
        function sha256round(w) {
            TDev.Util.assert(w.length == 64);
            for (var i = 16; i < 64; ++i) {
                var s0 = rotr(w[i - 15], 7) ^ rotr(w[i - 15], 18) ^ (w[i - 15] >>> 3);
                var s1 = rotr(w[i - 2], 17) ^ rotr(w[i - 2], 19) ^ (w[i - 2] >>> 10);
                w[i] = (w[i - 16] + s0 + w[i - 7] + s1) | 0;
            }
            var a = w[0];
            var b = w[1];
            var c = w[2];
            var d = w[3];
            var e = w[4];
            var f = w[5];
            var g = w[6];
            var h = w[7];
            for (var i = 0; i < 64; ++i) {
                var s1 = rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25);
                var ch = (e & f) ^ (~e & g);
                var temp1 = h + s1 + ch + sha256_k[i] + w[i];
                var s0 = rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22);
                var maj = (a & b) ^ (a & c) ^ (b & c);
                var temp2 = s0 + maj;
                h = g;
                g = f;
                f = e;
                e = d + temp1;
                d = c;
                c = b;
                b = a;
                a = temp1 + temp2;
            }
            w[0] += a;
            w[1] += b;
            w[2] += c;
            w[3] += d;
            w[4] += e;
            w[5] += f;
            w[6] += g;
            w[7] += h;
        }
        var RC4 = (function () {
            function RC4() {
                this.rc4_i = 0;
                this.rc4_j = 0;
                this.rc4_buf = new Uint8Array(256);
                for (var i = 0; i < 256; ++i)
                    this.rc4_buf[i] = i;
            }
            RC4.prototype.getBytes = function (arr) {
                var rc4_i = this.rc4_i;
                var rc4_j = this.rc4_j;
                var rc4_buf = this.rc4_buf;
                for (var i = 0; i < arr.length; ++i) {
                    rc4_i = (rc4_i + 1) & 0xff;
                    rc4_j = (rc4_j + rc4_buf[rc4_i]) & 0xff;
                    var tmp = rc4_buf[rc4_i];
                    var tmp2 = rc4_buf[rc4_j];
                    rc4_buf[rc4_i] = tmp2;
                    rc4_buf[rc4_j] = tmp;
                    arr[i] = rc4_buf[(tmp + tmp2) & 0xff];
                }
                this.rc4_i = rc4_i;
                this.rc4_j = rc4_j;
            };
            RC4.prototype.addEntropy = function (key) {
                var rc4_buf = this.rc4_buf;
                var j = 0;
                for (var i = 0; i < 256; ++i) {
                    j = (j + rc4_buf[i] + key[i % key.length]) & 0xff;
                    var tmp = rc4_buf[i];
                    rc4_buf[i] = rc4_buf[j];
                    rc4_buf[j] = tmp;
                }
                bytes(new Uint8Array(4096));
            };
            RC4.prototype.uniqueId = function (len) {
                if (len === void 0) { len = 24; }
                var buf = new Uint8Array(len);
                this.getBytes(buf);
                var r = "";
                for (var i = 0; i < buf.length; ++i)
                    r += RC4.idChars.charAt(buf[i] & 63);
                return r.replace(/^[0-9]/, "x");
            };
            RC4.idChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678942";
            return RC4;
        })();
        Random.RC4 = RC4;
        var rc4;
        var saveScheduled = false;
        var u32_8;
        var u32_32;
        Random.strongEntropySource = null;
        function addEntropy(key) {
            rc4.addEntropy(key);
        }
        function scheduleSave() {
            if (saveScheduled || Random.strongEntropySource)
                return;
            saveScheduled = true;
            TDev.Util.setTimeout(1000, function () {
                saveScheduled = false;
                saveState();
            });
        }
        function setup() {
            if (rc4)
                return;
            rc4 = new RC4();
            u32_8 = new Uint8Array(4);
            u32_32 = new Uint32Array(u32_8.buffer);
            var key = new Uint8Array(64);
            for (var i = 0; i < key.length; ++i)
                key[i] = (Math.random() * 0x100) & 0xff;
            addEntropy(key);
            var needsMoreEntropy = true;
            var wc = window.crypto;
            try {
                if (wc && wc.getRandomValues) {
                    wc.getRandomValues(key);
                    addEntropy(key);
                    needsMoreEntropy = false;
                }
            }
            catch (exn) {
            }
            if (needsMoreEntropy) {
                if (Random.strongEntropySource) {
                    Random.strongEntropySource(key);
                    addEntropy(key);
                }
                else {
                    addEntropy64(window.localStorage["entropy"]);
                    if (!window.localStorage["gotCloudEntropy"])
                        TDev.Util.setTimeout(1000, function () {
                            if (!window.localStorage["gotCloudEntropy"])
                                TDev.Cloud.getRandomAsync().done(addCloudEntropy, function (err) {
                                });
                        });
                }
            }
            scheduleSave();
        }
        function bytes(arr) {
            setup();
            bytes_internal(arr);
            scheduleSave();
        }
        Random.bytes = bytes;
        function bytes_internal(arr) {
            rc4.getBytes(arr);
        }
        function uint32() {
            setup();
            bytes_internal(u32_8);
            scheduleSave();
            return u32_32[0];
        }
        Random.uint32 = uint32;
        var m32 = 1 / 0x100000000;
        var m64 = 1 / 0x10000000000000000;
        function normalized() {
            return uint32() * m32 + uint32() * m64;
        }
        Random.normalized = normalized;
        function saveState() {
            setup();
            if (Random.strongEntropySource)
                return;
            var state = new Uint8Array(8 * 4);
            bytes_internal(state);
            window.localStorage["entropy"] = TDev.Util.base64EncodeBytes(state);
        }
        function addCloudEntropy(buf) {
            if (buf) {
                addEntropy64(buf);
                saveState();
                window.localStorage["gotCloudEntropy"] = "yes";
            }
        }
        Random.addCloudEntropy = addCloudEntropy;
        function addEntropy64(buf) {
            if (!buf)
                return;
            var strbuf = TDev.Util.base64Decode(buf);
            if (!strbuf)
                return;
            setup();
            addEntropy(TDev.Util.stringToUint8Array(strbuf));
            scheduleSave();
        }
        function uniqueId(len) {
            if (len === void 0) { len = 24; }
            setup();
            var r = rc4.uniqueId(len);
            scheduleSave();
            return r;
        }
        Random.uniqueId = uniqueId;
        function permute(arr) {
            for (var i = 0; i < arr.length; ++i) {
                var j = uint32() % arr.length;
                var tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
            }
        }
        Random.permute = permute;
        function pick(arr) {
            if (arr.length == 0)
                return null;
            return arr[uint32() % arr.length];
        }
        Random.pick = pick;
    })(Random = TDev.Random || (TDev.Random = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    (function (PromiseState) {
        PromiseState[PromiseState["Pending"] = 0] = "Pending";
        PromiseState[PromiseState["Success"] = 1] = "Success";
        PromiseState[PromiseState["Error"] = 2] = "Error";
    })(TDev.PromiseState || (TDev.PromiseState = {}));
    var PromiseState = TDev.PromiseState;
    var Promise = (function () {
        function Promise(init, _onNotify) {
            if (_onNotify === void 0) { _onNotify = undefined; }
            this._onNotify = _onNotify;
            this._listeners = [];
            this._state = 0 /* Pending */;
            if (!!init) {
                var promise = this;
                try {
                    init(function (v) {
                        if (promise._state != 0 /* Pending */) {
                            Promise.checkHandler("trying to resolve promise more than once");
                            return;
                        }
                        promise._value = v;
                        promise._state = 1 /* Success */;
                        promise._notifyListeners();
                    }, function (v) {
                        if (promise._state == 2 /* Error */) {
                            Promise.checkHandler("trying to resolve (error) promise more than once");
                            return;
                        }
                        promise._value = v || new Error("An error occured");
                        promise._state = 2 /* Error */;
                        promise._notifyListeners();
                    }, undefined);
                }
                catch (err) {
                    Promise.errorHandler("promiseCtor", err);
                }
            }
        }
        Promise.prototype._notify = function (l) {
            if (this._value instanceof Promise) {
                var p = this._value;
                if (!!p._state)
                    p._notify(l);
                else
                    p._listeners.push(l);
            }
            else
                l._onNotify(this);
        };
        Promise.prototype.isPending = function () {
            return this._state == 0 /* Pending */;
        };
        Promise.prototype._notifyListeners = function () {
            var _this = this;
            this._listeners.forEach(function (p) { return _this._notify(p); });
        };
        Promise.propagate = function (s, v, onSuccess, onError) {
            if (s === 1 /* Success */ && v instanceof Promise) {
                var q = v;
                if (!!q._state) {
                    v = q._value;
                    if (q._state == 2 /* Error */)
                        s = 2 /* Error */;
                }
                else {
                    q._listeners.push(new Promise(undefined, function () {
                        Promise.propagate(q._state, q._value, onSuccess, onError);
                    }));
                    return;
                }
            }
            if (s === 2 /* Error */)
                onError(v);
            else
                onSuccess(v);
        };
        Promise.prototype.then = function (onSuccess, onError, onProgress) {
            if (onError === void 0) { onError = undefined; }
            if (onProgress === void 0) { onProgress = undefined; }
            var onSuccess3;
            var onError3;
            var r = new Promise(function (onSuccess2, onError2, onProgress2) {
                onSuccess3 = onSuccess2;
                onError3 = onError2;
            }, function (p) {
                var v = p._value;
                var s = p._state;
                if (s === 2 /* Error */) {
                    if (!!onError)
                        try {
                            v = onError(v);
                            s = 1 /* Success */;
                        }
                        catch (e) {
                            v = e;
                            s = 2 /* Error */;
                        }
                }
                else {
                    if (!!onSuccess)
                        try {
                            v = onSuccess(v);
                            s = 1 /* Success */;
                        }
                        catch (e) {
                            v = e;
                            s = 2 /* Error */;
                        }
                }
                Promise.propagate(s, v, onSuccess3, onError3);
            });
            if (!!this._state)
                this._notify(r);
            else
                this._listeners.push(r);
            return r;
        };
        Promise.prototype.done = function (onSuccess, onError, onProgress) {
            if (onSuccess === void 0) { onSuccess = undefined; }
            if (onError === void 0) { onError = undefined; }
            if (onProgress === void 0) { onProgress = undefined; }
            this.then(onSuccess, onError, onProgress).then(undefined, function (e) {
                Promise.errorHandler("promiseDone", e);
            });
        };
        Promise.prototype.thenalways = function (onSuccessOrError, onProgress) {
            if (onProgress === void 0) { onProgress = undefined; }
            return this.then(onSuccessOrError, onSuccessOrError, onProgress);
        };
        Promise.is = function (v) {
            return v instanceof Promise;
        };
        Promise.as = function (v) {
            if (v === void 0) { v = undefined; }
            return v instanceof Promise ? v : Promise.wrap(v);
        };
        Promise.wrap = function (v) {
            if (v === void 0) { v = undefined; }
            return new Promise(function (onSuccess, onError, onProgress) {
                onSuccess(v);
            });
        };
        Promise.wrapError = function (v) {
            if (v === void 0) { v = undefined; }
            return new Promise(function (onSuccess, onError, onProgress) {
                onError(v);
            });
        };
        Promise.delay = function (ms, f) {
            if (f === void 0) { f = null; }
            return new Promise(function (onSuccess, onError, onProgress) {
                window.setTimeout(function () { return f ? f().then(function (v) { return onSuccess(v); }, function (e) { return onError(e); }, function (v) { return onProgress(v); }) : onSuccess(undefined); }, ms);
            });
        };
        Promise.join = function (values) {
            return new Promise(function (onSuccess, onError, onProgress) {
                var keys = Object.keys(values);
                var errors = Array.isArray(values) ? new Array(values.length) : {};
                var results = Array.isArray(values) ? new Array(values.length) : {};
                if (keys.length == 0) {
                    onSuccess(results);
                    return;
                }
                var missing = keys.length;
                var next = function () {
                    if (--missing == 0)
                        if (Object.keys(errors).length == 0)
                            onSuccess(results);
                        else
                            onError(errors);
                };
                keys.forEach(function (key) {
                    Promise.as(values[key]).then(function (v) {
                        results[key] = v;
                        next();
                    }, function (v) {
                        errors[key] = v;
                        next();
                    });
                });
            });
        };
        Promise.thenEach = function (values, onSuccess, onError, onProgress) {
            if (onSuccess === void 0) { onSuccess = undefined; }
            if (onError === void 0) { onError = undefined; }
            if (onProgress === void 0) { onProgress = undefined; }
            var result = Array.isArray(values) ? new Array(values.length) : {};
            Object.keys(values).forEach(function (key) {
                result[key] = Promise.as(values[key]).then(onSuccess, onError, onProgress);
            });
            return Promise.join(result);
        };
        Promise.sequentialMap = function (values, f) {
            return new Promise(function (onSuccess, onError, onProgress) {
                var keys = Object.keys(values);
                var results = Array.isArray(values) ? new Array(values.length) : {};
                function next(i) {
                    if (i >= keys.length) {
                        onSuccess(results);
                    }
                    else {
                        var key = keys[i];
                        try {
                            Promise.as(values[key]).done(function (x) {
                                Promise.as(f(x, key, results)).done(function (v) {
                                    results[key] = v;
                                    next(i + 1);
                                }, onError);
                            });
                        }
                        catch (e) {
                            onError(e);
                        }
                    }
                }
                next(0);
            });
        };
        Promise.errorHandler = function (ctx, err) {
            throw err;
        };
        Promise.checkHandler = function (msg) {
            Promise.errorHandler("promise-check", new Error(msg));
        };
        return Promise;
    })();
    TDev.Promise = Promise;
    var PromiseInv = (function (_super) {
        __extends(PromiseInv, _super);
        function PromiseInv() {
            var _this = this;
            _super.call(this, function (onSuccess, onError) {
                _this.success = onSuccess;
                _this.error = onError;
            });
        }
        PromiseInv.as = function (v) {
            if (v === void 0) { v = undefined; }
            var r = new PromiseInv();
            r.success(v);
            return r;
        };
        return PromiseInv;
    })(Promise);
    TDev.PromiseInv = PromiseInv;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Animation = (function () {
        function Animation(update) {
            var _this = this;
            this.update = update;
            this.running = false;
            this.beginValue = 0;
            this.delay = 0;
            this.endValue = 1;
            this.duration = 1000;
            this.frameLength = 30;
            this.beginTime = 0;
            this.quadratic = true;
            this.stepFn = function () {
                _this.step();
            };
        }
        Animation.prototype.begin = function () {
            var _this = this;
            var run = function () {
                _this.beginTime = new Date().getTime();
                _this.step();
            };
            this.running = true;
            if (this.delay > 0)
                window.setTimeout(run, this.delay);
            else
                run();
        };
        Animation.prototype.complete = function () {
            if (this.running) {
                this.running = false;
                this.update(this.endValue);
                if (!!this.completed)
                    this.completed();
            }
        };
        Animation.prototype.stop = function () {
            this.running = false;
        };
        Animation.prototype.step = function () {
            try {
                if (!this.running)
                    return;
                var now = new Date().getTime();
                if (now > this.beginTime + this.duration || TDev.Browser.noAnimations) {
                    this.complete();
                    return;
                }
                var phase = 1 - (now - this.beginTime) / this.duration;
                if (this.quadratic)
                    phase = (this.beginValue - this.endValue) * phase * phase + this.endValue;
                else
                    phase = (this.beginValue - this.endValue) * phase + this.endValue;
                this.update(phase);
                window.setTimeout(this.stepFn, this.frameLength);
            }
            catch (err) {
                TDev.Util.reportError("animation", err);
            }
        };
        Animation.fadeIn = function (elt, duration) {
            if (duration === void 0) { duration = 300; }
            var a = new Animation(function (v) {
                elt.style.opacity = v + "";
            });
            a.duration = duration;
            return a;
        };
        Animation.fadeOut = function (elt, duration) {
            if (duration === void 0) { duration = 300; }
            var a = new Animation(function (v) {
                if (v == 0)
                    elt.removeSelf();
                else
                    elt.style.opacity = v + "";
            });
            a.beginValue = 1;
            a.endValue = 0;
            a.duration = duration;
            return a;
        };
        return Animation;
    })();
    TDev.Animation = Animation;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var ClickHandler = (function () {
        function ClickHandler(helt, f) {
            this.helt = helt;
            this.f = f;
            this.begX = 0;
            this.begY = 0;
            this.cleared = false;
            this.version = 0;
            this.mouseCaptureOverlay = document.body;
            this.setup();
        }
        ClickHandler.prototype.clickBegin = function (pos) {
            this.helt.setFlag("active", true);
            this.begX = pos.pageX;
            this.begY = pos.pageY;
            this.cleared = false;
            this.setupVersion();
        };
        ClickHandler.prototype.setupVersion = function () {
            var _this = this;
            var v = ++this.version;
            Util.setTimeout(300, function () {
                if (!_this.cleared && v == _this.version)
                    _this.clear();
            });
        };
        ClickHandler.prototype.onMove = function (e) {
            if (Math.abs(e.pageX - this.begX) > 10 || Math.abs(e.pageY - this.begY) > 10)
                this.clear();
        };
        ClickHandler.prototype.getPos = function (e) {
            if (!e.getPointerList)
                return { pageX: e.clientX, pageY: e.clientY };
            var pt = e.getPointerList()[0];
            return {
                pageX: pt.clientX,
                pageY: pt.clientY
            };
        };
        ClickHandler.prototype.skipIt = function (e) {
            var targ = e.target;
            if (e.target != e.currentTarget && (targ.nodeName == "INPUT" || targ.nodeName == "TEXTAREA"))
                return true;
            return false;
        };
        ClickHandler.prototype.isCanceled = function (e) {
            if (this.skipIt(e))
                return true;
            if (e.utilClickCancel)
                return true;
            e.utilClickCancel = true;
            return false;
        };
        ClickHandler.prototype.getPosition = function (element) {
            var xPosition = 0;
            var yPosition = 0;
            while (element) {
                xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
                yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
                element = element.offsetParent;
            }
            return { x: xPosition, y: yPosition };
        };
        ClickHandler.prototype.handleEvent = function (e) {
            try {
                var ep = e;
                if (Util.mouseLogging) {
                    Util.log("executing click handler " + e.type + " on " + this.helt.id);
                    Util.log("pageX:{0} pageY:{1} offsetX:{2} offsetY:{3} clientX:{4} clientY:{5}", ep.pageX, ep.pageY, ep.offsetX, ep.offsetY, ep.clientX, ep.clientY);
                }
                if (ep.touches && ep.touches[0]) {
                    ep = ep.touches[0];
                }
                else if (ep.touches && ep.touches.item(0)) {
                    ep = ep.touches.item(0);
                }
                else if (ep.changedTouches && ep.changedTouches.item(0)) {
                    ep = ep.changedTouches.item(0);
                }
                if (Util.mouseLogging) {
                    Util.log("after touch adjustment");
                    var pos = this.getPosition(this.helt);
                    Util.log("pageX:{0} pageY:{1} offsetX:{2} offsetY:{3} clientX:{4} clientY:{5} eltX:{6} eltY:{7}", ep.pageX, ep.pageY, ep.offsetX, ep.offsetY, ep.clientX, ep.clientY, pos.x, pos.y);
                }
                switch (e.type) {
                    case "pointerdown":
                        if (this.isCanceled(e))
                            break;
                        this.prepareMouseOverlay();
                        this.clickBegin(this.getPos(e));
                        this.mouseCaptureOverlay.addEventListener("pointermove", this, false);
                        this.mouseCaptureOverlay.addEventListener("pointerup", this, false);
                        break;
                    case "MSPointerDown":
                        if (this.isCanceled(e))
                            break;
                        this.prepareMouseOverlay();
                        this.clickBegin(this.getPos(e));
                        this.mouseCaptureOverlay.addEventListener("MSPointerMove", this, false);
                        this.mouseCaptureOverlay.addEventListener("MSPointerUp", this, false);
                        break;
                    case "pointermove":
                    case "MSPointerMove":
                        if (!this.cleared)
                            this.onMove(this.getPos(e));
                        break;
                    case "pointerup":
                    case "MSPointerUp":
                        if (!this.cleared)
                            this.fireClick(e);
                        break;
                    case "touchstart":
                        if (this.isCanceled(e))
                            break;
                        this.helt.addEventListener("touchend", this, false);
                        document.body.addEventListener("touchmove", this, false);
                        document.body.addEventListener("touchend", this, false);
                        this.clickBegin(ep);
                        break;
                    case "touchmove":
                        if (!this.cleared)
                            this.onMove(ep);
                        break;
                    case "touchend":
                        if (!this.cleared)
                            this.fireClick(ep);
                        break;
                    case "mousedown":
                        if (this.isCanceled(e))
                            break;
                        if (e.button != 0)
                            break;
                        this.helt.hideFocus = true;
                        this.helt.addEventListener("mouseup", this, false);
                        document.addEventListener("mouseup", this, false);
                        document.body.addEventListener("mousemove", this, false);
                        this.clickBegin(e);
                        break;
                    case "mousemove":
                        if (!this.cleared)
                            this.onMove(e);
                        break;
                    case "mouseup":
                        if (!this.cleared)
                            this.fireClick(e);
                        break;
                }
            }
            catch (err) {
                Util.reportError("clickHandler", err);
            }
        };
        ClickHandler.prototype.fireClick = function (e) {
            this.clear();
            var canc = e.clickCancelled;
            e.clickCancelled = true;
            if (!canc) {
                e.pgX = this.begX;
                e.pgY = this.begY;
                this.f(e);
            }
        };
        ClickHandler.prototype.clear = function () {
            this.hideMouseOverlay();
            this.cleared = true;
            this.hideMouseOverlay();
            this.helt.removeEventListener("touchend", this, false);
            this.helt.removeEventListener("mouseup", this, false);
            this.helt.setFlag("active", false);
            document.body.removeEventListener("touchmove", this, false);
            document.removeEventListener("mouseup", this, false);
            document.body.removeEventListener("mouseup", this, false);
            document.body.removeEventListener("mousemove", this, false);
            document.body.removeEventListener("touchend", this, false);
            this.mouseCaptureOverlay.removeEventListener("MSPointerMove", this, false);
            this.mouseCaptureOverlay.removeEventListener("MSPointerUp", this, false);
            this.mouseCaptureOverlay.removeEventListener("pointermove", this, false);
            this.mouseCaptureOverlay.removeEventListener("pointerup", this, false);
        };
        ClickHandler.prototype.prepareMouseOverlay = function () {
        };
        ClickHandler.prototype.hideMouseOverlay = function () {
        };
        ClickHandler.prototype.setup = function () {
            if (window.navigator.pointerEnabled)
                this.helt.addEventListener("pointerdown", this, false);
            else if (window.navigator.msPointerEnabled)
                this.helt.addEventListener("MSPointerDown", this, false);
            else if (TDev.Browser.touchStart)
                this.helt.addEventListener("touchstart", this, false);
            else
                this.helt.addEventListener("mousedown", this, false);
        };
        ClickHandler.prototype.unhook = function () {
            this.helt.removeEventListener("MSPointerDown", this, false);
            this.helt.removeEventListener("touchstart", this, false);
            this.helt.removeEventListener("mousedown", this, false);
        };
        return ClickHandler;
    })();
    TDev.ClickHandler = ClickHandler;
    var Util;
    (function (Util) {
        function clickHandler(e, cb, allowSelect) {
            function newCb(e) {
                try {
                    return cb(e);
                }
                catch (err) {
                    Util.reportError("clickHandler " + cb.toString(), err);
                }
            }
            var oldH = e.clickHandler;
            if (oldH)
                oldH.unhook();
            var handler = new ClickHandler(e, newCb);
            e.clickHandler = handler;
            if (!allowSelect)
                e.onselectstart = function () {
                    return false;
                };
            else
                e.onselectstart = function (e) {
                    e.stopImmediatePropagation();
                    return true;
                };
        }
        Util.clickHandler = clickHandler;
        try {
            if (typeof HTMLElement != "undefined")
                HTMLElement.prototype.withClick = function (cb, allowSelect) {
                    Util.clickHandler(this, cb, allowSelect);
                    return this;
                };
        }
        catch (e) {
        }
    })(Util = TDev.Util || (TDev.Util = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var DragHandler = (function (_super) {
        __extends(DragHandler, _super);
        function DragHandler(helt, cb) {
            _super.call(this, helt, null);
            this.helt = helt;
            this.cb = cb;
            this.offX = 0;
            this.offY = 0;
            this.lockX = false;
            this.lockY = false;
            this.isTap = true;
            this.lastX = 0;
            this.lastY = 0;
            this.beginTime = 0;
            this.moveElt = true;
            this.isIeTouch = false;
            this.helt.style.msTouchAction = "none";
            this.helt.style.touchAction = "none";
        }
        DragHandler.prototype.setupVersion = function () {
        };
        DragHandler.prototype.clickBegin = function (pos) {
            _super.prototype.clickBegin.call(this, pos);
            this.offX = this.helt.offsetLeft - this.begX;
            this.offY = this.helt.offsetTop - this.begY;
            this.beginTime = TDev.Util.now();
            this.isTap = true;
            this.lastX = this.begX;
            this.lastY = this.begY;
            this.cb("drag", 0, 0, this.begX, this.begY);
        };
        DragHandler.prototype.onMove = function (pos) {
            this.lastX = pos.pageX;
            this.lastY = pos.pageY;
            if (this.lockX)
                this.lastX = this.begX;
            if (this.lockY)
                this.lastY = this.begY;
            if (this.moveElt) {
                this.helt.style.left = this.offX + this.lastX + "px";
                this.helt.style.top = this.offY + this.lastY + "px";
            }
            var dx = this.lastX - this.begX;
            var dy = this.lastY - this.begY;
            if (Math.abs(dx) > 10 || Math.abs(dy) > 10)
                this.isTap = false;
            this.cb("move", dx, dy, undefined, undefined);
        };
        DragHandler.prototype.fireClick = function (pos) {
            if (TDev.Util.now() - this.beginTime > 300)
                this.isTap = false;
            this.clear();
            this.cb("release", this.lastX - this.begX, this.lastY - this.begY, this.isTap, undefined);
        };
        DragHandler.prototype.prepareMouseOverlay = function () {
            if (this.isIeTouch)
                this.mouseCaptureOverlay = this.helt;
            else
                this.mouseCaptureOverlay = document.body;
        };
        DragHandler.prototype.hideMouseOverlay = function () {
        };
        DragHandler.prototype.handleEvent = function (e) {
            try {
                if (this.skipIt(e))
                    return;
                e.stopPropagation();
                e.preventDefault();
                this.isIeTouch = e.pointerType == 2;
                if (e.preventMouseEvent) {
                    e.preventMouseEvent();
                }
                if (e.preventManipulation) {
                    e.preventManipulation();
                }
                _super.prototype.handleEvent.call(this, e);
            }
            catch (err) {
                TDev.Util.reportError("dragHandler", err);
            }
        };
        return DragHandler;
    })(TDev.ClickHandler);
    TDev.DragHandler = DragHandler;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var DragToScrollHandler = (function () {
        function DragToScrollHandler(helt) {
            this.helt = helt;
            this.posX = 0;
            this.posY = 0;
            this.theHistory = [];
            this.vertical = true;
            this.horizontal = false;
            this.seenTouchEvent = false;
            this.captureingMouse = false;
        }
        DragToScrollHandler.prototype.unhook = function () {
            var t = this;
            if (TDev.Browser.touchStart) {
                this.helt.removeEventListener("touchstart", t, false);
                this.helt.removeEventListener("touchmove", t, false);
                this.helt.removeEventListener("touchend", t, false);
            }
            else {
                this.helt.removeEventListener("mousedown", t, false);
                this.helt.removeEventListener("mouseup", t, false);
                this.helt.removeEventListener("mouseout", t, false);
                this.helt.removeEventListener("mouseleave", t, false);
                this.helt.removeEventListener("mousemove", t, false);
            }
        };
        DragToScrollHandler.prototype.init = function () {
            this.helt.dragToScroll = this;
            var t = this;
            if (TDev.Browser.touchStart) {
                this.helt.addEventListener("touchstart", t, false);
                this.helt.addEventListener("touchmove", t, false);
                this.helt.addEventListener("touchend", t, false);
            }
            else {
                this.helt.addEventListener("mousedown", t, false);
                this.helt.addEventListener("mouseup", t, false);
                this.helt.addEventListener("mouseout", t, false);
                this.helt.addEventListener("mouseleave", t, false);
                this.helt.addEventListener("mousemove", t, false);
            }
        };
        DragToScrollHandler.prototype.record = function (pos) {
            var n = new Date().getTime();
            this.theHistory.push({ x: pos.pageX, y: pos.pageY, t: n });
        };
        DragToScrollHandler.prototype.stopInertialAnimation = function () {
            if (!this.inertialAnimation)
                return;
            this.inertialAnimation.complete();
            this.inertialAnimation = null;
        };
        DragToScrollHandler.prototype.begin = function (pos) {
            this.posX = this.helt.scrollLeft + pos.pageX;
            this.posY = this.helt.scrollTop + pos.pageY;
            this.stopInertialAnimation();
            this.theHistory = [];
            this.record(pos);
        };
        DragToScrollHandler.prototype.scrollTo = function (x, y) {
            if (this.horizontal) {
                this.helt.scrollLeft = x;
            }
            if (this.vertical) {
                this.helt.scrollTop = y;
            }
        };
        DragToScrollHandler.prototype.move = function (pos) {
            this.scrollTo(this.posX - pos.pageX, this.posY - pos.pageY);
            this.record(pos);
        };
        DragToScrollHandler.prototype.log = function () {
            var n = new Date().getTime();
            var k = this.theHistory.slice(this.theHistory.length - 5).map(function (h) { return h.x + "," + h.y + "," + (h.t - n); }).join(" : ");
            Util.log(k);
        };
        DragToScrollHandler.prototype.end = function (pos) {
            var _this = this;
            if (!!pos)
                this.record(pos);
            if (this.theHistory.length == 0)
                return;
            var last = this.theHistory[this.theHistory.length - 1];
            var beg = last.t - 200;
            var first = last;
            for (var i = 0; i < this.theHistory.length; ++i) {
                if (this.theHistory[i].t >= beg) {
                    first = this.theHistory[i];
                    break;
                }
            }
            var dt = last.t - first.t;
            if (dt > 0) {
                var m = 150;
                var dx = (last.x - first.x) / dt * m;
                var dy = (last.y - first.y) / dt * m;
                var speed = Math.abs(dx) + Math.abs(dy);
                if (speed < 50)
                    return;
                this.inertialAnimation = new TDev.Animation(function (p) {
                    _this.scrollTo(_this.posX - (last.x + dx * p), _this.posY - (last.y + dy * p));
                });
                this.inertialAnimation.duration = 700;
                this.inertialAnimation.begin();
            }
        };
        DragToScrollHandler.prototype.handleEvent = function (e) {
            try {
                var now = new Date().getTime();
                switch (e.type) {
                    case "mousedown":
                        if (!this.seenTouchEvent && e.button == 0) {
                            this.captureingMouse = true;
                            this.begin(e);
                        }
                        break;
                    case "mousemove":
                        if (this.captureingMouse) {
                            this.move(e);
                        }
                        break;
                    case "mouseleave":
                        this.end(e);
                        this.captureingMouse = false;
                        break;
                    case "mouseout":
                        if (this.captureingMouse) {
                            var me = e;
                            if (!!me.relatedTarget) {
                                var elts = this.helt.getElementsByTagName(me.relatedTarget.nodeName);
                                for (var i = 0; i < elts.length; ++i)
                                    if (elts[i] == me.relatedTarget)
                                        return;
                            }
                            this.end(e);
                            this.captureingMouse = false;
                        }
                        break;
                    case "mouseup":
                        this.end(e);
                        this.captureingMouse = false;
                        break;
                    case "touchstart":
                        this.seenTouchEvent = true;
                        this.begin(e.touches[0]);
                        break;
                    case "touchmove":
                        e.preventDefault();
                        this.move(e.touches[0]);
                        break;
                    case "touchend":
                        this.end(e.touches[0]);
                        break;
                }
            }
            catch (err) {
                Util.reportError("dragToScroll", err);
            }
        };
        return DragToScrollHandler;
    })();
    TDev.DragToScrollHandler = DragToScrollHandler;
    var Util;
    (function (Util) {
        function setupDragToScroll(e) {
            e.scrollEnabled = true;
            if (TDev.Browser.isMobileSafari) {
                e.style.boxSizing = "border-box";
                e.style.overflowY = "scroll";
                e.className += " iOSScroll";
            }
            else if (TDev.Browser.builtinTouchToPan) {
                e.style.boxSizing = "border-box";
                e.style.overflowY = "auto";
            }
            else {
                e.style.overflowY = "hidden";
                var d = new DragToScrollHandler(e);
                d.init();
            }
        }
        Util.setupDragToScroll = setupDragToScroll;
        function resetDragToScroll(e) {
            e.scrollEnabled = false;
            if (TDev.Browser.builtinTouchToPan || TDev.Browser.isMobileSafari) {
                e.style.boxSizing = "";
                e.style.overflowX = "";
                e.style.overflowY = "";
                if (TDev.Browser.isMobileSafari)
                    e.className = e.className.replace(/iOSScroll/g, "");
            }
            else {
                var d = e.dragToScroll;
                if (d)
                    d.unhook();
            }
        }
        Util.resetDragToScroll = resetDragToScroll;
        function setupHDragToScroll(e) {
            e.scrollEnabled = true;
            if (TDev.Browser.isMobileSafari) {
                e.style.boxSizing = "border-box";
                e.style.overflowY = "auto";
                e.className += " iOSScroll";
            }
            else if (TDev.Browser.builtinTouchToPan) {
                e.style.boxSizing = "border-box";
                e.style.overflowX = "auto";
                if (TDev.Browser.isTrident)
                    e.style.msScrollTranslation = 'vertical-to-horizontal';
            }
            else {
                e.style.overflowX = "hidden";
                var d = new DragToScrollHandler(e);
                d.horizontal = true;
                d.vertical = false;
                d.init();
            }
        }
        Util.setupHDragToScroll = setupHDragToScroll;
    })(Util = TDev.Util || (TDev.Util = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var TouchHandler = (function (_super) {
        __extends(TouchHandler, _super);
        function TouchHandler(helt, cb) {
            _super.call(this, helt, null);
            this.helt = helt;
            this.cb = cb;
            this.offX = 0;
            this.offY = 0;
            this.lockX = false;
            this.lockY = false;
            this.lastX = 0;
            this.lastY = 0;
            this.isIeTouch = false;
            this.helt.style.touchAction = "none";
            this.helt.style.msTouchAction = "none";
        }
        TouchHandler.prototype.setupVersion = function () {
        };
        TouchHandler.prototype.getRelativePos = function (pos) {
            if (TDev.Util.mouseLogging) {
                TDev.Util.log("touch handler ");
                var apos = this.getPosition(this.helt);
                TDev.Util.log("pageX:{0} pageY:{1} offsetX:{2} offsetY:{3} clientX:{4} clientY:{5} eltX:{6} eltY:{7}", pos.pageX, pos.pageY, pos.offsetX, pos.offsetY, pos.clientX, pos.clientY, apos.x, apos.y);
            }
            var x, y;
            if (pos.pageX) {
                x = pos.pageX;
                y = pos.pageY;
            }
            else {
                x = pos.clientX;
                y = pos.clientY;
            }
            var absPos = this.getPosition(this.helt);
            pos.offX = x - absPos.x;
            pos.offY = y - absPos.y;
            return pos;
        };
        TouchHandler.prototype.clickBegin = function (pos) {
            _super.prototype.clickBegin.call(this, pos);
            this.getRelativePos(pos);
            if (TDev.Util.mouseLogging) {
                TDev.Util.log("touchBegin: {0},{1}", pos.offX, pos.offY);
            }
            this.offX = this.helt.offsetLeft - this.begX;
            this.offY = this.helt.offsetTop - this.begY;
            this.cb("down", pos.offX, pos.offY);
        };
        TouchHandler.prototype.onMove = function (pos) {
            this.getRelativePos(pos);
            if (TDev.Util.mouseLogging) {
                TDev.Util.log("onMove: {0},{1}", pos.offX, pos.offY);
            }
            this.cb("move", pos.offX, pos.offY);
        };
        TouchHandler.prototype.fireClick = function (pos) {
            this.getRelativePos(pos);
            if (TDev.Util.mouseLogging) {
                TDev.Util.log("touchEnd: {0},{1}", pos.offX, pos.offY);
            }
            this.clear();
            this.cb("up", pos.offX, pos.offY);
        };
        TouchHandler.prototype.prepareMouseOverlay = function () {
            if (this.isIeTouch)
                this.mouseCaptureOverlay = this.helt;
            else
                this.mouseCaptureOverlay = document.body;
        };
        TouchHandler.prototype.hideMouseOverlay = function () {
        };
        TouchHandler.prototype.handleEvent = function (e) {
            try {
                e.stopPropagation();
                e.preventDefault();
                this.isIeTouch = e.pointerType == 2;
                if (e.preventMouseEvent) {
                    e.preventMouseEvent();
                }
                if (e.preventManipulation) {
                    e.preventManipulation();
                }
                _super.prototype.handleEvent.call(this, e);
            }
            catch (err) {
                TDev.Util.reportError("dragHandler", err);
            }
        };
        return TouchHandler;
    })(TDev.ClickHandler);
    TDev.TouchHandler = TouchHandler;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var HashtableEntry = (function () {
        function HashtableEntry(key, next) {
            this.key = key;
            this.next = next;
        }
        return HashtableEntry;
    })();
    TDev.HashtableEntry = HashtableEntry;
    var Hashtable = (function () {
        function Hashtable(getHashCode, equals, initialSize) {
            if (initialSize === void 0) { initialSize = 13; }
            this.getHashCode = getHashCode;
            this.equals = equals;
            this.initialSize = initialSize;
            this.entryCount = 0;
        }
        Hashtable.prototype.count = function () {
            return this.entryCount;
        };
        Hashtable.prototype.deleteKey = function (k) {
            if (!this.entries)
                return null;
            var h = (this.getHashCode(k) & 0x7fffffff) % this.entries.length;
            var e0 = this.entries[h];
            if (!e0)
                return null;
            if (this.equals(k, e0.key)) {
                this.entries[h] = e0.next;
                e0.next = null;
                this.entryCount--;
                return e0;
            }
            var e = e0;
            while (e && e.next && !this.equals(k, e.next.key))
                e = e.next;
            if (!e.next)
                return null;
            var found = e.next;
            e.next = found.next;
            found.next = null;
            this.entryCount--;
            return found;
        };
        Hashtable.prototype.remove = function (k) {
            return this.deleteKey(k);
        };
        Hashtable.prototype.lookup = function (k, addNew) {
            if (addNew === void 0) { addNew = false; }
            if (!this.entries) {
                if (!addNew)
                    return null;
                this.entries = [];
                for (var i = 0; i < this.initialSize; ++i)
                    this.entries[i] = null;
            }
            var h = (this.getHashCode(k) & 0x7fffffff) % this.entries.length;
            var e0 = this.entries[h];
            var e = e0;
            while (e && !this.equals(k, e.key))
                e = e.next;
            if (!e && addNew) {
                e = new HashtableEntry(k, e0);
                this.entryCount++;
                this.entries[h] = e;
                if (this.entryCount > this.entries.length + this.entries.length) {
                    this.rehash();
                }
            }
            return e;
        };
        Hashtable.prototype.sizeAtLeast = function (n) {
            for (var i = 0; i < Hashtable.primeSizes.length; ++i)
                if (Hashtable.primeSizes[i] > n)
                    return Hashtable.primeSizes[i];
            return 0;
        };
        Hashtable.prototype.rehash = function () {
            var size = this.sizeAtLeast(this.entries.length);
            if (size == 0)
                return;
            var oldEntries = this.entries;
            this.entries = [];
            for (var i = 0; i < size; ++i)
                this.entries[i] = null;
            for (var i = 0; i < oldEntries.length; ++i) {
                var next;
                for (var e = oldEntries[i]; e; e = next) {
                    next = e.next;
                    var h = (this.getHashCode(e.key) & 0x7fffffff) % this.entries.length;
                    e.next = this.entries[h];
                    this.entries[h] = e;
                }
            }
        };
        Hashtable.prototype.forEachEntry = function (f) {
            if (!this.entries)
                return;
            for (var i = 0; i < this.entries.length; ++i)
                for (var e = this.entries[i]; e; e = e.next)
                    f(e);
        };
        Hashtable.prototype.forEach = function (f) {
            this.forEachEntry(function (e) { return f(e.key, e.value); });
        };
        Hashtable.prototype.mapEntries = function (f) {
            var res = [];
            if (this.entries) {
                for (var i = 0; i < this.entries.length; ++i)
                    for (var e = this.entries[i]; e; e = e.next)
                        res.push(f(e));
            }
            return res;
        };
        Hashtable.prototype.keys = function () {
            return this.mapEntries(function (e) { return e.key; });
        };
        Hashtable.prototype.pairs = function () {
            return this.mapEntries(function (e) {
                return { key: e.key, value: e.value };
            });
        };
        Hashtable.prototype.filteredValues = function (filter) {
            var res = [];
            if (this.entries) {
                for (var i = 0; i < this.entries.length; ++i)
                    for (var e = this.entries[i]; e; e = e.next) {
                        var val = e.value;
                        if (filter(val))
                            res.push(val);
                    }
            }
            return res;
        };
        Hashtable.prototype.countFiltered = function (filter) {
            var count = 0;
            if (this.entries) {
                for (var i = 0; i < this.entries.length; ++i)
                    for (var e = this.entries[i]; e; e = e.next) {
                        var val = e.value;
                        if (filter(val))
                            count = count + 1;
                    }
            }
            return count;
        };
        Hashtable.prototype.set = function (k, v) {
            var e = this.lookup(k, true);
            e.value = v;
        };
        Hashtable.prototype.get = function (k) {
            var e = this.lookup(k);
            if (!e)
                return undefined;
            return e.value;
        };
        Hashtable.prototype.clear = function () {
            this.entries = null;
            this.entryCount = 0;
        };
        Hashtable.stringHash = function (s) {
            var res = 5381;
            for (var i = 0; i < s.length; ++i)
                res = (((res + (res << 5)) | 0) + s.charCodeAt(i)) | 0;
            return res;
        };
        Hashtable.stringEq = function (a, b) {
            return a == b;
        };
        Hashtable.forStrings = function () {
            return new Hashtable(Hashtable.stringHash, Hashtable.stringEq);
        };
        Hashtable.jsonHash = function (v) {
            return Hashtable.stringHash(JSON.stringify(v));
        };
        Hashtable.jsonEq = function (a, b) {
            return (a == b) || JSON.stringify(a) == JSON.stringify(b);
        };
        Hashtable.forJson = function () {
            return new Hashtable(Hashtable.jsonHash, Hashtable.jsonEq);
        };
        Hashtable.primeSizes = [13, 29, 59, 127, 257, 521, 1049, 2099, 4201, 8419, 16843, 33703, 67409, 134837, 269683, 539389, 1078787, 2157587, 4315183, 8630387, 17260781, 34521589, 69043189, 138086407, 276172823, 552345671, 1104691373, 2209382761];
        return Hashtable;
    })();
    TDev.Hashtable = Hashtable;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    (function (Ticks) {
        Ticks[Ticks["noEvent"] = 0] = "noEvent";
        Ticks[Ticks["mainInit"] = 1] = "mainInit";
        Ticks[Ticks["mainHashChange"] = 2] = "mainHashChange";
        Ticks[Ticks["mainKeyEvent"] = 3] = "mainKeyEvent";
        Ticks[Ticks["mainShortcutKeyEvent"] = 4] = "mainShortcutKeyEvent";
        Ticks[Ticks["mainResetWorld"] = 5] = "mainResetWorld";
        Ticks[Ticks["artSoundPreviewPlay"] = 6] = "artSoundPreviewPlay";
        Ticks[Ticks["docsEdit"] = 7] = "docsEdit";
        Ticks[Ticks["exportAzure"] = 8] = "exportAzure";
        Ticks[Ticks["exportCordova"] = 9] = "exportCordova";
        Ticks[Ticks["exportHTML5"] = 10] = "exportHTML5";
        Ticks[Ticks["scriptPropsIconArt"] = 11] = "scriptPropsIconArt";
        Ticks[Ticks["scriptPropsSplashArt"] = 12] = "scriptPropsSplashArt";
        Ticks[Ticks["hourOfCodeDoneStep"] = 13] = "hourOfCodeDoneStep";
        Ticks[Ticks["hourOfCodeKeepCoding"] = 14] = "hourOfCodeKeepCoding";
        Ticks[Ticks["hourOfCodeConfirm"] = 15] = "hourOfCodeConfirm";
        Ticks[Ticks["hourOfCodeDone"] = 16] = "hourOfCodeDone";
        Ticks[Ticks["hourOfCodeMore"] = 17] = "hourOfCodeMore";
        Ticks[Ticks["hourOfCodeFinal"] = 18] = "hourOfCodeFinal";
        Ticks[Ticks["tutorialTranslateSplash"] = 19] = "tutorialTranslateSplash";
        Ticks[Ticks["tutorialTranslateStep"] = 20] = "tutorialTranslateStep";
        Ticks[Ticks["tutorialTranslateScript"] = 21] = "tutorialTranslateScript";
        Ticks[Ticks["tutorialKeepEditing"] = 22] = "tutorialKeepEditing";
        Ticks[Ticks["tutorialMoreTutorials"] = 23] = "tutorialMoreTutorials";
        Ticks[Ticks["tutorialNextStep"] = 24] = "tutorialNextStep";
        Ticks[Ticks["dodStart"] = 25] = "dodStart";
        Ticks[Ticks["dodDrop"] = 26] = "dodDrop";
        Ticks[Ticks["dodWrongTarget"] = 27] = "dodWrongTarget";
        Ticks[Ticks["cordovaBuild"] = 28] = "cordovaBuild";
        Ticks[Ticks["translateDocTopic"] = 29] = "translateDocTopic";
        Ticks[Ticks["legalNoticeSignIn"] = 30] = "legalNoticeSignIn";
        Ticks[Ticks["legalNoticeAgree"] = 31] = "legalNoticeAgree";
        Ticks[Ticks["calcAddMissingArgs"] = 32] = "calcAddMissingArgs";
        Ticks[Ticks["calcBackspace"] = 33] = "calcBackspace";
        Ticks[Ticks["calcCopy"] = 34] = "calcCopy";
        Ticks[Ticks["calcCut"] = 35] = "calcCut";
        Ticks[Ticks["calcDedicatedOp"] = 36] = "calcDedicatedOp";
        Ticks[Ticks["calcEdit"] = 37] = "calcEdit";
        Ticks[Ticks["calcEditString"] = 38] = "calcEditString";
        Ticks[Ticks["calcExtract"] = 39] = "calcExtract";
        Ticks[Ticks["calcPromoteToParameter"] = 40] = "calcPromoteToParameter";
        Ticks[Ticks["calcGoToDef"] = 41] = "calcGoToDef";
        Ticks[Ticks["calcFindRefs"] = 42] = "calcFindRefs";
        Ticks[Ticks["calcUnselect"] = 43] = "calcUnselect";
        Ticks[Ticks["calcExtend"] = 44] = "calcExtend";
        Ticks[Ticks["calcReplaceInScript"] = 45] = "calcReplaceInScript";
        Ticks[Ticks["calcReplaceInSelection"] = 46] = "calcReplaceInSelection";
        Ticks[Ticks["calcReplaceInAction"] = 47] = "calcReplaceInAction";
        Ticks[Ticks["calcInsertAssignment"] = 48] = "calcInsertAssignment";
        Ticks[Ticks["calcInsertString"] = 49] = "calcInsertString";
        Ticks[Ticks["calcIntelliButton"] = 50] = "calcIntelliButton";
        Ticks[Ticks["calcIntelliButton0"] = 51] = "calcIntelliButton0";
        Ticks[Ticks["calcIntelliButton1"] = 52] = "calcIntelliButton1";
        Ticks[Ticks["calcIntelliButton2"] = 53] = "calcIntelliButton2";
        Ticks[Ticks["calcIntelliButton3"] = 54] = "calcIntelliButton3";
        Ticks[Ticks["calcIntelliButton4"] = 55] = "calcIntelliButton4";
        Ticks[Ticks["calcIntelliButton5plus"] = 56] = "calcIntelliButton5plus";
        Ticks[Ticks["calcIntelliLiteral"] = 57] = "calcIntelliLiteral";
        Ticks[Ticks["calcIntelliLocal"] = 58] = "calcIntelliLocal";
        Ticks[Ticks["calcIntelliProperty"] = 59] = "calcIntelliProperty";
        Ticks[Ticks["calcIntelliPropertyPrimary"] = 60] = "calcIntelliPropertyPrimary";
        Ticks[Ticks["calcIntelliSingleton"] = 61] = "calcIntelliSingleton";
        Ticks[Ticks["calcIntelliLibrary"] = 62] = "calcIntelliLibrary";
        Ticks[Ticks["calcKeyboardSearch"] = 63] = "calcKeyboardSearch";
        Ticks[Ticks["calcMoveCursorLeft"] = 64] = "calcMoveCursorLeft";
        Ticks[Ticks["calcMoveCursorRight"] = 65] = "calcMoveCursorRight";
        Ticks[Ticks["calcNewLine"] = 66] = "calcNewLine";
        Ticks[Ticks["calcNextIntelliTopPage"] = 67] = "calcNextIntelliTopPage";
        Ticks[Ticks["calcNextIntelliPageSearch"] = 68] = "calcNextIntelliPageSearch";
        Ticks[Ticks["calcNextIntelliPage"] = 69] = "calcNextIntelliPage";
        Ticks[Ticks["calcNextIntelliPage0"] = 70] = "calcNextIntelliPage0";
        Ticks[Ticks["calcNextIntelliPage1"] = 71] = "calcNextIntelliPage1";
        Ticks[Ticks["calcNextIntelliPage2"] = 72] = "calcNextIntelliPage2";
        Ticks[Ticks["calcNextIntelliPage3"] = 73] = "calcNextIntelliPage3";
        Ticks[Ticks["calcNextIntelliPage4"] = 74] = "calcNextIntelliPage4";
        Ticks[Ticks["calcNextIntelliPage5plus"] = 75] = "calcNextIntelliPage5plus";
        Ticks[Ticks["calcAsync"] = 76] = "calcAsync";
        Ticks[Ticks["calcAwait"] = 77] = "calcAwait";
        Ticks[Ticks["calcNot"] = 78] = "calcNot";
        Ticks[Ticks["calcNumber"] = 79] = "calcNumber";
        Ticks[Ticks["calcPaste"] = 80] = "calcPaste";
        Ticks[Ticks["calcPickColor"] = 81] = "calcPickColor";
        Ticks[Ticks["calcPickNumber"] = 82] = "calcPickNumber";
        Ticks[Ticks["calcDemoteIntoLocal"] = 83] = "calcDemoteIntoLocal";
        Ticks[Ticks["calcPromoteIntoGlobal"] = 84] = "calcPromoteIntoGlobal";
        Ticks[Ticks["calcPromoteIntoField"] = 85] = "calcPromoteIntoField";
        Ticks[Ticks["calcRenameLocal"] = 86] = "calcRenameLocal";
        Ticks[Ticks["calcRenameProperty"] = 87] = "calcRenameProperty";
        Ticks[Ticks["calcSearchBack"] = 88] = "calcSearchBack";
        Ticks[Ticks["calcSearchRun"] = 89] = "calcSearchRun";
        Ticks[Ticks["calcSimplify"] = 90] = "calcSimplify";
        Ticks[Ticks["calcStrip"] = 91] = "calcStrip";
        Ticks[Ticks["calcSpecialKey"] = 92] = "calcSpecialKey";
        Ticks[Ticks["calcStartSearch"] = 93] = "calcStartSearch";
        Ticks[Ticks["calcStoreInVar"] = 94] = "calcStoreInVar";
        Ticks[Ticks["calcSwapBoolean"] = 95] = "calcSwapBoolean";
        Ticks[Ticks["calcSwapAsync"] = 96] = "calcSwapAsync";
        Ticks[Ticks["calcIntelliAsync"] = 97] = "calcIntelliAsync";
        Ticks[Ticks["calcSwitchToNormal"] = 98] = "calcSwitchToNormal";
        Ticks[Ticks["calcSwitchToNumber"] = 99] = "calcSwitchToNumber";
        Ticks[Ticks["calcTrueFalse"] = 100] = "calcTrueFalse";
        Ticks[Ticks["calcUndo"] = 101] = "calcUndo";
        Ticks[Ticks["calcGoToBoxProperty"] = 102] = "calcGoToBoxProperty";
        Ticks[Ticks["calcAddBoxProperty"] = 103] = "calcAddBoxProperty";
        Ticks[Ticks["calcInsertStringParamterValue"] = 104] = "calcInsertStringParamterValue";
        Ticks[Ticks["calcHelp"] = 105] = "calcHelp";
        Ticks[Ticks["calcElseIf"] = 106] = "calcElseIf";
        Ticks[Ticks["calcUnElseIf"] = 107] = "calcUnElseIf";
        Ticks[Ticks["calcBindGlobal"] = 108] = "calcBindGlobal";
        Ticks[Ticks["calcFixItAtomic"] = 109] = "calcFixItAtomic";
        Ticks[Ticks["calcEditArt"] = 110] = "calcEditArt";
        Ticks[Ticks["calcAddOptionalParameter"] = 111] = "calcAddOptionalParameter";
        Ticks[Ticks["calcChangeOptionalParameter"] = 112] = "calcChangeOptionalParameter";
        Ticks[Ticks["codeAddAbove"] = 113] = "codeAddAbove";
        Ticks[Ticks["codeAddBelow"] = 114] = "codeAddBelow";
        Ticks[Ticks["codeBoxed"] = 115] = "codeBoxed";
        Ticks[Ticks["codeCopy"] = 116] = "codeCopy";
        Ticks[Ticks["codeCopySelection"] = 117] = "codeCopySelection";
        Ticks[Ticks["codeDeleteSelection"] = 118] = "codeDeleteSelection";
        Ticks[Ticks["codeCut"] = 119] = "codeCut";
        Ticks[Ticks["codeCutSelection"] = 120] = "codeCutSelection";
        Ticks[Ticks["codeCycleSidePane"] = 121] = "codeCycleSidePane";
        Ticks[Ticks["codeCycleSidePaneFull"] = 122] = "codeCycleSidePaneFull";
        Ticks[Ticks["codeExtractAction"] = 123] = "codeExtractAction";
        Ticks[Ticks["codeFocusSidePane"] = 124] = "codeFocusSidePane";
        Ticks[Ticks["codeFocusSidePaneFull"] = 125] = "codeFocusSidePaneFull";
        Ticks[Ticks["codeFor"] = 126] = "codeFor";
        Ticks[Ticks["codeForEach"] = 127] = "codeForEach";
        Ticks[Ticks["codeHub"] = 128] = "codeHub";
        Ticks[Ticks["codeIf"] = 129] = "codeIf";
        Ticks[Ticks["codeMoveLeft"] = 130] = "codeMoveLeft";
        Ticks[Ticks["codeNewVar"] = 131] = "codeNewVar";
        Ticks[Ticks["codePaste"] = 132] = "codePaste";
        Ticks[Ticks["codeRun"] = 133] = "codeRun";
        Ticks[Ticks["codeResume"] = 134] = "codeResume";
        Ticks[Ticks["codeStartSelection"] = 135] = "codeStartSelection";
        Ticks[Ticks["codeSurround"] = 136] = "codeSurround";
        Ticks[Ticks["codeUndo"] = 137] = "codeUndo";
        Ticks[Ticks["codeSplit"] = 138] = "codeSplit";
        Ticks[Ticks["codeWhile"] = 139] = "codeWhile";
        Ticks[Ticks["codeUninstallScript"] = 140] = "codeUninstallScript";
        Ticks[Ticks["codeBackFromSearch"] = 141] = "codeBackFromSearch";
        Ticks[Ticks["codeDelete"] = 142] = "codeDelete";
        Ticks[Ticks["actionPropPrivate"] = 143] = "actionPropPrivate";
        Ticks[Ticks["actionPropTest"] = 144] = "actionPropTest";
        Ticks[Ticks["actionPropOffload"] = 145] = "actionPropOffload";
        Ticks[Ticks["actionPropAtomic"] = 146] = "actionPropAtomic";
        Ticks[Ticks["btnPaste"] = 147] = "btnPaste";
        Ticks[Ticks["btnCopy"] = 148] = "btnCopy";
        Ticks[Ticks["btnCut"] = 149] = "btnCut";
        Ticks[Ticks["btnSelect"] = 150] = "btnSelect";
        Ticks[Ticks["btnTryFix"] = 151] = "btnTryFix";
        Ticks[Ticks["btnUndoFix"] = 152] = "btnUndoFix";
        Ticks[Ticks["btnAddUp"] = 153] = "btnAddUp";
        Ticks[Ticks["btnAddDown"] = 154] = "btnAddDown";
        Ticks[Ticks["btnMoveLeft"] = 155] = "btnMoveLeft";
        Ticks[Ticks["btnBreakpoint"] = 156] = "btnBreakpoint";
        Ticks[Ticks["btnChangeKind"] = 157] = "btnChangeKind";
        Ticks[Ticks["calcBtnBackspace"] = 158] = "calcBtnBackspace";
        Ticks[Ticks["calcBtnUndo"] = 159] = "calcBtnUndo";
        Ticks[Ticks["calcBtnNumberKeypad"] = 160] = "calcBtnNumberKeypad";
        Ticks[Ticks["calcBtnMiscKeypad"] = 161] = "calcBtnMiscKeypad";
        Ticks[Ticks["calcBtnNormalKeypad"] = 162] = "calcBtnNormalKeypad";
        Ticks[Ticks["calcBtnApiSearch"] = 163] = "calcBtnApiSearch";
        Ticks[Ticks["editBtnSideSearch"] = 164] = "editBtnSideSearch";
        Ticks[Ticks["chooseCancel"] = 165] = "chooseCancel";
        Ticks[Ticks["editTapBelow"] = 166] = "editTapBelow";
        Ticks[Ticks["coverageShown"] = 167] = "coverageShown";
        Ticks[Ticks["coverageOpenInEditor"] = 168] = "coverageOpenInEditor";
        Ticks[Ticks["coverageBucketSurveyActionEdit"] = 169] = "coverageBucketSurveyActionEdit";
        Ticks[Ticks["coverageBucketSurveyStatementEdit"] = 170] = "coverageBucketSurveyStatementEdit";
        Ticks[Ticks["coverageBucketSurveyDebugger"] = 171] = "coverageBucketSurveyDebugger";
        Ticks[Ticks["coverageBucketSurveyBreakpoint"] = 172] = "coverageBucketSurveyBreakpoint";
        Ticks[Ticks["coverageBucketSurveyExceededSuccessfully"] = 173] = "coverageBucketSurveyExceededSuccessfully";
        Ticks[Ticks["profileShown"] = 174] = "profileShown";
        Ticks[Ticks["profileOpenInEditor"] = 175] = "profileOpenInEditor";
        Ticks[Ticks["debuggerExit"] = 176] = "debuggerExit";
        Ticks[Ticks["debuggerContinue"] = 177] = "debuggerContinue";
        Ticks[Ticks["debuggerStepIn"] = 178] = "debuggerStepIn";
        Ticks[Ticks["debuggerStepOver"] = 179] = "debuggerStepOver";
        Ticks[Ticks["debuggerStepOut"] = 180] = "debuggerStepOut";
        Ticks[Ticks["debuggerToggleBreakpoint"] = 181] = "debuggerToggleBreakpoint";
        Ticks[Ticks["debuggerViewInit"] = 182] = "debuggerViewInit";
        Ticks[Ticks["debuggerPauseWall"] = 183] = "debuggerPauseWall";
        Ticks[Ticks["debuggerShowValues"] = 184] = "debuggerShowValues";
        Ticks[Ticks["debuggerShowStack"] = 185] = "debuggerShowStack";
        Ticks[Ticks["debuggerGotoWall"] = 186] = "debuggerGotoWall";
        Ticks[Ticks["debuggerGotoCurrent"] = 187] = "debuggerGotoCurrent";
        Ticks[Ticks["debuggerAppLog"] = 188] = "debuggerAppLog";
        Ticks[Ticks["debuggerHelp"] = 189] = "debuggerHelp";
        Ticks[Ticks["debuggerValueClicked"] = 190] = "debuggerValueClicked";
        Ticks[Ticks["debuggerKeyboardEvent"] = 191] = "debuggerKeyboardEvent";
        Ticks[Ticks["editorTutorialClose"] = 192] = "editorTutorialClose";
        Ticks[Ticks["editorTutorialNext"] = 193] = "editorTutorialNext";
        Ticks[Ticks["editorTutorialPrevious"] = 194] = "editorTutorialPrevious";
        Ticks[Ticks["sideAddAction"] = 195] = "sideAddAction";
        Ticks[Ticks["sideAddActionTest"] = 196] = "sideAddActionTest";
        Ticks[Ticks["sideAddActionTypeDef"] = 197] = "sideAddActionTypeDef";
        Ticks[Ticks["sideAddEvent"] = 198] = "sideAddEvent";
        Ticks[Ticks["sideAddLibrary"] = 199] = "sideAddLibrary";
        Ticks[Ticks["sideAddPage"] = 200] = "sideAddPage";
        Ticks[Ticks["sideAddRecord"] = 201] = "sideAddRecord";
        Ticks[Ticks["sideAddObject"] = 202] = "sideAddObject";
        Ticks[Ticks["sideAddTable"] = 203] = "sideAddTable";
        Ticks[Ticks["sideAddIndex"] = 204] = "sideAddIndex";
        Ticks[Ticks["sideAddResource"] = 205] = "sideAddResource";
        Ticks[Ticks["sideAddVariable"] = 206] = "sideAddVariable";
        Ticks[Ticks["sideAddAnything"] = 207] = "sideAddAnything";
        Ticks[Ticks["sideHelp"] = 208] = "sideHelp";
        Ticks[Ticks["sideBraces"] = 209] = "sideBraces";
        Ticks[Ticks["sideDebug"] = 210] = "sideDebug";
        Ticks[Ticks["sideLogs"] = 211] = "sideLogs";
        Ticks[Ticks["sideErrors"] = 212] = "sideErrors";
        Ticks[Ticks["sideDeployWebSite"] = 213] = "sideDeployWebSite";
        Ticks[Ticks["sidePlugins"] = 214] = "sidePlugins";
        Ticks[Ticks["sideButtonPlugin"] = 215] = "sideButtonPlugin";
        Ticks[Ticks["sidePreview"] = 216] = "sidePreview";
        Ticks[Ticks["sideHistory"] = 217] = "sideHistory";
        Ticks[Ticks["sideHistoryGoTo"] = 218] = "sideHistoryGoTo";
        Ticks[Ticks["sidePaste"] = 219] = "sidePaste";
        Ticks[Ticks["sideScript"] = 220] = "sideScript";
        Ticks[Ticks["sideScriptGoToDecl"] = 221] = "sideScriptGoToDecl";
        Ticks[Ticks["sideSearch"] = 222] = "sideSearch";
        Ticks[Ticks["sideSearchGoToDecl"] = 223] = "sideSearchGoToDecl";
        Ticks[Ticks["sideSearchGoToStmt"] = 224] = "sideSearchGoToStmt";
        Ticks[Ticks["sidePublish"] = 225] = "sidePublish";
        Ticks[Ticks["sideShare"] = 226] = "sideShare";
        Ticks[Ticks["sideDisconnect"] = 227] = "sideDisconnect";
        Ticks[Ticks["sideRun"] = 228] = "sideRun";
        Ticks[Ticks["sideCut"] = 229] = "sideCut";
        Ticks[Ticks["sideCopy"] = 230] = "sideCopy";
        Ticks[Ticks["sideDelete"] = 231] = "sideDelete";
        Ticks[Ticks["sideFindRefs"] = 232] = "sideFindRefs";
        Ticks[Ticks["sideActionHeaderInit"] = 233] = "sideActionHeaderInit";
        Ticks[Ticks["sideCommentInit"] = 234] = "sideCommentInit";
        Ticks[Ticks["sideParameterInit"] = 235] = "sideParameterInit";
        Ticks[Ticks["sideResetSidePane"] = 236] = "sideResetSidePane";
        Ticks[Ticks["sideInlineActionInit"] = 237] = "sideInlineActionInit";
        Ticks[Ticks["sideExport"] = 238] = "sideExport";
        Ticks[Ticks["sideAllTests"] = 239] = "sideAllTests";
        Ticks[Ticks["sideTestOne"] = 240] = "sideTestOne";
        Ticks[Ticks["sideEditLibrary"] = 241] = "sideEditLibrary";
        Ticks[Ticks["sideUpdate"] = 242] = "sideUpdate";
        Ticks[Ticks["sideUpdateOne"] = 243] = "sideUpdateOne";
        Ticks[Ticks["sideActionAddInput"] = 244] = "sideActionAddInput";
        Ticks[Ticks["sideActionAddOutput"] = 245] = "sideActionAddOutput";
        Ticks[Ticks["sideMoveToLibrary"] = 246] = "sideMoveToLibrary";
        Ticks[Ticks["sideTutorialCancel"] = 247] = "sideTutorialCancel";
        Ticks[Ticks["sideTutorialRedisplay"] = 248] = "sideTutorialRedisplay";
        Ticks[Ticks["appsCreateAzureWebsite"] = 249] = "appsCreateAzureWebsite";
        Ticks[Ticks["appsDeployWebsite"] = 250] = "appsDeployWebsite";
        Ticks[Ticks["pluginStop"] = 251] = "pluginStop";
        Ticks[Ticks["pluginRunOperation"] = 252] = "pluginRunOperation";
        Ticks[Ticks["pluginAddMore"] = 253] = "pluginAddMore";
        Ticks[Ticks["pluginRunAnnotationOperation"] = 254] = "pluginRunAnnotationOperation";
        Ticks[Ticks["searchApiSynthesis"] = 255] = "searchApiSynthesis";
        Ticks[Ticks["searchApiSearchArt"] = 256] = "searchApiSearchArt";
        Ticks[Ticks["searchApiSearchLib"] = 257] = "searchApiSearchLib";
        Ticks[Ticks["searchApiSearchAuto"] = 258] = "searchApiSearchAuto";
        Ticks[Ticks["searchApiInsertArt"] = 259] = "searchApiInsertArt";
        Ticks[Ticks["searchApiUploadArt"] = 260] = "searchApiUploadArt";
        Ticks[Ticks["searchApiInsertLib"] = 261] = "searchApiInsertLib";
        Ticks[Ticks["wallBack"] = 262] = "wallBack";
        Ticks[Ticks["wallJS"] = 263] = "wallJS";
        Ticks[Ticks["wallEdit"] = 264] = "wallEdit";
        Ticks[Ticks["wallReplay"] = 265] = "wallReplay";
        Ticks[Ticks["wallScreenshot"] = 266] = "wallScreenshot";
        Ticks[Ticks["wallLogs"] = 267] = "wallLogs";
        Ticks[Ticks["wallStop"] = 268] = "wallStop";
        Ticks[Ticks["wallStopForce"] = 269] = "wallStopForce";
        Ticks[Ticks["wallPause"] = 270] = "wallPause";
        Ticks[Ticks["wallResume"] = 271] = "wallResume";
        Ticks[Ticks["wallRun"] = 272] = "wallRun";
        Ticks[Ticks["wallTraces"] = 273] = "wallTraces";
        Ticks[Ticks["wallAddHeart"] = 274] = "wallAddHeart";
        Ticks[Ticks["wallRemoveHeart"] = 275] = "wallRemoveHeart";
        Ticks[Ticks["commentAttach"] = 276] = "commentAttach";
        Ticks[Ticks["commentBugTracking"] = 277] = "commentBugTracking";
        Ticks[Ticks["coreRun"] = 278] = "coreRun";
        Ticks[Ticks["coreResume"] = 279] = "coreResume";
        Ticks[Ticks["coreRerun"] = 280] = "coreRerun";
        Ticks[Ticks["corePublishHidden"] = 281] = "corePublishHidden";
        Ticks[Ticks["corePublishPublic"] = 282] = "corePublishPublic";
        Ticks[Ticks["runtimePlayAgain"] = 283] = "runtimePlayAgain";
        Ticks[Ticks["runtimeBack"] = 284] = "runtimeBack";
        Ticks[Ticks["appUpdateAvailable"] = 285] = "appUpdateAvailable";
        Ticks[Ticks["appNoUpdate"] = 286] = "appNoUpdate";
        Ticks[Ticks["appQuickUpdate"] = 287] = "appQuickUpdate";
        Ticks[Ticks["appUpdate"] = 288] = "appUpdate";
        Ticks[Ticks["editorUpdateScript"] = 289] = "editorUpdateScript";
        Ticks[Ticks["editorUpdateLibrary"] = 290] = "editorUpdateLibrary";
        Ticks[Ticks["editorRunWithProfiling"] = 291] = "editorRunWithProfiling";
        Ticks[Ticks["editorRunWithCoverage"] = 292] = "editorRunWithCoverage";
        Ticks[Ticks["editorRunAsMinion"] = 293] = "editorRunAsMinion";
        Ticks[Ticks["viewActionInit"] = 294] = "viewActionInit";
        Ticks[Ticks["viewLibraryRefInit"] = 295] = "viewLibraryRefInit";
        Ticks[Ticks["viewRecordInit"] = 296] = "viewRecordInit";
        Ticks[Ticks["viewScriptInit"] = 297] = "viewScriptInit";
        Ticks[Ticks["viewVariableInit"] = 298] = "viewVariableInit";
        Ticks[Ticks["hubCreateScript"] = 299] = "hubCreateScript";
        Ticks[Ticks["hubCreateGame"] = 300] = "hubCreateGame";
        Ticks[Ticks["hubCreateGroup"] = 301] = "hubCreateGroup";
        Ticks[Ticks["hubJoinGroup"] = 302] = "hubJoinGroup";
        Ticks[Ticks["hubUploadPicture"] = 303] = "hubUploadPicture";
        Ticks[Ticks["hubUploadSound"] = 304] = "hubUploadSound";
        Ticks[Ticks["hubGameTutorial"] = 305] = "hubGameTutorial";
        Ticks[Ticks["hubWinStore"] = 306] = "hubWinStore";
        Ticks[Ticks["hubDocs"] = 307] = "hubDocs";
        Ticks[Ticks["hubFirstTutorial"] = 308] = "hubFirstTutorial";
        Ticks[Ticks["hubDocsTutorial"] = 309] = "hubDocsTutorial";
        Ticks[Ticks["hubBasicEditorVideo"] = 310] = "hubBasicEditorVideo";
        Ticks[Ticks["hubBasicEditorVideoVoice"] = 311] = "hubBasicEditorVideoVoice";
        Ticks[Ticks["hubBasicEditorVideoSubtitles"] = 312] = "hubBasicEditorVideoSubtitles";
        Ticks[Ticks["hubBeginnersGettingStarted"] = 313] = "hubBeginnersGettingStarted";
        Ticks[Ticks["hubChatSearch"] = 314] = "hubChatSearch";
        Ticks[Ticks["hubRateTouchdevelop"] = 315] = "hubRateTouchdevelop";
        Ticks[Ticks["hubChooseSkill"] = 316] = "hubChooseSkill";
        Ticks[Ticks["hubDevBootCamp"] = 317] = "hubDevBootCamp";
        Ticks[Ticks["hubDocsApi"] = 318] = "hubDocsApi";
        Ticks[Ticks["hubDocsWhatsNew"] = 319] = "hubDocsWhatsNew";
        Ticks[Ticks["hubAdvancedEditorVideo"] = 320] = "hubAdvancedEditorVideo";
        Ticks[Ticks["hubSeeMoreMyScripts"] = 321] = "hubSeeMoreMyScripts";
        Ticks[Ticks["hubSeeMoreNewScripts"] = 322] = "hubSeeMoreNewScripts";
        Ticks[Ticks["hubSeeMoreArt"] = 323] = "hubSeeMoreArt";
        Ticks[Ticks["hubSeeMoreUsers"] = 324] = "hubSeeMoreUsers";
        Ticks[Ticks["hubSeeMoreCloudOther"] = 325] = "hubSeeMoreCloudOther";
        Ticks[Ticks["hubSeeMoreShowcase"] = 326] = "hubSeeMoreShowcase";
        Ticks[Ticks["hubSeeMoreTopScripts"] = 327] = "hubSeeMoreTopScripts";
        Ticks[Ticks["hubSeeMoreDocs"] = 328] = "hubSeeMoreDocs";
        Ticks[Ticks["hubSeeMoreCloud"] = 329] = "hubSeeMoreCloud";
        Ticks[Ticks["hubSeeMoreGroups"] = 330] = "hubSeeMoreGroups";
        Ticks[Ticks["hubMyScriptsShowcase"] = 331] = "hubMyScriptsShowcase";
        Ticks[Ticks["hubMyScriptsTemplate"] = 332] = "hubMyScriptsTemplate";
        Ticks[Ticks["hubNotifications"] = 333] = "hubNotifications";
        Ticks[Ticks["hubUpdates"] = 334] = "hubUpdates";
        Ticks[Ticks["hubDoUpdates"] = 335] = "hubDoUpdates";
        Ticks[Ticks["hubTests"] = 336] = "hubTests";
        Ticks[Ticks["hubShowcaseMgmt"] = 337] = "hubShowcaseMgmt";
        Ticks[Ticks["hubBenchmarks"] = 338] = "hubBenchmarks";
        Ticks[Ticks["hubForum"] = 339] = "hubForum";
        Ticks[Ticks["hubFacebook"] = 340] = "hubFacebook";
        Ticks[Ticks["hubTwitter"] = 341] = "hubTwitter";
        Ticks[Ticks["hubYouTube"] = 342] = "hubYouTube";
        Ticks[Ticks["hubSettings"] = 343] = "hubSettings";
        Ticks[Ticks["hubAbout"] = 344] = "hubAbout";
        Ticks[Ticks["hubHelp"] = 345] = "hubHelp";
        Ticks[Ticks["hubWrongTime"] = 346] = "hubWrongTime";
        Ticks[Ticks["hubTag"] = 347] = "hubTag";
        Ticks[Ticks["hubTagFromList"] = 348] = "hubTagFromList";
        Ticks[Ticks["hubTagSearch"] = 349] = "hubTagSearch";
        Ticks[Ticks["hubFeedback"] = 350] = "hubFeedback";
        Ticks[Ticks["hubChooseWallpaper"] = 351] = "hubChooseWallpaper";
        Ticks[Ticks["changeSkillScriptProperties"] = 352] = "changeSkillScriptProperties";
        Ticks[Ticks["changeSkillActionProperties"] = 353] = "changeSkillActionProperties";
        Ticks[Ticks["changeSkillScriptExplorer"] = 354] = "changeSkillScriptExplorer";
        Ticks[Ticks["editorSkillBlock"] = 355] = "editorSkillBlock";
        Ticks[Ticks["editorSkillClassic"] = 356] = "editorSkillClassic";
        Ticks[Ticks["editorSkillCurly"] = 357] = "editorSkillCurly";
        Ticks[Ticks["groupCodeReset"] = 358] = "groupCodeReset";
        Ticks[Ticks["groupCodeNew"] = 359] = "groupCodeNew";
        Ticks[Ticks["groupCodeGet"] = 360] = "groupCodeGet";
        Ticks[Ticks["groupDelete"] = 361] = "groupDelete";
        Ticks[Ticks["groupLeave"] = 362] = "groupLeave";
        Ticks[Ticks["groupJoin"] = 363] = "groupJoin";
        Ticks[Ticks["groupAllowAnyoneToJoin"] = 364] = "groupAllowAnyoneToJoin";
        Ticks[Ticks["groupRequireInvitationCodeToJoin"] = 365] = "groupRequireInvitationCodeToJoin";
        Ticks[Ticks["groupChangePicture"] = 366] = "groupChangePicture";
        Ticks[Ticks["publishShareGroup"] = 367] = "publishShareGroup";
        Ticks[Ticks["browseRun"] = 368] = "browseRun";
        Ticks[Ticks["browseEdit"] = 369] = "browseEdit";
        Ticks[Ticks["browsePin"] = 370] = "browsePin";
        Ticks[Ticks["browseHeart"] = 371] = "browseHeart";
        Ticks[Ticks["browseUnHeart"] = 372] = "browseUnHeart";
        Ticks[Ticks["browsePublish"] = 373] = "browsePublish";
        Ticks[Ticks["browsePush"] = 374] = "browsePush";
        Ticks[Ticks["browseDiffBase"] = 375] = "browseDiffBase";
        Ticks[Ticks["browseUpdate"] = 376] = "browseUpdate";
        Ticks[Ticks["browseSendPullRequest"] = 377] = "browseSendPullRequest";
        Ticks[Ticks["browsePublicationNotes"] = 378] = "browsePublicationNotes";
        Ticks[Ticks["browseListBugs"] = 379] = "browseListBugs";
        Ticks[Ticks["browseShare"] = 380] = "browseShare";
        Ticks[Ticks["browseListMyScripts"] = 381] = "browseListMyScripts";
        Ticks[Ticks["browseListNew"] = 382] = "browseListNew";
        Ticks[Ticks["browseListTop"] = 383] = "browseListTop";
        Ticks[Ticks["browseListShowcase"] = 384] = "browseListShowcase";
        Ticks[Ticks["browseListForum"] = 385] = "browseListForum";
        Ticks[Ticks["browseListDocs"] = 386] = "browseListDocs";
        Ticks[Ticks["browseListHelp"] = 387] = "browseListHelp";
        Ticks[Ticks["browseListGroups"] = 388] = "browseListGroups";
        Ticks[Ticks["browseListArt"] = 389] = "browseListArt";
        Ticks[Ticks["browseListMyArt"] = 390] = "browseListMyArt";
        Ticks[Ticks["browseListTags"] = 391] = "browseListTags";
        Ticks[Ticks["browseFollowTopic"] = 392] = "browseFollowTopic";
        Ticks[Ticks["introSlideGetStarted"] = 393] = "introSlideGetStarted";
        Ticks[Ticks["introSlideLimitations"] = 394] = "introSlideLimitations";
        Ticks[Ticks["introSlideCreateApps"] = 395] = "introSlideCreateApps";
        Ticks[Ticks["introSlidePopCorn"] = 396] = "introSlidePopCorn";
        Ticks[Ticks["introSlideLogIn"] = 397] = "introSlideLogIn";
        Ticks[Ticks["introSlideDismiss"] = 398] = "introSlideDismiss";
        Ticks[Ticks["recordAddKey"] = 399] = "recordAddKey";
        Ticks[Ticks["recordAddValue"] = 400] = "recordAddValue";
        Ticks[Ticks["recordPersTemporary"] = 401] = "recordPersTemporary";
        Ticks[Ticks["recordPersLocal"] = 402] = "recordPersLocal";
        Ticks[Ticks["recordPersCloud"] = 403] = "recordPersCloud";
        Ticks[Ticks["recordPersPartial"] = 404] = "recordPersPartial";
        Ticks[Ticks["recordExported"] = 405] = "recordExported";
        Ticks[Ticks["dbgEvent"] = 406] = "dbgEvent";
        Ticks[Ticks["dbgLogEvent"] = 407] = "dbgLogEvent";
        Ticks[Ticks["learnPlayVideo"] = 408] = "learnPlayVideo";
        Ticks[Ticks["learnBrowseDoc"] = 409] = "learnBrowseDoc";
        Ticks[Ticks["offlineLoginSync"] = 410] = "offlineLoginSync";
        Ticks[Ticks["offlineLoginSyncNoToken"] = 411] = "offlineLoginSyncNoToken";
        Ticks[Ticks["offlineLoginGettingStarted"] = 412] = "offlineLoginGettingStarted";
        Ticks[Ticks["offlineEnsureLogin"] = 413] = "offlineEnsureLogin";
        Ticks[Ticks["offlineEnsureLoginOk"] = 414] = "offlineEnsureLoginOk";
        Ticks[Ticks["translateNagDisplay"] = 415] = "translateNagDisplay";
        Ticks[Ticks["translateNagOk"] = 416] = "translateNagOk";
        Ticks[Ticks["benchmarksNagDisplay"] = 417] = "benchmarksNagDisplay";
        Ticks[Ticks["benchmarksNagDismiss"] = 418] = "benchmarksNagDismiss";
        Ticks[Ticks["benchmarksNagRunOne"] = 419] = "benchmarksNagRunOne";
        Ticks[Ticks["benchmarksNagRunSuite"] = 420] = "benchmarksNagRunSuite";
        Ticks[Ticks["songAlbumPlay"] = 421] = "songAlbumPlay";
        Ticks[Ticks["songPlay"] = 422] = "songPlay";
        Ticks[Ticks["warningNotificationTap"] = 423] = "warningNotificationTap";
        Ticks[Ticks["crashDialogEdit"] = 424] = "crashDialogEdit";
        Ticks[Ticks["crashDialogDebug"] = 425] = "crashDialogDebug";
        Ticks[Ticks["toLibNewLib"] = 426] = "toLibNewLib";
        Ticks[Ticks["toLibExistingLib"] = 427] = "toLibExistingLib";
        Ticks[Ticks["toLibOKtoMove"] = 428] = "toLibOKtoMove";
        Ticks[Ticks["toLibAdvanceSelectedToPending"] = 429] = "toLibAdvanceSelectedToPending";
        Ticks[Ticks["toLibMakeTheMove"] = 430] = "toLibMakeTheMove";
        Ticks[Ticks["toLibDiscardPending"] = 431] = "toLibDiscardPending";
        Ticks[Ticks["toLibExitToEditor"] = 432] = "toLibExitToEditor";
        Ticks[Ticks["collabFirstLoad"] = 433] = "collabFirstLoad";
        Ticks[Ticks["collabResume"] = 434] = "collabResume";
        Ticks[Ticks["collabRecordAst"] = 435] = "collabRecordAst";
        Ticks[Ticks["collabRealMerge"] = 436] = "collabRealMerge";
        Ticks[Ticks["collabPostChatMessage"] = 437] = "collabPostChatMessage";
        Ticks[Ticks["collabStartCollaboration"] = 438] = "collabStartCollaboration";
        Ticks[Ticks["collabStopCollaboration"] = 439] = "collabStopCollaboration";
    })(TDev.Ticks || (TDev.Ticks = {}));
    var Ticks = TDev.Ticks;
    var Ticker;
    (function (Ticker) {
        var logMsgs = [];
        var logSz = 200;
        var logIdx = -1;
        var thresholdTime = -1;
        var dateStr = "";
        var sessionEvents = {};
        var disabled = false;
        var delay = 10;
        var chunkId = 1;
        var maxDelay = 1200;
        var initialized = false;
        Ticker.mainJsName = "unknown";
        Ticker.fillEditorInfoBugReport;
        Ticker.fillEditorInfoTicksReport;
        function setDate() {
            var now = new Date();
            dateStr = TDev.Util.fmt("{0}.{1}.{2}", now.getFullYear(), now.getMonth() + 1, now.getDate());
            if (delay > maxDelay)
                delay = maxDelay;
            thresholdTime = now.getTime() + delay * 1000;
        }
        function disable() {
            disabled = true;
        }
        Ticker.disable = disable;
        function init() {
            var d = window.localStorage["ticksDelay"] * 1;
            if (d)
                delay = d;
            setDate();
            var archived = window.localStorage["archivedEvents"];
            if (archived) {
                var prevEvents;
                try {
                    prevEvents = JSON.parse(archived);
                }
                catch (e) {
                    TDev.Util.log("bogus JSON in archivedEvents: " + archived);
                    TDev.Util.check(false, "malformed JSON in archived events");
                    delete window.localStorage["archivedEvents"];
                }
                if (prevEvents) {
                    prevEvents.forEach(function (e) {
                        chunkId = Math.max(e.chunkId, chunkId);
                    });
                    chunkId++;
                    var last = prevEvents.peek();
                    if (!!last && last.dateStr == dateStr) {
                        sessionEvents = last.sessionEvents;
                        prevEvents.pop();
                        window.localStorage["archivedEvents"] = JSON.stringify(prevEvents);
                    }
                    sendOutEvents(prevEvents);
                }
            }
            initialized = true;
        }
        Ticker.init = init;
        function saveCurrent(sendCurrent) {
            if (sendCurrent === void 0) { sendCurrent = false; }
            var prevEvents = [];
            var archived = window.localStorage["archivedEvents"];
            if (archived)
                prevEvents = JSON.parse(archived);
            prevEvents.push({
                sessionEvents: sessionEvents,
                dateStr: dateStr,
                chunkId: chunkId++
            });
            prevEvents = prevEvents.filter(function (e) { return !!e.dateStr; });
            if (prevEvents.length > 30)
                prevEvents = prevEvents.slice(prevEvents.length - 30);
            var newVal = JSON.stringify(prevEvents);
            if (newVal.length > 50000)
                newVal = "[]";
            window.localStorage["archivedEvents"] = newVal;
            if (sendCurrent && TDev.Cloud.getAccessToken() && TDev.Cloud.isOnline())
                sendOutEvents(prevEvents);
        }
        Ticker.saveCurrent = saveCurrent;
        function checkDate() {
            if (TDev.Util.now() > thresholdTime) {
                setDate();
                saveCurrent(true);
                TDev.RT.Perf.saveCurrent(true);
                if (delay < maxDelay) {
                    delay *= 1.1;
                    window.localStorage["ticksDelay"] = delay + "";
                }
                sessionEvents = {};
            }
        }
        function sendOutEvents(events) {
            if (events.length == 0)
                return;
            var currId = events[0].chunkId;
            var req = {
                dateStr: events[0].dateStr,
                sessionEvents: events[0].sessionEvents,
                platform: TDev.Browser.platformCaps,
                worldId: "",
                jsUrl: Ticker.mainJsName
            };
            if (Ticker.fillEditorInfoTicksReport)
                Ticker.fillEditorInfoTicksReport(req);
            TDev.Cloud.postTicksAsync(req).done(function () {
                var events = window.localStorage["archivedEvents"];
                if (events) {
                    var newEvents = JSON.parse(events);
                    window.localStorage["archivedEvents"] = JSON.stringify(newEvents.filter(function (t) { return t.chunkId != currId; }));
                    sendOutEvents(newEvents);
                }
            }, function (e) {
            });
        }
        function tickName(t) {
            return TDev.enumToString(Ticks, t);
        }
        Ticker.tickName = tickName;
        function tickN(t, v) {
            tick(t + TDev.Util.boundTo(0, v, 5));
        }
        Ticker.tickN = tickN;
        function dbg(f) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var msg = TDev.Util.fmt_va(f, args);
            tick(406 /* dbgEvent */, msg);
        }
        Ticker.dbg = dbg;
        function localStorageState() {
            if (!window || !window.localStorage)
                return "";
            var l = window.localStorage;
            var r = "";
            for (var i = 0; i < l.length; ++i) {
                r += l.key(i) + " -> " + l[l.key(i)].length + ",  ";
            }
            return r;
        }
        Ticker.localStorageState = localStorageState;
        function mkBugReport(err, ctx) {
            if (ctx === void 0) { ctx = ""; }
            var r = {
                exceptionConstructor: "(unknown)",
                exceptionMessage: "(unknown)",
                context: ctx,
                currentUrl: "",
                worldId: "",
                kind: "",
                scriptId: "",
                stackTrace: "",
                sourceURL: "",
                line: -1,
                eventTrace: "",
                userAgent: "",
                resolution: "",
                jsUrl: Ticker.mainJsName,
                timestamp: TDev.Util.now(),
                platform: [],
                attachments: [],
            };
            if (Ticker.fillEditorInfoBugReport)
                Ticker.fillEditorInfoBugReport(r);
            if (Array.isArray(err.bugAttachments))
                r.attachments.pushRange(err.bugAttachments);
            try {
                var isDatabaseError = TDev.Util.isError(err, function (e) { return e.isDatabaseError; });
                var isNetworkError = TDev.Util.isError(err, function (e) { return e.isNetworkError; });
                r.kind = isDatabaseError ? "databaseError" : isNetworkError ? "networkError" : "";
                if (!err)
                    r.exceptionMessage = "(null)";
                else if (err.message) {
                    r.exceptionMessage = err.message + "";
                    if (err.stack)
                        r.stackTrace = err.stack + "";
                    else if (err.sourceURL)
                        r.stackTrace = "@" + err.sourceURL + ":" + err.line;
                }
                else if (Array.isArray(err)) {
                    r.exceptionMessage = err.join("\n");
                }
                else {
                    r.exceptionMessage = err + "";
                }
                if (err && err.name && err.name != "Error")
                    r.exceptionConstructor = err.name;
                else
                    r.exceptionConstructor = r.exceptionMessage.substr(0, 40);
                if (isDatabaseError)
                    r.exceptionConstructor = "DB " + r.exceptionConstructor;
                if (/autotest-/.test(ctx))
                    r.exceptionConstructor = "TEST " + r.exceptionConstructor;
                if (err.wabCrashInfo) {
                    r.stackTrace = err.wabCrashInfo + "\nJavaScript:\n" + r.stackTrace;
                    r.exceptionConstructor = "WAB " + r.exceptionConstructor;
                }
                if (r.exceptionMessage && /\[object /.test(r.exceptionMessage)) {
                    var msg = r.exceptionMessage;
                    var errorInfo = TDev.Util.getErrorInfo(err);
                    if (errorInfo)
                        msg += " " + errorInfo;
                    else
                        Object.keys(err).forEach(function (k) {
                            if (msg.length < 2000) {
                                msg += " " + k + ": '" + err[k] + "'";
                            }
                        });
                    r.exceptionMessage = msg;
                }
                if (/QUOTA/.test(r.exceptionMessage))
                    r.exceptionMessage += "  " + localStorageState();
                Ticker.dbg("CRASH REPORT " + r.exceptionMessage);
                if (err.sourceURL)
                    r.sourceURL = err.sourceURL;
                if (err.line)
                    r.line = err.line;
            }
            catch (e) {
                debugger;
            }
            try {
                TDev.RT.App.log("CRASH " + r.exceptionMessage);
            }
            catch (e) {
            }
            try {
                r.eventTrace = getRecentEvents().map(function (e) {
                    var s = 1000000000 + (r.timestamp - e.timestamp) + "";
                    s = s.slice(-9);
                    return s.slice(0, 6) + "." + s.slice(6, 9) + ": " + tickName(e.event) + (e.arg ? "|" + e.arg : "");
                }).join("\n");
                if (!r.eventTrace)
                    r.eventTrace = TDev.Util.getLogMsgs().map(function (m) { return m.elapsed + ": " + m.msg; }).join("\n");
            }
            catch (e) {
                debugger;
            }
            if (window.tdAppInsights)
                try {
                    window.tdAppInsights.trackException(err, r);
                }
                catch (e) {
                }
            return r;
        }
        Ticker.mkBugReport = mkBugReport;
        function bugReportToString(b) {
            var e = function (s) { return s.replace(/\r?\n/, " "); };
            return "Error: " + e(b.exceptionMessage) + "\n" + "URL: " + e(b.currentUrl) + " (script: " + e(b.scriptId) + ", context: " + e(b.context) + ")\n" + "JS-URL: " + e(b.jsUrl) + "\n" + "Platform: " + e(TDev.Browser.platformCaps.join(", ")) + "\n" + "UserAgent: " + e(b.userAgent) + " (resolution: " + e(b.resolution) + ")\n" + "Date: " + new Date(b.timestamp).toString() + "\n" + "\n" + "RecentEvents:\n" + b.eventTrace + "\n\n" + "StackTrace:\n" + b.stackTrace + "\n\n";
        }
        Ticker.bugReportToString = bugReportToString;
        function bugReportForHash(b) {
            return b.exceptionMessage + " " + b.stackTrace;
        }
        Ticker.bugReportForHash = bugReportForHash;
        function rawTick(tn) {
            if (!initialized || disabled)
                return;
            checkDate();
            tn = tn.replace(/[^a-zA-Z_]/g, "_");
            TDev.Util.log("TICK: " + tn);
            if (sessionEvents[tn])
                sessionEvents[tn]++;
            else
                sessionEvents[tn] = 1;
        }
        Ticker.rawTick = rawTick;
        function tickBase(t, sep, arg) {
            if (t == 0 /* noEvent */ || !t)
                return;
            var tn = tickName(t);
            if (arg)
                tn += sep + arg;
            if (t == 407 /* dbgLogEvent */) {
                t = 406 /* dbgEvent */;
            }
            else if (t == 406 /* dbgEvent */)
                TDev.Util.log("DBG: " + tn);
            else
                TDev.Util.log("TICK: " + tn);
            if (!initialized || disabled)
                return;
            checkDate();
            var m = { timestamp: TDev.Util.now(), event: t, arg: arg };
            if (logIdx >= 0) {
                logMsgs[logIdx++] = m;
                if (logIdx >= logSz)
                    logIdx = 0;
            }
            else {
                logMsgs.push(m);
                if (logMsgs.length >= logSz)
                    logIdx = 0;
            }
            if (t != 406 /* dbgEvent */) {
                if (sessionEvents[tn])
                    sessionEvents[tn]++;
                else
                    sessionEvents[tn] = 1;
                if (window.tdAppInsights)
                    try {
                        window.tdAppInsights.trackEvent(tn);
                    }
                    catch (e) {
                    }
            }
        }
        function tickArg(t, arg) {
            return tickBase(t, "$", arg);
        }
        Ticker.tickArg = tickArg;
        function tick(t, arg) {
            return tickBase(t, "|", arg);
        }
        Ticker.tick = tick;
        function getRecentEvents() {
            if (logIdx >= 0)
                return logMsgs.slice(logIdx).concat(logMsgs.slice(0, logIdx));
            else
                return logMsgs.slice(0);
        }
        Ticker.getRecentEvents = getRecentEvents;
    })(Ticker = TDev.Ticker || (TDev.Ticker = {}));
    function tick(t, arg) {
        Ticker.tick(t, arg);
    }
    TDev.tick = tick;
    function tickArg(t, arg) {
        Ticker.tickArg(t, arg);
    }
    TDev.tickArg = tickArg;
    function tickN(t, v) {
        Ticker.tickN(t, v);
    }
    TDev.tickN = tickN;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    TDev.snapView = false;
    var SizeMgr;
    (function (SizeMgr) {
        SizeMgr.topFontSize = 24;
        SizeMgr.windowHeight = 800;
        SizeMgr.windowWidth = 1300;
        SizeMgr.wallWindowWidth = 1300;
        SizeMgr.editorWindowWidth = 1300;
        SizeMgr.portraitMode = false;
        SizeMgr.phoneMode = false;
        SizeMgr.devicePixelRatio = 1;
        SizeMgr.hubFontSize = 30;
        SizeMgr.lastOrientationLockTime = 0;
        SizeMgr.splitScreen = false;
        SizeMgr.splitScreenRequested = false;
        var phoneSimulationW = -1;
        var phoneSimulationH = -1;
        var previousHeight = 0;
        var previousWidth = 0;
        var savedPortraitWidth = 320;
        var savedPortraitHeight = 460;
        function setupPhoneSimulation() {
            if (phoneSimulationW >= 0)
                return;
            var m = /phone=([\d\.]+)(x([\d\.]+))?/.exec(window.document.URL);
            if (m) {
                phoneSimulationW = parseFloat(m[1]);
                var h = m[3];
                if (!h)
                    h = m[1];
                phoneSimulationH = parseFloat(h);
            }
            else {
                phoneSimulationW = 0;
                phoneSimulationH = 0;
            }
        }
        function earlyInit() {
            SizeMgr.phoneMode = TDev.Browser.isCellphone || /phone=([\d\.]+)/.test(window.document.URL);
        }
        SizeMgr.earlyInit = earlyInit;
        function canSplitScreen() {
            return !SizeMgr.phoneMode && !SizeMgr.portraitMode && SizeMgr.windowWidth * 1.2 > SizeMgr.windowHeight;
        }
        SizeMgr.canSplitScreen = canSplitScreen;
        function setSplitScreen(isSplit) {
            SizeMgr.splitScreenRequested = isSplit;
            var newSplit = SizeMgr.splitScreenRequested && canSplitScreen();
            if (newSplit != SizeMgr.splitScreen) {
                SizeMgr.splitScreen = newSplit;
                applySizes(true);
            }
        }
        SizeMgr.setSplitScreen = setSplitScreen;
        function applySizes(force) {
            if (force === void 0) { force = false; }
            setupPhoneSimulation();
            var h = window.innerHeight;
            var w = window.innerWidth;
            if (TDev.Browser.isTrident && TDev.Browser.isCellphone) {
                if (w < h) {
                    SizeMgr.devicePixelRatio = window.screen.width / w;
                }
                else {
                    SizeMgr.devicePixelRatio = window.screen.height / w;
                }
            }
            TDev.Ticker.dbg("resize(prev w={0} h={1}, curr w={2} h={3})", previousWidth, previousHeight, w, h);
            if (!force && previousHeight > 0) {
                if (TDev.Browser.isTouchDevice && Math.abs(w - previousWidth) < 30 && Math.abs(previousHeight - h) > 1) {
                    if (TDev.Util.now() - SizeMgr.lastOrientationLockTime > 600) {
                        return;
                    }
                }
            }
            if (TDev.Browser.brokenResize) {
                if (w < h) {
                    if (h <= 300) {
                        w = savedPortraitWidth;
                        h = savedPortraitHeight;
                        TDev.Ticker.dbg("brokenResize, fixing up to {0}x{1}", w, h);
                    }
                    else {
                        savedPortraitWidth = w;
                        savedPortraitHeight = h;
                    }
                }
            }
            if (TDev.Browser.browser == 8 /* safari */ && TDev.Browser.isCellphone) {
                if (350 < h && h <= 416)
                    h = 417;
            }
            if (TDev.Browser.mobileWebkit) {
                TDev.Util.setTimeout(100, function () {
                    window.scrollTo(0, 1);
                });
            }
            var origW = w;
            var origH = h;
            var applySim = function (w, simW) { return simW <= 0 ? w : simW <= 2 ? simW * w : simW; };
            w = applySim(w, phoneSimulationW);
            h = applySim(h, phoneSimulationH);
            if (!force && h == previousHeight && w == previousWidth)
                return;
            previousHeight = h;
            previousWidth = w;
            var portraitThreshold = TDev.Browser.isDesktop ? 0.98 : 1.2;
            SizeMgr.portraitMode = w * portraitThreshold < h;
            if (TDev.Browser.isCellphone)
                SizeMgr.phoneMode = true;
            if (phoneSimulationW > 0) {
                SizeMgr.phoneMode = true;
            }
            SizeMgr.splitScreen = SizeMgr.splitScreenRequested && canSplitScreen();
            if (SizeMgr.phoneMode || SizeMgr.splitScreen)
                SizeMgr.portraitMode = true;
            TDev.Util.log("phone mode: " + (SizeMgr.phoneMode ? "on" : "off"));
            TDev.Util.log("resize " + w + "x" + h);
            var statusBarSize = 0;
            SizeMgr.windowHeight = h;
            SizeMgr.windowWidth = w;
            if (SizeMgr.splitScreen) {
                SizeMgr.editorWindowWidth = SizeMgr.windowWidth / 2;
                SizeMgr.wallWindowWidth = SizeMgr.windowWidth / 2;
            }
            else {
                SizeMgr.editorWindowWidth = SizeMgr.windowWidth;
                SizeMgr.wallWindowWidth = SizeMgr.windowWidth;
            }
            SizeMgr.topFontSize = Math.floor(Math.min(h / 25, SizeMgr.editorWindowWidth / (SizeMgr.phoneMode ? 25 : SizeMgr.portraitMode ? 36 : 55)));
            if (SizeMgr.splitScreen)
                SizeMgr.wallWindowWidth -= 0.15 * SizeMgr.topFontSize;
            var zoom = window.localStorage["zoomFactor"];
            if (zoom && parseFloat(zoom)) {
                SizeMgr.topFontSize = Math.round(SizeMgr.topFontSize * TDev.Util.between(0.3, parseFloat(zoom), 2));
            }
            TDev.elt("root").style.height = h + "px";
            if (phoneSimulationW > 0)
                TDev.elt("root").style.width = w + "px";
            TDev.elt("root").style.fontSize = SizeMgr.topFontSize + "px";
            var rootClass = SizeMgr.portraitMode ? "portrait" : "landscape";
            if (SizeMgr.phoneMode)
                rootClass += " phone";
            if (SizeMgr.splitScreen)
                rootClass += " split";
            if (TDev.Browser.assumeMouse)
                rootClass += " assume-mouse";
            if (TDev.Browser.assumeMouse && TDev.Browser.browser != 1 /* ie10 */ && TDev.Browser.browser != 2 /* ie11 */)
                rootClass += " assume-notouch";
            if (SizeMgr.topFontSize <= 12)
                rootClass += " tinyFont";
            if (SizeMgr.topFontSize <= 18)
                rootClass += " smallFont";
            rootClass += " rootClass";
            if (TDev.Browser.brokenColumns)
                rootClass += " brokenColumns";
            if (TDev.Browser.isWP8app)
                rootClass += " wp8app";
            TDev.elt("root").className = rootClass;
            var rootStyle = TDev.elt("root").style;
            if (phoneSimulationW > 0) {
                rootStyle.left = (origW - w) / 2 + "px";
                rootStyle.top = (origH - h) / 2 + "px";
                rootStyle.background = "#fff";
                document.body.style.background = "#666";
            }
            if (TDev.currentScreen)
                TDev.currentScreen.applySizes();
        }
        SizeMgr.applySizes = applySizes;
        function getColumnWidth() {
            return this.portraitMode ? (window.innerWidth - (2 * this.topFontSize)) : (18.5 * this.topFontSize);
        }
        SizeMgr.getColumnWidth = getColumnWidth;
    })(SizeMgr = TDev.SizeMgr || (TDev.SizeMgr = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    TDev.currentScreen = null;
    TDev.allScreens = [];
    var HistoryMgr = (function () {
        function HistoryMgr() {
            var _this = this;
            this.numReloads = 0;
            this.urlStack = [];
            this.numPush = 1;
            this.lastSetHash = "";
            this.replaceNext = false;
            Screen.pushModalHash = function (s, f) { return _this.pushModalHash(s, f); };
            Screen.popModalHash = function (s) { return _this.popModalHash(s); };
            HistoryMgr.instance = this;
            TDev.Util.onSetHash = function (s, r) { return _this.setHashHandler(s, r); };
            TDev.Util.onGoBack = function () { return _this.back(); };
        }
        HistoryMgr.prototype.currentHash = function () {
            return this.lastSetHash;
        };
        HistoryMgr.urlHash = function (url) {
            var i = url.indexOf('#');
            if (i > 0 && i < url.length - 1)
                return url.slice(i);
            else
                return "#hub";
        };
        HistoryMgr.windowHash = function () {
            var h = window.location.href;
            return HistoryMgr.urlHash(h);
        };
        HistoryMgr.prototype.pushState = function (h) {
            try {
                TDev.Util.log("pushState: " + h);
                h = window.location.href.replace(/#.*/, "") + (h || "");
                window.history.pushState(++this.numPush, null, h);
            }
            catch (e) {
            }
        };
        HistoryMgr.prototype.setHash = function (h, t) {
            TDev.Ticker.dbg("History.setHash|" + h);
            var repl = this.replaceNext;
            this.replaceNext = false;
            if (repl) {
                TDev.Ticker.dbg("History.setHash is a replace");
            }
            this.numReloads++;
            if (!/^#/.test(h))
                h = "#" + h;
            if (h == "#hub")
                h = "#";
            this.clearModalSuffix();
            Screen.arrivedAtHash(h);
            if (this.urlStack.length == 0 || this.urlStack.peek().url != h) {
                this.urlStack.push({ url: h, onPop: function () {
                } });
                this.pushState(h);
            }
            else {
                TDev.Ticker.dbg("setHash.. ignoring same hash");
            }
            if (t !== null) {
                if (t)
                    document.title = t + " - TouchDevelop";
                else
                    document.title = "TouchDevelop";
            }
        };
        HistoryMgr.prototype.pushModalHash = function (s, f) {
            var hash = '#modal-' + s;
            if (this.urlStack.length > 0 && this.urlStack.peek().url == hash) {
                this.urlStack.pop();
            }
            this.urlStack.push({ url: hash, onPop: f });
            this.pushState(this.topHash());
            Screen.arrivedAtHash(hash);
        };
        HistoryMgr.prototype.popModalHash = function (s) {
            TDev.Ticker.dbg("popModal " + s);
            var hash = '#modal-' + s;
            var index = -1;
            for (var i = 0; i < this.urlStack.length; i++) {
                if (this.urlStack[i].url == hash) {
                    index = i;
                    this.urlStack[i].onPop = null;
                    break;
                }
            }
            if (index < 0)
                return;
            this.popBack(this.urlStack.length - index);
        };
        HistoryMgr.prototype.popBack = function (toPop) {
            if (toPop === void 0) { toPop = 1; }
            TDev.Ticker.dbg("historyMgr: popBack " + toPop);
            var popped = this.urlStack.splice(this.urlStack.length - toPop, toPop);
            var seenNonModal = false;
            for (var i = popped.length - 1; i >= 0; i--) {
                var entry = popped[i];
                if (!/#modal-/.test(entry.url))
                    seenNonModal = true;
                if (entry.onPop) {
                    var f = entry.onPop;
                    entry.onPop = null;
                    f();
                }
            }
            var last = this.urlStack.peek();
            Screen.arrivedAtHash(last ? last.url : "#");
            if (seenNonModal)
                this.dispatch(this.topHash());
            else
                this.hashReloaded();
        };
        HistoryMgr.prototype.hashReloaded = function () {
            this.pushState(this.topHash());
        };
        HistoryMgr.prototype.topHash = function () {
            for (var i = this.urlStack.length - 1; i >= 0; i--) {
                var t = this.urlStack[i];
                if (t && !/^#modal-/.test(t.url))
                    return t.url;
            }
            return "#";
        };
        HistoryMgr.prototype.dispatch = function (h) {
            TDev.Util.log("dispatch: " + h);
            TDev.ModalDialog.dismissCurrent();
            this.pushState(h);
            this.reload(h);
        };
        HistoryMgr.prototype.initialHash = function () {
            this.setHashHandler(HistoryMgr.windowHash(), true);
            if (this.lastSetHash == "" && !this.replaceNext) {
                this.pushState(null);
                this.replaceNext = true;
                this.showStartScreen();
            }
        };
        HistoryMgr.prototype.showStartScreen = function () {
        };
        HistoryMgr.prototype.reload = function (hash) {
        };
        HistoryMgr.prototype.confirmLoadHash = function () {
            TDev.Ticker.dbg("History.confirmLoadHash");
            this.replaceNext = false;
        };
        HistoryMgr.prototype.clearModalSuffix = function () {
            for (var i = 0; i < this.urlStack.length; i++) {
                if (/^#modal-/.test(this.urlStack[i].url)) {
                    var removed = this.urlStack.splice(i, this.urlStack.length - i);
                    return removed.length;
                }
            }
            return 0;
        };
        HistoryMgr.prototype.clearModalStack = function () {
            var n = this.clearModalSuffix();
        };
        HistoryMgr.prototype.popState = function (event) {
            TDev.Ticker.dbg("popState: " + event.state);
            if (this.urlStack.length == 1) {
                window.history.back();
                return;
            }
            this.back();
        };
        HistoryMgr.prototype.back = function () {
            var _this = this;
            this.whenSafe(function () { return _this.popBack(); });
        };
        HistoryMgr.prototype.whenSafe = function (f) {
            var _this = this;
            if (TDev.ProgressOverlay.isActive())
                TDev.Util.setTimeout(500, function () { return _this.whenSafe(f); });
            else
                f();
        };
        HistoryMgr.prototype.setHashHandler = function (h, replace) {
            var _this = this;
            this.whenSafe(function () {
                if (!h)
                    h = "#";
                if (!/^#/.test(h))
                    h = "#" + h;
                _this.dispatch(h);
            });
        };
        HistoryMgr.prototype.scriptOrHub = function (h) {
            var id = h.filter(function (s) { return /^id=/.test(s); })[0];
            if (id) {
                var scr = id.replace(/^id=/, "script:");
                if (h[0] == "list")
                    TDev.Util.setHash(h[0] + ":" + h[1] + ":" + scr, true);
                else
                    TDev.Util.setHash(scr, true);
            }
            else {
                TDev.HTML.showErrorNotification("cannot load requested script");
                TDev.Util.setHash("hub", true);
            }
        };
        HistoryMgr.prototype.hashChange = function () {
            TDev.Util.log("hashChange: " + HistoryMgr.windowHash());
        };
        return HistoryMgr;
    })();
    TDev.HistoryMgr = HistoryMgr;
    var Screen = (function () {
        function Screen() {
            this.paneState = 0;
        }
        Screen.prototype.init = function () {
        };
        Screen.prototype.hide = function () {
        };
        Screen.prototype.screenId = function () {
            return "";
        };
        Screen.prototype.loadHash = function (h) {
        };
        Screen.prototype.keyDown = function (e) {
            return false;
        };
        Screen.prototype.applySizes = function () {
        };
        Screen.prototype.syncDone = function () {
        };
        Screen.prototype.hashReloaded = function () {
        };
        Screen.prototype.autoHide = function () {
            return TDev.SizeMgr.portraitMode;
        };
        Screen.prototype.sidePaneVisible = function () {
            return !this.autoHide() || this.sidePane().style.display == "block";
        };
        Screen.prototype.sidePaneVisibleNow = function () {
            return !this.autoHide() || this.paneState > 0;
        };
        Screen.prototype.updateSidePane = function () {
            var pane = this.sidePane();
            if (!this.autoHide()) {
                pane.style.display = "block";
                pane.style.opacity = "1";
            }
            else if (this.autoHide() && this.paneState < 0) {
                pane.style.display = "none";
            }
        };
        Screen.prototype.showSidePane = function () {
            var _this = this;
            if (!this.autoHide() || this.paneState > 0)
                return;
            Screen.pushModalHash("side", function () { return _this.hideSidePane(); });
            TDev.elt("root").setFlag("pane-hidden", false);
            this.paneState = 1;
            var pane = this.sidePane();
            pane.style.display = "block";
            pane.style.opacity = "1";
            TDev.Util.showRightPanel(pane);
        };
        Screen.prototype.sidePane = function () {
            return null;
        };
        Screen.prototype.hideSidePane = function () {
            var _this = this;
            var pane = this.sidePane();
            if (!this.autoHide()) {
                pane.style.display = "block";
                pane.style.opacity = "1";
                return;
            }
            if (this.paneState < 0)
                return;
            Screen.popModalHash("side");
            TDev.elt("root").setFlag("pane-hidden", true);
            this.paneState = -1;
            TDev.Util.hidePopup(pane, function () {
                if (_this.paneState < 0 && _this.autoHide())
                    pane.style.display = "none";
            });
        };
        Screen.pushModalHash = function (s, removeCb) {
        };
        Screen.popModalHash = function (s) {
        };
        Screen.arrivedAtHash = function (s) {
        };
        return Screen;
    })();
    TDev.Screen = Screen;
    var KeyboardMgr = (function () {
        function KeyboardMgr() {
            this.handlers = {};
        }
        KeyboardMgr.prototype.register = function (key, cb) {
            if (/^-/.test(key))
                return;
            this.handlers[key] = cb;
        };
        KeyboardMgr.prototype.saveState = function () {
            return TDev.Util.flatClone(this.handlers);
        };
        KeyboardMgr.prototype.loadState = function (s) {
            if (!TDev.Util.check(!!s))
                return;
            this.handlers = s;
        };
        KeyboardMgr.prototype.triggerKey = function (name) {
            var h = this.handlers[name];
            if (h && h.isBtnShortcut)
                h();
        };
        KeyboardMgr.triggerClick = function (e) {
            var h = e.clickHandler;
            if (!!h) {
                var active = document.activeElement;
                if (!!active && !!active.blur)
                    active.blur();
                e.setFlag("active", true);
                TDev.Util.setTimeout(150, function () {
                    e.setFlag("active", false);
                });
                h.fireClick({});
            }
        };
        KeyboardMgr.elementVisible = function (e) {
            while (e) {
                if (e.id == "root")
                    return true;
                if (window.getComputedStyle(e).display == "none")
                    return false;
                e = e.parentNode;
            }
            return false;
        };
        KeyboardMgr.prototype.btnShortcut = function (e, key) {
            var _this = this;
            var handle = function () {
                if (KeyboardMgr.elementVisible(e)) {
                    KeyboardMgr.triggerClick(e);
                    return true;
                }
                return false;
            };
            if (!key)
                return;
            handle.isBtnShortcut = true;
            if (!/^ /.test(key))
                key.split(", ").forEach(function (k) { return _this.register(k, handle); });
            e.title = key.replace(/(^| )-/g, "");
        };
        KeyboardMgr.prototype.keyUp = function (e) {
            TDev.Util.normalizeKeyEvent(e);
            if (/-(Control|Alt)$/.test(e.keyName))
                return true;
            var h = this.handlers["*keyup*"];
            if (h) {
                TDev.Ticker.dbg("keyUp.run");
                if (h(e))
                    return true;
            }
        };
        KeyboardMgr.prototype.processKey = function (e) {
            TDev.Util.normalizeKeyEvent(e);
            if (/-(Control|Alt)$/.test(e.keyName))
                return true;
            if (TDev.Browser.isGecko) {
                var isRepeated = e.type == "keypress" && this.previousStoppedEvent && this.previousStoppedEvent.type == "keydown";
                this.previousStoppedEvent = null;
                if (isRepeated)
                    return e.stopIt();
            }
            if (this.keyHandler(e)) {
                if (TDev.Browser.isGecko)
                    this.previousStoppedEvent = e;
                return e.stopIt();
            }
        };
        KeyboardMgr.prototype.attach = function (inp) {
            var _this = this;
            inp.onkeydown = TDev.Util.catchErrors("textboxKey", function (e) {
                e.fromTextBox = true;
                return _this.processKey(e);
            });
        };
        KeyboardMgr.prototype.keyHandler = function (e) {
            if (TDev.ProgressOverlay.isKeyboardBlocked())
                return true;
            if (e.keyName == "Ctrl-Control")
                return false;
            if (/^(Del|Ctrl-[CXVA]|Shift-(Left|Right)|(Ctrl|Shift)-(Ins|Del))$/.test(e.keyName) && e.fromTextBox)
                return false;
            if (TDev.dbg && e.keyName)
                TDev.tick(3 /* mainKeyEvent */);
            h = this.handlers["*keydown*"];
            if (h) {
                if (TDev.dbg && e.keyName)
                    TDev.Ticker.dbg("keyHandler.preCatchAll." + e.keyName);
                if (h(e))
                    return true;
            }
            var h = this.handlers[e.keyName];
            if (h) {
                if (TDev.dbg && e.keyName)
                    TDev.Ticker.dbg("keyHandler.byName." + e.keyName);
                if (h(e))
                    return true;
            }
            h = this.handlers["***"];
            if (h) {
                if (TDev.dbg && e.keyName)
                    TDev.Ticker.dbg("keyHandler.catchAll." + e.keyName);
                if (h(e))
                    return true;
            }
            if (TDev.currentScreen) {
                if (TDev.dbg && e.keyName)
                    TDev.Ticker.dbg("keyHandler.currentScreen." + e.keyName);
                if (TDev.currentScreen.keyDown(e))
                    return true;
            }
            if (e.keyCode == 8 && !e.fromTextBox)
                return true;
            return false;
        };
        KeyboardMgr.instance = new KeyboardMgr();
        return KeyboardMgr;
    })();
    TDev.KeyboardMgr = KeyboardMgr;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var LayoutMgr = (function () {
        function LayoutMgr() {
            this.onBoxSelected = function () {
            };
            this.onRendered = function () {
            };
            this.numBoxes = 0;
            this.scrollspeculation = true;
            this.currentAstNodeId = "";
            this.selectedBox = null;
            this.boxMenu = null;
            this.scrollTop = undefined;
            this.scrollLeft = undefined;
            this.sideview = false;
            this.scrollbarWidth = undefined;
            this.scrollbarHeight = undefined;
        }
        LayoutMgr.prototype.updateEditMode = function (rt) {
            this.editMode = rt.liveViewSupported() && (rt.isStopped() || rt.liveMode());
            if (this.editMode) {
            }
            else {
                if (this.currentAstNodeId) {
                    this.clearRelatedBoxes();
                }
                if (this.selectedBox !== null) {
                    this.unselectBox();
                }
                this.adjustForNormalView();
            }
            if (!!this.rootBox)
                this.updateRootElement();
        };
        LayoutMgr.RenderExecutionMode = function () {
            return LayoutMgr.renderexecutionmode;
        };
        LayoutMgr.SetRenderExecutionMode = function (val) {
            LayoutMgr.renderexecutionmode = val;
        };
        LayoutMgr.QueueReLayout = function () {
            var check = function () {
                if (LayoutMgr.needrelayout) {
                    if (!LayoutMgr.renderexecutionmode && LayoutMgr.instance.rootBox) {
                        LayoutMgr.instance.CoreLayout();
                        LayoutMgr.needrelayout = false;
                    }
                    else
                        TDev.Util.setTimeout(100, check);
                }
            };
            if (!LayoutMgr.needrelayout) {
                LayoutMgr.needrelayout = true;
                TDev.Util.setTimeout(50, check);
            }
        };
        LayoutMgr.prototype.adjustForSideView = function () {
            if (!this.sideview) {
                this.rootElement.style.overflow = "auto";
                this.rootElement.style.msContentZooming = "zoom";
                if (this.rootBox instanceof WallBox)
                    this.rootBox.setRenderedSideView(true);
                this.updateRootElement();
                this.sideview = true;
            }
        };
        LayoutMgr.prototype.adjustForNormalView = function () {
            if (this.sideview) {
                var rootelt = this.rootElement;
                rootelt.style.overflow = "";
                rootelt.style.msContentZooming = "";
                rootelt.scrollTop = 0;
                rootelt.scrollLeft = 0;
                rootelt.msContentZoomFactor = 1;
                if (this.rootBox instanceof WallBox)
                    this.rootBox.setRenderedSideView(false);
                this.updateRootElement();
                this.sideview = false;
            }
        };
        LayoutMgr.prototype.FlagTypingActivity = function (id) {
            this.lastbox_edited = id;
        };
        LayoutMgr.prototype.ClearTypingActivity = function (id) {
            if (this.lastbox_edited === id)
                this.lastbox_edited = undefined;
        };
        LayoutMgr.prototype.CheckTypingActivity = function (id) {
            return this.lastbox_edited === id;
        };
        LayoutMgr.createOrRecycleContainerBoxDelayed = function (rt, cur) {
            var pc = rt.getTopScriptPc();
            LayoutMgr.lazyInitCurrentRanderBox = function () {
                LayoutMgr.lazyInitCurrentRanderBox = function () {
                };
                var tag = LayoutMgr.htmlTagName || "div";
                LayoutMgr.htmlTagName = undefined;
                var w = WallBox.CreateOrRecycleContainerBox(rt, cur, pc, tag);
                LayoutMgr.currentbox = w;
            };
            LayoutMgr.currentbox = null;
        };
        LayoutMgr.setHtmlTagName = function (name) {
            if (LayoutMgr.currentbox)
                TDev.Util.userError(TDev.lf("you cannot set the HTML tag name here"));
            LayoutMgr.htmlTagName = name;
        };
        LayoutMgr.getCurrentRenderBox = function () {
            LayoutMgr.lazyInitCurrentRanderBox();
            return LayoutMgr.currentbox;
        };
        LayoutMgr.setCurrentRenderBox = function (box) {
            LayoutMgr.lazyInitCurrentRanderBox();
            LayoutMgr.currentbox = box;
        };
        LayoutMgr.prototype.findFirstBoxByNodeId = function (astNodeId) {
            if (!this.pcTable)
                return null;
            var box = this.pcTable[astNodeId];
            return box === undefined ? null : box;
        };
        LayoutMgr.prototype.findAllBoxesByNodeId = function (astNodeId) {
            var boxes = [];
            if (this.boxes)
                this.boxes.forEach(function (box) {
                    if (box.getAstNodeId() === astNodeId)
                        boxes.push(box);
                });
            return boxes;
        };
        LayoutMgr.prototype.findAllBoxesByPropertyNodeId = function (astNodeId) {
            var boxes = [];
            if (this.boxes)
                this.boxes.forEach(function (box) {
                    var pcTable = box.pcTable;
                    for (var propName in pcTable) {
                        if (pcTable[propName] === astNodeId) {
                            boxes.push(box);
                            break;
                        }
                    }
                });
            return boxes;
        };
        LayoutMgr.prototype.getSelectedBox = function () {
            return this.selectedBox;
        };
        LayoutMgr.prototype.setCurrentId = function (astNodeId) {
            this.currentAstNodeId = astNodeId;
        };
        LayoutMgr.prototype.getCurrentId = function () {
            return this.currentAstNodeId;
        };
        LayoutMgr.prototype.selectBox = function (box) {
            if (this.selectedBox !== null) {
                var parent = box;
                while (parent !== null) {
                    if (parent === this.selectedBox)
                        return false;
                    parent = parent.parent;
                }
                this.unselectBox();
            }
            if (this.currentAstNodeId)
                this.clearRelatedBoxes();
            if (!box || box.depth <= 0 || (box.isSingleChild && box.isLeaf() && box.depth > 1))
                return false;
            this.selectedBox = box;
            this.highlightSelectedBox();
            if (this.onBoxSelected)
                this.onBoxSelected();
            return true;
        };
        LayoutMgr.prototype.showBoxMenu = function (cb) {
            var editButton = TDev.HTML.mkRoundButton("svg:edit,black", TDev.lf("edit"), 264 /* wallEdit */, function () {
                if (cb)
                    cb();
            });
            this.boxMenu = TDev.div("wall-selected", [editButton]);
            this.refreshBoxMenu();
        };
        LayoutMgr.prototype.refreshBoxMenu = function () {
            if (this.boxMenu !== null) {
                this.updateBoxMenuPosition();
                this.rootElement.appendChild(this.boxMenu);
                this.checkBoxMenuPosition();
            }
        };
        LayoutMgr.prototype.hideBoxMenu = function () {
            if (this.boxMenu !== null) {
                TDev.Animation.fadeOut(this.boxMenu).begin();
                this.boxMenu = null;
            }
        };
        LayoutMgr.prototype.updateBoxMenuPosition = function () {
            if (this.selectedBox === null || this.boxMenu === null)
                return;
            var box = this.selectedBox;
            var offset = TDev.Util.offsetIn(box.element, this.rootElement);
            var renderedScale = 1;
            var viewWidth = this.rootElement.clientWidth, viewHeight = this.rootElement.clientHeight;
            var boxWidth = box.getRenderedWidth() * renderedScale, boxHeight = box.getRenderedHeight() * renderedScale;
            var viewLeft = offset.x * renderedScale, viewTop = offset.y * renderedScale;
            var margin = TDev.SizeMgr.topFontSize * 0.2;
            if (viewLeft + boxWidth / 2 < viewWidth / 2) {
                this.boxMenu.style.right = "auto";
                this.boxMenu.style.left = (viewLeft + boxWidth + margin) + "px";
            }
            else {
                this.boxMenu.style.left = "auto";
                this.boxMenu.style.right = (viewWidth - (viewLeft - margin)) + "px";
            }
            if (viewTop + boxHeight / 2 < viewHeight / 2) {
                this.boxMenu.style.bottom = "auto";
                this.boxMenu.style.top = viewTop + "px";
            }
            else {
                this.boxMenu.style.top = "auto";
                this.boxMenu.style.bottom = (viewHeight - (viewTop + boxHeight)) + "px";
            }
        };
        LayoutMgr.prototype.checkBoxMenuPosition = function () {
            if (this.boxMenu === null)
                return;
            var box = this.selectedBox;
            var offset = TDev.Util.offsetIn(this.boxMenu, this.rootElement);
            var renderedScale = 1;
            var viewWidth = this.rootElement.clientWidth, viewHeight = this.rootElement.clientHeight;
            var menuWidth = this.boxMenu.clientWidth * renderedScale, menuHeight = this.boxMenu.clientHeight * renderedScale;
            var viewLeft = offset.x * renderedScale - this.rootElement.scrollLeft, viewTop = offset.y * renderedScale - this.rootElement.scrollTop;
            var viewRight = viewLeft + menuWidth, viewBottom = viewTop + menuHeight;
            if (viewLeft < 0) {
                this.boxMenu.style.left = "0px";
                this.boxMenu.style.right = "auto";
            }
            else if (viewRight > viewWidth) {
                this.boxMenu.style.right = "0px";
                this.boxMenu.style.left = "auto";
            }
            if (viewTop < 0) {
                this.boxMenu.style.top = "0px";
                this.boxMenu.style.bottom = "auto";
            }
            else if (viewBottom > viewHeight) {
                this.boxMenu.style.bottom = "0px";
                this.boxMenu.style.top = "auto";
            }
        };
        LayoutMgr.prototype.unselectBox = function () {
            if (this.selectedBox !== null) {
                this.findAllBoxesByNodeId(this.selectedBox.getAstNodeId()).forEach(function (box) {
                    box.clearHighlight();
                });
                this.selectedBox = null;
                this.hideBoxMenu();
            }
        };
        LayoutMgr.prototype.highlightSelectedBox = function () {
            var _this = this;
            if (this.selectedBox !== null) {
                this.selectedBox.setHighlight();
                this.scrollToShow(this.selectedBox);
                this.findAllBoxesByNodeId(this.selectedBox.getAstNodeId()).forEach(function (box) {
                    if (_this.selectedBox !== box)
                        box.setHighlight(false);
                });
            }
        };
        LayoutMgr.prototype.highlightRelatedBoxes = function () {
            if (this.selectedBox !== null)
                this.unselectBox();
            if (this.currentAstNodeId) {
                var firstBox = this.findFirstBoxByNodeId(this.currentAstNodeId);
                if (firstBox !== null) {
                    firstBox.setHighlight();
                    this.selectedBox = firstBox;
                }
                this.findAllBoxesByPropertyNodeId(this.currentAstNodeId).forEach(function (box) {
                    if (firstBox !== box)
                        box.setHighlight(false);
                });
            }
        };
        LayoutMgr.prototype.clearRelatedBoxes = function () {
            if (this.currentAstNodeId) {
                this.findAllBoxesByPropertyNodeId(this.currentAstNodeId).forEach(function (box) {
                    box.clearHighlight();
                });
            }
            this.currentAstNodeId = "";
        };
        LayoutMgr.prototype.createZoomingUI = function () {
            var _this = this;
            var scaleSpan = TDev.span(null, "");
            var scaleSliderCursor = TDev.div("cursor");
            var scaleSlider = TDev.div("slider", [scaleSliderCursor]);
            this.updateslider = function (zoom, adjustscroll) {
                var oldScale = _this.scale;
                _this.scale = Math.max(_this.minimumScale, Math.min(zoom, _this.maximumScale));
                scaleSliderCursor.style.top = "0";
                scaleSliderCursor.style.left = (scaleSlider.clientWidth - scaleSliderCursor.clientWidth) * _this.fromZoomToSliderValue(_this.scale) + "px";
                scaleSpan.setChildren([Math.round(_this.scale * 100).toString() + "%"]);
                if (adjustscroll) {
                    _this.updateScaling(_this.scale);
                    if (_this.scrollTop !== undefined) {
                        _this.scrollTop = _this.scrollTop * _this.scale / oldScale + _this.rootElement.offsetHeight / 2 * (_this.scale / oldScale - 1);
                        _this.scrollLeft = _this.scrollLeft * _this.scale / oldScale + _this.rootElement.offsetWidth / 2 * (_this.scale / oldScale - 1);
                        _this.recoverScroll();
                    }
                }
            };
            new TDev.DragHandler(scaleSliderCursor, function (e, dx, dy) {
                var pos = TDev.Util.offsetIn(scaleSliderCursor, scaleSlider);
                var max = scaleSlider.clientWidth - scaleSliderCursor.clientWidth;
                _this.updateslider(_this.fromSliderValueToZoom(pos.x / max), true);
            });
            var zoomOutButton = TDev.HTML.mkButtonElt("wall-zoom-out", "-");
            zoomOutButton.withClick(function () {
                _this.updateslider(_this.scale * 0.9, true);
            });
            var zoomInButton = TDev.HTML.mkButtonElt("wall-zoom-in", "+");
            zoomInButton.withClick(function () {
                _this.updateslider(_this.scale * 1.1, true);
            });
            var ui = TDev.div("wall-zoom", scaleSpan, zoomOutButton, scaleSlider, zoomInButton);
            return ui;
        };
        LayoutMgr.prototype.fromSliderValueToZoom = function (value) {
            return this.minimumScale * Math.exp(Math.log(this.maximumScale / this.minimumScale) * value);
        };
        LayoutMgr.prototype.fromZoomToSliderValue = function (zoom) {
            return this.minimumScale >= this.maximumScale ? 1 : Math.log(zoom / this.minimumScale) / Math.log(this.maximumScale / this.minimumScale);
        };
        LayoutMgr.prototype.getRootElement = function () {
            return this.rootElement;
        };
        LayoutMgr.prototype.getRootBox = function () {
            return this.rootBox;
        };
        LayoutMgr.prototype.updateRootElement = function () {
            this.rootElement.setAttribute("livemode", this.editMode ? "true" : "false");
        };
        LayoutMgr.prototype.calcDefaultScaling = function () {
            if (this.sideview) {
                if (this.scale === undefined || isNaN(this.scale)) {
                    var horizontalScale = this.rootElement.offsetWidth / this.rootBox.element.offsetWidth;
                    var verticalScale = this.rootElement.offsetHeight / this.rootBox.element.offsetHeight;
                    this.minimumScale = Math.min(horizontalScale, verticalScale) * 0.5;
                    this.maximumScale = this.minimumScale * 100;
                    var defaultScale = Math.max(horizontalScale, verticalScale);
                    this.scale = defaultScale;
                    this.updateScaling(this.scale);
                }
            }
            else {
                this.updateScaling(1);
            }
        };
        LayoutMgr.prototype.updateScaling = function (scale) {
            if (this.sideview && this.rootElement.msContentZoomFactor) {
                TDev.Util.setTransform(this.rootBox.element, "scale(" + this.minimumScale * 10 + ", " + this.minimumScale * 10 + ")", "0% 0%");
                this.rootElement.msContentZoomFactor = scale / (this.minimumScale * 10);
                this.rootElement.style.msContentZoomLimit = "10% 1000%";
            }
            else {
                TDev.Util.setTransform(this.rootBox.element, "scale(" + scale + ", " + scale + ")", "0% 0%");
            }
        };
        LayoutMgr.prototype.FindScrollbarSizes = function (elt) {
            if (this.scrollbarWidth === undefined) {
                var saved = elt.style.overflow || "";
                this.scrollbarWidth = elt.clientWidth;
                this.scrollbarHeight = elt.clientHeight;
                elt.style.overflow = "scroll";
                this.scrollbarWidth -= elt.clientWidth;
                this.scrollbarHeight -= elt.clientHeight;
                elt.style.overflow = saved;
            }
        };
        LayoutMgr.prototype.recoverScroll = function () {
            if (this.sideview) {
                if (this.scrollTop !== undefined) {
                    this.rootElement.scrollTop = this.scrollTop;
                    this.rootElement.scrollLeft = this.scrollLeft;
                }
            }
        };
        LayoutMgr.prototype.onScroll = function () {
            this.scrollTop = this.rootElement.scrollTop;
            this.scrollLeft = this.rootElement.scrollLeft;
            var zoomfactor = this.rootElement.msContentZoomFactor;
            if (zoomfactor)
                this.updateslider(zoomfactor * this.minimumScale * 10, false);
        };
        LayoutMgr.prototype.scrollToShow = function (box) {
        };
        LayoutMgr.prototype.render = function (box, e) {
            if (box === null || (box.parent !== null && box.parent !== undefined)) {
                return;
            }
            this.rootElement = e;
            this.rootBox = box;
            box.isRoot = true;
            var el = box.element;
            if (this.rootElement.firstChild != el || !this.rootBox.structuring_done) {
                this.CreateOrFixElementStructure();
            }
            this.CoreLayout();
        };
        LayoutMgr.prototype.isOnScreen = function (node) {
            var top = document.documentElement;
            while (node) {
                if (node === top)
                    return true;
                if (node.style.display === "none")
                    return false;
                node = node.parentNode;
            }
            return false;
        };
        LayoutMgr.prototype.CoreLayout = function () {
            var _this = this;
            if (this.rootBox instanceof HtmlBox) {
                this.rootBox.doLayout();
                return;
            }
            if (!this.isOnScreen(this.rootElement))
                return;
            TDev.Util.time("CoreLayout", function () {
                _this.FindScrollbarSizes(_this.rootElement);
                if (_this.sideview && _this.scale !== undefined && _this.scale != 1)
                    _this.updateScaling(_this.scale);
                _this.rootBox.doLayout();
                if (_this.rootBox instanceof WallBox && !_this.rootBox.speculationwascorrect(_this.scrollspeculation)) {
                    _this.scrollspeculation = !_this.scrollspeculation;
                    _this.rootBox.doLayout();
                }
                _this.calcDefaultScaling();
                if (_this.sideview) {
                    _this.recoverScroll();
                    _this.updateslider(_this.scale, true);
                }
                if (_this.onRendered)
                    _this.onRendered();
            }, false);
        };
        LayoutMgr.prototype.CreateOrFixElementStructure = function () {
            this.boxes = [];
            this.pcTable = {};
            var e = this.rootElement;
            var el = this.rootBox.element;
            while (e.hasChildNodes()) {
                var b = e.firstChild;
                if (b == el)
                    break;
                e.removeChild(b);
            }
            while (e.hasChildNodes()) {
                var b = e.lastChild;
                if (b == el)
                    break;
                e.removeChild(b);
            }
            this.passS(this.rootBox);
            this.rootBox.structuring_done = true;
        };
        LayoutMgr.prototype.passS = function (box) {
            if (box.doLiveNavigation()) {
                this.boxes.push(box);
                this.recordmapping(box);
            }
            box.visitS();
            for (var i = 0; i < box.children.length; i++)
                this.passS(box.children[i]);
        };
        LayoutMgr.prototype.recordmapping = function (box) {
            if (this.pcTable[box.getAstNodeId()] === undefined)
                this.pcTable[box.getAstNodeId()] = box;
            for (var propName in box.pcTable)
                if (this.pcTable[box.pcTable[propName]] === undefined)
                    this.pcTable[box.pcTable[propName]] = box;
        };
        LayoutMgr.instance = new LayoutMgr();
        LayoutMgr.renderexecutionmode = false;
        LayoutMgr.needrelayout = false;
        LayoutMgr.lazyInitCurrentRanderBox = function () {
        };
        return LayoutMgr;
    })();
    TDev.LayoutMgr = LayoutMgr;
    var WallPage = (function () {
        function WallPage(rt, auto) {
            this.topDown = false;
            this.crashed = false;
            this.id = TDev.Random.uniqueId();
            this.csslayout = false;
            this.lastChildCount = -1;
            this.title = "";
            this.subtitle = "";
            this.chromeVisible = true;
            this.backButtonVisible = true;
            this.fgColor = "#000000";
            this.bgColor = "#ffffff";
            this.renderCount = 0;
            this.onNavigatedFrom = new TDev.RT.Event_();
            this.runtime = rt;
            this.element = TDev.div("wall-page");
            this.buttons = [];
            this.auto = auto;
            this.onNavigatedFrom.isPageEvent = true;
            this.clear();
        }
        WallPage.prototype.activate = function () {
            this.getElement().style.display = "block";
        };
        WallPage.prototype.deactivate = function () {
            this.getElement().style.display = "none";
        };
        WallPage.prototype.getElement = function () {
            return this.element;
        };
        WallPage.prototype.isAuto = function () {
            return this.auto;
        };
        WallPage.prototype.isReversed = function () {
            return this.topDown;
        };
        WallPage.prototype.setReversed = function (reversed) {
            if (this.topDown != reversed) {
                this.lastChildCount = -1;
                this.topDown = reversed;
            }
        };
        WallPage.prototype.rtPage = function () {
            if (!this._rtPage)
                this._rtPage = TDev.RT.Page.mk(this);
            return this._rtPage;
        };
        WallPage.applySizeUpdate = function (e) {
            var walkHtml = function (e) {
                if (!e)
                    return;
                if (e.updateSizes)
                    e.updateSizes();
                TDev.Util.childNodes(e).forEach(walkHtml);
            };
            walkHtml(e);
        };
        WallPage.prototype.getFrame = function (prev, ret) {
            var _this = this;
            var rt = prev.rt;
            if (!this.isAuto()) {
                var frame = {};
                frame.previous = prev;
                frame.rt = prev.rt;
                frame.returnAddr = ret;
                frame.entryAddr = function (s) {
                    return s.rt.leave();
                };
                return frame;
            }
            if (!this.drawFn) {
                var f = prev.rt.compiled.lookupLibPage(this.libName, this.pageName);
                this.drawFn = function (prev, ret) {
                    var newFrame = f(prev);
                    return newFrame.invoke.apply(null, [newFrame, ret].concat(_this.drawArgs));
                };
            }
            return this.drawFn(prev, ret);
        };
        WallPage.prototype.refreshForNewScript = function () {
            this.drawFn = null;
        };
        WallPage.prototype.getCurrentBox = function () {
            return this.currentBox;
        };
        WallPage.prototype.setCurrentBox = function (box) {
            this.currentBox = box;
        };
        WallPage.prototype.setFullScreenElement = function (host, elt) {
            this.fullScreenElement = elt;
            host.setFullScreenElement(elt);
        };
        WallPage.prototype.clear = function () {
            this.rootBox = WallBox.CreateOrRecycleRoot(this.runtime, null);
            this.setCurrentBox(this.rootBox);
            this.lastChildCount = -1;
        };
        WallPage.prototype.startrender = function () {
            this.renderCount++;
            this.rootBox = WallBox.CreateOrRecycleRoot(this.runtime, this.rootBox);
            this.setCurrentBox(this.rootBox);
            this.lastChildCount = -1;
        };
        WallPage.prototype.render = function (host, popCount) {
            if (popCount === void 0) { popCount = 0; }
            TDev.Contract.Requires(popCount >= 0);
            var rootElt = this.getElement();
            var getElt = function (b) {
                return TDev.div("legacy-wall-box", b.getContent());
            };
            rootElt.style.background = "none";
            rootElt.style.color = this.fgColor;
            if (this.isAuto()) {
                rootElt.className = "wall-page " + (this.csslayout ? " html-page" : "box-page");
                this.setFullScreenElement(host, null);
                LayoutMgr.instance.render(this.rootBox, rootElt);
            }
            else {
                TDev.Util.assert(this.rootBox instanceof WallBox);
                var i = 0;
                var sz = this.rootBox.size();
                var newElts = [];
                if (sz > 0) {
                    var last = this.rootBox.get(sz - 1);
                    if (last.fullScreen) {
                        this.setFullScreenElement(host, TDev.div("wall-fullscreen", last.getContent()));
                        this.lastChildCount = -1;
                        return;
                    }
                }
                this.setFullScreenElement(host, null);
                rootElt.className = "wall-page classic-page";
                if (this.lastChildCount < 0) {
                    var children = [];
                    for (i = 0; i < sz; ++i)
                        children.push(this.rootBox.get(this.isReversed() ? i : sz - i - 1));
                    rootElt.setChildren(children.map(getElt));
                    newElts = [rootElt];
                }
                else {
                    for (i = this.lastChildCount - popCount; i < sz; ++i) {
                        var ch = getElt(this.rootBox.get(i));
                        newElts.push(ch);
                        if (this.isReversed()) {
                            rootElt.appendChild(ch);
                        }
                        else {
                            var first = rootElt.firstChild;
                            if (!first)
                                rootElt.appendChild(ch);
                            else
                                rootElt.insertBefore(ch, first);
                        }
                    }
                    for (var i = 0; i < popCount; ++i) {
                        if (this.isReversed()) {
                            var firstChild = rootElt.firstChild;
                            if (firstChild)
                                rootElt.removeChild(firstChild);
                        }
                        else {
                            var lastChild = rootElt.lastChild;
                            if (lastChild)
                                rootElt.removeChild(lastChild);
                        }
                    }
                }
                this.lastChildCount = sz;
                newElts.forEach(WallPage.applySizeUpdate);
            }
        };
        return WallPage;
    })();
    TDev.WallPage = WallPage;
    var BoxAttributes = (function () {
        function BoxAttributes() {
            this.tappedEvent = this.mkEv();
            this.textEditingEvent = this.mkEv();
        }
        BoxAttributes.prototype.applyToStyle = function (b) {
            TDev.Util.oops("must override");
        };
        BoxAttributes.prototype.mkEv = function () {
            var r = new TDev.RT.Event_();
            r.isPageEvent = true;
            return r;
        };
        return BoxAttributes;
    })();
    TDev.BoxAttributes = BoxAttributes;
    var HtmlAttributes = (function (_super) {
        __extends(HtmlAttributes, _super);
        function HtmlAttributes() {
            _super.apply(this, arguments);
        }
        HtmlAttributes.prototype.applyToStyle = function (b) {
            TDev.Util.assert(b instanceof HtmlBox);
            var bb = b;
            if (bb.element.nodeType == Node.ELEMENT_NODE) {
                bb.setRenderedClassnames(this.classnames);
                bb.setRenderedStyles(this.styles);
                bb.setRenderedAttributes(this.attributes);
            }
        };
        return HtmlAttributes;
    })(BoxAttributes);
    TDev.HtmlAttributes = HtmlAttributes;
    var LayoutAttributes = (function (_super) {
        __extends(LayoutAttributes, _super);
        function LayoutAttributes(isroot) {
            _super.call(this);
            this.flow = WallBox.FLOW_VERTICAL;
            this.fontSize = 0;
            this.fontFamily = "";
            this.background = "transparent";
            this.width = [0, Infinity];
            this.height = [0, Infinity];
            this.margin = [0, 0, 0, 0];
            this.padding = [0, 0, 0, 0];
            this.stretchwidth = -1;
            this.stretchheight = -1;
            this.stretchmargin = [0, 0, 0, 0];
            this.borderwidth = [0, 0, 0, 0];
            this.arrangement = [undefined, WallBox.ARRANGE_BASELINE];
            this.scroll = [isroot, isroot];
            this.legacystretch = [false, false];
            this.legacybaseline = true;
            this.wrap = undefined;
            this.wraplimit = 15;
            this.textEditedEvent = this.mkEv();
        }
        LayoutAttributes.prototype.applyToStyle = function (b) {
            b.setRenderedPositionMode("absolute");
            b.setRenderedTextAlign(this.textalign);
            b.setRenderedBackgroundColor(this.background);
            b.setRenderedBackgroundImages(this.backgroundImages);
            b.setRenderedColor(this.foreground);
            b.setRenderedFontWeight(this.fontWeight);
            b.setRenderedFontFamily(this.fontFamily);
            b.setRenderedFontSize(this.fontSize);
            b.setRenderedWrap(this.wrap, this.wraplimit);
            b.setRenderedBorder(this.border, this.borderwidth);
        };
        return LayoutAttributes;
    })(BoxAttributes);
    TDev.LayoutAttributes = LayoutAttributes;
    var BoxBase = (function () {
        function BoxBase(rt, parent, nodeId) {
            this.obsolete = false;
            this.recycled = false;
            this.reuseindex = 0;
            this.fresh = true;
            this.structuring_done = false;
            this.isSingleChild = false;
            this.delayedlayout = false;
            this.inputversions = new Array();
            this.runtime = rt;
            this.id = LayoutMgr.instance.numBoxes++;
            this.astNodeId = nodeId;
            this.isRoot = false;
            this.parent = parent;
            if (this.parent) {
                this.parent.children.push(this);
                this.depth = this.parent.depth + 1;
            }
            else {
                this.depth = 0;
            }
            this.children = [];
            this.pcTable = { "": this.astNodeId };
        }
        BoxBase.prototype.getContent = function () {
            return undefined;
        };
        BoxBase.prototype.setContent = function (e) {
        };
        BoxBase.prototype.RefreshOnScreen = function () {
        };
        BoxBase.prototype.SwapImageContent = function (newcontent) {
        };
        BoxBase.prototype.hookContent = function () {
        };
        BoxBase.prototype.mayReplaceWith = function (tagname) {
            return false;
        };
        BoxBase.prototype.isLeaf = function () {
            return false;
        };
        BoxBase.prototype.doLiveNavigation = function () {
            return true;
        };
        BoxBase.prototype.getRenderedWidth = function () {
            return 0;
        };
        BoxBase.prototype.getRenderedHeight = function () {
            return 0;
        };
        BoxBase.prototype.setHighlight = function (strong) {
            if (strong === void 0) { strong = true; }
        };
        BoxBase.prototype.clearHighlight = function () {
        };
        BoxBase.prototype.Obsolete = function () {
            this.obsolete = true;
            this.children.forEach(function (c) { return c.Obsolete(); });
        };
        BoxBase.prototype.getAstNodeId = function () {
            return this.astNodeId;
        };
        BoxBase.prototype.onFunctionCall = function (f, pc) {
            var functionNames = f.toString().match(/function ([^\(]+)/);
            if (functionNames !== null) {
                var functionName = functionNames[1];
                this.onCall(functionName, pc);
            }
        };
        BoxBase.prototype.onCall = function (fName, pc) {
            if (!pc)
                return;
            this.pcTable[fName] = pc;
        };
        BoxBase.prototype.tapped = function () {
            var done = false;
            if (LayoutMgr.instance.editMode) {
                if (LayoutMgr.instance.selectBox(this))
                    done = true;
            }
            else {
                if (this.obsolete || (this.runtime.eventQ && !this.runtime.eventQ.viewIsCurrent()))
                    return;
                if (this.attributes.tappedEvent.handlers) {
                    done = true;
                    this.setRenderedTappable(true, true);
                    this.runtime.queueLocalEvent(this.attributes.tappedEvent);
                    this.runtime.forcePageRefresh();
                }
                else if (this.contenttapapplies()) {
                    this.contenttaphandler();
                    done = true;
                }
            }
            if (LayoutMgr.instance.editMode || this instanceof WallBox)
                if (!done && this.parent)
                    this.parent.tapped();
        };
        BoxBase.prototype.withClick = function (h) {
            this.contenttaphandler = h;
        };
        BoxBase.prototype.contenttapapplies = function () {
            return this.contenttaphandler && !this.attributes.tappedEvent.handlers && !(this.isSingleChild && this.parent.attributes.tappedEvent.handlers);
        };
        BoxBase.prototype.setRenderedTappable = function (tappable, tapped) {
        };
        BoxBase.prototype.bindEditableText = function (s, handler, pc) {
            this.addTextEditHandler(handler);
            this.setInputText(s);
            this.onCall("binding", pc);
        };
        BoxBase.prototype.addTextEditHandler = function (handler) {
            if (handler instanceof TDev.RT.Ref) {
                this.attributes.textEditingEvent.addHandler(new TDev.RT.PseudoAction(function (rt, args) {
                    handler._set(args[0], rt.current);
                    rt.forcePageRefresh();
                }));
            }
            else
                this.attributes.textEditingEvent.addHandler(handler);
        };
        BoxBase.prototype.getEditableContent = function () {
            TDev.Util.oops("virtual");
            return undefined;
        };
        BoxBase.prototype.setEditableContent = function (s) {
            TDev.Util.oops("virtual");
        };
        BoxBase.prototype.invalidateCachedLayout = function (triggerdelayedrelayout) {
        };
        BoxBase.prototype.onInputTextChange = function () {
            if (LayoutMgr.instance.editMode)
                return;
            var text = this.getEditableContent();
            if (this.obsolete)
                return;
            if (this.inputversions.length === 3)
                this.inputversions.pop();
            if (this.inputversions[this.inputversions.length - 1] === text) {
                if (WallBox.debuginput)
                    TDev.Util.log("&&&" + this.id + "                 flag \"" + this.inputversions + "\"");
                LayoutMgr.instance.FlagTypingActivity("i" + this.id);
                return;
            }
            this.inputversions.push(text);
            if (WallBox.debuginput)
                TDev.Util.log("&&&" + this.id + "                 push \"" + this.inputversions + "\"");
            var parent = this.parent;
            if (this.attributes.textEditingEvent.handlers) {
                this.invalidateCachedLayout(false);
                if (this.inputversions.length >= 2) {
                    this.runtime.queueLocalEvent(this.lastqueuededit = this.attributes.textEditingEvent, [this.inputversions[1]]);
                    this.runtime.forcePageRefresh();
                }
            }
            else {
                this.invalidateCachedLayout(true);
            }
        };
        BoxBase.prototype.setInputText = function (text) {
            var cur = this.getEditableContent();
            var requeue = false;
            if (text === this.inputversions[1]) {
                this.inputversions.shift();
                if (WallBox.debuginput)
                    TDev.Util.log("&&&" + this.id + "                 prune \"" + this.inputversions + "\"");
                if (text !== cur) {
                    this.inputversions[1] = cur;
                    requeue = true;
                }
            }
            else if (this.inputversions.length === 1 && text != cur && LayoutMgr.instance.CheckTypingActivity("i" + this.id)) {
                this.inputversions = [text, cur];
                LayoutMgr.instance.ClearTypingActivity("i" + this.id);
                if (WallBox.debuginput)
                    TDev.Util.log("&&&" + this.id + "                 skip \"" + this.inputversions + "\"");
                requeue = true;
            }
            else {
                this.inputversions = [text];
                this.lastqueuededit = undefined;
                if (WallBox.debuginput)
                    TDev.Util.log("&&&" + this.id + "                 set \"" + this.inputversions + "\"");
            }
            if (this.inputversions.length == 1) {
                if (text !== cur) {
                    this.setEditableContent(text);
                    this.invalidateCachedLayout(false);
                }
                LayoutMgr.instance.ClearTypingActivity("i" + this.id);
            }
            else if (this.inputversions.length == 2 && requeue) {
                if (this.attributes.textEditingEvent.handlers) {
                    if (WallBox.debuginput)
                        TDev.Util.log("&&&" + this.id + "                 requeue \"" + this.inputversions + "\"");
                    this.runtime.queueLocalEvent(this.lastqueuededit = this.attributes.textEditingEvent, [this.inputversions[1]]);
                }
            }
        };
        BoxBase.CreateOrRecycleRoot = function (rt, p) {
            var cssmode = rt.onCssPage();
            if (LayoutMgr.RenderExecutionMode() && p && (cssmode == p instanceof HtmlBox)) {
                return p.recycle(rt, null, "", rt.onCssPage());
            }
            else {
                return cssmode ? (new HtmlBox(rt, null, "", "div")) : (new WallBox(rt, null, ""));
            }
        };
        BoxBase.CreateOrRecycleContainerBox = function (rt, cur, pc, tagName) {
            var candidate = null;
            if (LayoutMgr.RenderExecutionMode() && cur.recycled && cur.reuseindex < cur.prevchildren.length) {
                candidate = cur.prevchildren[cur.reuseindex];
                cur.reuseindex = cur.reuseindex + 1;
                if (candidate.mayReplaceWith(tagName))
                    return candidate.recycle(rt, cur, pc, rt.onCssPage());
            }
            var box = rt.onCssPage() ? new HtmlBox(rt, cur, pc, tagName) : new WallBox(rt, cur, pc);
            box.replaces = candidate;
            return box;
        };
        BoxBase.CreateOrRecycleLeafBox = function (rt, val) {
            var cur = rt.getCurrentBoxBase(true);
            var candidate = null;
            var pc = rt.getTopScriptPc();
            if (LayoutMgr.RenderExecutionMode() && cur.recycled && cur.reuseindex < cur.prevchildren.length) {
                candidate = cur.prevchildren[cur.reuseindex];
                cur.reuseindex = cur.reuseindex + 1;
                if (val !== null && candidate.content && candidate.reusekey === val && (!candidate.reuseversion || (candidate.reuseversion === val.versioncounter))) {
                    return candidate.recycle(rt, cur, pc, rt.onCssPage());
                }
            }
            var cssmode = rt.onCssPage();
            var box = rt.onCssPage() ? new HtmlBox(rt, cur, pc) : new WallBox(rt, cur, pc);
            box.reusekey = val;
            box.reuseversion = val && val.versioncounter;
            box.replaces = candidate;
            return box;
        };
        BoxBase.prototype.recycle = function (rt, parent, nodeId, cssmode) {
            TDev.Util.assert(!!cssmode === (this instanceof HtmlBox), "mixed up boxes");
            this.runtime = rt;
            this.parent = parent;
            this.astNodeId = nodeId;
            if (this.parent) {
                this.parent.children.push(this);
                TDev.Util.assert(this.depth === this.parent.depth + 1);
            }
            else {
                TDev.Util.assert(this.depth === 0);
            }
            this.recycled = true;
            this.structuring_done = false;
            this.prevchildren = this.children;
            this.reuseindex = 0;
            this.children = [];
            this.attributes = cssmode ? new HtmlAttributes() : new LayoutAttributes(this.depth == 0);
            this.pcTable = { "": this.astNodeId };
            return this;
        };
        BoxBase.prototype.doLayout = function () {
        };
        BoxBase.prototype.visitS = function () {
            if (this.recycled) {
                for (var i = this.children.length; i < this.prevchildren.length; i++) {
                    var b = this.prevchildren[i];
                    b.Obsolete();
                    this.element.removeChild(b.element);
                }
            }
            var p = this.parent;
            if (this.fresh || (p && !p.recycled)) {
                if (p) {
                    if (this.replaces) {
                        this.replaces.Obsolete();
                        p.element.replaceChild(this.element, this.replaces.element);
                        this.replaces = null;
                    }
                    else {
                        p.element.appendChild(this.element);
                    }
                }
                else {
                    TDev.Util.assert(this.isRoot);
                    LayoutMgr.instance.rootElement.appendChild(this.element);
                    LayoutMgr.instance.rootElement.onscroll = function (e) {
                        LayoutMgr.instance.onScroll();
                    };
                }
                if (this.fresh) {
                    this.hookContent();
                    this.fresh = false;
                }
            }
        };
        BoxBase.prototype.visitI = function () {
            this.attributes.applyToStyle(this);
        };
        BoxBase.debuginput = false;
        return BoxBase;
    })();
    TDev.BoxBase = BoxBase;
    var HtmlBox = (function (_super) {
        __extends(HtmlBox, _super);
        function HtmlBox(rt, parent, nodeId, tagName) {
            _super.call(this, rt, parent, nodeId);
            if (parent)
                TDev.Util.assert(parent instanceof HtmlBox);
            this.attributes = new HtmlAttributes();
            if (tagName !== undefined) {
                this.tagName = tagName;
                if (tagName && !TDev.HTML.allowedTagName(tagName))
                    TDev.Util.userError(TDev.lf("tag name {0} is not allowed", tagName));
                this.element = document.createElement(tagName);
                this.element.id = this.id.toString();
                this.attributes.applyToStyle(this);
            }
        }
        HtmlBox.prototype.isLeaf = function () {
            return !this.tagName;
        };
        HtmlBox.prototype.mayReplaceWith = function (tagName) {
            return (this.tagName === tagName);
        };
        HtmlBox.prototype.doLiveNavigation = function () {
            return !!this.tagName;
        };
        HtmlBox.prototype.setContent = function (e) {
            TDev.Util.check(this.isLeaf());
            TDev.Util.check(e != null);
            this.element = e;
            this.attributes.applyToStyle(this);
        };
        HtmlBox.prototype.getContent = function () {
            return this.element;
        };
        HtmlBox.prototype.RefreshOnScreen = function () {
        };
        HtmlBox.prototype.invalidateCachedLayout = function (triggerdelayedrelayout) {
        };
        HtmlBox.prototype.withClick = function (h) {
        };
        HtmlBox.prototype.getRenderedWidth = function () {
            return this.element.clientWidth;
        };
        HtmlBox.prototype.getRenderedHeight = function () {
            return this.element.clientHeight;
        };
        HtmlBox.prototype.getEditableContent = function () {
            return this.element.value;
        };
        HtmlBox.prototype.setEditableContent = function (text) {
            this.element.value = text;
        };
        HtmlBox.prototype.hookContent = function () {
            var _this = this;
            var tag = this.element && this.element.tagName;
            if (tag) {
                this.element.withClick(function () {
                    _this.tapped();
                });
                if (/input|textarea/i.test(tag))
                    this.element.oninput = function (e) {
                        _this.onInputTextChange();
                    };
            }
        };
        HtmlBox.prototype.SwapImageContent = function (newcontent) {
            var p = this.element.parentNode;
            if (p)
                p.replaceChild(newcontent, this.element);
            this.element = newcontent;
        };
        HtmlBox.prototype.setHighlight = function (strong) {
            if (strong === void 0) { strong = true; }
            if (this.element && this.element.style) {
                this.element.style.border = strong ? "5px dotted #C00" : "5px dotted #rgba(204, 0, 0, 0.6)";
                if (!strong)
                    this.element.style.background = "rgba(204, 0, 0, 0.4)";
            }
        };
        HtmlBox.prototype.clearHighlight = function () {
            this.element.style.cssText = this.rendered_styles;
        };
        HtmlBox.prototype.doLayout = function () {
            this.passA();
        };
        HtmlBox.prototype.passA = function () {
            this.visitI();
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].passA();
            }
        };
        HtmlBox.prototype.addClassName = function (s, pc) {
            if (pc === void 0) { pc = ""; }
            if (!this.attributes.classnames)
                this.attributes.classnames = [];
            this.attributes.classnames.push(s);
            this.onCall("class name", pc);
        };
        HtmlBox.prototype.setAttribute = function (name, value, pc) {
            if (pc === void 0) { pc = ""; }
            if (!this.attributes.attributes)
                this.attributes.attributes = {};
            this.attributes.attributes[name] = value;
            this.onCall("attr:" + name, pc);
        };
        HtmlBox.prototype.setStyle = function (property, value, pc) {
            if (pc === void 0) { pc = ""; }
            if (!this.attributes.styles)
                this.attributes.styles = {};
            this.attributes.styles[property] = value;
            this.onCall("style:" + property, pc);
        };
        HtmlBox.prototype.setRenderedClassnames = function (names) {
            var cmp = (names && names.length > 0) ? names.join(' ') : '';
            if (cmp !== this.rendered_classnames) {
                if (cmp)
                    this.element.className = cmp;
                else
                    this.element.removeAttribute("class");
                this.rendered_classnames = cmp;
            }
        };
        HtmlBox.prototype.setRenderedStyles = function (styles) {
            var s = styles ? Object.keys(styles).map(function (k) { return k + ": " + styles[k]; }).join("; ") : "";
            if (s !== this.rendered_styles) {
                this.element.style.cssText = s;
                this.rendered_styles = s;
            }
        };
        HtmlBox.prototype.setRenderedAttributes = function (attributes) {
            var _this = this;
            var s = JSON.stringify(attributes);
            if (s !== this.rendered_attributes) {
                var prev = JSON.parse(this.rendered_attributes || "{}");
                Object.keys(attributes).forEach(function (k) {
                    _this.element.setAttribute(k, attributes[k]);
                    delete prev[k];
                });
                Object.keys(prev).forEach(function (k) { return _this.element.removeAttribute(k); });
                this.rendered_attributes = s;
            }
        };
        return HtmlBox;
    })(BoxBase);
    TDev.HtmlBox = HtmlBox;
    var WallBox = (function (_super) {
        __extends(WallBox, _super);
        function WallBox(rt, parent, nodeId) {
            var _this = this;
            _super.call(this, rt, parent, nodeId);
            this.cached_width = -1;
            this.cached_height = -1;
            this.cached_baseline = -1;
            this.cached_aspectratio = 0;
            if (parent)
                TDev.Util.assert(parent instanceof WallBox);
            this.attributes = new LayoutAttributes(this.depth == 0);
            this.contentType = WallBox.CONTENT_NONE;
            this.content = null;
            this.element = document.createElement("div");
            this.element.id = this.id.toString();
            this.element.withClick(function () {
                _this.tapped();
            });
            this.attributes.applyToStyle(this);
        }
        WallBox.prototype.mayReplaceWith = function (tagname) {
            return (tagname === "div" && this.content === null && this.contentType === WallBox.CONTENT_NONE);
        };
        WallBox.prototype.isLeaf = function () {
            return this.contentType != WallBox.CONTENT_NONE;
        };
        WallBox.prototype.RefreshOnScreen = function () {
            if (this.contentType == WallBox.CONTENT_NONE)
                return;
            TDev.Util.assert(this.contentType == WallBox.CONTENT_IMAGE);
            this.cached_height = -1;
            this.cached_width = -1;
            LayoutMgr.QueueReLayout();
        };
        WallBox.prototype.SwapImageContent = function (newcontent) {
            TDev.Util.assert(this.contentType == WallBox.CONTENT_IMAGE);
            this.element.removeAllChildren();
            this.element.appendChild(newcontent);
            this.content = newcontent;
            this.cached_height = -1;
            this.cached_width = -1;
            LayoutMgr.QueueReLayout();
        };
        WallBox.prototype.hookContent = function () {
            var _this = this;
            if (this.content && this.content !== this.element) {
                var e = this.element;
                if (this.contentType === WallBox.CONTENT_TEXT) {
                }
                else if (this.contentType === WallBox.CONTENT_INPUT) {
                    this.content.oninput = function (e) {
                        _this.onInputTextChange();
                    };
                    this.content.onchange = function (e) {
                        _this.onInputTextChangeDone();
                    };
                    this.content.onclick = function (e) {
                        if (LayoutMgr.instance.editMode) {
                            _this.tapped();
                        }
                        else {
                            if (_this.attributes.tappedEvent.handlers) {
                                _this.runtime.queueLocalEvent(_this.attributes.tappedEvent);
                            }
                        }
                    };
                }
                if (this.auxcontent)
                    e.appendChild(this.auxcontent);
                e.appendChild(this.content);
            }
        };
        WallBox.prototype.setHighlight = function (strong) {
            if (strong === void 0) { strong = true; }
            this.element.style.zIndex = strong ? "2" : "1";
            this.element.setAttribute("sel", strong ? "strong" : "weak");
        };
        WallBox.prototype.clearHighlight = function () {
            this.element.setAttribute("sel", "");
            this.element.style.zIndex = "auto";
        };
        WallBox.prototype.visitI = function () {
            if (!this.isRoot) {
                if (this.getFontFamily() === "")
                    this.setFontFamily(this.parent.getFontFamily());
                if (this.getFontSize() <= 0)
                    this.setFontSize(this.parent.getFontSize());
            }
            else {
                var width = this.runtime.host.fullWallWidth();
                var height = this.runtime.host.userWallHeight();
                this.setRenderedWidth(width);
                this.setRenderedHeight(height);
                if (this.getFontFamily() === "")
                    this.setFontFamily('"Segoe UI", "Segoe WP", "Helvetica Neue", Sans-Serif');
                if (this.getFontSize() <= 0)
                    this.setFontSize(TDev.SizeMgr.topFontSize);
            }
            var parent = this.parent;
            if (parent && parent.children.length === 1)
                this.isSingleChild = true;
            if (this.contentType == WallBox.CONTENT_TEXT) {
                var parentattributes = (parent.attributes);
                this.attributes.textalign = parentattributes.textalign;
                this.attributes.wrap = parentattributes.wrap;
                this.attributes.wraplimit = parentattributes.wraplimit;
            }
            if (this.contentType == WallBox.CONTENT_INPUT) {
                var parentattributes = (parent.attributes);
                this.attributes.textalign = WallBox.ARRANGE_LEFT;
                this.attributes.wrap = this.textarea ? (parentattributes.wrap === undefined ? true : parentattributes.wrap) : false;
                this.attributes.wraplimit = parentattributes.wraplimit;
            }
            if (this.contentType == WallBox.CONTENT_IMAGE) {
                var parentattributes = (parent.attributes);
                this.attributes.textalign = parentattributes.textalign;
                this.attributes.width = parentattributes.width;
                this.attributes.height = parentattributes.height;
                if (parentattributes.stretchwidth !== -1)
                    this.attributes.stretchwidth = parentattributes.stretchwidth;
                if (parentattributes.stretchheight !== -1)
                    this.attributes.stretchheight = parentattributes.stretchheight;
                this.attributes.wrap = parentattributes.wrap;
                this.attributes.wraplimit = parentattributes.wraplimit;
            }
            var numchildren = this.children.length;
            var harr = this.attributes.arrangement[WallBox.H];
            if (harr !== undefined) {
                if (this.attributes.flow !== WallBox.FLOW_HORIZONTAL) {
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        child.attributes.stretchmargin[WallBox.L] = (harr == WallBox.ARRANGE_RIGHT || harr == WallBox.ARRANGE_CENTER || harr == WallBox.ARRANGE_SPREAD) ? 1 : 0;
                        child.attributes.stretchmargin[WallBox.R] = (harr == WallBox.ARRANGE_LEFT || harr == WallBox.ARRANGE_CENTER || harr == WallBox.ARRANGE_SPREAD) ? 1 : 0;
                    }
                }
                else {
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        child.attributes.stretchmargin[WallBox.L] = (harr == WallBox.ARRANGE_SPREAD || (i == 0 ? (harr == WallBox.ARRANGE_RIGHT || harr == WallBox.ARRANGE_CENTER) : (harr == WallBox.ARRANGE_JUSTIFY))) ? 1 : 0;
                        child.attributes.stretchmargin[WallBox.R] = (harr == WallBox.ARRANGE_SPREAD || (i == (numchildren - 1) ? (harr == WallBox.ARRANGE_LEFT || harr == WallBox.ARRANGE_CENTER) : (harr == WallBox.ARRANGE_JUSTIFY || harr == WallBox.ARRANGE_CENTER))) ? 1 : 0;
                    }
                }
            }
            var varr = this.attributes.arrangement[WallBox.V];
            if (varr !== WallBox.ARRANGE_BASELINE) {
                if (this.attributes.flow !== WallBox.FLOW_VERTICAL) {
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        child.attributes.stretchmargin[WallBox.T] = (varr == WallBox.ARRANGE_BOTTOM || varr == WallBox.ARRANGE_CENTER || varr == WallBox.ARRANGE_SPREAD) ? 1 : 0;
                        child.attributes.stretchmargin[WallBox.B] = (varr == WallBox.ARRANGE_TOP || varr == WallBox.ARRANGE_CENTER || varr == WallBox.ARRANGE_SPREAD) ? 1 : 0;
                    }
                }
                else {
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        child.attributes.stretchmargin[WallBox.T] = (varr == WallBox.ARRANGE_SPREAD || (i == 0 ? (varr == WallBox.ARRANGE_BOTTOM || varr == WallBox.ARRANGE_CENTER) : (varr == WallBox.ARRANGE_JUSTIFY))) ? 1 : 0;
                        child.attributes.stretchmargin[WallBox.B] = (varr == WallBox.ARRANGE_SPREAD || (i == (numchildren - 1) ? (varr == WallBox.ARRANGE_TOP || varr == WallBox.ARRANGE_CENTER) : (varr == WallBox.ARRANGE_JUSTIFY))) ? 1 : 0;
                    }
                }
            }
            if (!this.attributes.legacybaseline && (this.attributes.flow !== WallBox.FLOW_HORIZONTAL || varr !== WallBox.ARRANGE_BASELINE || numchildren < 2))
                for (var i = 0; i < numchildren; i++) {
                    var child = this.children[i];
                    child.attributes.legacybaseline = false;
                }
            _super.prototype.visitI.call(this);
            this.setRenderedTappable((this.attributes.tappedEvent.handlers || this.contenttapapplies()) ? true : false, false);
        };
        WallBox.prototype.speculationwascorrect = function (scroll) {
            return scroll === this.D_scr;
        };
        WallBox.prototype.bound = function (min, val, max) {
            if (min > val)
                return min;
            if (max < val)
                return max;
            return val;
        };
        WallBox.prototype.tryPreserveAspectRatio = function () {
            return /img|canvas|video|audio|boardContainer|viewPicture/i.test(this.content.tagName) || /boardContainer|viewPicture/i.test(this.content.className);
        };
        WallBox.prototype.fillh = function (f) {
            if (f <= 0)
                return false;
            if (Math.abs(1 - f) < 0.0001 || this.isRoot)
                return true;
            var a = this.attributes.arrangement[WallBox.H];
            return (a === WallBox.ARRANGE_LEFT || a === WallBox.ARRANGE_CENTER || a === WallBox.ARRANGE_SPREAD || a === WallBox.ARRANGE_RIGHT);
        };
        WallBox.prototype.fillv = function (f) {
            if (f <= 0)
                return false;
            if (f == 1 || this.isRoot)
                return true;
            var a = this.attributes.arrangement[WallBox.V];
            return (a === WallBox.ARRANGE_TOP || a === WallBox.ARRANGE_BOTTOM || a === WallBox.ARRANGE_CENTER || a === WallBox.ARRANGE_SPREAD);
        };
        WallBox.prototype.doLayout = function () {
            this.passA();
            this.passBC();
            this.passD();
        };
        WallBox.prototype.passA = function () {
            this.visitI();
            for (var i = 0; i < this.children.length; i++) {
                this.children[i].passA();
            }
            this.visitA();
        };
        WallBox.prototype.passBC = function () {
            this.visitB();
            for (var i = 0; i < this.children.length; i++)
                this.children[i].passBC();
            this.visitC();
        };
        WallBox.prototype.passD = function () {
            this.visitD();
            for (var i = 0; i < this.children.length; i++)
                this.children[i].passD();
            if (this.layoutcompletehandler)
                this.layoutcompletehandler(this.getRenderedWidth(), this.getRenderedHeight());
        };
        WallBox.prototype.visitA = function () {
            var numchildren = this.children.length;
            if (numchildren === 0) {
                if (this.contentType != WallBox.CONTENT_NONE && this.cached_width === -1) {
                    this.setRenderedWidth(-1);
                    this.setRenderedHeight(-1);
                    if ((this.contentType === WallBox.CONTENT_TEXT || this.contentType === WallBox.CONTENT_INPUT)) {
                        if (this.contentType === WallBox.CONTENT_INPUT) {
                            var text = this.textarea ? this.content.value : this.content.value;
                            text = text + " abc";
                            this.auxcontent.textContent = text;
                        }
                        this.setRenderedWrap(false, this.attributes.wraplimit);
                        var newwidth = (this.contentType === WallBox.CONTENT_INPUT) ? this.auxcontent.scrollWidth + (this.textarea ? (LayoutMgr.instance.scrollbarWidth + 50) : 50) : this.element.scrollWidth;
                        this.setRenderedWrap(this.attributes.wrap, this.attributes.wraplimit);
                        this.cached_width = newwidth;
                        this.cached_aspectratio = 0;
                        if (this.attributes.legacybaseline && this.cached_baseline === -1) {
                            if (!this.baselineprobe) {
                                this.baselineprobe = TDev.span(null, "s");
                                this.baselineprobe.style.fontSize = "0";
                                var c = TDev.div(null, TDev.span(null, "L"), this.baselineprobe);
                                c.style.visibility = "hidden";
                                c.style.position = "absolute";
                                this.element.appendChild(c);
                            }
                            var yPosition = 0;
                            this.cached_baseline = this.baselineprobe.offsetTop - this.baselineprobe.scrollTop + this.baselineprobe.clientTop;
                            this.element.removeChild(this.baselineprobe.parentElement);
                            this.baselineprobe = null;
                        }
                    }
                    else {
                        var targetelt = (this.content.className === "viewPicture") ? this.content.firstChild : this.content;
                        var ha = targetelt ? Number(targetelt.getAttribute("height")) : 0;
                        var wa = targetelt ? Number(targetelt.getAttribute("width")) : 0;
                        if (targetelt && (targetelt.tagName == "IMG" || targetelt.tagName == "VIDEO" || targetelt.tagName == "AUDIO")) {
                            ha = ha || targetelt.height;
                            wa = wa || targetelt.width;
                        }
                        this.cached_width = wa || this.element.scrollWidth;
                        this.cached_aspectratio = (this.tryPreserveAspectRatio() && this.cached_width) ? ((ha || this.element.scrollHeight) / this.cached_width) : 0;
                        if ((this.cached_width == 0) && targetelt && (targetelt.tagName == "VIDEO" || targetelt.tagName == "AUDIO")) {
                            this.cached_width = 300;
                        }
                        if ((this.cached_width == 0) && targetelt && (targetelt.tagName == "IMG")) {
                            this.cached_width = 100;
                        }
                    }
                }
                if (this.contentType === WallBox.CONTENT_IMAGE) {
                    if (this.cached_aspectratio > 0) {
                        var scmin = this.attributes.height[WallBox.MIN] / this.cached_aspectratio;
                        var scmax = this.attributes.height[WallBox.MAX] / this.cached_aspectratio;
                        if ((this.attributes.width[WallBox.MIN] <= scmax) && (this.attributes.width[WallBox.MAX] >= scmin))
                            this.A_sc = this.bound(scmin, this.cached_width, scmax);
                        else
                            this.A_sc = this.cached_width;
                    }
                    else {
                        this.A_sc = this.cached_width;
                    }
                    this.A_asc = this.A_sc;
                    var flex = (this.attributes.stretchwidth == 1 || !this.tryPreserveAspectRatio() || (this.attributes.stretchwidth == -1 && this.content && this.content.tagName == "IMG")) ? 1 : 0;
                    this.A_mc = flex ? 0 : this.A_asc;
                    this.A_fcc = flex;
                }
                else if (this.contentType === WallBox.CONTENT_TEXT) {
                    var statedwidth = this.cached_width;
                    var safetywidth = statedwidth + 1;
                    this.A_sc = safetywidth;
                    this.A_asc = (this.attributes.wrap) ? Math.min(this.A_sc, this.attributes.wraplimit * TDev.SizeMgr.topFontSize) : this.A_sc;
                    this.A_mc = this.A_asc;
                    this.A_fcc = 1;
                }
                else if (this.contentType === WallBox.CONTENT_INPUT) {
                    this.A_sc = this.cached_width;
                    this.A_asc = (this.attributes.wrap) ? Math.min(this.A_sc, this.attributes.wraplimit * TDev.SizeMgr.topFontSize) : this.A_sc;
                    this.A_mc = this.A_asc;
                    this.A_fcc = 1;
                }
                else {
                    this.A_sc = 0;
                    this.A_mc = 0;
                    this.A_asc = 0;
                    this.A_fcc = 0;
                }
            }
            else {
                if (this.attributes.flow === WallBox.FLOW_HORIZONTAL) {
                    var lm_s = this.attributes.padding[WallBox.L];
                    var lm_f = 0;
                    this.A_mc = lm_s;
                    this.A_sc = lm_s;
                    this.A_scc = 0;
                    this.A_asc = lm_s;
                    this.A_fcc = 0;
                    this.A_fcs = 0;
                    this.A_fp = 0;
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        var ws = Math.max(0, child.A_sl - lm_s) + child.A_sr;
                        lm_s = child.A_sr;
                        if (i == numchildren - 1)
                            ws += Math.max(0, this.attributes.padding[WallBox.R] - lm_s);
                        this.A_mc += child.A_m + ws;
                        this.A_sc += child.A_s + ws;
                        this.A_scc += child.A_s;
                        this.A_asc += child.A_as + ws;
                        this.A_fcc += child.A_f;
                        this.A_fcs += Math.max(0, child.A_fl - lm_f) + child.A_fr;
                        this.A_fp = this.A_fp || child.A_fp;
                        lm_f = child.A_fr;
                    }
                }
                else if (this.attributes.flow === WallBox.FLOW_VERTICAL || this.attributes.flow === WallBox.FLOW_OVERLAY) {
                    this.A_mc = 0;
                    this.A_sc = 0;
                    this.A_asc = 0;
                    this.A_fcc = 0;
                    this.A_fp = 0;
                    for (var i = 0; i < this.children.length; i++) {
                        var child = this.children[i];
                        var ws = Math.max(child.A_sl, this.attributes.padding[WallBox.L]) + Math.max(child.A_sr, this.attributes.padding[WallBox.R]);
                        this.A_mc = Math.max(this.A_mc, child.A_m + ws);
                        this.A_asc = Math.max(this.A_asc, child.A_as + ws);
                        this.A_sc = Math.max(this.A_sc, child.A_s + ws);
                        this.A_fcc = Math.max(this.A_fcc, child.A_f);
                        this.A_fp = this.A_fp || child.A_fp;
                    }
                }
            }
            var min = this.attributes.width[WallBox.MIN];
            var max = this.attributes.width[WallBox.MAX];
            var borderwidth = this.attributes.borderwidth[WallBox.L] + this.attributes.borderwidth[WallBox.R];
            this.A_scr = (this.attributes.scroll[WallBox.V] && (!this.isRoot || LayoutMgr.instance.scrollspeculation)) ? LayoutMgr.instance.scrollbarWidth : 0;
            this.A_m = this.bound(min, (this.attributes.scroll[WallBox.H] ? Math.min(this.A_mc, TDev.SizeMgr.topFontSize * 6) : this.A_mc) + this.A_scr, max) + borderwidth;
            this.A_as = this.bound(min, (this.attributes.scroll[WallBox.H] ? Math.min(this.A_mc, TDev.SizeMgr.topFontSize * 10) : this.A_asc) + this.A_scr, max) + borderwidth;
            this.A_s = this.bound(min, this.A_sc + this.A_scr, max) + borderwidth;
            this.A_sl = this.attributes.margin[WallBox.L];
            this.A_sr = this.attributes.margin[WallBox.R];
            this.A_f = (this.attributes.stretchwidth == -1) ? ((this.A_fp || (numchildren == 0)) ? (this.fillh(this.A_fcc) ? 1 : this.A_fcc) : 0) : this.attributes.stretchwidth;
            this.A_fp = (this.attributes.stretchwidth == -1) ? ((numchildren > 0) && (max > min) && this.A_fp) : (this.attributes.legacystretch[WallBox.H] ? 0 : this.attributes.stretchwidth);
            this.A_fl = this.attributes.stretchmargin[WallBox.L];
            this.A_fr = this.attributes.stretchmargin[WallBox.R];
        };
        WallBox.prototype.visitB = function () {
            if (this.isRoot) {
                this.B_x = 0;
                this.B_s = this.runtime.host.fullWallWidth();
            }
            var borderwidth = (this.attributes.borderwidth[WallBox.L] + this.attributes.borderwidth[WallBox.R]);
            var allowance = this.B_s - this.A_scr - borderwidth;
            var numchildren = this.children.length;
            var overflow = false;
            if (numchildren == 0) {
                this.B_scr = false;
            }
            else {
                overflow = allowance < this.A_mc;
                this.B_scr = (overflow && this.attributes.scroll[WallBox.H]);
                if (this.attributes.flow === WallBox.FLOW_VERTICAL || this.attributes.flow === WallBox.FLOW_OVERLAY) {
                    var pl = this.attributes.padding[WallBox.L];
                    var pr = this.attributes.padding[WallBox.R];
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        var ws = Math.max(Math.max(pl, child.A_sl) + Math.max(pr, child.A_sr));
                        if (allowance > child.A_s + ws) {
                            var extra_c = 0;
                            if (child.A_f) {
                                var proportion = (child.A_f < 1 && this.fillh(child.A_f)) ? child.A_f : 1;
                                extra_c = Math.max(0, Math.min(proportion * allowance - ws, child.attributes.width[WallBox.MAX]) - child.A_s);
                            }
                            child.B_s = child.A_s + extra_c;
                            var extra_s = (child.A_fl + child.A_fr) ? ((allowance - child.B_s - ws) / (child.A_fl + child.A_fr)) : 0;
                            child.B_x = Math.max(pl, child.A_sl) + extra_s * child.A_fl;
                        }
                        else if (allowance > child.A_as + ws) {
                            child.B_x = Math.max(pl, child.A_sl);
                            child.B_s = allowance - ws;
                        }
                        else if (this.B_scr) {
                            child.B_x = Math.max(pl, child.A_sl);
                            child.B_s = child.A_as;
                        }
                        else {
                            child.B_x = Math.max(pl, child.A_sl);
                            child.B_s = Math.max(child.A_m, allowance - ws);
                        }
                    }
                }
                else if (this.attributes.flow === WallBox.FLOW_HORIZONTAL) {
                    if (allowance >= this.A_sc) {
                        var apply_fractional_stretches = this.fillh(this.A_fcc);
                        var space_for_content = allowance - (this.A_sc - this.A_scc);
                        var remainder = space_for_content;
                        var wsum = this.A_fcc;
                        var csum = this.A_scc;
                        if (remainder === 0 || wsum === 0)
                            this.children.forEach(function (c) { return remainder -= (c.B_s = c.A_s); });
                        else {
                            var limit = function (c) {
                                if (!apply_fractional_stretches || c.A_f >= 1)
                                    return c.attributes.width[WallBox.MAX];
                                else
                                    return Math.max(c.A_s, Math.min(c.attributes.width[WallBox.MAX], space_for_content * c.A_f));
                            };
                            var sortedlist = this.children.slice(0).sort(function (wb1, wb2) { return limit(wb1) - limit(wb2); });
                            for (var i = 0; i < sortedlist.length; i++) {
                                var c = sortedlist[i];
                                c.B_s = (c.A_f == 0) ? c.A_s : ((!apply_fractional_stretches || c.A_f >= 1) ? Math.min(c.attributes.width[WallBox.MAX], c.A_s + ((remainder - csum) / wsum) * c.A_f) : Math.max(c.A_s, Math.min(c.attributes.width[WallBox.MAX], space_for_content * c.A_f)));
                                remainder -= c.B_s;
                                csum -= c.A_s;
                                wsum -= c.A_f;
                            }
                        }
                        var extra_s = this.A_fcs ? (remainder / this.A_fcs) : 0;
                        var ls = this.attributes.padding[WallBox.L];
                        var lf = 0;
                        var x = ls;
                        for (var i = 0; i < numchildren; i++) {
                            var child = this.children[i];
                            x = x + Math.max(0, child.A_sl - ls) + Math.max(0, extra_s * child.A_fl - lf);
                            child.B_x = x;
                            ls = child.A_sr;
                            lf = extra_s * child.A_fr;
                            x = x + child.B_s + ls + lf;
                        }
                    }
                    else {
                        if (allowance > this.A_asc) {
                            this.distribute(allowance - this.A_asc, function (child) { return child.A_s - child.A_as; }, function (child, give) {
                                child.B_s = child.A_as + give;
                            });
                        }
                        else if (this.B_scr) {
                            for (var i = 0; i < numchildren; i++) {
                                var child = this.children[i];
                                child.B_s = child.A_as;
                            }
                        }
                        else {
                            overflow = true;
                            this.distribute(this.A_asc - allowance, function (child) { return child.A_as - child.A_m; }, function (child, take) {
                                child.B_s = child.A_as - take;
                            });
                        }
                        var x = 0;
                        var lastmargin = this.attributes.padding[WallBox.L];
                        for (var i = 0; i < numchildren; i++) {
                            var child = this.children[i];
                            x = x + Math.max(lastmargin, child.A_sl);
                            child.B_x = x;
                            x = x + child.B_s;
                            lastmargin = child.A_sr;
                        }
                    }
                }
            }
            if (!this.delayedlayout)
                this.setRenderedWidth(this.B_s - borderwidth);
            this.setRenderedHorizontalOverflow(this.B_scr ? "scroll" : (overflow ? "hidden" : ""));
            this.setRenderedX(this.B_x);
        };
        WallBox.prototype.distribute = function (amount, limit, apply) {
            if (amount === 0) {
                for (var i = 0; i < this.children.length; i++)
                    apply(this.children[i], 0);
            }
            else {
                var takers = this.children.length;
                var sortedlist = this.children.slice(0).sort(function (wb1, wb2) { return limit(wb1) - limit(wb2); });
                for (var i = 0; i < this.children.length; i++) {
                    var child = sortedlist[i];
                    var take = Math.min(limit(child), amount / takers);
                    amount -= take;
                    apply(child, take);
                    takers--;
                }
            }
        };
        WallBox.prototype.visitC = function () {
            var numchildren = this.children.length;
            if (numchildren === 0) {
                if (this.contentType != WallBox.CONTENT_NONE && this.cached_height === -1) {
                    if (this.contentType == WallBox.CONTENT_IMAGE) {
                        var targetelt = (this.content.className === "viewPicture") ? this.content.firstChild : this.content;
                        this.cached_height = targetelt ? Number(targetelt.getAttribute("height")) : 0;
                        if (!this.cached_height && this.content && this.content.tagName == "IMG") {
                            this.cached_height = targetelt.height;
                        }
                        if (!this.cached_height) {
                            this.setRenderedHeight(-1);
                            this.cached_height = this.element.clientHeight;
                        }
                    }
                    else if (this.contentType == WallBox.CONTENT_INPUT) {
                        this.setRenderedHeight(-1);
                        this.cached_height = this.auxcontent.scrollHeight + (this.textarea ? 5 : 0);
                    }
                    else {
                        this.setRenderedHeight(-1);
                        this.cached_height = this.element.clientHeight;
                    }
                }
                if (this.contentType === WallBox.CONTENT_IMAGE) {
                    if (this.cached_aspectratio > 0)
                        this.C_sc = ((this.delayedlayout ? this.cached_width : this.getRenderedWidth()) * this.cached_aspectratio);
                    else
                        this.C_sc = this.cached_height;
                    this.C_mc = this.attributes.stretchheight == 1 ? 0 : this.C_sc;
                    this.C_bc = 0;
                    this.C_fcc = this.attributes.stretchheight == 1 ? 1 : 0;
                }
                else if (this.contentType === WallBox.CONTENT_TEXT) {
                    this.C_sc = this.cached_height + 1;
                    this.C_mc = this.C_sc;
                    this.C_bc = this.cached_baseline;
                    this.C_fcc = 0;
                }
                else if (this.contentType === WallBox.CONTENT_INPUT) {
                    this.C_sc = this.cached_height + (this.textarea ? 1 : 6);
                    this.C_mc = this.C_sc;
                    this.C_bc = this.cached_baseline;
                    this.C_fcc = 0;
                }
                else {
                    this.C_sc = 0;
                    this.C_mc = 0;
                    this.C_bc = 0;
                    this.C_fcc = 0;
                }
                this.C_zc = 1;
            }
            else {
                this.C_bc = 0;
                var dobaseline = (this.attributes.arrangement[WallBox.V] === WallBox.ARRANGE_BASELINE);
                if (this.attributes.flow === WallBox.FLOW_VERTICAL) {
                    var firstchild = this.children[0];
                    if (dobaseline && firstchild.C_b) {
                        this.C_bc = firstchild.C_b + Math.max(this.attributes.padding[WallBox.T], firstchild.C_st);
                    }
                    var bm_s = this.attributes.padding[WallBox.T];
                    var bm_f = 0;
                    this.C_sc = bm_s;
                    this.C_scc = 0;
                    this.C_mc = bm_s;
                    this.C_fcc = 0;
                    this.C_fcs = 0;
                    this.C_fp = 0;
                    this.C_zc = 1;
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        var ws = Math.max(0, child.C_st - bm_s) + child.C_sb;
                        bm_s = child.C_sb;
                        if (i == numchildren - 1)
                            ws += Math.max(0, this.attributes.padding[WallBox.B] - bm_s);
                        this.C_sc += child.C_s + ws;
                        this.C_scc += child.C_s;
                        this.C_mc += child.C_m + ws;
                        this.C_fcc += child.C_f;
                        this.C_fcs += Math.max(0, child.C_ft - bm_f) + child.C_fb;
                        this.C_fp = this.C_fp || child.C_fp;
                        bm_f = child.C_fb;
                        this.C_zc = Math.max(this.C_zc, 1 + child.C_zc);
                    }
                }
                else if (this.attributes.flow === WallBox.FLOW_HORIZONTAL || this.attributes.flow === WallBox.FLOW_OVERLAY) {
                    if (dobaseline)
                        for (var i = 0; i < this.children.length; i++) {
                            var child = this.children[i];
                            if (child.C_b)
                                this.C_bc = Math.max(this.C_bc, child.C_b + Math.max(this.attributes.padding[WallBox.T], child.C_st));
                        }
                    this.C_sc = 0;
                    this.C_mc = 0;
                    this.C_fcc = 0;
                    this.C_fp = 0;
                    this.C_zc = 1;
                    for (var i = 0; i < this.children.length; i++) {
                        var child = this.children[i];
                        var wst = Math.max(this.attributes.padding[WallBox.T], child.C_st);
                        var bsa = child.C_b ? Math.max(0, this.C_bc - (child.C_b + wst)) : 0;
                        var ws = wst + bsa + Math.max(this.attributes.padding[WallBox.B], child.C_sb);
                        this.C_sc = Math.max(this.C_sc, child.C_s + ws);
                        this.C_mc = Math.max(this.C_mc, child.C_m + ws);
                        this.C_fcc = Math.max(this.C_fcc, child.C_f);
                        this.C_fp = this.C_fp || child.C_fp;
                        if (this.attributes.flow === WallBox.FLOW_OVERLAY)
                            this.C_zc = this.C_zc + child.C_zc;
                        else
                            this.C_zc = Math.max(this.C_zc, 1 + child.C_zc);
                    }
                }
            }
            var min = this.attributes.height[WallBox.MIN];
            var max = this.attributes.height[WallBox.MAX];
            var borderwidth = this.attributes.borderwidth[WallBox.T] + this.attributes.borderwidth[WallBox.B];
            this.C_scr = this.B_scr ? LayoutMgr.instance.scrollbarHeight : 0;
            this.C_m = this.bound(min, (this.attributes.scroll[WallBox.V] ? Math.min(this.C_mc, TDev.SizeMgr.topFontSize * 6) : this.C_mc) + this.C_scr, max) + borderwidth;
            this.C_s = this.bound(min, this.C_sc + this.C_scr, max) + borderwidth;
            this.C_st = this.attributes.margin[WallBox.T];
            this.C_sb = this.attributes.margin[WallBox.B];
            this.C_f = (this.attributes.stretchheight == -1) ? ((this.C_fp || (numchildren == 0)) ? (this.fillv(this.C_fcc) ? 1 : this.C_fcc) : 0) : this.attributes.stretchheight;
            this.C_fp = (this.attributes.stretchheight == -1) ? ((numchildren > 0) && (max > min) && this.C_fp) : (this.attributes.legacystretch[WallBox.V] ? 0 : this.attributes.stretchheight);
            this.C_ft = this.attributes.stretchmargin[WallBox.T];
            this.C_fb = this.attributes.stretchmargin[WallBox.B];
            this.C_b = (this.attributes.legacybaseline && this.C_bc) ? (this.C_bc + this.attributes.borderwidth[WallBox.T]) : 0;
        };
        WallBox.prototype.visitD = function () {
            if (this.isRoot) {
                this.D_y = 0;
                this.D_s = this.runtime.host.userWallHeight();
                this.D_z = 1;
                this.D_b = this.C_b;
            }
            var overflow = false;
            var borderwidth = (this.attributes.borderwidth[WallBox.T] + this.attributes.borderwidth[WallBox.B]);
            var allowance = this.D_s - this.C_scr - borderwidth;
            var baseline = this.attributes.legacybaseline ? ((this.attributes.arrangement[WallBox.V] === WallBox.ARRANGE_BASELINE) ? Math.max(this.C_bc, this.D_b - this.attributes.borderwidth[WallBox.T]) : 0) : this.C_bc;
            var numchildren = this.children.length;
            if (numchildren === 0) {
                this.D_scr = false;
            }
            else {
                overflow = allowance < this.C_mc + this.C_scr;
                this.D_scr = (overflow && this.attributes.scroll[WallBox.V]);
                var nextz = this.D_z + 1;
                if (this.attributes.flow === WallBox.FLOW_HORIZONTAL || this.attributes.flow === WallBox.FLOW_OVERLAY) {
                    var pt = this.attributes.padding[WallBox.T];
                    var pb = this.attributes.padding[WallBox.B];
                    for (var i = 0; i < numchildren; i++) {
                        var child = this.children[i];
                        var wst = Math.max(pt, child.C_st, child.C_b ? Math.max(0, baseline - child.C_b) : 0);
                        var ws = wst + Math.max(pb, child.C_sb);
                        if (allowance > child.C_s + ws) {
                            var extra_c = 0;
                            if (child.C_f) {
                                var proportion = (child.C_f < 1 && this.fillv(child.C_f)) ? child.C_f : 1;
                                extra_c = Math.max(0, Math.min(allowance * proportion - ws, child.attributes.height[WallBox.MAX]) - child.C_s);
                            }
                            child.D_s = child.C_s + extra_c;
                            var extra_s = (child.C_ft + child.C_fb) ? ((allowance - child.D_s - ws) / (child.C_ft + child.C_fb)) : 0;
                            child.D_y = wst + extra_s * child.C_ft;
                        }
                        else if (this.D_scr) {
                            child.D_y = wst;
                            child.D_s = child.C_s;
                        }
                        else {
                            child.D_y = wst;
                            child.D_s = Math.max(child.C_m, allowance - ws);
                        }
                        child.D_b = Math.max(0, baseline - child.D_y);
                        child.D_z = nextz;
                        if (this.attributes.flow === WallBox.FLOW_OVERLAY)
                            nextz = nextz + child.C_zc;
                    }
                }
                else if (this.attributes.flow === WallBox.FLOW_VERTICAL) {
                    var firstchild = this.children[0];
                    var bsa = firstchild.C_b ? Math.max(0, baseline - firstchild.C_b) : 0;
                    var pt = Math.max(this.attributes.padding[WallBox.T], bsa);
                    if (allowance >= this.C_sc) {
                        var apply_fractional_stretches = this.fillv(this.C_fcc);
                        var space_for_content = allowance - (this.C_sc - this.C_scc);
                        var remainder = space_for_content;
                        var wsum = this.C_fcc;
                        var csum = this.C_scc;
                        if (remainder === 0 || wsum === 0)
                            this.children.forEach(function (c) { return remainder -= (c.D_s = c.C_s); });
                        else {
                            var limit = function (c) {
                                if (!apply_fractional_stretches || c.C_f >= 1)
                                    return c.attributes.height[WallBox.MAX];
                                else
                                    return Math.max(c.C_s, Math.min(c.attributes.height[WallBox.MAX], space_for_content * c.C_f));
                            };
                            var sortedlist = this.children.slice(0).sort(function (wb1, wb2) { return limit(wb1) - limit(wb2); });
                            for (var i = 0; i < sortedlist.length; i++) {
                                var c = sortedlist[i];
                                c.D_s = (c.C_f == 0) ? c.C_s : ((!apply_fractional_stretches || c.C_f >= 1) ? Math.min(c.attributes.height[WallBox.MAX], c.C_s + ((remainder - csum) / wsum) * c.C_f) : Math.max(c.C_s, Math.min(c.attributes.height[WallBox.MAX], space_for_content * c.C_f)));
                                remainder -= c.D_s;
                                csum -= c.C_s;
                                wsum -= c.C_f;
                            }
                        }
                        var extra_s = this.C_fcs ? (remainder / this.C_fcs) : 0;
                        var y = pt;
                        var ls = pt;
                        var lf = 0;
                        for (var i = 0; i < numchildren; i++) {
                            var child = this.children[i];
                            y = y + Math.max(0, child.C_st - ls) + Math.max(0, extra_s * child.C_ft - lf);
                            child.D_y = y;
                            ls = child.C_sb;
                            lf = extra_s * child.C_fb;
                            y = y + child.D_s + ls + lf;
                            child.D_z = nextz;
                            child.D_b = Math.max(0, baseline - child.D_y);
                        }
                    }
                    else {
                        if (this.D_scr) {
                            for (var i = 0; i < numchildren; i++) {
                                var child = this.children[i];
                                child.D_s = child.C_s;
                            }
                        }
                        else if (allowance > this.C_mc) {
                            this.distribute(allowance - this.C_mc, function (child) { return child.C_s - child.C_m; }, function (child, give) {
                                child.D_s = child.C_m + give;
                            });
                        }
                        else {
                            overflow = allowance < this.C_mc;
                            for (var i = 0; i < numchildren; i++) {
                                var child = this.children[i];
                                child.D_s = child.C_m;
                            }
                        }
                        var y = 0;
                        var lastmargin = pt;
                        for (var i = 0; i < numchildren; i++) {
                            var child = this.children[i];
                            y = y + Math.max(lastmargin, child.C_st);
                            child.D_y = y;
                            child.D_b = Math.max(0, baseline - child.D_y);
                            y = y + child.D_s;
                            lastmargin = child.C_sb;
                            child.D_z = nextz;
                            child.D_b = Math.max(0, baseline - child.D_y);
                        }
                    }
                }
            }
            if (!this.delayedlayout)
                this.setRenderedHeight(this.D_s - borderwidth);
            this.setRenderedVerticalOverflow(this.D_scr ? "scroll" : (overflow ? "hidden" : ""));
            this.setRenderedY(this.D_y);
            this.setRenderedZIndex(this.D_z);
        };
        WallBox.prototype.getEditableContent = function () {
            TDev.Util.assert(this.contentType == WallBox.CONTENT_INPUT);
            return this.textarea ? this.content.value : this.content.value;
        };
        WallBox.prototype.setEditableContent = function (text) {
            TDev.Util.assert(this.contentType == WallBox.CONTENT_INPUT);
            if (this.textarea)
                this.content.value = text;
            else
                this.content.value = text;
        };
        WallBox.prototype.invalidateCachedLayout = function (triggerdelayedrelayout) {
            var _this = this;
            this.cached_width = -1;
            this.cached_height = -1;
            if (triggerdelayedrelayout)
                TDev.Util.setTimeout(100, function () {
                    if (_this.cached_width === -1)
                        LayoutMgr.QueueReLayout();
                });
        };
        WallBox.prototype.onInputTextChangeDone = function () {
            if (this.obsolete)
                return;
            if (LayoutMgr.instance.editMode) {
            }
            else {
                this.cached_width = -1;
                this.cached_height = -1;
                var parent = this.parent;
                var text = this.textarea ? this.content.value : this.content.value;
                if (parent && parent.attributes.textEditedEvent.handlers) {
                    this.runtime.queueLocalEvent(parent.attributes.textEditedEvent, [text]);
                }
                this.runtime.forcePageRefresh();
            }
        };
        WallBox.prototype.size = function () {
            return this.children.length;
        };
        WallBox.prototype.get = function (index) {
            return this.children[index];
        };
        WallBox.prototype.shift = function () {
            if (this.children.length > 0)
                this.children.shift();
        };
        WallBox.prototype.forEachChild = function (f) {
            this.children.forEach(f);
        };
        WallBox.prototype.getDepth = function () {
            return this.depth;
        };
        WallBox.prototype.getId = function () {
            return this.id;
        };
        WallBox.prototype.getElement = function () {
            return this.element;
        };
        WallBox.prototype.getFlow = function () {
            return this.attributes.flow;
        };
        WallBox.prototype.getAlign = function () {
            return this.attributes.textalign;
        };
        WallBox.prototype.getBackground = function () {
            return this.attributes.background;
        };
        WallBox.prototype.getForeground = function () {
            return this.attributes.foreground;
        };
        WallBox.prototype.getFontSize = function () {
            return this.attributes.fontSize;
        };
        WallBox.prototype.getFontWeight = function () {
            return this.attributes.fontWeight;
        };
        WallBox.prototype.getFontFamily = function () {
            return this.attributes.fontFamily;
        };
        WallBox.prototype.getRenderedWidth = function () {
            return this.rendered_width;
        };
        WallBox.prototype.getRenderedHeight = function () {
            return this.rendered_height;
        };
        WallBox.prototype.getContent = function () {
            return this.content;
        };
        WallBox.prototype.setFlow = function (flow, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.flow = flow;
            this.onCall("flow", pc);
        };
        WallBox.prototype.setBackground = function (background, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.background = background;
            this.onCall("background", pc);
        };
        WallBox.prototype.addBackgroundImage = function (img, pc) {
            if (pc === void 0) { pc = ""; }
            if (!this.attributes.backgroundImages)
                this.attributes.backgroundImages = [];
            this.attributes.backgroundImages.splice(0, 0, img);
            this.onCall("background image", pc);
        };
        WallBox.prototype.setForeground = function (foreground, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.foreground = foreground;
            this.onCall("foreground", pc);
        };
        WallBox.prototype.setFontSize = function (fontSize, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.fontSize = fontSize;
            this.onCall("font size", pc);
        };
        WallBox.prototype.setFontWeight = function (fontWeight, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.fontWeight = fontWeight;
            this.onCall("font weight", pc);
        };
        WallBox.prototype.setFontFamily = function (fontFamily, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.fontFamily = fontFamily;
            this.onCall("font family", pc);
        };
        WallBox.prototype.setScrolling = function (h, v, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.scroll = [h, v];
            this.onCall("scrolling", pc);
        };
        WallBox.prototype.setEmBorder = function (color, width, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.border = color;
            var bw = TDev.SizeMgr.topFontSize * width;
            this.attributes.borderwidth = [bw, bw, bw, bw];
            this.onCall("border", pc);
        };
        WallBox.prototype.setBorderWidth = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.borderwidth = [top, right, bottom, left];
            this.onCall("border widths", pc);
        };
        WallBox.prototype.setAllMargins = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.margin = [top, right, bottom, left];
            this.onCall("margins", pc);
        };
        WallBox.prototype.setPadding = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.padding = [top, right, bottom, left];
            this.onCall("margins", pc);
        };
        WallBox.prototype.setWrap = function (wrap, width, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.wrap = wrap;
            this.attributes.wraplimit = Math.max(width, 1);
            this.onCall("text wrap", pc);
        };
        WallBox.prototype.setWidth = function (width, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.width = [width, width];
            this.onCall("width", pc);
        };
        WallBox.prototype.setWidthRange = function (minWidth, maxWidth, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.width[WallBox.MIN] = minWidth;
            this.attributes.width[WallBox.MAX] = maxWidth;
            this.onCall("width range", pc);
        };
        WallBox.prototype.setHorizontalStretch = function (n, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.stretchwidth = n;
            this.onCall("horizontal stretch", pc);
        };
        WallBox.prototype.setVerticalStretch = function (n, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.stretchheight = n;
            this.onCall("vertical stretch", pc);
        };
        WallBox.prototype.setHorizontalAlignment = function (left, right, pc) {
            if (pc === void 0) { pc = ""; }
            left = Math.max(0, Math.min(1, left));
            right = Math.max(0, Math.min(1, right));
            if (left < 1)
                this.attributes.stretchmargin[WallBox.L] = (1 - left);
            if (right < 1)
                this.attributes.stretchmargin[WallBox.R] = (1 - left);
            if (left > 0 && right > 0)
                this.attributes.stretchwidth = 1;
            if (right == 0 && left != 0)
                this.attributes.textalign = WallBox.ARRANGE_LEFT;
            else if (right != 0 && left == 0)
                this.attributes.textalign = WallBox.ARRANGE_RIGHT;
            else if (right == 0 && left == 0)
                this.attributes.textalign = WallBox.ARRANGE_CENTER;
            else
                this.attributes.textalign = WallBox.ARRANGE_JUSTIFY;
            this.attributes.legacystretch[WallBox.H] = true;
            this.onCall("horizontal alignment", pc);
        };
        WallBox.prototype.setVerticalAlignment = function (top, bottom, pc) {
            if (pc === void 0) { pc = ""; }
            top = Math.max(0, Math.min(1, top));
            bottom = Math.max(0, Math.min(1, bottom));
            if (top < 1)
                this.attributes.stretchmargin[WallBox.T] = (1 - top);
            if (bottom < 1)
                this.attributes.stretchmargin[WallBox.B] = (1 - bottom);
            if (top > 0 && bottom > 0)
                this.attributes.stretchheight = 1;
            this.attributes.legacybaseline = false;
            this.attributes.legacystretch[WallBox.V] = true;
            this.onCall("vertical alignment", pc);
        };
        WallBox.prototype.setHorizontalArrangement = function (what, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.arrangement[WallBox.H] = what;
            this.attributes.textalign = what;
            this.onCall("horizontal arrangement", pc);
        };
        WallBox.prototype.setVerticalArrangement = function (what, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.arrangement[WallBox.V] = what;
            if (what != WallBox.ARRANGE_BASELINE)
                this.attributes.legacybaseline = false;
            this.onCall("vertical arrangement", pc);
        };
        WallBox.prototype.setHeight = function (height, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.height = [height, height];
            this.onCall("height", pc);
        };
        WallBox.prototype.setHeightRange = function (minHeight, maxHeight, pc) {
            if (pc === void 0) { pc = ""; }
            this.attributes.height[WallBox.MIN] = minHeight;
            this.attributes.height[WallBox.MAX] = maxHeight;
            this.onCall("height range", pc);
        };
        WallBox.prototype.setEmFontSize = function (fontSize, pc) {
            if (pc === void 0) { pc = ""; }
            this.setFontSize(TDev.SizeMgr.topFontSize * fontSize, pc);
        };
        WallBox.prototype.setEmBorderWidth = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.setBorderWidth(TDev.SizeMgr.topFontSize * top, TDev.SizeMgr.topFontSize * right, TDev.SizeMgr.topFontSize * bottom, TDev.SizeMgr.topFontSize * left, pc);
        };
        WallBox.prototype.setAllEmMargins = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.setAllMargins(TDev.SizeMgr.topFontSize * top, TDev.SizeMgr.topFontSize * right, TDev.SizeMgr.topFontSize * bottom, TDev.SizeMgr.topFontSize * left, pc);
        };
        WallBox.prototype.setEmPadding = function (top, right, bottom, left, pc) {
            if (pc === void 0) { pc = ""; }
            this.setPadding(TDev.SizeMgr.topFontSize * top, TDev.SizeMgr.topFontSize * right, TDev.SizeMgr.topFontSize * bottom, TDev.SizeMgr.topFontSize * left, pc);
        };
        WallBox.prototype.setEmWidth = function (width, pc) {
            if (pc === void 0) { pc = ""; }
            this.setWidth(TDev.SizeMgr.topFontSize * width, pc);
        };
        WallBox.prototype.setEmWidthRange = function (minWidth, maxWidth, pc) {
            if (pc === void 0) { pc = ""; }
            this.setWidthRange(TDev.SizeMgr.topFontSize * minWidth, TDev.SizeMgr.topFontSize * maxWidth, pc);
        };
        WallBox.prototype.setEmHeight = function (height, pc) {
            if (pc === void 0) { pc = ""; }
            this.setHeight(TDev.SizeMgr.topFontSize * height, pc);
        };
        WallBox.prototype.setEmHeightRange = function (minHeight, maxHeight, pc) {
            if (pc === void 0) { pc = ""; }
            this.setHeightRange(TDev.SizeMgr.topFontSize * minHeight, TDev.SizeMgr.topFontSize * maxHeight, pc);
        };
        WallBox.prototype.setContent = function (e) {
            TDev.Util.check(e != null);
            if (e instanceof HTMLTextAreaElement || e instanceof HTMLInputElement) {
                this.contentType = WallBox.CONTENT_INPUT;
                this.content = e;
                this.auxcontent = TDev.span("wall-text", "");
                this.auxcontent.style.visibility = "hidden";
                this.auxcontent.style.position = "absolute";
                this.auxcontent.style.left = "0px";
                this.auxcontent.style.top = "0px";
                this.auxcontent.style.padding = "1px";
                this.auxcontent.style.color = "red";
                this.auxcontent.style.zIndex = "-1";
            }
            else if (e instanceof HTMLElement) {
                this.contentType = WallBox.CONTENT_IMAGE;
                this.content = e;
            }
            else {
                this.contentType = WallBox.CONTENT_TEXT;
                var str = (e || "").toString();
                this.content = TDev.span("wall-text", str);
            }
        };
        WallBox.prototype.setRenderedX = function (x) {
            if (x !== this.rendered_x) {
                if (typeof (this.rendered_x) === "invalid" && !this.isRoot) {
                    this.element.style.position = "absolute";
                }
                this.element.style.left = x + "px";
                this.rendered_x = x;
            }
        };
        WallBox.prototype.setRenderedY = function (y) {
            if (y !== this.rendered_y) {
                this.element.style.top = y + "px";
                this.rendered_y = y;
            }
        };
        WallBox.prototype.setRenderedWidth = function (width) {
            if (width !== this.rendered_width) {
                this.element.style.width = (width >= 0) ? (width + "px") : "";
                if (this.contentType != WallBox.CONTENT_NONE && this.contentType != WallBox.CONTENT_TEXT) {
                    var extra = (this.contentType == WallBox.CONTENT_INPUT && !this.textarea) ? 6 : 0;
                    var targetelt = (this.content.className === "viewPicture") ? this.content.firstChild : this.content;
                    if (targetelt)
                        targetelt.style.width = (width > 0) ? ((width - extra) + "px") : "";
                    if (this.contentType === WallBox.CONTENT_INPUT && this.textarea)
                        this.auxcontent.style.width = (width >= 0) ? ((width - 10) + "px") : "";
                }
                this.rendered_width = width;
                this.cached_height = -1;
            }
        };
        WallBox.prototype.setRenderedHeight = function (height) {
            if (height !== this.rendered_height) {
                this.element.style.height = (height > 0) ? (height + "px") : "";
                if (this.contentType != WallBox.CONTENT_NONE && this.contentType != WallBox.CONTENT_TEXT) {
                    var extra = (this.contentType == WallBox.CONTENT_INPUT && !this.textarea) ? 6 : 0;
                    var targetelt = (this.content.className === "viewPicture") ? this.content.firstChild : this.content;
                    if (targetelt)
                        targetelt.style.height = (height > 0) ? ((height - extra) + "px") : "";
                    if (this.contentType == WallBox.CONTENT_INPUT && this.textarea && height >= this.cached_height) {
                        this.content.style.overflow = "hidden";
                    }
                }
                this.rendered_height = height;
            }
        };
        WallBox.prototype.setRenderedFontFamily = function (family) {
            if (family !== this.rendered_fontfamily) {
                this.element.style.fontFamily = (family === "Default" ? '"Segoe UI", "Segoe WP", "Helvetica Neue", Sans-Serif' : family);
                this.rendered_fontfamily = family;
                this.cached_height = -1;
                this.cached_baseline = -1;
                this.cached_width = -1;
            }
        };
        WallBox.prototype.setRenderedFontWeight = function (fw) {
            var fontweight = fw || "inherit";
            if (fontweight !== this.rendered_fontweight) {
                this.element.style.fontWeight = fontweight;
                this.rendered_fontweight = fontweight;
                this.cached_height = -1;
                this.cached_baseline = -1;
                this.cached_width = -1;
            }
        };
        WallBox.prototype.setRenderedFontSize = function (size) {
            if (size !== this.rendered_fontsize) {
                this.element.style.fontSize = (size > 0) ? (size + "px") : "inherit";
                this.rendered_fontsize = size;
                this.cached_height = -1;
                this.cached_baseline = -1;
                this.cached_width = -1;
            }
        };
        WallBox.prototype.setRenderedColor = function (clr) {
            var color = clr || "inherit";
            if (color !== this.rendered_foregroundcolor) {
                this.element.style.color = color;
                this.rendered_foregroundcolor = color;
            }
        };
        WallBox.prototype.setRenderedBackgroundColor = function (color) {
            if (color !== this.rendered_backgroundcolor) {
                this.element.style.backgroundColor = color;
                this.rendered_backgroundcolor = color;
            }
        };
        WallBox.prototype.setRenderedBackgroundImages = function (images) {
            var css = images ? images.map(function (img) { return TDev.HTML.cssImage(img.url) + ' ' + (img.position || 'center') + ' / ' + (img.size || 'cover') + ' ' + (img.repeat || 'no-repeat') + ' ' + (img.attachment || 'scroll'); }).join(', ') : '';
            if (css !== this.rendered_background) {
                this.element.style.background = css;
                this.rendered_background = css;
            }
        };
        WallBox.prototype.setRenderedTappable = function (tappable, tapped) {
            var x = "wall-box" + (tappable ? " tappable " : "") + (tapped ? " tapped" : "");
            if (x !== this.rendered_tappable) {
                this.element.className = x;
                this.rendered_tappable = x;
            }
        };
        WallBox.prototype.setRenderedPositionMode = function (positionmode) {
            if (positionmode !== this.rendered_positionmode) {
                this.element.style.position = positionmode;
                this.rendered_positionmode = positionmode;
            }
        };
        WallBox.prototype.min1pixel = function (x) {
            return ((x > 0 && x < 1) ? "1" : x.toString()) + "px";
        };
        WallBox.prototype.setRenderedBorder = function (clr, width) {
            var color = clr || "black";
            if (color !== this.rendered_border) {
                this.element.style.borderColor = color;
                this.rendered_border = color;
            }
            if (!this.rendered_borderwidth || width[0] !== this.rendered_borderwidth[0] || width[1] !== this.rendered_borderwidth[1] || width[2] !== this.rendered_borderwidth[2] || width[3] !== this.rendered_borderwidth[3]) {
                var visible = (width[0] || width[1] || width[2] || width[3]);
                this.element.style.borderStyle = visible ? "solid" : "none";
                this.element.style.borderTopWidth = visible ? this.min1pixel(width[WallBox.T]) : "";
                this.element.style.borderRightWidth = visible ? this.min1pixel(width[WallBox.R]) : "";
                this.element.style.borderBottomWidth = visible ? this.min1pixel(width[WallBox.B]) : "";
                this.element.style.borderLeftWidth = visible ? this.min1pixel(width[WallBox.L]) : "";
                this.rendered_borderwidth = width.slice(0);
            }
        };
        WallBox.prototype.setRenderedTextAlign = function (alignment) {
            if (alignment !== this.rendered_textalign) {
                switch (alignment) {
                    case WallBox.ARRANGE_RIGHT:
                        this.element.style.textAlign = "right";
                        break;
                    case WallBox.ARRANGE_CENTER:
                        this.element.style.textAlign = "center";
                        break;
                    case WallBox.ARRANGE_JUSTIFY:
                        this.element.style.textAlign = "justify";
                        break;
                    default:
                        this.element.style.textAlign = "left";
                        break;
                }
                this.cached_height = -1;
                this.cached_width = -1;
                this.rendered_textalign = alignment;
            }
        };
        WallBox.prototype.setRenderedHorizontalOverflow = function (mode) {
            if (mode != this.rendered_hmode) {
                this.element.style.overflowX = (this.rendered_sideview || (mode == "scroll" && (this.contentType == WallBox.CONTENT_INPUT))) ? "" : mode;
                this.rendered_hmode = mode;
            }
        };
        WallBox.prototype.setRenderedVerticalOverflow = function (mode) {
            if (mode != this.rendered_vmode) {
                this.element.style.overflowY = (this.rendered_sideview || (mode == "scroll" && (this.contentType == WallBox.CONTENT_INPUT))) ? "" : mode;
                this.rendered_vmode = mode;
            }
        };
        WallBox.prototype.setRenderedSideView = function (sideview) {
            if (this.rendered_sideview != sideview) {
                this.element.style.overflowX = (sideview || (this.rendered_hmode == "scroll" && (this.contentType == WallBox.CONTENT_INPUT))) ? "" : this.rendered_hmode;
                this.element.style.overflowY = (sideview || (this.rendered_vmode == "scroll" && (this.contentType == WallBox.CONTENT_INPUT))) ? "" : this.rendered_vmode;
                this.rendered_sideview = sideview;
            }
        };
        WallBox.prototype.setRenderedWrap = function (wrap, wraplimit) {
            wrap = wrap || false;
            if (wrap != this.rendered_wrap || wraplimit != this.rendered_wraplimit) {
                this.element.style.whiteSpace = wrap ? (this.element.style.textAlign === "justify" ? "pre-line" : "pre-wrap") : "pre";
                this.element.style.wordWrap = wrap ? "break-word" : "";
                this.rendered_wrap = wrap;
                this.rendered_wraplimit = wraplimit;
                this.cached_height = -1;
                this.cached_width = -1;
            }
        };
        WallBox.prototype.setRenderedZIndex = function (zi) {
            if (zi != this.rendered_zindex) {
                this.element.style.zIndex = zi ? zi.toString() : "";
                this.rendered_zindex = zi;
            }
        };
        WallBox.FLOW_HORIZONTAL = 0;
        WallBox.FLOW_VERTICAL = 1;
        WallBox.FLOW_OVERLAY = 2;
        WallBox.STRETCH_AUTO = -1;
        WallBox.ARRANGE_LEFT = 1;
        WallBox.ARRANGE_RIGHT = 2;
        WallBox.ARRANGE_CENTER = 3;
        WallBox.ARRANGE_JUSTIFY = 4;
        WallBox.ARRANGE_BASELINE = 5;
        WallBox.ARRANGE_TOP = 6;
        WallBox.ARRANGE_BOTTOM = 7;
        WallBox.ARRANGE_SPREAD = 8;
        WallBox.MIN = 0;
        WallBox.MAX = 1;
        WallBox.T = 0;
        WallBox.R = 1;
        WallBox.B = 2;
        WallBox.L = 3;
        WallBox.H = 0;
        WallBox.V = 1;
        WallBox.CONTENT_NONE = -1;
        WallBox.CONTENT_TEXT = 0;
        WallBox.CONTENT_IMAGE = 1;
        WallBox.CONTENT_INPUT = 2;
        return WallBox;
    })(BoxBase);
    TDev.WallBox = WallBox;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var ModalDialog = (function () {
        function ModalDialog() {
            this.overlay = TDev.div("modalOverlay");
            this.dialog = TDev.div("modalDialog");
            this.savedKeyState = null;
            this.id = TDev.Random.uniqueId();
            this.opacity = 0.85;
            this.onDismiss = null;
            this.visible = false;
            this.canDismiss = true;
            this.floating = TDev.div("modalDialogInner", this.dialog);
            this.outerDialog = TDev.div("modalDialogOuter", TDev.div("modalDialogMid", this.floating));
        }
        ModalDialog.dismissCurrent = function () {
            if (ModalDialog.currentIsVisible()) {
                ModalDialog.current.canDismiss = true;
                ModalDialog.current.dismiss();
            }
        };
        ModalDialog.currentIsVisible = function () {
            return ModalDialog.current && ModalDialog.current.visible;
        };
        ModalDialog.prototype.show = function () {
            this.showBare();
        };
        ModalDialog.prototype.addLog = function () {
            if (!this.logView) {
                this.logView = new TDev.RT.AppLogView();
                this.logView.charts(false);
                this.logView.search(false);
                this.logView.reversed(true);
                this.logView.attachLogEvents();
                this.logView.element.style.fontSize = "0.7em";
                this.add(this.logView.element);
                this.setScroll();
                this.stretchWide();
            }
        };
        ModalDialog.prototype.addFirst = function (v) {
            if (this.dialog.firstChild)
                this.dialog.insertBefore(v, this.dialog.firstChild);
            else
                this.add(v);
        };
        ModalDialog.prototype.empty = function () {
            this.dialog.setChildren([]);
        };
        ModalDialog.prototype.add = function (v) {
            this.dialog.appendChildren([v]);
        };
        ModalDialog.prototype.addClass = function (c) {
            this.dialog.className += " " + c;
        };
        ModalDialog.prototype.addHTML = function (html) {
            var b = TDev.div("wall-dialog-body");
            TDev.Browser.setInnerHTML(b, html);
            this.add(b);
            return b;
        };
        ModalDialog.prototype.addOuter = function (v) {
            this.outerDialog.appendChildren([v]);
        };
        ModalDialog.prototype.stretchDown = function (e, keep) {
            if (keep === void 0) { keep = 0; }
            this.outerDialog.className += " modalDialogOuterLong";
            this.listheight = TDev.SizeMgr.windowHeight - e.offsetTop - (3 + keep) * TDev.SizeMgr.topFontSize;
            e.style.height = this.listheight + "px";
        };
        ModalDialog.prototype.adjustlistsize = function () {
            if (!this.list || !this.buttondiv)
                return;
            var howmuchover = this.dialog.scrollHeight - this.dialog.clientHeight;
            if (howmuchover > 0) {
                this.listheight = Math.max(10 * TDev.SizeMgr.topFontSize, this.listheight - howmuchover);
                this.list.style.height = this.listheight + "px";
            }
        };
        ModalDialog.prototype.stretchWide = function () {
            this.floating.style.width = 'calc(100% - 4em)';
            this.dialog.style.width = '100%';
        };
        ModalDialog.prototype.showBare = function (what) {
            var _this = this;
            if (what === void 0) { what = null; }
            TDev.Ticker.dbg("ModalDialog.showBare0");
            if (ModalDialog.current && ModalDialog.current != this && !ModalDialog.current.canDismiss)
                return;
            this.overlay.style.opacity = this.opacity.toString();
            this.overlay.withClick(function () {
                _this.dismiss();
            });
            this.outerDialog.withClick(function () {
                _this.dismiss();
            });
            this.floating.withClick(function () {
            });
            var root = TDev.elt("root");
            TDev.Util.children(root).forEach(function (ch) { return ch.setAttribute("aria-hidden", "true"); });
            root.appendChildren([this.overlay, what || this.outerDialog]);
            var btnsDiv;
            TDev.Util.children(this.dialog).forEach(function (e) {
                if (e.className == "wall-dialog-buttons")
                    btnsDiv = e;
                if (e.withClick && !e.clickHandler && !e.onselectstart)
                    e.withClick(function () {
                    });
            });
            if (!what) {
                TDev.Util.showPopup(this.floating);
            }
            else {
                this.outerDialog = what;
                TDev.Util.showPopup(what);
            }
            if (ModalDialog.current && ModalDialog.current != this) {
                ModalDialog.dismissCurrent();
            }
            if (this.canDismiss)
                TDev.Screen.pushModalHash("dialog-" + this.id, function () { return _this.dismiss(); });
            this.savedKeyState = TDev.KeyboardMgr.instance.saveState();
            TDev.KeyboardMgr.instance.register("Esc", function () {
                _this.dismiss();
                return true;
            });
            this.visible = true;
            ModalDialog.current = this;
            if (btnsDiv) {
                var btns = TDev.Util.children(btnsDiv).filter(function (e) { return e.clickHandler; });
                if (btns.length == 1)
                    TDev.KeyboardMgr.instance.btnShortcut(btns[0], "Enter");
            }
            TDev.elt("root").setFlag("modal-visible", true);
            TDev.Ticker.dbg("ModalDialog.showBare1");
        };
        ModalDialog.prototype.dismiss = function () {
            var _this = this;
            if (!this.canDismiss) {
                TDev.Ticker.dbg("ModalDialog.dismiss - cannot");
                return;
            }
            TDev.Ticker.dbg("ModalDialog.dismiss0");
            TDev.Screen.popModalHash("dialog-" + this.id);
            if (this.logView)
                this.logView.removeLogEvents();
            this.visible = false;
            TDev.elt("root").setFlag("modal-visible", false);
            TDev.KeyboardMgr.instance.loadState(this.savedKeyState);
            TDev.Util.hidePopup(this.outerDialog, function () {
                TDev.Ticker.dbg("ModalDialog.dismiss1");
                _this.outerDialog.removeSelf();
                TDev.Util.children(TDev.elt("root")).forEach(function (ch) { return ch.removeAttribute("aria-hidden"); });
            });
            TDev.Util.fadeOut(this.overlay);
            var f = this.onDismiss;
            this.onDismiss = null;
            if (f)
                f(this);
        };
        ModalDialog.ask = function (msg, confirmation, act) {
            var m = new ModalDialog();
            m.add([
                TDev.div("wall-dialog-header", confirmation + "?"),
                TDev.div("wall-dialog-body", msg),
                TDev.div("wall-dialog-buttons", TDev.HTML.mkButton(TDev.lf("cancel"), function () { return m.dismiss(); }), TDev.HTML.mkButton(confirmation, function () {
                    act();
                    m.dismiss();
                }))
            ]);
            m.show();
            return m;
        };
        ModalDialog.askMany = function (header, msg, options) {
            var m = new ModalDialog();
            m.add([
                TDev.div("wall-dialog-header", header),
                TDev.div("wall-dialog-body", msg),
                TDev.div("wall-dialog-buttons", Object.keys(options).map(function (k) { return TDev.HTML.mkButton(k, function () {
                    m.dismiss();
                    options[k]();
                }); }))
            ]);
            m.show();
            return m;
        };
        ModalDialog.askManyWithAdditionalElts = function (header, helpLink, msg, subHeader, subMsg, options) {
            var elts = [];
            for (var _i = 6; _i < arguments.length; _i++) {
                elts[_i - 6] = arguments[_i];
            }
            var m = new ModalDialog();
            m.add([
                TDev.div("wall-dialog-header", header, helpLink),
                TDev.div("wall-dialog-body", msg),
                TDev.div("wall-dialog-header", subHeader),
                TDev.div("wall-dialog-body", subMsg),
                TDev.div("wall-dialog-buttons", Object.keys(options).map(function (k) { return TDev.HTML.mkButton(k, function () {
                    m.dismiss();
                    options[k]();
                }); })),
                elts
            ]);
            m.show();
            return m;
        };
        ModalDialog.buttons = function (header, msg, subheader, submsg) {
            var buttons = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                buttons[_i - 4] = arguments[_i];
            }
            var m = new ModalDialog();
            m.add([
                TDev.div("wall-dialog-header", header),
                TDev.div("wall-dialog-body", msg),
                subheader && TDev.div("wall-dialog-header", subheader),
                submsg && TDev.div("wall-dialog-body", submsg),
                TDev.div("wall-dialog-buttons", buttons)
            ]);
            m.show();
            return m;
        };
        ModalDialog.info = function (title, msg, btn) {
            if (btn === void 0) { btn = "ok"; }
            var m = new ModalDialog();
            m.add([
                TDev.div("wall-dialog-header", title),
                TDev.div("wall-dialog-body", msg)
            ]);
            if (btn)
                m.addOk(btn);
            m.show();
            return m;
        };
        ModalDialog.infoAsync = function (title, msg, btn) {
            if (btn === void 0) { btn = "ok"; }
            var r = new TDev.PromiseInv();
            var m = ModalDialog.info(title, msg, btn);
            m.onDismiss = function () { return r.success(null); };
            return r;
        };
        ModalDialog.prototype.addButtons = function (btns) {
            this.add(TDev.div("wall-dialog-buttons", Object.keys(btns).map(function (b) { return TDev.HTML.mkButton(b, btns[b]); })));
        };
        ModalDialog.prototype.addOk = function (btn, f, cls, btns) {
            var _this = this;
            if (btn === void 0) { btn = TDev.lf("ok"); }
            if (f === void 0) { f = null; }
            if (cls === void 0) { cls = ""; }
            if (btns === void 0) { btns = []; }
            var b = TDev.HTML.mkButton(btn, function () {
                if (f)
                    f();
                else
                    _this.dismiss();
            });
            if (cls)
                b.className += " " + cls;
            this.add(TDev.div("wall-dialog-buttons", [b, btns]));
            return b;
        };
        ModalDialog.prototype.critical = function () {
            this.floating.classList.add('bg-critical');
        };
        ModalDialog.showText = function (s, title, msg, done) {
            if (title === void 0) { title = null; }
            if (msg === void 0) { msg = null; }
            if (done === void 0) { done = null; }
            var m = new ModalDialog();
            if (title != null)
                m.add(TDev.div('wall-dialog-header', title));
            if (msg != null)
                m.add(TDev.div('wall-dialog-body', msg));
            var elt = TDev.HTML.mkTextArea("scriptText");
            elt.value = s;
            m.dialog.appendChild(elt);
            m.textArea = elt;
            m.onDismiss = done;
            m.show();
            m.stretchDown(elt);
            m.stretchWide();
            try {
                elt.setSelectionRange(0, s.length);
            }
            catch (e) {
            }
            return m;
        };
        ModalDialog.showTable = function (headers, values, ondblclick) {
            var m = new ModalDialog();
            var table = document.createElement("table");
            table.className = "traces";
            var hdrRow = document.createElement("tr");
            for (var i = 0; i < headers.length; i++) {
                var hdr = document.createElement("th");
                hdr.textContent = headers[i];
                hdrRow.appendChild(hdr);
            }
            table.appendChild(hdrRow);
            for (var i = 0; i < values.length; i++) {
                var row = document.createElement("tr");
                row.classList.add("hover");
                var rowValues = values[i];
                for (var j = 0; j < rowValues.length; j++) {
                    var v = document.createElement("td");
                    v.textContent = rowValues[j];
                    v.ondblclick = function (ev) {
                        var target = ev.target || ev.srcElement;
                        return ondblclick(m, target.parentElement.sectionRowIndex - 1);
                    };
                    row.appendChild(v);
                }
                table.appendChild(row);
            }
            m.dialog.appendChild(table);
            m.stretchDown(table);
            m.show();
            return m;
        };
        ModalDialog.prototype.noChrome = function () {
            this.outerDialog.className += " modalNoChrome";
        };
        ModalDialog.prototype.fullScreen = function (iMeanIt) {
            if (iMeanIt === void 0) { iMeanIt = false; }
            this.outerDialog.className += " modalNoChrome " + (iMeanIt ? "reallyFullScreen" : "modalFullScreen");
            this.outerDialog.setChildren(this.dialog);
        };
        ModalDialog.prototype.fullWhite = function () {
            this.outerDialog.className += " modalFullWhite";
        };
        ModalDialog.prototype.fullYellow = function () {
            this.outerDialog.className += " modalFullYellow";
        };
        ModalDialog.prototype.setScroll = function () {
            this.dialog.style.maxHeight = (TDev.SizeMgr.windowHeight * 0.8) / TDev.SizeMgr.topFontSize + "em";
            TDev.Util.setupDragToScroll(this.dialog);
        };
        ModalDialog.prototype.showorhidelist = function (show) {
            var d = show ? "" : "none";
            if (this.searchbox)
                this.searchbox.style.display = d;
            if (this.list)
                this.list.style.display = d;
        };
        ModalDialog.prototype.choose = function (boxes, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            var progressBar = TDev.HTML.mkProgressBar();
            var list = this.list = TDev.HTML.mkModalList([]);
            var search = TDev.HTML.mkTextInput("text", TDev.lf("choose..."));
            search.id = "chooseSearch";
            search.placeholder = options.searchHint || (options.queryAsync ? TDev.lf("Type to search online...") : TDev.lf("Type to search..."));
            var autoKeyboard = TDev.KeyboardAutoUpdate.mkInput(search, TDev.Util.catchErrors("chooseSearch", function () { return refresh(true); }));
            search.onkeyup = function (ev) {
                autoKeyboard.keypress();
            };
            var limitedMode = !!options.mkSeeMore;
            if (limitedMode && boxes.every(function (b) { return !b.initiallyHidden; }))
                limitedMode = false;
            var needKbd = false;
            function refresh(onlineOK) {
                var allTerms = search.value;
                var terms = allTerms.split(/\s+/).map(function (s) { return s.toLowerCase(); }).filter(function (s) { return s != ""; });
                var res = [];
                var ids = {};
                if (terms.length > 0)
                    limitedMode = false;
                var skipCnt = 0;
                boxes.forEach(function (b) {
                    var miss = false;
                    if (limitedMode && b.initiallyHidden) {
                        skipCnt++;
                        return;
                    }
                    var cont = b.textContent.toLowerCase();
                    terms.forEach(function (term) {
                        if (!miss && cont.indexOf(term) < 0)
                            miss = true;
                    });
                    if (!miss) {
                        ids[cont] = 1;
                        res.push(b);
                        TDev.Util.highlightWords(b, terms, true);
                    }
                });
                if (limitedMode) {
                    var b = options.mkSeeMore(needKbd ? TDev.lf("you can also search") : TDev.lf("there is {0} more option{0:s}", skipCnt));
                    res.push(b.withClick(function () {
                        limitedMode = false;
                        refresh(options.initialEmptyQuery);
                    }));
                }
                list.setChildren(res);
                if (onlineOK && !!options.queryAsync && TDev.Cloud.isOnline()) {
                    progressBar.start();
                    options.queryAsync(allTerms).then(function (bxs) {
                        progressBar.stop();
                        if (!autoKeyboard.resultsCurrent(allTerms)) {
                            return;
                        }
                        if (!!bxs) {
                            bxs.forEach(function (bx) {
                                var bkey = bx.textContent.toLowerCase();
                                if (!ids[bkey]) {
                                    ids[bkey] = 1;
                                    list.appendChild(bx);
                                    TDev.Util.highlightWords(bx, terms, true);
                                }
                            });
                        }
                    }).done();
                }
            }
            if (!options.noBackground)
                this.outerDialog.className += " modalChooser";
            if (options.header) {
                this.add(TDev.div("modalSearchHeader", options.header));
            }
            if (options.includeSearch !== undefined)
                needKbd = options.includeSearch;
            else
                needKbd = (!!options.queryAsync || boxes.length > 5);
            if (needKbd)
                this.add(this.searchbox = TDev.div("modalSearch", [progressBar, search]));
            this.add(list);
            this.buttondiv = TDev.div('wall-dialog-buttons');
            if (options.custombuttons !== undefined)
                this.buttondiv.appendChildren(options.custombuttons);
            else
                this.buttondiv.appendChild(TDev.HTML.mkButtonTick(TDev.lf("cancel"), 165 /* chooseCancel */, function () { return _this.dismiss(); }));
            this.add(this.buttondiv);
            this.show();
            if (needKbd)
                TDev.KeyboardMgr.instance.register("***", function (e) {
                    if (e.fromTextBox)
                        return false;
                    var s = TDev.Util.keyEventString(e);
                    if (s) {
                        search.value += s;
                        TDev.Util.setKeyboardFocus(search);
                        return true;
                    }
                    return false;
                });
            if (!options.dontStretchDown)
                this.stretchDown(list, 2.8);
            if (options.adjustListSize)
                this.adjustlistsize();
            if (options.initialQuery !== undefined) {
                options.initialEmptyQuery = true;
                search.value = options.initialQuery;
                TDev.Util.setKeyboardFocus(search, true);
            }
            refresh(options.initialEmptyQuery);
        };
        return ModalDialog;
    })();
    TDev.ModalDialog = ModalDialog;
    var ProgressOverlay;
    (function (ProgressOverlay) {
        var overlay;
        var msgDiv;
        var addInfo;
        var progress;
        var visible = 0;
        var unblockedKeyboard = false;
        var logView;
        ProgressOverlay.lock = TDev.PromiseInv.as();
        function lockAndShow(msg, f, splashUrl) {
            if (msg === void 0) { msg = TDev.lf("working hard"); }
            ProgressOverlay.lock.done(function () { return show(msg, f, splashUrl); });
        }
        ProgressOverlay.lockAndShow = lockAndShow;
        function lockAndShowAsync(msg) {
            var r = new TDev.PromiseInv();
            lockAndShow(msg, function () { return r.success(null); });
            return r;
        }
        ProgressOverlay.lockAndShowAsync = lockAndShowAsync;
        function bumpShow() {
            TDev.Util.assert(isActive());
            visible++;
        }
        ProgressOverlay.bumpShow = bumpShow;
        function show(msg, f, splashUrl) {
            if (msg === void 0) { msg = TDev.lf("working hard"); }
            visible++;
            TDev.Ticker.dbg("ProgressOverlay.show " + visible + " " + msg);
            if (visible > 1) {
                setMessage(msg);
                return;
            }
            if (!overlay) {
                overlay = TDev.div("modalOverlay", TDev.div("modalMessage", msgDiv = TDev.div("modalMessageHeader"), addInfo = TDev.div("modalMessagePleaseWait"), progress = TDev.div("modalMessagePleaseWait")));
                overlay.withClick(function () {
                });
                overlay.style.backgroundColor = "white";
                overlay.style.opacity = "0.95";
                overlay.style.backgroundSize = "cover";
                overlay.style.backgroundRepeat = "no-repeat";
            }
            ProgressOverlay.lock = new TDev.PromiseInv();
            setMessage(msg);
            setSplashArtId(splashUrl);
            addInfo.setChildren([TDev.lf("please wait...")]);
            closeLog();
            overlay.removeSelf();
            TDev.elt("root").appendChildren([overlay]);
            if (f)
                TDev.Util.setTimeout(TDev.Browser.isWebkit ? 100 : 1, f);
        }
        ProgressOverlay.show = show;
        function setAddInfo(info) {
            addInfo.setChildren(info);
        }
        ProgressOverlay.setAddInfo = setAddInfo;
        function hide() {
            if (visible == 0) {
                return;
            }
            visible--;
            TDev.Ticker.dbg("ProgressOverlay.hide " + visible);
            if (visible == 0) {
                ProgressOverlay.lock.success(null);
                progress.setChildren([]);
                overlay.removeSelf();
                unblockedKeyboard = false;
                closeLog();
            }
        }
        ProgressOverlay.hide = hide;
        function closeLog() {
            if (logView) {
                logView.element.removeSelf();
                logView.removeLogEvents();
                logView = undefined;
            }
        }
        function setProgress(msg) {
            if (progress)
                progress.setChildren(msg);
        }
        ProgressOverlay.setProgress = setProgress;
        function setMessage(msg) {
            if (msgDiv)
                msgDiv.setChildren(msg);
        }
        ProgressOverlay.setMessage = setMessage;
        function setSplashArtId(url) {
            if (overlay)
                overlay.style.backgroundImage = TDev.HTML.cssImage(url, 0.3);
        }
        ProgressOverlay.setSplashArtId = setSplashArtId;
        function unblockKeyboard() {
            unblockedKeyboard = true;
        }
        ProgressOverlay.unblockKeyboard = unblockKeyboard;
        function isKeyboardBlocked() {
            return isActive() && !unblockedKeyboard;
        }
        ProgressOverlay.isKeyboardBlocked = isKeyboardBlocked;
        function showLog() {
            if (!logView) {
                logView = new TDev.RT.AppLogView();
                logView.charts(false);
                logView.search(false);
                logView.reversed(true);
                logView.attachLogEvents();
                logView.element.style.fontSize = "0.7em";
                progress.parentElement.appendChild(logView.element);
            }
        }
        ProgressOverlay.showLog = showLog;
        function isActive() {
            return visible > 0;
        }
        ProgressOverlay.isActive = isActive;
    })(ProgressOverlay = TDev.ProgressOverlay || (TDev.ProgressOverlay = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Storage;
    (function (Storage) {
        function fatalError(e, op) {
            if (op === void 0) { op = undefined; }
            TDev.Util.navigateInWindow(window.errorUrl + "#storageinit," + encodeURIComponent(op));
        }
        function versionError(e) {
            TDev.Util.navigateInWindow(window.errorUrl + "#storageversion");
        }
        function tagError(e, origin, willRetry) {
            if (willRetry === void 0) { willRetry = false; }
            e.isDatabaseError = true;
            e.databaseOrigin = origin;
            TDev.Util.log("database error" + (willRetry ? " (will retry)" : " (no retry)") + ": " + TDev.Util.getErrorInfo(e));
            return e;
        }
        Storage.temporary = false;
        var temporaryRequestedSignin = false;
        function showTemporaryWarning() {
            if (Storage.temporary) {
                if (TDev.Cloud.isAccessTokenExpired())
                    TDev.HTML.showWarningNotification(TDev.lf("Web site data not available, sign in to back up your scripts!"), TDev.lf("Your browser does not allow TouchDevelop to store data. This usually happens if run in Private Mode (Safari), in InPrivate mode (Internet Explorer) or your security settings prevent data storage. Sign in or change your browser settings to avoid loosing your work. All the changes not saved to the cloud will be lost when leaving this page."));
                else if (TDev.Cloud.isOffline())
                    TDev.HTML.showWarningNotification(TDev.lf("Web site data not available, connect to internet to back up your scripts!"), TDev.lf("Your browser does not allow TouchDevelop to store data. This usually happens if run in Private Mode (Safari), in InPrivate mode (Internet Explorer) or your security settings prevent data storage. Sign in or change your browser settings to avoid loosing your work. All the changes not saved to the cloud will be lost when leaving this page."));
                return true;
            }
            else {
                return false;
            }
        }
        Storage.showTemporaryWarning = showTemporaryWarning;
        var memoryStorage = {};
        var MemoryTable = (function () {
            function MemoryTable(tableName) {
                this.tableName = tableName;
                Storage.temporary = true;
            }
            MemoryTable.prototype.getValueAsync = function (key) {
                var v = memoryStorage[this.tableName + "-" + key];
                if (typeof v !== "string")
                    v = undefined;
                return TDev.Promise.as(v);
            };
            MemoryTable.prototype.getItemsAsync = function (keys) {
                var _this = this;
                var items = {};
                keys.forEach(function (k) {
                    var v = memoryStorage[_this.tableName + "-" + k];
                    if (typeof v !== "string")
                        v = undefined;
                    items[k] = v;
                });
                return TDev.Promise.as(items);
            };
            MemoryTable.prototype.getKeysAsync = function () {
                var prefix = this.tableName + "-";
                var results = [];
                Object.keys(memoryStorage).forEach(function (k) {
                    if (k.length > prefix.length && k.slice(0, prefix.length) === prefix)
                        results.push(k.slice(prefix.length));
                });
                return TDev.Promise.as(results);
            };
            MemoryTable.prototype.setItemsAsync = function (items) {
                var _this = this;
                Object.keys(items).forEach(function (k) {
                    var v = items[k];
                    if (typeof v === "string")
                        memoryStorage[_this.tableName + "-" + k] = v;
                    else
                        delete memoryStorage[_this.tableName + "-" + k];
                });
                return TDev.Promise.as();
            };
            return MemoryTable;
        })();
        function createMemoryTable(tableName) {
            return new MemoryTable(tableName);
        }
        Storage.createMemoryTable = createMemoryTable;
        Storage.tableNames = ["Editor", "Index", "Scripts", "ScriptCache", "Traces", "ApiCache", "ArtCache", "Sessions"];
        var indexedDBDeleting = false;
        var indexedDBPromise;
        var indexedDB;
        var IndexedDBTable = (function () {
            function IndexedDBTable(tableName) {
                this.tableName = tableName;
            }
            IndexedDBTable.prototype.getValueAsync = function (key) {
                return this.getItemsAsync([key]).then(function (items) { return items[key]; });
            };
            IndexedDBTable.prototype.getItemsAsync = function (keys) {
                var _this = this;
                if (keys.length == 0)
                    return TDev.Promise.as({});
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        var trans = indexedDB.transaction([_this.tableName], 'readonly');
                        var store = trans.objectStore(_this.tableName);
                        var requests = keys.map(function (k) { return store.get(k); });
                        var items = {};
                        var missing = keys.length;
                        requests.forEach(function (r, i) {
                            r.onsuccess = function (e) {
                                var result = e.target.result;
                                items[keys[i]] = result === undefined ? undefined : result.value;
                                if (--missing == 0)
                                    onSuccess(items);
                            };
                            r.onerror = function (e) {
                                if (missing >= 0) {
                                    missing = -1;
                                    onError(tagError(e, "IndexedDBTable.getItemsAsync/0", false));
                                }
                                ;
                            };
                        });
                    }
                    catch (e) {
                        onError(tagError(e, "IndexedDBTable.getItemsAsync/1", false));
                    }
                });
            };
            IndexedDBTable.prototype.getKeysAsync = function () {
                var _this = this;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        var trans = indexedDB.transaction([_this.tableName], 'readonly');
                        var store = trans.objectStore(_this.tableName);
                        var request = store.openCursor();
                        var results = [];
                        request.onsuccess = function (e) {
                            var cursor = (e.target.result);
                            if (!!cursor) {
                                results.push(cursor.key);
                                cursor["continue"]();
                            }
                            else
                                onSuccess(results);
                        };
                        request.onerror = onError;
                    }
                    catch (e) {
                        onError(tagError(e, "IndexedDBTable.getKeysAsync", false));
                    }
                });
            };
            IndexedDBTable.prototype.setItemsAsync = function (items) {
                var _this = this;
                var list = [];
                Object.keys(items).forEach(function (k) {
                    list.push({ key: k, value: items[k] });
                });
                if (list.length == 0)
                    return TDev.Promise.as();
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        var requests = list.map(function (kvp) {
                            var trans = indexedDB.transaction([_this.tableName], 'readwrite');
                            var store = trans.objectStore(_this.tableName);
                            if (typeof kvp.value === "string")
                                return store.put(kvp);
                            else
                                return store["delete"](kvp.key);
                        });
                        var missing = requests.length;
                        requests.forEach(function (r, i) {
                            r.onsuccess = function (e) {
                                if (--missing == 0)
                                    onSuccess(undefined);
                            };
                            r.onerror = function (e) {
                                if (missing >= 0) {
                                    missing = -1;
                                    onError(tagError(e, "IndexedDBTable.setItemsAsync/0", false));
                                }
                                ;
                            };
                        });
                    }
                    catch (e) {
                        onError(tagError(e, "IndexedDBTable.setItemsAsync/1", false));
                    }
                });
            };
            return IndexedDBTable;
        })();
        function indexedDBupgrade(indexedDB) {
            try {
                var names = indexedDB.objectStoreNames;
                var exisiting = {};
                for (var i = 0; i < names.length; i++) {
                    if (Storage.tableNames.indexOf(names[i]) < 0)
                        indexedDB.deleteObjectStore(names[i]);
                    else
                        exisiting[names[i]] = true;
                }
                Storage.tableNames.forEach(function (tableName) {
                    if (!exisiting[tableName])
                        indexedDB.createObjectStore(tableName, { keyPath: "key" });
                });
            }
            catch (e) {
                TDev.Util.reportError("indexedDBupgrade", e, true);
            }
        }
        var webSqlDeleting = false;
        var webSqlPromise;
        var webSql;
        var WebSqlTable = (function () {
            function WebSqlTable(tableName) {
                this.tableName = tableName;
            }
            WebSqlTable.prototype.getValueAsync = function (key) {
                return this.getItemsAsync([key]).then(function (items) { return items[key]; });
            };
            WebSqlTable.prototype.internalGetItemsAsync = function (items, keys, start, retries) {
                var _this = this;
                if (retries === void 0) { retries = 3; }
                if (start >= keys.length)
                    return TDev.Promise.as(items);
                var end = start + 256;
                if (end > keys.length)
                    end = keys.length;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var propagated = false;
                    var errorHandler = function (e, origin) {
                        if (!propagated) {
                            propagated = true;
                            tagError(e, "WebSqlTable.internalGetItemsAsync/" + origin, retries > 0);
                            if (retries > 0)
                                delayCreateWebSqlAsync().then(function () { return _this.internalGetItemsAsync(items, keys, start, retries - 3); }).done(onSuccess, onError);
                            else
                                onError(e);
                        }
                    };
                    try {
                        webSql.transaction(function (tx) {
                            var query = "SELECT * FROM TABLE" + _this.tableName + " WHERE ";
                            var values = [];
                            for (var i = start; i < end; i++) {
                                if (i > start)
                                    query += " OR ";
                                query += "id=?";
                                values.push(keys[i]);
                            }
                            try {
                                tx.executeSql(query, values, function (tx, results) {
                                    var len = results.rows.length;
                                    for (var i = 0; i < len; i++) {
                                        var item = results.rows.item(i);
                                        items[item.id] = item.text;
                                    }
                                });
                            }
                            catch (e) {
                                errorHandler(e, 0);
                            }
                        }, function (e) { return errorHandler(e, 1); }, function () {
                            if (!propagated) {
                                propagated = true;
                                onSuccess(items);
                            }
                        });
                    }
                    catch (e) {
                        errorHandler(e, 2);
                    }
                }).then(function () { return _this.internalGetItemsAsync(items, keys, end); });
            };
            WebSqlTable.prototype.getItemsAsync = function (keys) {
                return this.internalGetItemsAsync({}, keys, 0);
            };
            WebSqlTable.prototype.getKeysAsync = function (retries) {
                var _this = this;
                if (retries === void 0) { retries = 3; }
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var keys = [];
                    var propagated = false;
                    var errorHandler = function (e, origin) {
                        if (!propagated) {
                            propagated = true;
                            tagError(e, "WebSqlTable.getKeysAsync/" + origin, retries > 0);
                            if (retries > 0)
                                delayCreateWebSqlAsync().then(function () { return _this.getKeysAsync(retries - 1); }).done(onSuccess, onError);
                            else
                                onError(e);
                        }
                    };
                    try {
                        webSql.transaction(function (tx) {
                            try {
                                tx.executeSql("SELECT id FROM TABLE" + _this.tableName, [], function (tx, results) {
                                    var len = results.rows.length;
                                    for (var i = 0; i < len; i++) {
                                        var item = results.rows.item(i);
                                        keys.push(item.id);
                                    }
                                });
                            }
                            catch (e) {
                                errorHandler(e, 0);
                            }
                        }, function (e) { return errorHandler(e, 1); }, function () {
                            if (!propagated) {
                                propagated = true;
                                onSuccess(keys);
                            }
                        });
                    }
                    catch (e) {
                        errorHandler(e, 2);
                    }
                });
            };
            WebSqlTable.prototype.setItemsAsync = function (items, retries) {
                var _this = this;
                if (retries === void 0) { retries = 3; }
                var list = [];
                Object.keys(items).forEach(function (k) {
                    list.push({ key: k, value: items[k] });
                });
                if (list.length == 0)
                    return TDev.Promise.as();
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var propagated = false;
                    var errorHandler = function (e, origin) {
                        if (!propagated) {
                            propagated = true;
                            tagError(e, "WebSqlTable.setItemsAsync/" + origin, retries > 0);
                            if (retries > 0)
                                delayCreateWebSqlAsync().then(function () { return _this.setItemsAsync(items, retries - 1); }).done(onSuccess, onError);
                            else
                                onError(e);
                        }
                    };
                    try {
                        webSql.transaction(function (tx) {
                            list.forEach(function (kvp) {
                                try {
                                    if (typeof kvp.value === "string")
                                        tx.executeSql("INSERT OR REPLACE INTO TABLE" + _this.tableName + " (id, text) VALUES (?, ?)", [kvp.key, kvp.value]);
                                    else
                                        tx.executeSql("DELETE FROM TABLE" + _this.tableName + " WHERE id=?", [kvp.key]);
                                }
                                catch (e) {
                                    errorHandler(e, 0);
                                }
                            });
                        }, function (e) { return errorHandler(e, 1); }, function () {
                            if (!propagated) {
                                propagated = true;
                                onSuccess(undefined);
                            }
                        });
                    }
                    catch (e) {
                        errorHandler(e, 2);
                    }
                });
            };
            return WebSqlTable;
        })();
        function webSqlInit(webSql, onSuccess, onError, retries) {
            if (retries === void 0) { retries = 3; }
            var propagated = false;
            var errorHandler = function (e, origin) {
                if (!propagated) {
                    propagated = true;
                    tagError(e, "WebSqlTable.webSqlInit/" + origin, retries > 0);
                    if (retries > 0)
                        delayCreateWebSqlAsync(retries - 1).done(onSuccess, onError);
                    else
                        onError(e);
                }
            };
            try {
                webSql.transaction(function (tx) {
                    Storage.tableNames.forEach(function (tableName) {
                        try {
                            tx.executeSql("CREATE TABLE IF NOT EXISTS TABLE" + tableName + " (id unique, text)");
                        }
                        catch (e) {
                            errorHandler(e, 0);
                        }
                    });
                }, function (e) { return errorHandler(e, 1); }, function () {
                    if (!propagated) {
                        propagated = true;
                        onSuccess(webSql);
                    }
                });
            }
            catch (e) {
                errorHandler(e, 2);
            }
        }
        function getWebSqlAsync(retries) {
            if (retries === void 0) { retries = 3; }
            if (webSql)
                return TDev.Promise.as(webSql);
            if (!webSqlPromise) {
                if (webSqlDeleting)
                    return TDev.Promise.delay(1000, function () { return getWebSqlAsync(retries); });
                webSqlPromise = internalGetWebSqlAsync(retries);
            }
            return webSqlPromise;
        }
        function internalGetWebSqlAsync(retries) {
            if (retries === void 0) { retries = 3; }
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                var propagated = false;
                var errorHandler = function (e, origin) {
                    if (!propagated) {
                        propagated = true;
                        tagError(e, "WebSqlTable.internalGetWebSqlAsync/" + origin, retries > 0);
                        if (retries > 0)
                            TDev.Promise.delay(2000, function () { return internalGetWebSqlAsync(retries - 1); }).done(onSuccess, onError);
                        else {
                            TDev.Util.log("error during openDatabase " + TDev.Util.getErrorInfo(e));
                            if (TDev.Browser.canMemoryTable)
                                onSuccess(undefined);
                            else
                                fatalError(e, "during openDatabase: " + TDev.Util.getErrorInfo(e));
                        }
                    }
                };
                try {
                    webSqlInit(window.openDatabase("TDev", "1.0", "TouchDevelop database", 5 * 1024 * 1024), function (webSqlInitialized) {
                        webSql = webSqlInitialized;
                        onSuccess(webSql);
                    }, function (e) { return errorHandler(e, 0); }, retries);
                }
                catch (e) {
                    errorHandler(e, 1);
                }
            });
        }
        function delayCreateWebSqlAsync(retries) {
            if (retries === void 0) { retries = 3; }
            webSql = undefined;
            webSqlPromise = undefined;
            return TDev.Promise.delay(2000, function () { return getWebSqlAsync(retries); });
        }
        function getIndexedDBFactory() {
            var w = window;
            return w.indexedDB || w.mozIndexedDB || w.msIndexedDB;
        }
        function getIndexedDBAsync() {
            if (Storage.temporary)
                return TDev.Promise.as(undefined);
            if (indexedDB)
                return TDev.Promise.as(indexedDB);
            if (!indexedDBPromise) {
                if (indexedDBDeleting)
                    return TDev.Promise.delay(1000, function () { return getIndexedDBAsync(); });
                indexedDBPromise = new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var version = 26;
                    try {
                        var request = getIndexedDBFactory().open("TDev", version);
                        request.onupgradeneeded = function (e) {
                            indexedDBupgrade(request.result);
                        };
                        request.onsuccess = function (e) {
                            indexedDB = request.result;
                            onSuccess(indexedDB);
                        };
                        request.onblocked = function (e) {
                            fatalError(e, "blocked during open " + TDev.Util.getErrorInfo(request.error));
                        };
                        request.onerror = function (e) {
                            if (request.error && request.error.name == "VersionError")
                                versionError(e);
                            else {
                                TDev.Util.log("error during openDatabase " + TDev.Util.getErrorInfo(request.error));
                                if (TDev.Browser.canMemoryTable)
                                    onSuccess(undefined);
                                else
                                    fatalError(e, "error during openDatabase " + TDev.Util.getErrorInfo(request.error));
                            }
                        };
                    }
                    catch (e) {
                        TDev.Util.log("error during openDatabase " + TDev.Util.getErrorInfo(request.error));
                        if (TDev.Browser.canMemoryTable)
                            onSuccess(undefined);
                        else
                            fatalError(e, "during openDatabase " + TDev.Util.getErrorInfo(e));
                    }
                });
            }
            return indexedDBPromise;
        }
        Storage.getTableAsync = function (tableName) {
            if (!Storage.temporary && TDev.Browser.webAppImplicit) {
                TDev.Util.log('implicit web app: disable database storage');
                Storage.temporary = true;
                TDev.Browser.canMemoryTable = true;
            }
            if (!Storage.temporary) {
                if (TDev.Browser.canWebSql)
                    return getWebSqlAsync().then(function (myWebSql) {
                        if (!myWebSql) {
                            TDev.Util.log('webSql openDatabase failed');
                            Storage.temporary = true;
                            return Storage.getTableAsync(tableName);
                        }
                        else {
                            TDev.Browser.supportMemoryTable(false);
                            return TDev.Promise.as(new WebSqlTable(tableName));
                        }
                    });
                if (TDev.Browser.canIndexedDB) {
                    return getIndexedDBAsync().then(function (database) {
                        if (!database) {
                            TDev.Util.log('indexedDB openDatabase failed');
                            Storage.temporary = true;
                            return Storage.getTableAsync(tableName);
                        }
                        else {
                            TDev.Browser.supportMemoryTable(false);
                            return TDev.Promise.as(new IndexedDBTable(tableName));
                        }
                    });
                }
            }
            if (TDev.Browser.canMemoryTable) {
                TDev.Util.log('storage: opening in-memory table ' + tableName);
                return TDev.Promise.as(new MemoryTable(tableName));
            }
            else
                throw tagError(new Error("no database available"), "getTableAsync", false);
        };
        function webSqlClearAsync(retries) {
            if (retries === void 0) { retries = 3; }
            return getWebSqlAsync().then(function (myWebSql) {
                webSql = undefined;
                webSqlPromise = undefined;
                webSqlDeleting = true;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var propagated = false;
                    var errorHandler = function (e, origin) {
                        webSql = undefined;
                        if (!propagated) {
                            propagated = true;
                            webSqlDeleting = false;
                            tagError(e, origin, retries > 0);
                            if (retries > 0)
                                delayCreateWebSqlAsync().then(function () { return webSqlClearAsync(retries - 1); }).done(onSuccess, onError);
                            else
                                fatalError(e, "during drop " + TDev.Util.getErrorInfo(e));
                        }
                    };
                    try {
                        myWebSql.transaction(function (tx) {
                            Storage.tableNames.forEach(function (tableName) {
                                try {
                                    tx.executeSql("DROP TABLE TABLE" + tableName);
                                }
                                catch (e) {
                                    errorHandler(e, "0");
                                }
                            });
                        }, function (e) { return errorHandler(e, 1); }, function () {
                            webSql = undefined;
                            if (!propagated) {
                                propagated = true;
                                webSqlDeleting = false;
                                onSuccess(undefined);
                            }
                        });
                    }
                    catch (e) {
                        errorHandler(e, 2);
                    }
                });
            });
        }
        function indexedDBClearAsync() {
            if (indexedDB) {
                try {
                    indexedDB.close();
                }
                catch (e) {
                }
                indexedDB = null;
            }
            indexedDBPromise = undefined;
            indexedDBDeleting = true;
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                try {
                    var request = getIndexedDBFactory().deleteDatabase("TDev");
                    request.onsuccess = function (e) {
                        if (!indexedDBDeleting)
                            return;
                        indexedDBDeleting = false;
                        onSuccess(undefined);
                    };
                    request.onblocked = request.onerror = function (e) {
                        if (!indexedDBDeleting)
                            return;
                        indexedDBDeleting = false;
                        onError(e);
                    };
                }
                catch (e) {
                    indexedDBDeleting = false;
                    onError(e);
                }
            });
        }
        Storage.clearPreAsync = function () { return TDev.Promise.as(); };
        function clearAsync() {
            var p = Storage.clearPreAsync();
            if (TDev.Browser.canWebSql)
                p = p.then(function () {
                    TDev.Util.log("clearing WebSql");
                    return getWebSqlAsync();
                }).then(function (wsql) {
                    if (!wsql)
                        return TDev.Promise.as(undefined);
                    return webSqlClearAsync().then(function () { return getWebSqlAsync(); }, function () {
                    });
                });
            if (TDev.Browser.canIndexedDB)
                p = p.then(function () {
                    TDev.Util.log("clearing IndexedDB");
                    return indexedDBClearAsync();
                }).then(function (_) { return _; }, function (_) {
                });
            p = p.then(function () {
                TDev.Util.log("clearing localStorage");
                var oauth_states = window.localStorage["oauth_states"];
                window.localStorage.clear();
                if (oauth_states)
                    window.localStorage["oauth_states"] = oauth_states;
                TDev.Browser.supportMemoryTable(true);
            });
            return p;
        }
        Storage.clearAsync = clearAsync;
        function logContentsAsync(details) {
            var formatBytes = function (n) { return n < 1024 ? (n + " B") : n < 1024 * 1024 ? (Math.floor(n / 1024) + " KB") : (Math.floor(n / 1024 / 1024) + " MB"); };
            return TDev.Promise.sequentialMap(Storage.tableNames, function (tableName) { return Storage.getTableAsync(tableName).then(function (table) { return table.getKeysAsync().then(function (keys) { return TDev.Promise.sequentialMap(keys, function (key) { return table.getValueAsync(key).then(function (value) {
                if (details) {
                    var escapedKey = (key + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
                    TDev.Util.log("DB table " + tableName + '["' + escapedKey + '"].length=' + formatBytes(value.length));
                }
                return keys.length + value.length;
            }); }).then(function (lengths) {
                var sum = lengths.reduce(function (a, b) { return a + b; }, 0);
                TDev.Util.log("DB table " + tableName + " size: " + formatBytes(sum));
                return sum;
            }); }); }); }).then(function (lengths) {
                var sum = lengths.reduce(function (a, b) { return a + b; }, 0);
                TDev.Util.log("DB total size: " + formatBytes(sum));
            });
        }
        Storage.logContentsAsync = logContentsAsync;
    })(Storage = TDev.Storage || (TDev.Storage = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Perf;
        (function (Perf) {
            Perf.timeReporting = false;
            function unit() {
                var ret = -1;
                if (TDev.Browser.isNodeJS)
                    return ret;
                try {
                    ret = parseFloat(localStorage["perfunit"] || -1);
                }
                catch (e) {
                    TDev.Util.log("perf: Failed to read from localStorage");
                }
                return ret;
            }
            Perf.unit = unit;
            function setUnit(value) {
                TDev.Util.log('perf: unit = ' + value.toFixed(0) + ' ms');
                try {
                    localStorage["perfunit"] = value;
                }
                catch (e) {
                    TDev.Util.log("perf: Failed to write to localStorage");
                }
            }
            Perf.setUnit = setUnit;
            function start(id, report) {
                if (report === void 0) { report = false; }
                return { id: id, time: TDev.Util.perfNow(), lastPause: -1, report: report };
            }
            Perf.start = start;
            function startPaused(id, report) {
                if (report === void 0) { report = false; }
                var now = TDev.Util.perfNow();
                return { id: id, time: now, lastPause: now, report: report };
            }
            Perf.startPaused = startPaused;
            var perfEvents = [];
            var compilerVersion;
            var releaseId;
            function init(compversion, release) {
                compilerVersion = compversion;
                releaseId = release;
                if (TDev.Cloud.getAccessToken() && TDev.Cloud.isOnline())
                    sendPerfEvents();
            }
            Perf.init = init;
            function saveCurrent(sendToCloud) {
                if (sendToCloud === void 0) { sendToCloud = false; }
                var prevEvents = [];
                var archived = window.localStorage["archivedPerfData"];
                if (archived != undefined && archived.length > 0)
                    prevEvents = JSON.parse(archived);
                prevEvents = prevEvents.concat(perfEvents);
                perfEvents = [];
                if (prevEvents.length > 500)
                    prevEvents = prevEvents.slice(prevEvents.length - 500);
                var newVal = JSON.stringify(prevEvents);
                if (newVal.length > 50000)
                    newVal = "[]";
                window.localStorage["archivedPerfData"] = newVal;
                if (sendToCloud && TDev.Cloud.getAccessToken() && TDev.Cloud.isOnline())
                    return sendPerfEvents();
                else
                    return TDev.Promise.as(undefined);
            }
            Perf.saveCurrent = saveCurrent;
            function sendPerfEvents() {
                var rp = new TDev.PromiseInv();
                var events;
                var archived = window.localStorage["archivedPerfData"];
                if (archived == undefined || archived.length == 0)
                    return TDev.Promise.as(undefined);
                events = JSON.parse(archived);
                if (events == undefined || events.length == 0)
                    return TDev.Promise.as(undefined);
                events.forEach(function (e) {
                    e.userplatform = TDev.Browser.platformCaps;
                });
                TDev.Cloud.postPrivateApiAsync("benchmarks", events).done(function (json) {
                    window.localStorage["archivedPerfData"] = [];
                    rp.success(undefined);
                    TDev.Util.log("perf: Perf data successfully submitted.");
                }, function (e) {
                    TDev.Util.log("perf: Failed to send events.");
                    rp.error(undefined);
                });
                return rp;
            }
            function pushCustomData(data) {
                if (TDev.Util.check(!isNaN(data.duration) && data.duration > 0 && data.duration < 1e6, "invalid duration " + JSON.stringify(data)))
                    perfEvents.push(data);
            }
            Perf.pushCustomData = pushCustomData;
            function purgeSavedEvents() {
                perfEvents = [];
            }
            Perf.purgeSavedEvents = purgeSavedEvents;
            function stop(ts) {
                var end = TDev.Util.perfNow();
                var durr = 0;
                if (ts.lastPause == -1)
                    durr = end - ts.time;
                else {
                    durr = ts.lastPause - ts.time;
                }
                durr = Math.round(durr * 100) / 100;
                var u = unit();
                if (ts.report) {
                    if (u > 0 && compilerVersion != undefined && releaseId != undefined) {
                        var data = {
                            unitduration: u,
                            duration: durr,
                            id: ts.id,
                            compilerversion: compilerVersion,
                            releaseid: releaseId,
                            userplatform: null
                        };
                        if (TDev.Util.check(!isNaN(data.duration) && data.duration > 0 && data.duration < 1e6, "invalid duration"))
                            perfEvents.push(data);
                    }
                }
                if (Perf.timeReporting) {
                    if (u > 0)
                        TDev.Util.log(TDev.Util.fmt('perf: {0} - {1} - {2}ms', ts.id, (durr / u).toFixed(2), durr.toFixed(0)));
                    else
                        TDev.Util.log(TDev.Util.fmt('perf: {0} - {1}ms', ts.id, durr.toFixed(0)));
                }
                return durr;
            }
            Perf.stop = stop;
            function ellapsed(ts) {
                var end = TDev.Util.perfNow();
                var durr = 0;
                if (ts.lastPause == -1)
                    durr = end - ts.time;
                else {
                    durr = ts.lastPause - ts.time;
                }
                return durr;
            }
            Perf.ellapsed = ellapsed;
            function pause(ts) {
                if (ts.lastPause == -1)
                    ts.lastPause = TDev.Util.perfNow();
            }
            Perf.pause = pause;
            function resume(ts) {
                if (ts.lastPause != -1) {
                    ts.time = TDev.Util.perfNow() - (ts.lastPause - ts.time);
                    ts.lastPause = -1;
                }
            }
            Perf.resume = resume;
        })(Perf = RT.Perf || (RT.Perf = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var AppLogger = (function (_super) {
            __extends(AppLogger, _super);
            function AppLogger(category) {
                _super.call(this);
                this.category = category;
                this.category = this.category || "";
            }
            AppLogger.prototype.debug = function (message) {
                this.log("debug", message, undefined);
            };
            AppLogger.prototype.info = function (message) {
                this.log("info", message, undefined);
            };
            AppLogger.prototype.warning = function (message) {
                this.log("warning", message, undefined);
            };
            AppLogger.prototype.error = function (message) {
                this.log("error", message, undefined);
            };
            AppLogger.prototype.log = function (level, message, meta) {
                var ilevel;
                switch (level.trim().toLowerCase()) {
                    case 'debug':
                        ilevel = App.DEBUG;
                        break;
                    case 'warning':
                        ilevel = App.WARNING;
                        break;
                    case 'error':
                        ilevel = App.ERROR;
                        break;
                    default:
                        ilevel = App.INFO;
                        break;
                }
                App.logEvent(ilevel, this.category, message, meta ? meta.value() : undefined);
            };
            return AppLogger;
        })(RT.RTValue);
        RT.AppLogger = AppLogger;
        var AppLogView = (function () {
            function AppLogView() {
                var _this = this;
                this._reversed = false;
                this.maxItems = TDev.Browser.isMobile ? 200 : 2000;
                this.refreshRate = TDev.Browser.isMobile ? 500 : 100;
                this.pendingChartUpdate = false;
                this.series = {};
                this.searchBox = TDev.HTML.mkTextInput("text", TDev.lf("Filter..."), "search");
                this.searchBox.classList.add("logSearchInput");
                TDev.Util.onInputChange(this.searchBox, function (v) { return _this.update(); });
                this.chartsEl = TDev.div('');
                this.chartsEl.style.display = 'none';
                this.logsEl = TDev.div('');
                this.element = TDev.div('', this.searchBox, TDev.div('logView', this.chartsEl, this.logsEl));
                TDev.Util.setupDragToScroll(this.element);
                this.element.withClick(function () {
                }, true);
                this.update();
            }
            AppLogView.prototype.setFilter = function (filter) {
                this.searchBox.value = filter || "";
                this.update();
            };
            AppLogView.prototype.showAsync = function () {
                var _this = this;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var m = new TDev.ModalDialog();
                    m.onDismiss = function () { return onSuccess(undefined); };
                    m.add(_this.element);
                    m.setScroll();
                    m.fullScreen();
                    m.show();
                });
            };
            AppLogView.prototype.attachLogEvents = function () {
                var _this = this;
                if (!this.transport) {
                    var start = TDev.Util.now();
                    this.transport = {
                        log: function (level, category, msg, meta) {
                            var lm = App.createLogMessage(level, category, msg, meta);
                            lm.elapsed = TDev.Util.elapsed(start, TDev.Util.now());
                            _this.append([lm]);
                        }
                    };
                    App.addTransport(this.transport);
                }
            };
            AppLogView.prototype.removeLogEvents = function () {
                if (this.transport) {
                    App.removeTransport(this.transport);
                    this.transport = undefined;
                }
            };
            AppLogView.prototype.charts = function (visible) {
                this.chartsEl.style.display = visible ? "block" : "none";
            };
            AppLogView.prototype.search = function (visible) {
                this.searchBox.style.display = visible ? "block" : "none";
            };
            AppLogView.prototype.reversed = function (r) {
                this._reversed = r;
                this.update();
            };
            AppLogView.prototype.update = function () {
                var _this = this;
                var els = TDev.Util.childNodes(this.logsEl);
                var terms = this.searchBox.value;
                if (!terms)
                    els.forEach(function (el) { return el.style.display = 'block'; });
                else
                    els.forEach(function (el) {
                        if (el.innerText.toLowerCase().indexOf(terms) > -1) {
                            el.style.display = 'block';
                        }
                        else
                            el.style.display = 'none';
                    });
                if (this.chartsEl.style.display == 'block' && !this.pendingChartUpdate) {
                    this.pendingChartUpdate = true;
                    TDev.Util.setTimeout(this.refreshRate, function () {
                        _this.generateLogCharts();
                        _this.pendingChartUpdate = false;
                    });
                }
            };
            AppLogView.prototype.append = function (msgs) {
                function levelToClass(level) {
                    if (level <= RT.App.ERROR)
                        return "error";
                    else if (level <= RT.App.WARNING)
                        return "warning";
                    else if (level <= RT.App.INFO)
                        return "info";
                    else if (level <= RT.App.DEBUG)
                        return "debug";
                    else
                        return "noisy";
                }
                var res = [];
                msgs.forEach(function (lvl, index) {
                    var msg = lvl.msg;
                    var txt = TDev.Util.htmlEscape(msg).replace(/https?:\/\/[^\s\r\n"'`]+/ig, function (m) { return "<a href=\"" + m + "\" target='_blank' rel='nofollow'>" + m + "</a>"; });
                    var crash = undefined;
                    if (lvl.meta && lvl.meta && lvl.meta.kind === 'crash')
                        crash = lvl.meta;
                    res.push("<div class='logMsg' data-level='" + levelToClass(lvl.level) + "' data-timestamp='" + lvl.timestamp + "'" + (crash ? " data-crash='" + TDev.Util.htmlEscape(JSON.stringify(crash)) + "'" : "") + ">" + (lvl.elapsed ? (lvl.elapsed + '&gt; ') : '') + (lvl.category ? (TDev.Util.htmlEscape(lvl.category) + ': ') : '') + txt + "</div>");
                });
                var temp = TDev.div('');
                TDev.Browser.setInnerHTML(temp, res.join(""));
                var nodes = TDev.Util.childNodes(temp);
                if (this.onMessages)
                    this.onMessages(nodes);
                var todrop = this.logsEl.childElementCount + nodes.length - this.maxItems;
                while (todrop-- > 0 && this.logsEl.firstElementChild)
                    this.logsEl.removeChild(this._reversed ? this.logsEl.lastElementChild : this.logsEl.firstElementChild);
                var n = Math.min(nodes.length, this.maxItems);
                if (this._reversed) {
                    for (var i = n - 1; i >= 0; --i)
                        this.logsEl.insertBefore(nodes[i], this.logsEl.firstElementChild);
                }
                else {
                    for (var i = 0; i < n; ++i)
                        this.logsEl.appendChild(nodes[i]);
                }
                this.update();
            };
            AppLogView.prototype.generateLogCharts = function () {
                var _this = this;
                var els = TDev.Util.childNodes(this.logsEl).filter(function (el) { return el.style.display == 'block'; });
                Object.keys(this.series).forEach(function (key) { return _this.series[key].points = []; });
                var timestart = 0;
                els.forEach(function (elt, index) {
                    var msg = elt.innerText;
                    if (!msg)
                        return;
                    var timestamp = parseFloat(elt.dataset["timestamp"]);
                    if (index == 0)
                        timestart = timestamp;
                    var f;
                    msg.replace(/\b([a-z]\w*)\b\s*[:=]\s*(-?\d+(\.\d+)?(e\d+)?)\s*$/ig, function (mtch, key, v) {
                        var value = parseFloat(v);
                        if (!_this.series[key])
                            _this.series[key] = { points: [] };
                        var x = (timestamp - timestart) / 1000.0;
                        _this.series[key].points.push(new RT.Charts.Point(x, value));
                        return mtch;
                    });
                });
                Object.keys(this.series).forEach(function (key) {
                    var serie = _this.series[key];
                    var points = serie.points;
                    if (points.length < 2) {
                        if (serie.d)
                            serie.d.removeSelf();
                        delete _this.series[key];
                    }
                    else {
                        if (!serie.canvas) {
                            serie.canvas = document.createElement("canvas");
                            serie.canvas.width = TDev.SizeMgr.wallWindowWidth * 0.8;
                            serie.canvas.height = serie.canvas.width / 7;
                            serie.canvas.style.display = 'block';
                            serie.canvas.style.cursor = 'pointer';
                            serie.canvas.style.marginTop = "0.5em";
                            serie.canvas.style.width = "100%";
                            serie.canvas.withClick(function () {
                                var rows = serie.points.map(function (p) { return p.x + "\t" + p.y; });
                                rows.unshift("t\t" + key);
                                var csv = rows.join('\n');
                                RT.ShareManager.copyToClipboardAsync(csv).done(function () { return TDev.HTML.showProgressNotification(TDev.lf("time serie copied to clipboard")); });
                            });
                            serie.d = TDev.div('logMsg', TDev.spanDirAuto(key), serie.canvas);
                            _this.chartsEl.appendChild(serie.d);
                        }
                        var chart = new RT.Charts.CanvasChart();
                        chart.backgroundColor = "#000";
                        chart.gridColor = "#ccc";
                        chart.lineColor = "#0c0";
                        chart.axesColor = "#000";
                        chart.graphLineWidth = 3;
                        chart.gridCols = 11;
                        chart.gridRows = 5;
                        chart.drawChart(serie.canvas, points);
                    }
                });
            };
            return AppLogView;
        })();
        RT.AppLogView = AppLogView;
        var AppEnv = (function () {
            function AppEnv() {
            }
            AppEnv.prototype.user_agent = function () {
                return navigator.userAgent;
            };
            AppEnv.prototype.has_shell = function () {
                return !!TDev.Browser.localProxy;
            };
            AppEnv.prototype.runtime_kind = function (s) {
                return s.rt.runtimeKind();
            };
            AppEnv.prototype.form_factor = function () {
                if (TDev.Browser.isCellphone)
                    return "phone";
                if (TDev.Browser.isTablet)
                    return "tablet";
                return "desktop";
            };
            AppEnv.prototype.operating_system = function () {
                if (TDev.Browser.isAndroid)
                    return "android";
                if (TDev.Browser.isWP8app || (TDev.Browser.isTrident && TDev.Browser.isCellphone))
                    return "wp";
                if (TDev.Browser.isMobileSafari)
                    return "ios";
                if (TDev.Browser.isMacOSX)
                    return "osx";
                var c = TDev.Browser.platformCaps;
                for (var i = 0; i < c.length; ++i)
                    switch (c[i]) {
                        case "win": return "windows";
                        case "x11": return "linux";
                    }
                return "unknown";
            };
            AppEnv.prototype.initial_url = function () {
                return TDev.Runtime.initialUrl;
            };
            return AppEnv;
        })();
        RT.AppEnv = AppEnv;
        var App;
        (function (App) {
            function createInfoMessage(s) {
                return createLogMessage(App.INFO, "", s, undefined);
            }
            App.createInfoMessage = createInfoMessage;
            function createLogMessage(level, category, s, meta) {
                var m = {
                    timestamp: TDev.Util.now(),
                    level: level,
                    category: category,
                    msg: s,
                    meta: meta
                };
                return m;
            }
            App.createLogMessage = createLogMessage;
            var Logger = (function () {
                function Logger() {
                    this.logIdx = -1;
                    this.logMsgs = [];
                    this.logSz = 2000;
                }
                Logger.prototype.addMsg = function (level, category, s, meta) {
                    var m = createLogMessage(level, category, s, meta);
                    if (this.logIdx >= 0) {
                        this.logMsgs[this.logIdx++] = m;
                        if (this.logIdx >= this.logSz)
                            this.logIdx = 0;
                    }
                    else {
                        this.logMsgs.push(m);
                        if (this.logMsgs.length >= this.logSz)
                            this.logIdx = 0;
                    }
                };
                Logger.prototype.getMsgs = function () {
                    var i = this.logIdx;
                    var res = [];
                    var wrapped = false;
                    if (i < 0)
                        i = 0;
                    var n = Date.now();
                    while (i < this.logMsgs.length) {
                        var m = this.logMsgs[i];
                        var diff = ("00000000" + (n - m.timestamp)).slice(-7).replace(/(\d\d\d)$/, function (k) { return "." + k; });
                        res.push({
                            level: m.level,
                            category: m.category,
                            msg: m.msg,
                            elapsed: diff,
                            meta: m.meta,
                            timestamp: m.timestamp
                        });
                        if (++i == this.logMsgs.length && !wrapped) {
                            wrapped = true;
                            i = 0;
                        }
                        if (wrapped && i >= this.logIdx)
                            break;
                    }
                    res.reverse();
                    return res;
                };
                return Logger;
            })();
            var logger;
            var transports = [];
            function clearLogs() {
                logger = null;
                transports = [];
            }
            App.clearLogs = clearLogs;
            function rt_start(rt) {
                logger = rt.liveMode() ? null : new Logger();
                transports = [];
            }
            App.rt_start = rt_start;
            function rt_stop(rt) {
            }
            App.rt_stop = rt_stop;
            function create_logger(category) {
                return new AppLogger(category);
            }
            App.create_logger = create_logger;
            function addTransport(transport) {
                if (transport) {
                    removeTransport(transport);
                    transports.push(transport);
                }
            }
            App.addTransport = addTransport;
            function removeTransport(transport) {
                if (transport) {
                    var i = transports.indexOf(transport);
                    if (i > -1)
                        transports.splice(i, 1);
                }
            }
            App.removeTransport = removeTransport;
            App.ERROR = 3;
            App.WARNING = 4;
            App.INFO = 6;
            App.DEBUG = 7;
            function log(message) {
                logEvent(App.INFO, "", message, undefined);
            }
            App.log = log;
            function logException(err, meta) {
                transports.filter(function (transport) { return !!transport.logException; }).forEach(function (transport) {
                    try {
                        transport.logException(err, meta);
                    }
                    catch (err) {
                        TDev.Util.log('log: transport failed ');
                    }
                });
                logEvent(App.ERROR, "crash", err.message || err, meta);
            }
            App.logException = logException;
            function logEvent(level, category, message, meta) {
                level = Math.max(0, Math.floor(level));
                category = category || "";
                message = message || "";
                transports.filter(function (transport) { return !!transport.log; }).forEach(function (transport) {
                    try {
                        transport.log(level, category, message, meta);
                    }
                    catch (err) {
                        TDev.Util.log('log: transport failed ');
                    }
                });
                if (logger) {
                    logger.addMsg(level, category, message, meta);
                    TDev.Util.log((category || "log") + ": " + message);
                }
            }
            App.logEvent = logEvent;
            function logs() {
                if (logger)
                    return logger.getMsgs();
                else
                    return [];
            }
            App.logs = logs;
            function current_handler(s) {
                return s.currentHandler;
            }
            App.current_handler = current_handler;
            function stop(r) {
                if (TDev.Browser.isCompiledApp)
                    App.restart("", r);
                else
                    r.rt.stopAsync().done();
            }
            App.stop = stop;
            function restart(message, r) {
                var rt = r.rt;
                var score = RT.Bazaar.cachedScore(rt);
                var scriptId = rt.currentScriptId;
                rt.stopAsync().done(function () {
                    var m = new TDev.ModalDialog();
                    m.canDismiss = !scriptId;
                    m.add(TDev.div('wall-dialog-huge wall-dialog-text-center', message || TDev.lf("try again!")));
                    if (score > 0)
                        m.add(TDev.div('wall-dialog-large wall-dialog-text-center', TDev.lf("your best score: {0}", score)));
                    m.add(TDev.div('wall-dialog-body wall-dialog-extra-space wall-dialog-text-center', TDev.HTML.mkButton(TDev.lf("play again"), function () {
                        TDev.tick(283 /* runtimePlayAgain */);
                        m.dismiss();
                        rt.rerun();
                    }, 'wall-dialog-button-huge'), !scriptId ? TDev.HTML.mkButton(TDev.lf("dismiss"), function () {
                        m.dismiss();
                    }) : null, scriptId && TDev.Browser.notifyBackToHost ? TDev.HTML.mkButton(TDev.lf("back"), function () {
                        TDev.tick(284 /* runtimeBack */);
                        m.dismiss();
                        TDev.Util.externalNotify("exit");
                    }) : null));
                    if (score > 0 && scriptId) {
                        RT.Bazaar.loadLeaderboardItemsAsync(scriptId).done(function (els) {
                            if (els && els.length > 0) {
                                m.add(TDev.div('wall-dialog-body wall-dialog-extra-space ', els));
                                m.setScroll();
                            }
                        }, function (e) {
                        });
                    }
                    m.fullWhite();
                    m.show();
                });
            }
            App.restart = restart;
            function fail_if_not(condition) {
                if (!condition)
                    TDev.Util.userError(TDev.lf("assertion violation"));
            }
            App.fail_if_not = fail_if_not;
            function server_setting(key, optional, s) {
                if (!optional)
                    TDev.Util.userError(TDev.lf("only supported on exported web sites"), s.pc);
                return undefined;
            }
            App.server_setting = server_setting;
            function javascript(calling_convention, script) {
            }
            App.javascript = javascript;
            function javascript_async(calling_convention, script, r) {
                r.resume();
            }
            App.javascript_async = javascript_async;
            function import_(manager, module, version) {
            }
            App.import_ = import_;
            function server_request(s) {
                return s.rt.getRestRequest();
            }
            App.server_request = server_request;
            function server_response(s) {
                var r = s.rt.getRestRequest();
                if (r)
                    return r.response();
                return undefined;
            }
            App.server_response = server_response;
            function editor(s) {
                return s.rt.editorObj;
            }
            App.editor = editor;
            var _env = new AppEnv();
            function env() {
                return _env;
            }
            App.env = env;
            function reflect(what, s) {
                var ri = s.rt.compiled.reflectionInfo;
                if (ri.hasOwnProperty(what))
                    return RT.JsonObject.wrap(ri[what]);
                return undefined;
            }
            App.reflect = reflect;
            function run_command(cmd, data, r) {
                var proxyAsync = r.rt.host.localProxyAsync;
                if (!proxyAsync) {
                    r.resumeVal(RT.JsonObject.wrap({ error: 'notsupported', reason: TDev.lf("This command requires a local proxy.") }));
                    return;
                }
                r.rt.host.askSourceAccessAsync(TDev.lf("execute shell commands or manipulate files"), TDev.lf("the shell and/or the file system. This script may be harmful for your computer. Do not allow this if you do not trust the source of this script."), false, true).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(RT.JsonObject.wrap({ error: 'denied', reason: TDev.lf("The user denied access to shell execution.") }));
                    else
                        return proxyAsync(cmd, data ? data.value() : undefined);
                }).done(function (res) { return r.resumeVal(RT.JsonObject.wrap(res)); }, function (e) { return r.resumeVal(RT.JsonObject.wrap({ error: 'proxyerror', message: e.message, stack: e.stack })); });
            }
            App.run_command = run_command;
            function show_logs(filter, r) {
                r.resume();
                showAppLogAsync(undefined, filter).done(function () {
                }, function (e) {
                });
            }
            App.show_logs = show_logs;
            function showAppLogAsync(msgs, filter, onMessages) {
                var view = new AppLogView();
                view.onMessages = onMessages;
                view.charts(true);
                view.reversed(true);
                view.append(App.logs());
                view.setFilter(filter);
                if (msgs)
                    view.append(msgs);
                view.attachLogEvents();
                return view.showAsync().then(function () { return view.removeLogEvents(); }, function () { return view.removeLogEvents(); });
            }
            App.showAppLogAsync = showAppLogAsync;
            function showLog(msgs, onMessages) {
                var view = new AppLogView();
                view.onMessages = onMessages;
                view.append(msgs);
                view.showAsync().done(function () {
                }, function (e) {
                });
            }
            App.showLog = showLog;
            function consume_rendered_comments(s) {
                var r = s.rt.renderedComments;
                s.rt.renderedComments = "";
                return r;
            }
            App.consume_rendered_comments = consume_rendered_comments;
        })(App = RT.App || (RT.App = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Appointment = (function (_super) {
            __extends(Appointment, _super);
            function Appointment() {
                _super.call(this);
                this._subject = undefined;
                this._details = undefined;
                this._location = undefined;
                this._startTime = undefined;
                this._endTime = undefined;
                this._source = undefined;
                this._organizer = undefined;
                this._attendees = undefined;
                this._is_private = false;
                this._is_all_day_event = false;
                this._status = undefined;
            }
            Appointment.mk = function (subject, details, location, startTime, endTime, source, organizer, attendees, isPrivate, isAllDay, status) {
                var a = new Appointment();
                a._subject = subject;
                a._details = details;
                a._location = location;
                a._startTime = startTime;
                a._endTime = endTime;
                a._source = source;
                a._organizer = organizer;
                a._attendees = attendees;
                a._is_private = isPrivate;
                a._is_all_day_event = isAllDay;
                a._status = status;
                return a;
            };
            Appointment.prototype.is_private = function () {
                return this._is_private;
            };
            Appointment.prototype.is_all_day_event = function () {
                return this._is_all_day_event;
            };
            Appointment.prototype.status = function () {
                return this._status || '';
            };
            Appointment.prototype.organizer = function () {
                return this._organizer;
            };
            Appointment.prototype.end_time = function () {
                return this._endTime;
            };
            Appointment.prototype.start_time = function () {
                return this._startTime;
            };
            Appointment.prototype.location = function () {
                return this._location || '';
            };
            Appointment.prototype.subject = function () {
                return this._subject || '';
            };
            Appointment.prototype.details = function () {
                return this._details || '';
            };
            Appointment.prototype.source = function () {
                return this._source || '';
            };
            Appointment.prototype.attendees = function () {
                return this._attendees || RT.Collection.mkAny(RT.Contact);
            };
            Appointment.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            Appointment.prototype.getViewCore = function (s, b) {
                var d = TDev.div("item");
                d.appendChild(TDev.div("item-title", this.subject()));
                d.appendChild(TDev.div("item-subtitle", this.location() + ", " + this.start_time() + ":" + this.end_time()));
                d.appendChild(TDev.div("item-subtle", this.source()));
                return d;
            };
            Appointment.prototype.debuggerDisplay = function (clickHandler) {
                return this.getViewCore(null, null).withClick(clickHandler);
            };
            return Appointment;
        })(RT.RTValue);
        RT.Appointment = Appointment;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ActionBase = (function (_super) {
            __extends(ActionBase, _super);
            function ActionBase() {
                _super.apply(this, arguments);
            }
            return ActionBase;
        })(RT.RTValue);
        RT.ActionBase = ActionBase;
        var PseudoAction = (function (_super) {
            __extends(PseudoAction, _super);
            function PseudoAction(run) {
                _super.call(this);
                this.run = run;
            }
            return PseudoAction;
        })(ActionBase);
        RT.PseudoAction = PseudoAction;
        var Event_ = (function (_super) {
            __extends(Event_, _super);
            function Event_() {
                _super.call(this);
                this.isPageEvent = false;
                this.handlers = undefined;
                this.pendinghandlers = 0;
                this.isBlocking = true;
            }
            Event_.prototype.addHandler = function (f) {
                var binding = new EventBinding(this, f);
                if (!this.handlers)
                    this.handlers = [];
                this.handlers.push(binding);
                return binding;
            };
            Event_.prototype.removeHandler = function (binding) {
                if (this.handlers) {
                    var idx = this.handlers.indexOf(binding);
                    if (idx > -1) {
                        this.handlers.splice(idx, 1);
                        if (this.handlers.length == 0)
                            this.handlers = undefined;
                    }
                }
            };
            Event_.prototype.clearHandlers = function () {
                this.handlers = undefined;
            };
            Event_.prototype.runAwaiters = function (args) {
                if (this.awaiters) {
                    var lst = this.awaiters;
                    this.awaiters = null;
                    TDev.Util.setTimeout(0, function () { return lst.forEach(function (a) { return a(args); }); });
                }
            };
            Event_.prototype.addAwaiter = function (f) {
                if (!this.awaiters)
                    this.awaiters = [];
                this.awaiters.push(f);
            };
            return Event_;
        })(RT.RTValue);
        RT.Event_ = Event_;
        var EventBinding = (function (_super) {
            __extends(EventBinding, _super);
            function EventBinding(_event, _handler) {
                _super.call(this);
                this._event = _event;
                this._handler = _handler;
                this.inQueue = false;
                this.data = undefined;
            }
            EventBinding.prototype.delete_ = function () {
                if (this._event && this._handler) {
                    this._event.removeHandler(this);
                    this._handler = undefined;
                }
            };
            return EventBinding;
        })(RT.RTValue);
        RT.EventBinding = EventBinding;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Bazaar;
        (function (Bazaar) {
            function user_of(id, r) {
                RT.User.getJsonAsync(id).done(function (user) { return r.resumeVal((user && user.kind == "user") ? RT.User.mk(id) : undefined); }, function (e) { return r.resumeVal(undefined); });
            }
            Bazaar.user_of = user_of;
            function userIdAsync(rt) {
                if (!rt.requiresAuth())
                    return TDev.Promise.as(rt.getUserId());
                return TDev.Cloud.authenticateAsync(TDev.lf("user identification")).then(function () { return TDev.Cloud.getUserId(); });
            }
            Bazaar.userIdAsync = userIdAsync;
            function current_user(r) {
                userIdAsync(r.rt).done(function (userId) { return r.resumeVal(userId ? RT.User.mk(userId) : undefined); });
            }
            Bazaar.current_user = current_user;
            function cachedScore(rt, score) {
                var currentScore = rt.datas["this"]["leaderboard_score"] || 0;
                if (score && score > currentScore) {
                    rt.datas["this"]["leaderboard_score"] = score;
                    currentScore = score;
                }
                return currentScore;
            }
            Bazaar.cachedScore = cachedScore;
            function leaderboard_score(r) {
                var rt = r.rt;
                var currentScore = cachedScore(rt);
                var localScore = function () { return r.resumeVal(currentScore); };
                if (!rt.currentScriptId || !TDev.Cloud.isOnline()) {
                    localScore();
                }
                else {
                    TDev.Cloud.authenticateAsync(TDev.lf("leaderboard")).done(function (authenticated) {
                        if (authenticated) {
                            var url = TDev.Cloud.getPrivateApiUrl('me/leaderboardscored/' + rt.currentScriptId);
                            var request = RT.WebRequest.mk(url, undefined);
                            request.sendAsync().done(function (response) {
                                var curr = 0;
                                var json = response.content_as_json();
                                if (json)
                                    curr = json.number('score');
                                r.resumeVal(cachedScore(rt, Math.max(currentScore, curr || 0)));
                            });
                        }
                        else {
                            localScore();
                        }
                    });
                }
            }
            Bazaar.leaderboard_score = leaderboard_score;
            function postScoreToOfficeMix(score, scriptId) {
                if (TDev.Browser.webRunner || TDev.Browser.webAppImplicit) {
                    var msg = RT.JsonObject.wrap({
                        kind: "leaderboardScore__Send",
                        data: { score: score, scriptId: scriptId }
                    });
                    RT.Web.post_message_to_parent("https://www.touchdevelop.com", msg, null);
                    RT.Web.post_message_to_parent("http://localhost:15669", msg, null);
                }
            }
            Bazaar.postScoreToOfficeMix = postScoreToOfficeMix;
            function post_leaderboard_score(score, r) {
                var rt = r.rt;
                var currentScore = cachedScore(rt, score);
                if (!rt.currentScriptId || !TDev.Cloud.isOnline()) {
                    r.resume();
                }
                else {
                    Bazaar.postScoreToOfficeMix(score, rt.currentScriptId);
                    TDev.Cloud.authenticateAsync(TDev.lf("leaderboard")).done(function (authenticated) {
                        if (authenticated) {
                            var url = TDev.Cloud.getPrivateApiUrl(rt.currentScriptId + '/leaderboardscores');
                            var request = RT.WebRequest.mk(url, undefined);
                            request.set_method('post');
                            request.set_content_as_json(RT.JsonObject.mk(JSON.stringify({ kind: "leaderboardscore", score: score || 0, userplatform: TDev.Browser.platformCaps }), TDev.Util.log));
                            request.sendAsync().done(function (response) {
                                var json = response.content_as_json();
                                if (json)
                                    cachedScore(rt, json.number('score'));
                                r.resume();
                            });
                        }
                    }, function (e) {
                        r.resume();
                    });
                }
            }
            Bazaar.post_leaderboard_score = post_leaderboard_score;
            function loadLeaderboardItemsAsync(striptId) {
                if (!striptId || !TDev.Cloud.isOnline())
                    return TDev.Promise.as([]);
                return TDev.Cloud.getPublicApiAsync(striptId + '/leaderboardscores?count=250').then(function (leaderboards) {
                    return leaderboards.items.map(function (item) {
                        var userid = item.userid;
                        var username = item.username;
                        var userscore = item.score.toString();
                        var time = TDev.Util.timeSince(item.time);
                        var imgDiv = TDev.div('leaderboard-img');
                        if (item.userhaspicture)
                            imgDiv.style.backgroundImage = TDev.HTML.cssImage(TDev.Cloud.getPublicApiUrl(userid + "/picture?type=normal"));
                        else
                            imgDiv.innerHTML = TDev.Util.svgGravatar(userid);
                        var scoreDiv = TDev.div('item leaderboard-item', [
                            imgDiv,
                            TDev.div('leaderboards-score', userscore),
                            TDev.div('leaderboard-center', [
                                TDev.div('item-title', username),
                                TDev.div('item-subtle', time)
                            ])
                        ]);
                        return scoreDiv;
                    });
                }, function (e) {
                    return [];
                });
            }
            Bazaar.loadLeaderboardItemsAsync = loadLeaderboardItemsAsync;
            function post_leaderboard_to_wall(r) {
                var rt = r.rt;
                if (!rt.currentScriptId) {
                    var curr = cachedScore(rt).toString();
                    var imgDiv = TDev.div('leaderboard-img');
                    imgDiv.innerHTML = TDev.Util.svgGravatar('me');
                    var leaderboardDiv = TDev.div('item leaderboard-item', [
                        imgDiv,
                        TDev.div('leaderboards-score', curr),
                        TDev.div('leaderboard-center', [
                            TDev.div('item-title', TDev.lf("Me")),
                            TDev.div('item-subtle', TDev.lf("Publish your script to get a leaderboard available for all your users.")),
                        ])
                    ]);
                    r.rt.postBoxedHtml(leaderboardDiv, r.rt.current.pc);
                    r.resume();
                }
                else if (!TDev.Cloud.isOnline()) {
                    var curr = cachedScore(rt).toString();
                    var imgDiv = TDev.div('leaderboard-img');
                    imgDiv.innerHTML = TDev.Util.svgGravatar('me');
                    var leaderboardDiv = TDev.div('item leaderboard-item', [
                        imgDiv,
                        TDev.div('leaderboards-score', curr),
                        TDev.div('leaderboard-center', [
                            TDev.div('item-title', TDev.lf("Me")),
                            TDev.div('item-subtle', TDev.lf("Please connect to internet to load the leaderboards.")),
                        ])
                    ]);
                    r.rt.postBoxedHtml(leaderboardDiv, r.rt.current.pc);
                    r.resume();
                }
                else {
                    r.progress(TDev.lf("Loading leaderboards..."));
                    var leaderboardDiv = TDev.div('');
                    loadLeaderboardItemsAsync(rt.currentScriptId).done(function (els) {
                        leaderboardDiv.setChildren(els);
                        rt.postBoxedHtml(leaderboardDiv, r.rt.current.pc);
                        r.resume();
                    }, function (e) {
                        rt.postBoxedText(TDev.lf("Oops, could not get the leaderboards. Please check your internet connection."), r.rt.current.pc);
                        r.resume();
                    });
                }
            }
            Bazaar.post_leaderboard_to_wall = post_leaderboard_to_wall;
            function merge3(O, A, B) {
                var t1 = TDev.AST.Parser.parseScript(O);
                var t2 = TDev.AST.Parser.parseScript(A);
                var t3 = TDev.AST.Parser.parseScript(B);
                TDev.AST.TypeChecker.tcApp(t1);
                TDev.AST.TypeChecker.tcApp(t2);
                TDev.AST.TypeChecker.tcApp(t3);
                TDev.TheEditor.initIds(t1);
                TDev.TheEditor.initIds(t2);
                TDev.TheEditor.initIds(t3);
                var merged = TDev.AST.Merge.merge3(t1, t2, t3);
                return merged.serialize();
            }
            Bazaar.merge3 = merge3;
            function open() {
            }
            Bazaar.open = open;
            function open_review() {
            }
            Bazaar.open_review = open_review;
            function open_leaderboard(r) {
                post_leaderboard_to_wall(r);
            }
            Bazaar.open_leaderboard = open_leaderboard;
            function script_id(which, s) {
                if (which == "top")
                    return s.libs.topScriptId;
                if (which == "current")
                    return s.libs.scriptId;
                return undefined;
            }
            Bazaar.script_id = script_id;
            function pick_script(mode, message, r) {
                r.rt.host.pickScriptAsync(mode, message).done(function (id) {
                    r.resumeVal(id);
                });
            }
            Bazaar.pick_script = pick_script;
            function save_ast(id, script, r) {
                r.rt.host.saveAstAsync(id, script.value()).done(function (id) {
                    r.resume();
                });
            }
            Bazaar.save_ast = save_ast;
            function ast_of(id, r) {
                r.rt.host.astOfAsync(id).done(function (j) {
                    if (!j)
                        r.resumeVal(undefined);
                    else
                        r.resumeVal(RT.JsonObject.wrap(j));
                });
            }
            Bazaar.ast_of = ast_of;
            Bazaar.storeidAsync = function () {
                var host = window.touchDevelopHost;
                if (host) {
                    TDev.Util.log("using touchdevelop host");
                    var id = host.storeid() || "";
                    TDev.Util.log("storeid: " + id);
                    return TDev.Promise.as(id);
                }
                return TDev.Promise.as("");
            };
        })(Bazaar = RT.Bazaar || (RT.Bazaar = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Board = (function (_super) {
            __extends(Board, _super);
            function Board() {
                _super.call(this);
                this.scaleFactor = 1.0;
                this.sprites = [];
                this.backgroundColor = null;
                this.backgroundPicture = null;
                this.backgroundCamera = null;
                this._boundaryDistance = NaN;
                this._everyFrameTimer = undefined;
                this._gravity = new RT.Vector2(0, 0);
                this._worldFriction = 0;
                this._debugMode = false;
                this._lastUpdateMS = 0;
                this._lastTimeDelta = 0;
                this._startTime = 0;
                this._touched = false;
                this._touchStart = RT.Vector3.mk(0, 0, 0);
                this._touchCurrent = RT.Vector3.mk(0, 0, 0);
                this._touchEnd = RT.Vector3.mk(0, 0, 0);
                this._touchVelocity = RT.Vector3.mk(0, 0, 0);
                this._minSegments = [];
                this._walls = [];
                this._obstacles = [];
                this._springs = [];
                this._backgroundScene = undefined;
                this.swipeThreshold = 10;
                this.dragThreshold = 5;
                this.onTap = new RT.Event_();
                this.onTouchDown = new RT.Event_();
                this.onTouchUp = new RT.Event_();
                this.onSwipe = new RT.Event_();
                this._touchPrevious = RT.Vector3.mk(0, 0, 0);
                this._touchDirection = RT.Vector3.mk(0, 0, 0);
                this.tick = 0;
                this._everyFrameOnSprite = false;
            }
            Board.mk = function (rt, landscape, w, h, full) {
                var b = new Board();
                b._landscape = landscape;
                b._width = w;
                b._height = h;
                b._full = full;
                b._startTime = rt.currentTime();
                b.backgroundColor = RT.Colors.transparent();
                b.init(rt);
                return b;
            };
            Board.prototype.init = function (rt) {
                var _this = this;
                this._runtime = rt;
                this.canvas = document.createElement("canvas");
                this.canvas.className = "boardCanvas";
                this.updateScaleFactor();
                this.container = TDev.div("boardContainer", this.canvas);
                this.ctx = this.canvas.getContext("2d");
                this.container.setChildren([this.canvas]);
                this.container.updateSizes = function () {
                    _this.updateScaleFactor();
                    _this.redrawBoardAndContents();
                };
                var handler = new TDev.TouchHandler(this.canvas, function (e, x, y) {
                    _this.touchHandler(e, x, y);
                });
            };
            Board.prototype.updateScaleFactor = function () {
                TDev.Util.assert(!!this._runtime);
                if (!this._runtime)
                    return;
                var s0;
                var s1;
                if (this._full) {
                    s0 = this._runtime.host.fullWallWidth() / this._width;
                    s1 = this._runtime.host.fullWallHeight() / this._height;
                }
                else {
                    var w = this._runtime.host.wallWidth;
                    if (this.container && this.container.offsetWidth)
                        w = this.container.offsetWidth;
                    s0 = w / this._width;
                    s1 = this._runtime.host.wallHeight / this._height;
                }
                if (s0 > s1)
                    s0 = s1;
                var ww = this._width * s0;
                var hh = this._height * s0;
                this.scaleFactor = s0;
                this.canvas.width = ww * TDev.SizeMgr.devicePixelRatio;
                this.canvas.height = hh * TDev.SizeMgr.devicePixelRatio;
                this.canvas.style.width = ww + "px";
                this.canvas.style.height = hh + "px";
                if (this._full) {
                    var topMargin = (this._runtime.host.fullWallHeight() - hh) / 2;
                    this.canvas.style.marginTop = topMargin + "px";
                }
            };
            Board.prototype.touchHandler = function (e, x, y) {
                TDev.Util.assert(!!this._runtime);
                if (!this._runtime)
                    return;
                x = Math.round(x / this.scaleFactor);
                y = Math.round(y / this.scaleFactor);
                switch (e) {
                    case "down":
                        this._touched = true;
                        this._touchPrevious = this._touchCurrent = this._touchLast = this._touchStart = RT.Vector3.mk(x, y, 0);
                        this._touchedSpriteStack = this.findTouchedSprites(x, y);
                        this._prevTouchTime = this._runtime.currentTime();
                        this._touchDeltaTime = 0;
                        this._touchDirection = RT.Vector3.mk(0, 0, 0);
                        this.queueTouchDown(this._touchedSpriteStack, [x, y]);
                        this._runtime.queueBoardEvent(["touch down: "], [this], [x, y]);
                        if (!!this._touchedSpriteStack) {
                            this._runtime.queueBoardEvent(["touch over "], this._touchedSpriteStack, [x, y], true, true);
                        }
                        break;
                    case "move":
                        this._touchCurrent = RT.Vector3.mk(x, y, 0);
                        var now = this._runtime.currentTime();
                        var deltaMove = this._touchCurrent.subtract(this._touchPrevious);
                        var deltaTime = now - this._prevTouchTime;
                        if (deltaTime > 50 || deltaMove.length() > 20) {
                            this._touchDirection = deltaMove;
                            this._touchDeltaTime = deltaTime;
                        }
                        if (!!this._touchedSpriteStack) {
                            var dist = this._touchCurrent.subtract(this._touchLast);
                            if (dist.length() > this.dragThreshold) {
                                this._touchLast = this._touchCurrent;
                                this.queueDrag(this._touchedSpriteStack, [x, y, dist._x, dist._y]);
                                this._runtime.queueBoardEvent(["drag sprite in ", "drag sprite: "], this._touchedSpriteStack, [x, y, dist._x, dist._y]);
                            }
                        }
                        var currentStack = this.findTouchedSprites(x, y);
                        if (!!currentStack) {
                            this._runtime.queueBoardEvent(["touch over "], currentStack, [x, y], true, true);
                        }
                        break;
                    case "up":
                        var currentPoint = RT.Vector3.mk(x, y, 0);
                        this._touchEnd = this._touchCurrent = currentPoint;
                        this._touched = false;
                        if (this._touchDeltaTime > 0) {
                            this._touchVelocity = this._touchDirection.scale(1000 / this._touchDeltaTime);
                        }
                        else {
                            this._touchVelocity = RT.Vector3.mk(0, 0, 0);
                        }
                        var dist = this._touchEnd.subtract(this._touchStart);
                        var stack = this._touchedSpriteStack;
                        if (!stack) {
                            stack = [];
                        }
                        stack.push(this);
                        if (dist.length() > this.swipeThreshold) {
                            this.queueSwipe(this._touchedSpriteStack, [this._touchStart._x, this._touchStart._y, dist._x, dist._y]);
                            this._runtime.queueBoardEvent(["swipe sprite in ", "swipe sprite: ", "swipe board: "], stack, [this._touchStart._x, this._touchStart._y, dist._x, dist._y]);
                        }
                        else {
                            this.queueTap(this._touchedSpriteStack, [x, y]);
                            this._runtime.queueBoardEvent(["tap sprite in ", "tap sprite: ", "tap board: "], stack, [x, y]);
                        }
                        this.queueTouchUp(this._touchedSpriteStack, [x, y]);
                        this._runtime.queueBoardEvent(["touch up: "], [this], [x, y]);
                        break;
                }
            };
            Board.prototype.queueDrag = function (stack, args) {
                if (!stack)
                    return false;
                for (var i = 0; i < stack.length; i++) {
                    var sprite = stack[i];
                    if (sprite instanceof Board)
                        continue;
                    if (sprite.onDrag.handlers) {
                        this._runtime.queueLocalEvent(sprite.onDrag, args);
                        return true;
                    }
                }
                return false;
            };
            Board.prototype.queueTouchDown = function (stack, args) {
                if (stack && stack.length > 0) {
                    for (var i = 0; i < stack.length; i++) {
                        var sprite = stack[i];
                        if (sprite instanceof Board)
                            continue;
                        if (sprite.onTouchDown.handlers) {
                            this._runtime.queueLocalEvent(sprite.onTouchDown, args);
                            return true;
                        }
                    }
                }
                else {
                    if (this.onTouchDown.handlers) {
                        this._runtime.queueLocalEvent(this.onTouchDown, args);
                        return true;
                    }
                }
                return false;
            };
            Board.prototype.queueTouchUp = function (stack, args) {
                if (stack && stack.length > 0) {
                    for (var i = 0; i < stack.length; i++) {
                        var sprite = stack[i];
                        if (sprite instanceof Board)
                            continue;
                        if (sprite.onTouchUp.handlers) {
                            this._runtime.queueLocalEvent(sprite.onTouchUp, args);
                            return true;
                        }
                    }
                }
                else {
                    if (this.onTouchUp.handlers) {
                        this._runtime.queueLocalEvent(this.onTouchUp, args);
                        return true;
                    }
                }
                return false;
            };
            Board.prototype.queueTap = function (stack, args) {
                if (stack && stack.length > 0) {
                    for (var i = 0; i < stack.length; i++) {
                        var sprite = stack[i];
                        if (sprite instanceof Board)
                            continue;
                        if (sprite.onTap.handlers) {
                            this._runtime.queueLocalEvent(sprite.onTap, args);
                            return true;
                        }
                    }
                }
                if (this.onTap.handlers) {
                    this._runtime.queueLocalEvent(this.onTap, args);
                    return true;
                }
                return false;
            };
            Board.prototype.queueSwipe = function (stack, args) {
                if (stack && stack.length > 0) {
                    for (var i = 0; i < stack.length; i++) {
                        var sprite = stack[i];
                        if (sprite instanceof Board)
                            continue;
                        if (sprite.onSwipe.handlers) {
                            this._runtime.queueLocalEvent(sprite.onSwipe, args);
                            return true;
                        }
                    }
                }
                else {
                    if (this.onSwipe.handlers) {
                        this._runtime.queueLocalEvent(this.onSwipe, args);
                        return true;
                    }
                }
                return false;
            };
            Board.prototype.findTouchedSprites = function (x, y) {
                var candidates = this.orderedSprites().filter(function (sp) { return !sp._hidden && sp.contains(x, y); }).reverse();
                if (candidates.length == 0)
                    return undefined;
                return candidates;
            };
            Board.prototype.applyBackground = function () {
                this.ctx.save();
                this.ctx.clearRect(0, 0, this._width, this._height);
                if (!!this.backgroundCamera) {
                }
                else if (!!this.backgroundPicture && this.backgroundPicture.hasCanvas()) {
                    this.ctx.drawImage(this.backgroundPicture.getCanvas(), 0, 0, this.backgroundPicture.widthSync(), this.backgroundPicture.heightSync(), 0, 0, this._width, this._height);
                }
                else if (!!this.backgroundColor) {
                    this.ctx.fillStyle = this.backgroundColor.toHtml();
                    this.ctx.fillRect(0, 0, this._width, this._height);
                }
                if (this._backgroundScene)
                    this._backgroundScene.render(this._width, this._height, this.ctx);
                this.ctx.restore();
            };
            Board.prototype.height = function () {
                return this._height;
            };
            Board.prototype.count = function () {
                return this.sprites.length;
            };
            Board.prototype.get_enumerator = function () {
                return this.sprites.slice(0);
            };
            Board.prototype.width = function () {
                return this._width;
            };
            Board.prototype.touched = function () {
                return this._touched;
            };
            Board.prototype.touch_start = function () {
                return this._touchStart;
            };
            Board.prototype.touch_current = function () {
                return this._touchCurrent;
            };
            Board.prototype.touch_end = function () {
                return this._touchEnd;
            };
            Board.prototype.touch_velocity = function () {
                return this._touchVelocity;
            };
            Board.prototype.create_boundary = function (distance) {
                if (!isNaN(this._boundaryDistance))
                    return;
                this._boundaryDistance = distance;
                this.initializeCanvasBoundaries(distance);
            };
            Board.prototype.initializeCanvasBoundaries = function (distance) {
                if (isNaN(distance))
                    return;
                this._walls.push(WallSegment.mk(-distance, -distance, this.width() + 2 * distance, 0, 1, 0));
                this._walls.push(WallSegment.mk(this.width() + distance, -distance, 0, this.height() + 2 * distance, 1, 0));
                this._walls.push(WallSegment.mk(this.width() + distance, this.height() + distance, -(this.width() + 2 * distance), 0, 1, 0));
                this._walls.push(WallSegment.mk(-distance, this.height() + distance, 0, -(this.height() + 2 * distance), 1, 0));
            };
            Board.prototype.addObstacle = function (o) {
                this._walls.push(WallSegment.mk(o.x, o.y, o.xextent, o.yextent, o.elasticity, o.friction, o));
                this._walls.push(WallSegment.mk(o.x + o.xextent, o.y + o.yextent, -o.xextent, -o.yextent, o.elasticity, o.friction, o));
                this._obstacles.push(o);
            };
            Board.prototype.create_sprite_set = function () {
                return new RT.SpriteSet();
            };
            Board.prototype.deleteSprite = function (sprite) {
                var idx = this.sprites.indexOf(sprite);
                if (idx < 0)
                    return;
                this.sprites.splice(idx, 1);
                this.spritesChanged();
            };
            Board.prototype.spritesChanged = function () {
                this._orderedSprites = undefined;
            };
            Board.prototype.frame_timer = function (s) {
                if (!this._everyFrameTimer)
                    this._everyFrameTimer = new RT.Timer(s.rt, 0.02, false);
                return this._everyFrameTimer;
            };
            Board.prototype.add_on_every_frame = function (perform, s) {
                return this.on_every_frame(perform, s);
            };
            Board.prototype.on_every_frame = function (perform, s) {
                return this.frame_timer(s).on_trigger(perform);
            };
            Board.prototype.clear_every_frame_timers = function () {
                if (this._everyFrameTimer) {
                    this._everyFrameTimer.clear();
                    this._everyFrameTimer = undefined;
                    this._everyFrameOnSprite = false;
                }
            };
            Board.prototype.on_tap = function (tapped) {
                return this.onTap.addHandler(tapped);
            };
            Board.prototype.on_swipe = function (swiped) {
                return this.onSwipe.addHandler(swiped);
            };
            Board.prototype.on_touch_down = function (touch_down) {
                return this.onTouchDown.addHandler(touch_down);
            };
            Board.prototype.on_touch_up = function (touch_up) {
                return this.onTouchUp.addHandler(touch_up);
            };
            Board.prototype.evolve = function () {
                var _this = this;
                TDev.Util.assert(!!this._runtime);
                if (!this._runtime)
                    return;
                this.tick++;
                if (isNaN(this.tick))
                    this.tick = 0;
                var now = this._runtime.currentTime();
                var newDelta = this._lastTimeDelta = (now - this._startTime) - this._lastUpdateMS;
                this._lastUpdateMS += newDelta;
                var dT = RT.Math_.clamp(0, 0.2, newDelta / 1000);
                this.sprites.forEach(function (sprite) { return sprite.update(dT); });
                this.detectCollisions(dT);
                this.sprites.forEach(function (sprite) { return sprite.commitUpdate(_this._runtime, dT); });
            };
            Board.prototype.detectCollisions = function (dT) {
                for (var i = 0; i < this.sprites.length; i++) {
                    var s = this.sprites[i];
                    if (!!s._location)
                        continue;
                    this.detectWallCollision(s, dT);
                }
            };
            Board.prototype.detectWallCollision = function (sprite, dT) {
                sprite.normalTouchPoints.clear();
                for (var i = 0; i < this._walls.length; i++) {
                    var wall = this._walls[i];
                    if (wall.processPotentialCollision(sprite, dT) && wall._obstacle)
                        wall._obstacle.raiseCollision(this._runtime, sprite);
                }
                for (var i = 0; i < this._walls.length; i++) {
                    var wall = this._walls[i];
                    if (wall.processPotentialCollision(sprite, dT) && wall._obstacle)
                        wall._obstacle.raiseCollision(this._runtime, sprite);
                }
            };
            Board.prototype.updateViewCore = function (s, b) {
                if (b instanceof TDev.WallBox)
                    b.fullScreen = this._full;
                this.redrawBoardAndContents();
            };
            Board.prototype.getViewCore = function (s, b) {
                this._touched = false;
                return this.container;
            };
            Board.prototype.equals = function (other_board) {
                return this == other_board;
            };
            Board.prototype.background_scene = function () {
                if (!this._backgroundScene)
                    this._backgroundScene = new RT.BoardBackgroundScene(this);
                return this._backgroundScene;
            };
            Board.prototype.set_background = function (color) {
                this.backgroundCamera = null;
                this.backgroundColor = color;
                this.backgroundPicture = null;
            };
            Board.prototype.set_background_camera = function (camera) {
                this.backgroundCamera = camera;
                this.backgroundColor = null;
                this.backgroundPicture = null;
            };
            Board.prototype.set_background_picture = function (picture, r) {
                this.backgroundCamera = null;
                this.backgroundColor = null;
                this.backgroundPicture = picture;
                picture.loadFirst(r, null);
            };
            Board.prototype.set_debug_mode = function (debug) {
                this._debugMode = debug;
            };
            Board.prototype.set_friction = function (friction) {
                this._worldFriction = friction;
            };
            Board.prototype.is_landscape = function () {
                return this._landscape;
            };
            Board.prototype.set_gravity = function (x, y) {
                this._gravity = new RT.Vector2(x, y);
            };
            Board.prototype.gravity = function () {
                return this._gravity;
            };
            Board.prototype.at = function (i) {
                return this.sprites[i];
            };
            Board.prototype.initialX = function () {
                return this.width() / 2;
            };
            Board.prototype.initialY = function () {
                return this.height() / 2;
            };
            Board.prototype.enableEveryFrameOnSprite = function (s) {
                var _this = this;
                if (this._everyFrameOnSprite)
                    return;
                this._everyFrameOnSprite = true;
                var handler = function (bot, prev) {
                    var q = _this._runtime.eventQ;
                    var args = [];
                    _this.sprites.forEach(function (s) {
                        if (s.onEveryFrame.pendinghandlers == 0)
                            q.addLocalEvent(s.onEveryFrame, args);
                    });
                    bot.entryAddr = prev;
                    return bot;
                };
                this.on_every_frame(handler, s);
            };
            Board.prototype.update_on_wall = function () {
                this.redrawBoardAndContents();
            };
            Board.prototype.orderedSprites = function () {
                if (!this._orderedSprites) {
                    this._orderedSprites = this.sprites.slice(0);
                    this._orderedSprites.stableSort(function (a, b) { return a.z_index() - b.z_index(); });
                }
                return this._orderedSprites;
            };
            Board.prototype.redrawBoardAndContents = function () {
                var _this = this;
                var isDebugMode = this._debugMode && (this._runtime && !this._runtime.currentScriptId);
                this.ctx.save();
                var scale = this.scaleFactor * TDev.SizeMgr.devicePixelRatio;
                this.ctx.scale(scale, scale);
                this.applyBackground();
                this.orderedSprites().forEach(function (s) { return s.redraw(_this.ctx, isDebugMode); });
                this.renderObstacles();
                if (isDebugMode) {
                    this.debugGrid();
                    this.debugSprings();
                    this.debugSegments();
                }
                this.ctx.restore();
            };
            Board.prototype.renderingContext = function () {
                return this.ctx;
            };
            Board.prototype.debugGrid = function () {
                this.ctx.save();
                this.ctx.beginPath();
                var w = this.width();
                var h = this.height();
                this.ctx.strokeStyle = "rgba(90, 90, 90, 0.7)";
                this.ctx.fillStyle = "rgba(90, 90, 90, 0.7)";
                this.ctx.lineWidth = 1;
                this.ctx.font = "12px sans-serif";
                for (var y = 0; y <= h; y += 100) {
                    this.ctx.moveTo(0, y);
                    this.ctx.lineTo(w, y);
                    if (y > 0 && y % 100 == 0)
                        this.ctx.fillText(y.toString(), 2, y - 5);
                    this.ctx.stroke();
                }
                for (var x = 0; x <= w; x += 100) {
                    this.ctx.moveTo(x, 0);
                    this.ctx.lineTo(x, h);
                    if (x > 0 && x % 100 == 0)
                        this.ctx.fillText(x.toString(), x - 15, 10);
                    this.ctx.stroke();
                }
                this.ctx.restore();
            };
            Board.prototype.debugSegments = function () {
                this.ctx.save();
                this.ctx.beginPath();
                for (var i = 0; i < this._minSegments.length; ++i) {
                    var seg = this._minSegments[i];
                    if (seg.overlap) {
                        this.ctx.fillStyle = "green";
                        this.ctx.strokeStyle = "green";
                    }
                    else {
                        this.ctx.fillStyle = "red";
                        this.ctx.strokeStyle = "red";
                    }
                    this.ctx.font = "20px sans-serif";
                    this.ctx.lineWidth = 4;
                    this.ctx.moveTo(seg.x(), seg.y());
                    this.ctx.lineTo(seg.x() + seg.z(), seg.y() + seg.w());
                    this.ctx.fillText(seg.from + "", seg.x() + seg.z(), seg.y() + seg.w());
                }
                this.ctx.stroke();
                this.ctx.restore();
                if (this._minSegments.length > 0) {
                    debugger;
                    this._minSegments = [];
                }
            };
            Board.prototype.debugSprings = function () {
                this.ctx.save();
                this.ctx.strokeStyle = "gray";
                this.ctx.beginPath();
                for (var i = 0; i < this._springs.length; i++) {
                    var o = this._springs[i];
                    this.ctx.moveTo(o.sprite1.x(), o.sprite1.y());
                    this.ctx.lineTo(o.sprite2.x(), o.sprite2.y());
                }
                this.ctx.stroke();
                this.ctx.restore();
            };
            Board.prototype.renderObstacles = function () {
                this.ctx.save();
                for (var i = 0; i < this._obstacles.length; i++) {
                    var o = this._obstacles[i];
                    if (!o.isValid())
                        continue;
                    this.ctx.beginPath();
                    this.ctx.lineWidth = o._thickness;
                    this.ctx.strokeStyle = o._color.toHtml();
                    this.ctx.moveTo(o.x, o.y);
                    this.ctx.lineTo(o.x + o.xextent, o.y + o.yextent);
                    this.ctx.stroke();
                }
                this.ctx.restore();
            };
            Board.prototype.mkSprite = function (tp, w, h) {
                var s = RT.Sprite.mk(tp, this.initialX(), this.initialY(), w, h);
                this.addSprite(s);
                return s;
            };
            Board.prototype.addSprite = function (s) {
                s._parent = this;
                s.set_z_index(0);
                this.sprites.push(s);
                s.changed();
                this.spritesChanged();
            };
            Board.prototype.create_ellipse = function (width, height) {
                return this.mkSprite(0 /* Ellipse */, width, height);
            };
            Board.prototype.create_rectangle = function (width, height) {
                return this.mkSprite(1 /* Rectangle */, width, height);
            };
            Board.prototype.create_text = function (width, height, fontSize, text) {
                var s = this.mkSprite(2 /* Text */, width, height);
                s.fontSize = fontSize;
                s.set_text(text);
                return s;
            };
            Board.prototype.create_picture = function (picture, r) {
                var s = this.mkSprite(3 /* Picture */, 1, 1);
                picture.loadFirst(r, function () {
                    s.setPictureInternal(picture);
                    return s;
                });
            };
            Board.prototype.create_sprite_sheet = function (picture, r) {
                var _this = this;
                picture.loadFirst(r, function () {
                    TDev.Util.log('board: new sprite sheet - ' + picture.widthSync() + 'x' + picture.heightSync());
                    var sheet = new RT.SpriteSheet(_this, picture);
                    return sheet;
                });
            };
            Board.prototype.create_anchor = function (width, height) {
                var anchor = this.mkSprite(4 /* Anchor */, width, height);
                anchor.set_friction(1);
                anchor.hide();
                return anchor;
            };
            Board.prototype.create_obstacle = function (x, y, width, height, elasticity) {
                if (width == 0 && height == 0)
                    return;
                var o = new Obstacle(this, x, y, width, height, elasticity, 1 - elasticity);
                this.addObstacle(o);
                return o;
            };
            Board.prototype.deleteObstacle = function (obstacle) {
                var idx = this._obstacles.indexOf(obstacle);
                if (idx > -1) {
                    this._obstacles.splice(idx, 1);
                    this._walls = this._walls.filter(function (wall) { return wall._obstacle != obstacle; });
                }
            };
            Board.prototype.create_spring = function (sprite1, sprite2, stiffness) {
                var spring = new RT.Spring(this, sprite1, sprite2, stiffness);
                this._springs.push(spring);
                sprite1.addSpring(spring);
                sprite2.addSpring(spring);
                return spring;
            };
            Board.prototype.deleteSpring = function (spring) {
                spring.sprite1.removeSpring(spring);
                spring.sprite2.removeSpring(spring);
                var idx = this._springs.indexOf(spring);
                if (idx > -1)
                    this._springs.splice(idx, 1);
            };
            Board.prototype.clear_events = function () {
            };
            Board.prototype.overlapWithAny = function (sprite, sprites) {
                var result = new RT.SpriteSet();
                for (var i = 0; i < sprites.count(); i++) {
                    var other = sprites.at(i);
                    if (sprite === other)
                        continue;
                    if (sprite.overlaps_with(other)) {
                        result.add(other);
                    }
                }
                return result;
            };
            Board.prototype.clear_background_camera = function () {
                this.backgroundCamera = null;
            };
            Board.prototype.clear_background_picture = function () {
                this.backgroundPicture = null;
            };
            Board.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
                if (this._full) {
                    if (this._landscape)
                        TDev.Runtime.lockOrientation(false, true, false);
                    else
                        TDev.Runtime.lockOrientation(true, false, false);
                }
            };
            return Board;
        })(RT.RTValue);
        RT.Board = Board;
        var Obstacle = (function (_super) {
            __extends(Obstacle, _super);
            function Obstacle(board, x, y, xextent, yextent, elasticity, friction) {
                _super.call(this);
                this.board = board;
                this.x = x;
                this.y = y;
                this.xextent = xextent;
                this.yextent = yextent;
                this.elasticity = elasticity;
                this.friction = friction;
                this._color = RT.Colors.gray();
                this._thickness = 3;
            }
            Obstacle.prototype.on_collision = function (bounce) {
                if (!this._onCollision)
                    this._onCollision = new RT.Event_();
                return this._onCollision.addHandler(bounce);
            };
            Obstacle.prototype.raiseCollision = function (rt, sprite) {
                if (this._onCollision && this._onCollision.handlers)
                    rt.queueLocalEvent(this._onCollision, [sprite], false);
            };
            Obstacle.prototype.set_color = function (color) {
                this._color = color;
            };
            Obstacle.prototype.set_thickness = function (thickness) {
                this._thickness = Math.max(1, thickness);
            };
            Obstacle.prototype.delete_ = function () {
                this.board.deleteObstacle(this);
            };
            Obstacle.prototype.isValid = function () {
                if (!this.IsFinite(this.x))
                    return false;
                if (!this.IsFinite(this.y))
                    return false;
                if (!this.IsFinite(this.xextent))
                    return false;
                if (!this.IsFinite(this.yextent))
                    return false;
                return true;
            };
            Obstacle.prototype.IsFinite = function (x) {
                if (isNaN(x))
                    return false;
                if (isFinite(x))
                    return true;
                return false;
            };
            return Obstacle;
        })(RT.RTValue);
        RT.Obstacle = Obstacle;
        var WallSegment = (function () {
            function WallSegment() {
            }
            WallSegment.mk = function (x, y, xextent, yextent, elasticity, friction, obstacle) {
                if (obstacle === void 0) { obstacle = undefined; }
                var w = new WallSegment();
                w._position = new RT.Vector2(x, y);
                var segment = new RT.Vector2(xextent, yextent);
                w._length = segment.length();
                w._unitExtent = segment.normalize();
                w._elasticity = elasticity;
                w._friction = friction;
                w._obstacle = obstacle;
                return w;
            };
            WallSegment.prototype.processPotentialCollision = function (sprite, dT) {
                var unitNormal = this._unitExtent.rotate90Left();
                var normalSpeedMag = -RT.Vector2.dot(unitNormal, sprite.stepDisplacement());
                if (normalSpeedMag <= 0) {
                    return false;
                }
                var pq = sprite._position.subtract(this._position);
                var distance = RT.Vector2.dot(pq, unitNormal);
                var normalRadius = sprite.radius(unitNormal);
                if (distance < normalRadius / 2) {
                    if (distance <= -normalRadius / 2) {
                        return false;
                    }
                    var unitRadius = sprite.radius(this._unitExtent);
                    var segmentProj = RT.Vector2.dot(sprite._position.subtract(this._position), this._unitExtent);
                    if (segmentProj < -unitRadius / 2 || segmentProj > this._length + unitRadius / 2) {
                        return false;
                    }
                    if (distance < 0) {
                        return false;
                    }
                    else {
                        sprite.newPosition = sprite._position.add(unitNormal.scale(normalRadius - distance));
                    }
                    normalSpeedMag = Math.abs(RT.Vector2.dot(unitNormal, sprite.midSpeed));
                    var normalSpeed = unitNormal.scale(normalSpeedMag);
                    var parallelSpeed = this._unitExtent.scale(RT.Vector2.dot(this._unitExtent, sprite.midSpeed));
                    sprite.midSpeed = sprite.newSpeed = (normalSpeed.scale(sprite._elasticity * this._elasticity).add(parallelSpeed.scale(1 - this._friction)));
                    sprite.normalTouchPoints.push(unitNormal);
                    return true;
                }
                var t = (distance - normalRadius) / normalSpeedMag;
                if (t > 1) {
                    return false;
                }
                var impactPos = sprite._position.add(sprite.stepDisplacement().scale(((t < 0) ? (t * 1.01) : (t * 0.99))));
                var unitRadius2 = sprite.radius(this._unitExtent);
                var segmentIndex = RT.Vector2.dot(impactPos.subtract(this._position), this._unitExtent);
                if (segmentIndex < -unitRadius2 / 2 || segmentIndex > this._length + unitRadius2 / 2) {
                    return false;
                }
                {
                    normalSpeedMag = Math.abs(RT.Vector2.dot(unitNormal, sprite.midSpeed));
                    var normalSpeed = unitNormal.scale(normalSpeedMag);
                    var stepParallelSpeed = this._unitExtent.scale(RT.Vector2.dot(this._unitExtent, sprite.stepDisplacement()));
                    sprite.newPosition = impactPos.add(stepParallelSpeed.scale(1 - t));
                    var parallelSpeed = this._unitExtent.scale(RT.Vector2.dot(this._unitExtent, sprite.newSpeed));
                    sprite.midSpeed = sprite.newSpeed = (normalSpeed.scale(sprite._elasticity * this._elasticity).add(parallelSpeed.scale(1 - this._friction)));
                    sprite.normalTouchPoints.push(unitNormal);
                    return true;
                }
            };
            return WallSegment;
        })();
        RT.WallSegment = WallSegment;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Boolean_;
        (function (Boolean_) {
            function equals(self, right) {
                return self === right;
            }
            Boolean_.equals = equals;
            function not(self) {
                return !self;
            }
            Boolean_.not = not;
            function and(self, right) {
                return self && right;
            }
            Boolean_.and = and;
            function or(self, right) {
                return self || right;
            }
            Boolean_.or = or;
            function to_string(self) {
                return self ? "true" : "false";
            }
            Boolean_.to_string = to_string;
            function to_number(self) {
                return self ? 1 : 0;
            }
            Boolean_.to_number = to_number;
            function post_to_wall(self, s) {
                s.rt.postBoxedText(to_string(self), s.pc);
            }
            Boolean_.post_to_wall = post_to_wall;
            function from_string(s) {
                return s === "true";
            }
            Boolean_.from_string = from_string;
            function picker() {
                var inp = TDev.HTML.mkCheckBox(TDev.lf("true?"));
                return {
                    html: inp,
                    validate: function () { return true; },
                    get: function () { return TDev.HTML.getCheckboxValue(inp); },
                    set: function (v) { return TDev.HTML.setCheckboxValue(inp, v); }
                };
            }
            Boolean_.picker = picker;
            function to_json(self) {
                return RT.JsonObject.wrap(self);
            }
            Boolean_.to_json = to_json;
        })(Boolean_ = RT.Boolean_ || (RT.Boolean_ = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Box;
        (function (Box) {
            var R = TDev.HTML;
            function push_box(s) {
                if (!TDev.LayoutMgr.RenderExecutionMode())
                    TDev.Util.userError(TDev.lf("boxes can only be created in page display code"));
                var parent = TDev.LayoutMgr.getCurrentRenderBox();
                TDev.Util.assert(parent != null);
                TDev.LayoutMgr.createOrRecycleContainerBoxDelayed(s.rt, parent);
            }
            Box.push_box = push_box;
            function pop_box(s) {
                TDev.Util.assert(TDev.LayoutMgr.RenderExecutionMode());
                var box = TDev.LayoutMgr.getCurrentRenderBox();
                var parent = box.parent;
                TDev.Util.assert(parent != null);
                TDev.LayoutMgr.setCurrentRenderBox(box.parent);
            }
            Box.pop_box = pop_box;
            function set_foreground(color, s) {
                var box = s.rt.getCurrentBox();
                box.setForeground(color.toHtml(), s.rt.getTopScriptPc());
            }
            Box.set_foreground = set_foreground;
            function set_background(color, s) {
                var box = s.rt.getCurrentBox();
                box.setBackground(color.toHtml(), s.rt.getTopScriptPc());
            }
            Box.set_background = set_background;
            function add_background_picture(pic, position, size, repeat, attachment, s) {
                var url = pic.getReadonlyUrlSync();
                function validate(str) {
                    var r = str.toLowerCase().trim();
                    if (!/^[a-z %0-9\-]*$/.test(r)) {
                        RT.App.log('invalid box background value: ' + r);
                        return '';
                    }
                    return r;
                }
                if (url) {
                    var box = s.rt.getCurrentBox();
                    box.addBackgroundImage({
                        url: url,
                        position: validate(position),
                        size: validate(size),
                        repeat: validate(repeat),
                        attachment: validate(attachment)
                    }, s.rt.getTopScriptPc());
                }
            }
            Box.add_background_picture = add_background_picture;
            function use_vertical_layout(s) {
                var box = s.rt.getCurrentBox();
                box.setFlow(TDev.WallBox.FLOW_VERTICAL, s.rt.getTopScriptPc());
            }
            Box.use_vertical_layout = use_vertical_layout;
            function use_horizontal_layout(s) {
                var box = s.rt.getCurrentBox();
                box.setFlow(TDev.WallBox.FLOW_HORIZONTAL, s.rt.getTopScriptPc());
            }
            Box.use_horizontal_layout = use_horizontal_layout;
            function use_overlay_layout(s) {
                var box = s.rt.getCurrentBox();
                box.setFlow(TDev.WallBox.FLOW_OVERLAY, s.rt.getTopScriptPc());
            }
            Box.use_overlay_layout = use_overlay_layout;
            function set_width(width, s) {
                var box = s.rt.getCurrentBox();
                box.setEmWidth(width, s.rt.getTopScriptPc());
            }
            Box.set_width = set_width;
            function set_height(height, s) {
                var box = s.rt.getCurrentBox();
                box.setEmHeight(height, s.rt.getTopScriptPc());
            }
            Box.set_height = set_height;
            function set_width_range(min_width, max_width, s) {
                var box = s.rt.getCurrentBox();
                box.setEmWidthRange(min_width, max_width, s.rt.getTopScriptPc());
            }
            Box.set_width_range = set_width_range;
            function set_height_range(min_height, max_height, s) {
                var box = s.rt.getCurrentBox();
                box.setEmHeightRange(min_height, max_height, s.rt.getTopScriptPc());
            }
            Box.set_height_range = set_height_range;
            function set_horizontal_stretch(elasticity, s) {
                var n = elasticity;
                var box = s.rt.getCurrentBox();
                if (n < 0 || n > 1) {
                    TDev.Util.userError(TDev.lf("invalid argument: elasticity must be a number between 0 and 1"));
                    n = 0;
                }
                box.setHorizontalStretch(n, s.rt.getTopScriptPc());
            }
            Box.set_horizontal_stretch = set_horizontal_stretch;
            function set_vertical_stretch(elasticity, s) {
                var n = elasticity;
                var box = s.rt.getCurrentBox();
                if (n < 0 || n > 1) {
                    TDev.Util.userError(TDev.lf("invalid argument: elasticity must be a number between 0 and 1"));
                    n = 0;
                }
                box.setVerticalStretch(n, s.rt.getTopScriptPc());
            }
            Box.set_vertical_stretch = set_vertical_stretch;
            function set_border(color, width, s) {
                var box = s.rt.getCurrentBox();
                box.setEmBorder(color.toHtml(), width, s.rt.getTopScriptPc());
            }
            Box.set_border = set_border;
            function set_border_widths(top, right, bottom, left, s) {
                var box = s.rt.getCurrentBox();
                box.setEmBorderWidth(top, right, bottom, left, s.rt.getTopScriptPc());
            }
            Box.set_border_widths = set_border_widths;
            function set_margins(top, right, bottom, left, s) {
                var box = s.rt.getCurrentBox();
                box.setAllEmMargins(top, right, bottom, left, s.rt.getTopScriptPc());
            }
            Box.set_margins = set_margins;
            function set_padding(top, right, bottom, left, s) {
                var box = s.rt.getCurrentBox();
                box.setEmPadding(top, right, bottom, left, s.rt.getTopScriptPc());
            }
            Box.set_padding = set_padding;
            function set_horizontal_alignment(left, right, s) {
                var box = s.rt.getCurrentBox();
                box.setHorizontalAlignment(left, right, s.rt.getTopScriptPc());
            }
            Box.set_horizontal_alignment = set_horizontal_alignment;
            function set_vertical_alignment(top, bottom, s) {
                var box = s.rt.getCurrentBox();
                box.setVerticalAlignment(top, bottom, s.rt.getTopScriptPc());
            }
            Box.set_vertical_alignment = set_vertical_alignment;
            function set_horizontal_align(arrange, s) {
                var box = s.rt.getCurrentBox();
                var a = TDev.WallBox.ARRANGE_LEFT;
                var what = arrange;
                if (what === "left")
                    a = TDev.WallBox.ARRANGE_LEFT;
                else if (what === "right")
                    a = TDev.WallBox.ARRANGE_RIGHT;
                else if (what === "center")
                    a = TDev.WallBox.ARRANGE_CENTER;
                else if (what === "justify")
                    a = TDev.WallBox.ARRANGE_JUSTIFY;
                else if (what === "spread")
                    a = TDev.WallBox.ARRANGE_SPREAD;
                else
                    TDev.Util.userError(TDev.lf("horizontal align must be one of {left, right, center, justify, spread}"));
                box.setHorizontalArrangement(a, s.rt.getTopScriptPc());
            }
            Box.set_horizontal_align = set_horizontal_align;
            function set_vertical_align(arrange, s) {
                var box = s.rt.getCurrentBox();
                var a = TDev.WallBox.ARRANGE_TOP;
                var what = arrange;
                if (what === "top")
                    a = TDev.WallBox.ARRANGE_TOP;
                else if (what === "bottom")
                    a = TDev.WallBox.ARRANGE_BOTTOM;
                else if (what === "center")
                    a = TDev.WallBox.ARRANGE_CENTER;
                else if (what === "justify")
                    a = TDev.WallBox.ARRANGE_JUSTIFY;
                else if (what === "baseline")
                    a = TDev.WallBox.ARRANGE_BASELINE;
                else if (what === "spread")
                    a = TDev.WallBox.ARRANGE_SPREAD;
                else
                    TDev.Util.userError(TDev.lf("vertical align must be one of {baseline, top, bottom, center, justify, spread}"));
                box.setVerticalArrangement(a, s.rt.getTopScriptPc());
            }
            Box.set_vertical_align = set_vertical_align;
            function set_font_size(font_size, s) {
                var box = s.rt.getCurrentBox();
                box.setEmFontSize(font_size, s.rt.getTopScriptPc());
            }
            Box.set_font_size = set_font_size;
            function set_font_weight(font_weight, s) {
                var box = s.rt.getCurrentBox();
                box.setFontWeight(font_weight, s.rt.getTopScriptPc());
            }
            Box.set_font_weight = set_font_weight;
            function set_font_family(family, s) {
                var box = s.rt.getCurrentBox();
                box.setFontFamily(family, s.rt.getTopScriptPc());
            }
            Box.set_font_family = set_font_family;
            function set_scrolling(horizontal_scrolling, vertical_scrolling, s) {
                var box = s.rt.getCurrentBox();
                box.setScrolling(horizontal_scrolling, vertical_scrolling, s.rt.getTopScriptPc());
            }
            Box.set_scrolling = set_scrolling;
            function on_tapped(handler, s) {
                var box = s.rt.getCurrentBox();
                box.attributes.tappedEvent.addHandler(handler);
            }
            Box.on_tapped = on_tapped;
            function on_text_editing(handler, s) {
                var box = s.rt.getCurrentBox();
                box.attributes.textEditingEvent.addHandler(handler);
            }
            Box.on_text_editing = on_text_editing;
            function on_text_edited(handler, s) {
                var box = s.rt.getCurrentBox();
                box.attributes.textEditedEvent.addHandler(handler);
            }
            Box.on_text_edited = on_text_edited;
            function edit_text(text, multiline, s) {
                s.rt.postEditableText(multiline ? "textarea" : "textline", text, null, s.rt.getTopScriptPc());
            }
            Box.edit_text = edit_text;
            function edit(style, value, changehandler, s) {
                s.rt.postEditableText(style, value, changehandler, s.rt.getTopScriptPc());
            }
            Box.edit = edit;
            function edit_ref(style, ref, s) {
                s.rt.postEditableText(style, ref._get(s), ref, s.rt.getTopScriptPc());
            }
            Box.edit_ref = edit_ref;
            function is_init(s) {
                return s.rt.getCurrentPage().renderCount == 0;
            }
            Box.is_init = is_init;
            function page_width(s) {
                return (s.rt.host.fullWallWidth() - TDev.LayoutMgr.instance.scrollbarWidth) / TDev.SizeMgr.topFontSize;
            }
            Box.page_width = page_width;
            function page_height(s) {
                return s.rt.host.userWallHeight() / TDev.SizeMgr.topFontSize;
            }
            Box.page_height = page_height;
            function pixels_per_em() {
                return TDev.SizeMgr.topFontSize;
            }
            Box.pixels_per_em = pixels_per_em;
            function set_text_wrapping(wrap, minimumwidth, s) {
                var box = s.rt.getCurrentBox();
                box.setWrap(wrap, minimumwidth, s.rt.getTopScriptPc());
            }
            Box.set_text_wrapping = set_text_wrapping;
        })(Box = RT.Box || (RT.Box = {}));
        var Dom;
        (function (Dom) {
            function use_css(stylesheet, s) {
                s.rt.forceNonRender(TDev.lf("cannot change css while displaying page"));
                s.rt.getCurrentPage().csslayout = true;
                s.rt.applyPageAttributes(true);
                if (stylesheet)
                    s.rt.host.importCss(stylesheet);
            }
            Dom.use_css = use_css;
            function set_tag_name(name, s) {
                if (!name)
                    return;
                if (!TDev.HTML.allowedTagName(name))
                    TDev.Util.userError(TDev.lf("tag not allowed"), s.pc);
                TDev.LayoutMgr.setHtmlTagName(name);
            }
            Dom.set_tag_name = set_tag_name;
            function add_css_class(name, s) {
                if (!name)
                    return;
                var box = s.rt.getCurrentHtmlBox();
                box.addClassName(name, s.rt.getTopScriptPc());
            }
            Dom.add_css_class = add_css_class;
            function set_attribute(name, value, s) {
                if (!name)
                    return;
                if (!TDev.HTML.allowedAttribute(name, value))
                    TDev.Util.userError(TDev.lf("attribute not allowed"), s.pc);
                var box = s.rt.getCurrentHtmlBox();
                box.setAttribute(name, value, s.rt.getTopScriptPc());
            }
            Dom.set_attribute = set_attribute;
            function set_style(property, value, s) {
                if (!property)
                    return;
                var box = s.rt.getCurrentHtmlBox();
                box.setStyle(property, value, s.rt.getTopScriptPc());
            }
            Dom.set_style = set_style;
            function bind_value_with_handler(value, changehandler, s) {
                var box = s.rt.getCurrentHtmlBox();
                box.bindEditableText(value, changehandler, s.rt.getTopScriptPc());
            }
            Dom.bind_value_with_handler = bind_value_with_handler;
            function bind_value_to_ref(ref, s) {
                var box = s.rt.getCurrentHtmlBox();
                box.bindEditableText(ref._get(s), ref, s.rt.getTopScriptPc());
            }
            Dom.bind_value_to_ref = bind_value_to_ref;
            function add_on_click(handler, s) {
                var box = s.rt.getCurrentHtmlBox();
                box.attributes.tappedEvent.addHandler(handler);
            }
            Dom.add_on_click = add_on_click;
        })(Dom = RT.Dom || (RT.Dom = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BoxFlow = (function (_super) {
            __extends(BoxFlow, _super);
            function BoxFlow() {
                _super.call(this);
            }
            BoxFlow.mk = function (flow) {
                var boxFlow = new BoxFlow();
                boxFlow._flow = flow;
                return boxFlow;
            };
            BoxFlow.prototype.flow = function () {
                return this._flow;
            };
            BoxFlow.prototype.equals = function (other) {
                return this._flow === other._flow;
            };
            return BoxFlow;
        })(RT.RTValue);
        RT.BoxFlow = BoxFlow;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BoxFlows;
        (function (BoxFlows) {
            var _right = RT.BoxFlow.mk("right");
            var _left = RT.BoxFlow.mk("left");
            var _up = RT.BoxFlow.mk("up");
            var _down = RT.BoxFlow.mk("down");
            function right() {
                return _right;
            }
            BoxFlows.right = right;
            function left() {
                return _left;
            }
            BoxFlows.left = left;
            function up() {
                return _up;
            }
            BoxFlows.up = up;
            function down() {
                return _down;
            }
            BoxFlows.down = down;
        })(BoxFlows = RT.BoxFlows || (RT.BoxFlows = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Camera = (function (_super) {
            __extends(Camera, _super);
            function Camera() {
                _super.call(this);
                this._isFront = false;
                this._deviceId = undefined;
                this._videoUrl = undefined;
                this._video = undefined;
            }
            Camera.prototype.set_is_front = function (isFront) {
                this._isFront = isFront;
            };
            Camera.prototype.device_id = function () {
                return this._deviceId;
            };
            Camera.prototype.set_device_id = function (deviceId) {
                this._deviceId = deviceId;
            };
            Camera.prototype.height = function () {
                return undefined;
            };
            Camera.prototype.is_front = function () {
                return this._isFront;
            };
            Camera.prototype.width = function () {
                return undefined;
            };
            Camera.prototype.getVideoAsync = function (r) {
                var _this = this;
                return this.askCameraAccessAsync(r).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(undefined);
                    else
                        return new TDev.Promise(function (onSuccess, onError, onProcess) {
                            if (_this._videoUrl) {
                                var v = TDev.createElement('video');
                                v.src = _this._videoUrl;
                                v.controls = false;
                                v.autoplay = true;
                                onSuccess(v);
                            }
                            else {
                                RT.UserMediaManager.getCameraUrlAsync(_this._isFront, _this._deviceId).then(function (url) {
                                    if (url) {
                                        _this._videoUrl = url;
                                        var v = TDev.createElement('video');
                                        v.src = _this._videoUrl;
                                        v.controls = false;
                                        v.autoplay = true;
                                        onSuccess(v);
                                    }
                                    else {
                                        onSuccess(undefined);
                                    }
                                }).done();
                            }
                        });
                });
            };
            Camera.prototype.askCameraAccessAsync = function (r) {
                return r.host.askSourceAccessAsync("camera", "your camera.", false);
            };
            Camera.prototype.post_to_wall = function (s) {
                var _this = this;
                this.getVideoAsync(s.rt).done(function (v) {
                    _this._video = v;
                    if (_this._video) {
                        _this._video.controls = true;
                        s.rt.postBoxedHtml(_this._video, s.pc);
                    }
                });
            };
            Camera.prototype.previewVideo = function (v, r) {
                var picurl = RT.UserMediaManager.previewVideo(v);
                RT.Picture.fromUrl(picurl).then(function (p) {
                    r.resumeVal(p);
                });
            };
            Camera.prototype.preview = function (r) {
                var _this = this;
                if (this._video) {
                    this.previewVideo(this._video, r);
                }
                else {
                    this.getVideoAsync(r.rt).then(function (v) {
                        if (!v) {
                            r.resumeVal(undefined);
                        }
                        else {
                            _this._video = v;
                            _this._video.controls = true;
                            r.rt.postBoxedHtml(_this._video, r.rt.current.pc);
                            TDev.Util.setTimeout(5 * 1000, function () {
                                _this.previewVideo(_this._video, r);
                            });
                        }
                    }).done();
                }
            };
            return Camera;
        })(RT.RTValue);
        RT.Camera = Camera;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var CloudPicture = (function (_super) {
            __extends(CloudPicture, _super);
            function CloudPicture() {
                _super.call(this);
                this.currentMedia = undefined;
                this.pending = false;
            }
            CloudPicture.mk = function (provider, id, shared, width, height) {
                var cp = new CloudPicture();
                cp.provider = provider;
                cp.id = id;
                cp.shared = shared;
                cp.width = width;
                cp.height = height;
                return cp;
            };
            CloudPicture.prototype.toString = function () {
                return "cloud picture";
            };
            CloudPicture.prototype.exportJson = function (ctx) {
                return {
                    provider: this.provider,
                    id: this.id,
                    shared: this.shared,
                    width: this.width,
                    height: this.height
                };
            };
            CloudPicture.prototype.importJson = function (ctx, data) {
                if (typeof data != "object")
                    data = undefined;
                this.provider = ctx.importString(data, "provider");
                this.id = ctx.importString(data, "id");
                this.shared = ctx.importBoolean(data, "shared");
                this.width = ctx.importNumber(data, "width");
                this.height = ctx.importNumber(data, "height");
                return this;
            };
            CloudPicture.prototype.toJsonKey = function () {
                return this.provider + this.id;
            };
            CloudPicture.prototype.keyCompareTo = function (other) {
                var o = other;
                var diff = this.provider.localeCompare(o.provider);
                if (diff)
                    return diff;
                diff = this.id.localeCompare(o.id);
                return diff;
            };
            CloudPicture.prototype.toPictureUrlAsync = function (media) {
                var media = media.toLocaleLowerCase().trim();
                if (media == "screen")
                    media = this.getScreenMedia();
                else if (!/^full|normal|thumbnail|album|small$/.test(media)) {
                    media = 'normal';
                }
                return RT.OneDrive.downloadPictureUrlAsync(this.id, media);
            };
            CloudPicture.prototype.chooseMedia = function (width, height) {
                var size = Math.min(width, height);
                if (size > 1024)
                    return "full";
                if (size > 176)
                    return "normal";
                return "thumbnail";
            };
            CloudPicture.prototype.getScreenMedia = function () {
                return this.chooseMedia(TDev.SizeMgr.wallWindowWidth, TDev.SizeMgr.windowHeight);
            };
            CloudPicture.prototype.downloadPictureAsync = function (media) {
                var pic = undefined;
                return this.toPictureUrlAsync(media).then(function (url) {
                    if (!url)
                        return TDev.Promise.as(undefined);
                    return RT.Picture.fromUrl(url, false, false).then(function (p) {
                        pic = p;
                        return p.initAsync();
                    }).then(function () {
                        pic.clearUrl();
                        return pic;
                    });
                });
            };
            CloudPicture.prototype.to_picture = function (media, r) {
                this.toPictureUrlAsync(media).done(function (url) { return r.resumeVal(url ? RT.Picture.fromUrlSync(url, true, false) : undefined); }, function (e) { return r.resumeVal(undefined); });
            };
            CloudPicture.prototype.download_picture = function (media, r) {
                this.downloadPictureAsync(media).done(function (p) { return r.resumeVal(p); }, function (e) { return r.resumeVal(undefined); });
            };
            CloudPicture.prototype.getViewCore = function (s, b) {
                var _this = this;
                var d = TDev.div("item");
                d.setAttribute("height", (this.height || s.rt.host.userWallHeight()).toString());
                d.setAttribute("width", (this.width || s.rt.host.fullWallWidth()).toString());
                b.layoutcompletehandler = function (width, height) {
                    var bestmedia = _this.chooseMedia(width, height);
                    if (bestmedia !== _this.currentMedia && !_this.pending) {
                        _this.pending = true;
                        _this.toPictureUrlAsync(bestmedia).done(function (url) {
                            _this.pending = false;
                            if (url) {
                                _this.currentMedia = bestmedia;
                                var pic = TDev.HTML.mkImg(url);
                                pic.style.maxWidth = '100%';
                                pic.style.maxHeight = '100%';
                                d.setChildren([pic]);
                                b.RefreshOnScreen();
                            }
                        });
                    }
                };
                return d;
            };
            CloudPicture.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return CloudPicture;
        })(RT.RTValue);
        RT.CloudPicture = CloudPicture;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Collections;
        (function (Collections) {
            function create_user_collection() {
                return new RT.Collection(RT.User);
            }
            Collections.create_user_collection = create_user_collection;
            function create_date_time_collection() {
                return new RT.Collection(RT.DateTime);
            }
            Collections.create_date_time_collection = create_date_time_collection;
            function create_picture_collection() {
                return new RT.Collection(RT.Picture);
            }
            Collections.create_picture_collection = create_picture_collection;
            function create_sound_collection() {
                return new RT.Collection(RT.Sound);
            }
            Collections.create_sound_collection = create_sound_collection;
            function create_action_collection() {
                return new RT.Collection(RT.Action);
            }
            Collections.create_action_collection = create_action_collection;
            function create_string_collection() {
                return new RT.Collection("string");
            }
            Collections.create_string_collection = create_string_collection;
            function create_place_collection() {
                return new RT.Collection(RT.Place);
            }
            Collections.create_place_collection = create_place_collection;
            function create_link_collection() {
                return new RT.Collection(RT.Link);
            }
            Collections.create_link_collection = create_link_collection;
            function create_message_collection() {
                return new RT.Collection(RT.Message);
            }
            Collections.create_message_collection = create_message_collection;
            function create_location_collection() {
                return new RT.Collection(RT.Location_);
            }
            Collections.create_location_collection = create_location_collection;
            function create_number_map() {
                return new RT.NumberMap();
            }
            Collections.create_number_map = create_number_map;
            function create_string_map() {
                return new RT.StringMap();
            }
            Collections.create_string_map = create_string_map;
            function create_number_collection() {
                return new RT.Collection("number");
            }
            Collections.create_number_collection = create_number_collection;
        })(Collections = RT.Collections || (RT.Collections = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Color = (function (_super) {
            __extends(Color, _super);
            function Color() {
                _super.call(this);
            }
            Color.fromArtUrl = function (url) {
                return TDev.Promise.wrap(Color.fromHtml(url));
            };
            Color.fromArgb = function (a, r, g, b) {
                var c = new Color();
                c.a = a;
                c.r = r;
                c.g = g;
                c.b = b;
                return c;
            };
            Color.capByte = function (n) {
                var c = Math.floor(n);
                if (c < 0)
                    return 0;
                else if (c > 255)
                    return 255;
                return c;
            };
            Color.normalizeToByte = function (n) {
                if (n < 0)
                    n = 0;
                else if (n > 1)
                    n = 1;
                return Math.floor(n * 255 + 0.499999);
            };
            Color.fromArgbF = function (a, r, g, b) {
                var c = new Color();
                c.a = Color.normalizeToByte(a);
                c.r = Color.normalizeToByte(r);
                c.g = Color.normalizeToByte(g);
                c.b = Color.normalizeToByte(b);
                return c;
            };
            Color.fromHtml = function (c) {
                if (c[0] == "#")
                    c = c.substr(1);
                var n = parseInt(c, 16);
                var r = new Color();
                if (c.length == 3 || c.length == 4) {
                    r.b = (n & 0xf) * 0x11;
                    r.g = ((n >> 4) & 0xf) * 0x11;
                    r.r = ((n >> 8) & 0xf) * 0x11;
                    r.a = ((n >> 12) & 0xf) * 0x11;
                }
                else if (c.length == 6 || c.length == 8) {
                    r.b = (n & 0xff);
                    r.g = ((n >> 8) & 0xff);
                    r.r = ((n >> 16) & 0xff);
                    r.a = ((n >> 24) & 0xff);
                }
                if (c.length == 3 || c.length == 6)
                    r.a = 255;
                return r;
            };
            Color.fromInt32 = function (n) {
                n = Math.round(n);
                var r = new Color();
                r.b = (n & 0xff);
                r.g = ((n >> 8) & 0xff);
                r.r = ((n >> 16) & 0xff);
                r.a = ((n >> 24) & 0xff);
                return r;
            };
            Color.prototype.A = function () {
                return this.a / 255.0;
            };
            Color.prototype.R = function () {
                return this.r / 255.0;
            };
            Color.prototype.G = function () {
                return this.g / 255.0;
            };
            Color.prototype.B = function () {
                return this.b / 255.0;
            };
            Color.prototype.equals = function (other) {
                return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;
            };
            Color.prototype.blend = function (other) {
                var caAlpha = other.A();
                var cbAlpha = this.A() * (1 - caAlpha);
                return Color.fromArgbF(caAlpha + cbAlpha, other.R() * caAlpha + this.R() * cbAlpha, other.G() * caAlpha + this.G() * cbAlpha, other.B() * caAlpha + this.B() * cbAlpha);
            };
            Color.prototype.make_transparent = function (alpha) {
                if (alpha == 1 && this.a == 255)
                    return this;
                var a = Color.normalizeToByte(alpha);
                if (a == this.a)
                    return this;
                return Color.fromArgb(a, this.r, this.g, this.b);
            };
            Color.prototype.darken = function (delta) {
                return Color.fromArgbF(this.A(), this.R() - delta, this.G() - delta, this.B() - delta);
            };
            Color.prototype.lighten = function (delta) {
                return Color.fromArgbF(this.A(), this.R() + delta, this.G() + delta, this.B() + delta);
            };
            Color.prototype.toInt32 = function () {
                return ((this.a << 24) | (this.r << 16) | (this.g << 8) | this.b) >>> 0;
            };
            Color.prototype.toJsonKey = function () {
                return this.toInt32();
            };
            Color.prototype.keyCompareTo = function (other) {
                var o = other;
                var diff = this.r - o.r;
                if (diff)
                    return diff;
                diff = this.b - o.b;
                if (diff)
                    return diff;
                diff = this.g - o.g;
                if (diff)
                    return diff;
                diff = this.a - o.a;
                return diff;
            };
            Color.prototype.toString = function () {
                var h = this.toInt32().toString(16);
                return "#" + "00000000".substr(0, 8 - h.length) + h;
            };
            Color.prototype.getViewCore = function (s, b) {
                var d = TDev.div("item");
                d.style.backgroundColor = this.toHtml();
                var t = TDev.div("item-subtitle", TDev.Util.fmt('alpha:{0:f1.3}, red:{1:f1.3}, green:{2:f1.3}, blue:{3:f1.3}', this.A(), this.R(), this.G(), this.B()));
                t.style.textAlign = 'center';
                t.style.color = ((this.r + this.g + this.b) * this.A()) > 300 ? 'black' : 'white';
                d.appendChild(t);
                return d;
            };
            Color.prototype.toHtml = function () {
                if (this.htmlCache)
                    return this.htmlCache;
                if (this.a == 0xff) {
                    var h = (this.toInt32() & 0xffffff).toString(16);
                    this.htmlCache = "#" + "000000".substr(0, 6 - h.length) + h;
                }
                else
                    this.htmlCache = TDev.Util.fmt("rgba({0}, {1}, {2}, {3})", this.r, this.g, this.b, RT.Math_.round_with_precision(this.a / 0xff, 6));
                return this.htmlCache;
            };
            Color.prototype.getShortStringRepresentation = function () {
                return this.toHtml();
            };
            Color.prototype.exportJson = function (ctx) {
                return this.toHtml();
            };
            Color.prototype.importJson = function (ctx, json) {
                TDev.Util.oops("should not call immutable instance for importing");
                return undefined;
            };
            Color.mkFromJson = function (ctx, json) {
                if (typeof (json) === "string") {
                    var c = Color.fromHtml(json);
                    return c;
                }
                else {
                    return undefined;
                }
            };
            Color.prototype.debuggerDisplay = function (clickHandler) {
                var tempSpan;
                tempSpan = TDev.span(null, "R: " + this.r + " G: " + this.g + " B: " + this.b).withClick(clickHandler);
                var s;
                for (s = (this.toInt32() & 0xffffff).toString(16); s.length < 6; s = "0" + s) {
                }
                tempSpan.style.backgroundColor = "#" + s;
                if ((this.r + this.g + this.b) / 3 < 100) {
                    tempSpan.style.color = "white";
                }
                return tempSpan;
            };
            Color.prototype.to_html = function () {
                return this.toHtml();
            };
            Color.prototype.hue = function () {
                return this.toHsb().x() / 255;
            };
            Color.prototype.saturation = function () {
                return this.toHsb().y() / 255;
            };
            Color.prototype.brightness = function () {
                return this.toHsb().z() / 255;
            };
            Color.prototype.toHsb = function () {
                var max = Math.max(this.r, Math.max(this.g, this.b));
                if (max <= 0)
                    return RT.Vector3.mk(0, 0, 0);
                var min = Math.min(this.r, Math.min(this.g, this.b));
                var dif = max - min;
                var hue = 0;
                if (max > min) {
                    if (this.g === max) {
                        hue = (this.b - this.r) / dif * 60 + 120;
                    }
                    else if (this.b === max) {
                        hue = (this.r - this.g) / dif * 60 + 240;
                    }
                    else if (this.b > this.g) {
                        hue = (this.g - this.b) / dif * 60 + 360;
                    }
                    else {
                        hue = (this.g - this.b) / dif * 60;
                    }
                    if (hue < 0) {
                        hue = hue + 360;
                    }
                }
                else {
                    hue = 0;
                }
                hue *= 255 / 360;
                var saturation = (dif / max) * 255;
                var brightness = max;
                return RT.Vector3.mk(hue, saturation, brightness);
            };
            Color.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Color;
        })(RT.RTValue);
        RT.Color = Color;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Colors;
        (function (Colors) {
            function accent() {
                return RT.Color.fromHtml("#3BA818");
            }
            Colors.accent = accent;
            function subtle() {
                return light_gray();
            }
            Colors.subtle = subtle;
            function chrome() {
                return RT.Color.fromHtml("#FFDDDDDD");
            }
            Colors.chrome = chrome;
            function foreground(s) {
                var p = s && s.rt.getCurrentPage();
                return p ? RT.Color.fromHtml(p.fgColor) : foreground_os();
            }
            Colors.foreground = foreground;
            function background(s) {
                var p = s && s.rt.getCurrentPage();
                return p ? RT.Color.fromHtml(p.bgColor) : background_os();
            }
            Colors.background = background;
            function foreground_os() {
                return black();
            }
            Colors.foreground_os = foreground_os;
            function background_os() {
                return white();
            }
            Colors.background_os = background_os;
            function is_light_theme(s) {
                return background(s).r > 128;
            }
            Colors.is_light_theme = is_light_theme;
            function from_rgb(red, green, blue) {
                return RT.Color.fromArgbF(1, red, green, blue);
            }
            Colors.from_rgb = from_rgb;
            function from_argb(alpha, red, green, blue) {
                return RT.Color.fromArgbF(alpha, red, green, blue);
            }
            Colors.from_argb = from_argb;
            function pink() {
                return RT.Color.fromHtml("#FFFFCBDB");
            }
            Colors.pink = pink;
            function black() {
                return RT.Color.fromHtml("#FF000000");
            }
            Colors.black = black;
            function blue() {
                return RT.Color.fromHtml("#FF0000FF");
            }
            Colors.blue = blue;
            function brown() {
                return RT.Color.fromHtml("#FFA52A2A");
            }
            Colors.brown = brown;
            function cyan() {
                return RT.Color.fromHtml("#FF00FFFF");
            }
            Colors.cyan = cyan;
            function dark_gray() {
                return RT.Color.fromHtml("#FFA9A9A9");
            }
            Colors.dark_gray = dark_gray;
            function gray() {
                return RT.Color.fromHtml("#FF808080");
            }
            Colors.gray = gray;
            function green() {
                return RT.Color.fromHtml("#FF00FF00");
            }
            Colors.green = green;
            function light_gray() {
                return RT.Color.fromHtml("#FFD3D3D3");
            }
            Colors.light_gray = light_gray;
            function magenta() {
                return RT.Color.fromHtml("#FFFF00FF");
            }
            Colors.magenta = magenta;
            function orange() {
                return RT.Color.fromHtml("#FFFFA500");
            }
            Colors.orange = orange;
            function purple() {
                return RT.Color.fromHtml("#FF800080");
            }
            Colors.purple = purple;
            function red() {
                return RT.Color.fromHtml("#FFFF0000");
            }
            Colors.red = red;
            function transparent() {
                return RT.Color.fromHtml("#00FFFFFF");
            }
            Colors.transparent = transparent;
            function white() {
                return RT.Color.fromHtml("#FFFFFFFF");
            }
            Colors.white = white;
            function yellow() {
                return RT.Color.fromHtml("#FFFFFF00");
            }
            Colors.yellow = yellow;
            function sepia() {
                return RT.Color.fromHtml("#FF704214");
            }
            Colors.sepia = sepia;
            function linear_gradient(c1, c2, alpha) {
                var r1 = RT.RTValue.normalize(alpha);
                var r2 = 1 - r1;
                return RT.Color.fromArgbF(c1.A() * r1 + c2.A() * r2, c1.R() * r1 + c2.R() * r2, c1.G() * r1 + c2.G() * r2, c1.B() * r1 + c2.B() * r2);
            }
            Colors.linear_gradient = linear_gradient;
            function rand() {
                return random();
            }
            Colors.rand = rand;
            function random() {
                return RT.Color.fromArgbF(1.0, TDev.Random.normalized(), TDev.Random.normalized(), TDev.Random.normalized());
            }
            Colors.random = random;
            function wheel(hue) {
                return Colors.from_hsb(hue, 1, 1);
            }
            Colors.wheel = wheel;
            function from_hsb(hue, saturation, brightness) {
                return from_ahsb(1.0, hue, saturation, brightness);
            }
            Colors.from_hsb = from_hsb;
            function from_ahsb(alpha, hue, saturation, brightness) {
                return from_ahsbByte(RT.Color.normalizeToByte(alpha), RT.Color.normalizeToByte(hue), RT.Color.normalizeToByte(saturation), RT.Color.normalizeToByte(brightness));
            }
            Colors.from_ahsb = from_ahsb;
            function from_ahsbByte(alpha, hue, saturation, brightness) {
                var r = brightness;
                var g = brightness;
                var b = brightness;
                if (saturation !== 0) {
                    var max = brightness;
                    var dif = brightness * saturation / 255;
                    var min = brightness - dif;
                    var h = hue * 360 / 255;
                    if (h < 60) {
                        r = max;
                        g = h * dif / 60 + min;
                        b = min;
                    }
                    else if (h < 120) {
                        r = -(h - 120) * dif / 60 + min;
                        g = max;
                        b = min;
                    }
                    else if (h < 180) {
                        r = min;
                        g = max;
                        b = (h - 120) * dif / 60 + min;
                    }
                    else if (h < 240) {
                        r = min;
                        g = -(h - 240) * dif / 60 + min;
                        b = max;
                    }
                    else if (h < 300) {
                        r = (h - 240) * dif / 60 + min;
                        g = min;
                        b = max;
                    }
                    else if (h <= 360) {
                        r = max;
                        g = min;
                        b = -(h - 360) * dif / 60 + min;
                    }
                    else {
                        r = 0;
                        g = 0;
                        b = 0;
                    }
                }
                return RT.Color.fromArgb(alpha, RT.Color.capByte(r), RT.Color.capByte(g), RT.Color.capByte(b));
            }
            Colors.from_ahsbByte = from_ahsbByte;
        })(Colors = RT.Colors || (RT.Colors = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Contact = (function (_super) {
            __extends(Contact, _super);
            function Contact() {
                _super.call(this);
                this._id = undefined;
                this._first_name = undefined;
                this._last_name = undefined;
                this._nick_name = undefined;
                this._middle_name = undefined;
                this._title = undefined;
                this._suffix = undefined;
                this._company = undefined;
                this._job_title = undefined;
                this._office = undefined;
                this._work_address = undefined;
                this._home_address = undefined;
                this._source = undefined;
                this._birthday = undefined;
                this._pictureUrl = undefined;
                this._picture = undefined;
                this._email = undefined;
                this._work_email = undefined;
                this._personal_email = undefined;
                this._phone_number = undefined;
                this._home_phone = undefined;
                this._work_phone = undefined;
                this._mobile_phone = undefined;
                this._web_site = undefined;
            }
            Contact.mkFake = function (firstName, middleName, lastName, email, phoneNumber, pictureUrl) {
                var c = new Contact();
                c._first_name = firstName;
                c._middle_name = middleName;
                c._last_name = lastName;
                c._email = email;
                c._phone_number = phoneNumber;
                c._pictureUrl = TDev.Cloud.getServiceUrl() + '/doc/contacts/' + encodeURIComponent(pictureUrl);
                c._source = "AdventureWorks";
                return c;
            };
            Contact.prototype.clone = function () {
                var c = new Contact();
                c._id = this._id;
                c._first_name = this._first_name;
                c._last_name = this._last_name;
                c._nick_name = this._nick_name;
                c._middle_name = this._middle_name;
                c._title = this._title;
                c._suffix = this._suffix;
                c._company = this._company;
                c._job_title = this._job_title;
                c._office = this._office;
                c._work_address = this._work_address;
                c._home_address = this._home_address;
                c._source = this._source;
                c._birthday = this._birthday;
                c._pictureUrl = this._pictureUrl;
                c._picture = this._picture;
                c._email = this._email;
                c._work_email = this._work_email;
                c._personal_email = this._personal_email;
                c._phone_number = this._phone_number;
                c._home_phone = this._home_phone;
                c._work_phone = this._work_phone;
                c._mobile_phone = this._mobile_phone;
                c._web_site = this._web_site;
                return c;
            };
            Contact.mk = function (nickname, email) {
                if (email === void 0) { email = null; }
                var c = new Contact();
                c._nick_name = nickname;
                c._email = email;
                return c;
            };
            Contact.prototype.toString = function () {
                return this.name();
            };
            Contact.prototype.toFullString = function () {
                var r = this.name();
                if (this._title != null)
                    r += '\ntitle: ' + this._title;
                if (this._company != null)
                    r += '\ncompany: ' + this._company;
                if (this._job_title != null)
                    r += '\njob title: ' + this._job_title;
                if (this._office != null)
                    r += '\noffice: ' + this._office;
                if (this._work_address != null)
                    r += '\nwork address: ' + this._work_address;
                if (this._home_address != null)
                    r += '\nhome address: ' + this._home_address;
                if (this._birthday != null)
                    r += '\nbirthday: ' + this._birthday;
                if (this._email != null)
                    r += '\nemail: ' + this._email;
                if (this._work_email != null)
                    r += '\nwork email: ' + this._work_email;
                if (this._personal_email != null)
                    r += '\npersonal email: ' + this._personal_email;
                if (this._phone_number != null)
                    r += '\nphone number: ' + this._phone_number;
                if (this._home_phone != null)
                    r += '\nhome phone: ' + this._home_phone;
                if (this._work_phone != null)
                    r += '\nwork phone: ' + this._work_phone;
                if (this._mobile_phone != null)
                    r += '\nmobile phone: ' + this._mobile_phone;
                if (this._web_site != null)
                    r += '\nweb site: ' + this._web_site;
                return r;
            };
            Contact.prototype.id = function () {
                return this._id;
            };
            Contact.prototype.set_id = function (id) {
                this._id = id;
            };
            Contact.prototype.name = function () {
                if (this._nick_name)
                    return this._nick_name;
                else
                    return [this._first_name, this._middle_name, this._last_name].filter(function (s) { return !!s; }).join(" ");
            };
            Contact.prototype.first_name = function () {
                return this._first_name || '';
            };
            Contact.prototype.set_first_name = function (first_name) {
                this._first_name = first_name;
            };
            Contact.prototype.last_name = function () {
                return this._last_name;
            };
            Contact.prototype.set_last_name = function (last_name) {
                this._last_name = last_name;
            };
            Contact.prototype.nick_name = function () {
                return this._nick_name;
            };
            Contact.prototype.set_nick_name = function (nick_name) {
                this._nick_name = nick_name;
            };
            Contact.prototype.middle_name = function () {
                return this._middle_name;
            };
            Contact.prototype.set_middle_name = function (middle_name) {
                this._middle_name = middle_name;
            };
            Contact.prototype.title = function () {
                return this._title;
            };
            Contact.prototype.set_title = function (title) {
                this._title = title;
            };
            Contact.prototype.suffix = function () {
                return this._suffix;
            };
            Contact.prototype.set_suffix = function (suffix) {
                this._suffix = suffix;
            };
            Contact.prototype.company = function () {
                return this._company;
            };
            Contact.prototype.set_company = function (company) {
                this._company = company;
            };
            Contact.prototype.job_title = function () {
                return this._title;
            };
            Contact.prototype.set_job_title = function (job_title) {
                this._job_title = job_title;
            };
            Contact.prototype.office = function () {
                return this._office;
            };
            Contact.prototype.set_office = function (office) {
                this._office = office;
            };
            Contact.prototype.work_address = function () {
                return this._work_address;
            };
            Contact.prototype.set_work_address = function (work_address) {
                this._work_address = work_address;
            };
            Contact.prototype.home_address = function () {
                return this._home_address;
            };
            Contact.prototype.set_home_address = function (home_address) {
                this._home_address = home_address;
            };
            Contact.prototype.source = function () {
                return this._source;
            };
            Contact.prototype.set_source = function (source) {
                this._source = source;
            };
            Contact.prototype.birthday = function () {
                return this._birthday;
            };
            Contact.prototype.set_birthday = function (birthday) {
                this._birthday = birthday;
            };
            Contact.prototype.picture = function (r) {
                var _this = this;
                if (!this._picture && this._pictureUrl) {
                    RT.Picture.fromUrl(this._pictureUrl, true).then(function (pic) {
                        _this._picture = pic;
                        r.resumeVal(pic);
                    }).done();
                }
                r.resumeVal(this._picture);
            };
            Contact.prototype.set_picture = function (picture) {
                this._pictureUrl = undefined;
                this._picture = picture;
            };
            Contact.prototype.setPicture_url = function (url) {
                this._pictureUrl = url;
                this._picture = null;
            };
            Contact.prototype.getViewCore = function (s, b) {
                var d = TDev.div("item");
                if (this._picture)
                    d.appendChild(TDev.div("item-image contact-image", this._picture.getViewCore(s, b)));
                else if (this._pictureUrl) {
                    var img = TDev.HTML.mkImg(this._pictureUrl);
                    img.className = "item-image contact-image";
                    d.appendChild(img);
                }
                var dc = TDev.div("item-info");
                d.appendChild(dc);
                var n = this.name();
                if (n)
                    dc.appendChild(TDev.div("item-title", n));
                var t = this.title() || this._email || this._work_email || this._personal_email;
                if (t)
                    dc.appendChild(TDev.div("item-subtitle", t));
                if (this.company() || this.job_title())
                    dc.appendChild(TDev.div("item-description", this.job_title() + ' ' + this.company()));
                var ss = this.source();
                if (ss)
                    dc.appendChild(TDev.div("item-subtle", ss));
                return d;
            };
            Contact.prototype.email = function () {
                return this._email ? RT.Link.mk(this._email, 3 /* email */) : undefined;
            };
            Contact.prototype.set_email = function (email) {
                this._email = email;
            };
            Contact.prototype.work_email = function () {
                return this._work_email ? RT.Link.mk(this._work_email, 3 /* email */) : undefined;
            };
            Contact.prototype.set_work_email = function (work_email) {
                this._work_email = work_email;
            };
            Contact.prototype.personal_email = function () {
                return this._personal_email ? RT.Link.mk(this._personal_email, 3 /* email */) : undefined;
            };
            Contact.prototype.set_personal_email = function (personal_email) {
                this._personal_email = personal_email;
            };
            Contact.prototype.phone_number = function () {
                return this._phone_number ? RT.Link.mk(this._phone_number, 4 /* phoneNumber */) : undefined;
            };
            Contact.prototype.set_phone_number = function (phone_number) {
                this._phone_number = phone_number;
            };
            Contact.prototype.home_phone = function () {
                return this._home_phone ? RT.Link.mk(this._home_phone, 4 /* phoneNumber */) : undefined;
            };
            Contact.prototype.set_home_phone = function (home_phone) {
                this._home_phone = home_phone;
            };
            Contact.prototype.work_phone = function () {
                return this._work_phone ? RT.Link.mk(this._work_phone, 4 /* phoneNumber */) : undefined;
            };
            Contact.prototype.set_work_phone = function (work_phone) {
                this._work_phone = work_phone;
            };
            Contact.prototype.mobile_phone = function () {
                return this._mobile_phone ? RT.Link.mk(this._mobile_phone, 4 /* phoneNumber */) : undefined;
            };
            Contact.prototype.set_mobile_phone = function (mobile_phone) {
                this._mobile_phone = mobile_phone;
            };
            Contact.prototype.web_site = function () {
                return this._web_site ? RT.Link.mk(this._web_site, 5 /* hyperlink */) : undefined;
            };
            Contact.prototype.set_web_site = function (web_site) {
                this._web_site = web_site;
            };
            Contact.prototype.set_nickname = function (value) {
                this.set_nickname(value);
            };
            Contact.prototype.set_website = function (value) {
                this.set_web_site(value);
            };
            Contact.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Contact;
        })(RT.RTValue);
        RT.Contact = Contact;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Contract;
    (function (Contract) {
        function Requires(e) {
            if (!e) {
                throw new Error("Contract Requires failed");
            }
        }
        Contract.Requires = Requires;
    })(Contract = TDev.Contract || (TDev.Contract = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var DateTime = (function (_super) {
            __extends(DateTime, _super);
            function DateTime() {
                _super.call(this);
            }
            DateTime.mkFull = function (year, month, day, hour, minute, second) {
                var r = new DateTime();
                r.d = new Date(year, month - 1, day, hour, minute, Math.floor(second));
                var rem = second - Math.floor(second);
                if (rem) {
                    r.d = new Date(r.d.getTime() + rem * 1000);
                }
                return r;
            };
            DateTime.mkMs = function (ms) {
                var r = new DateTime();
                r.d = new Date(ms);
                return r;
            };
            DateTime.mk = function (d) {
                var r = new DateTime();
                r.d = new Date(d.getTime());
                return r;
            };
            DateTime.parse = function (s) {
                if (!s)
                    return undefined;
                var d = Date.parse(s);
                if (!d)
                    return undefined;
                return DateTime.mkMs(d);
            };
            DateTime.prototype.isSerializable = function () {
                return true;
            };
            DateTime.prototype.toJsonKey = function () {
                return this.d.getTime();
            };
            DateTime.prototype.to_json = function () {
                return RT.JsonObject.wrap(this.d.getTime());
            };
            DateTime.prototype.keyCompareTo = function (o) {
                var other = o;
                return this.d.getTime() - other.d.getTime();
            };
            DateTime.prototype.isDefaultValue = function () {
                return this.equals(DateTime.defaultValue);
            };
            DateTime.prototype.add_days = function (days) {
                return this.add_seconds(days * 24 * 3600);
            };
            DateTime.prototype.add_hours = function (hours) {
                return this.add_seconds(hours * 3600);
            };
            DateTime.prototype.add_minutes = function (minutes) {
                return this.add_seconds(minutes * 60);
            };
            DateTime.prototype.add_seconds = function (seconds) {
                return DateTime.mkMs(this.d.getTime() + seconds * 1000);
            };
            DateTime.prototype.add_milliseconds = function (milliseconds) {
                return DateTime.mkMs(this.d.getTime() + milliseconds);
            };
            DateTime.prototype.subtract = function (value) {
                return (this.d.getTime() - value.d.getTime()) / 1000;
            };
            DateTime.prototype.equals = function (other) {
                return this.d.getTime() == other.d.getTime();
            };
            DateTime.prototype.not_equals = function (other) {
                return !this.equals(other);
            };
            DateTime.prototype.less_or_equals = function (other) {
                return this.d.getTime() <= other.d.getTime();
            };
            DateTime.prototype.less = function (other) {
                return this.d.getTime() < other.d.getTime();
            };
            DateTime.prototype.greater_or_equal = function (other) {
                return this.d.getTime() >= other.d.getTime();
            };
            DateTime.prototype.greater = function (other) {
                return this.d.getTime() > other.d.getTime();
            };
            DateTime.prototype.to_string = function () {
                return this.d.toString();
            };
            DateTime.prototype.toString = function () {
                return this.d.toUTCString();
            };
            DateTime.prototype.exportJson = function (ctx) {
                return this.d.toJSON();
            };
            DateTime.mkFromJson = function (ctx, json) {
                if (typeof (json) === "string") {
                    return DateTime.mk(new Date(json));
                }
                else
                    return undefined;
            };
            DateTime.prototype.clone = function () {
                return DateTime.mk(this.d);
            };
            DateTime.prototype.date = function () {
                var r = this.clone();
                r.d.setHours(0, 0, 0, 0);
                return r;
            };
            DateTime.prototype.milliseconds_since_epoch = function () {
                return this.d.getTime();
            };
            DateTime.prototype.from_now = function () {
                return TDev.Util.timeSince(this.d.getTime() / 1000);
            };
            DateTime.prototype.day = function () {
                return this.d.getDate();
            };
            DateTime.prototype.hour = function () {
                return this.d.getHours();
            };
            DateTime.prototype.millisecond = function () {
                return this.d.getMilliseconds();
            };
            DateTime.prototype.minute = function () {
                return this.d.getMinutes();
            };
            DateTime.prototype.month = function () {
                return this.d.getMonth() + 1;
            };
            DateTime.prototype.second = function () {
                return this.d.getSeconds();
            };
            DateTime.prototype.year = function () {
                return this.d.getFullYear();
            };
            DateTime.prototype.week_day = function () {
                return this.d.getDay();
            };
            DateTime.prototype.year_day = function () {
                var first = new Date(this.d.getTime());
                first.setMonth(0, 1);
                return Math.round((this.d.getTime() - first.getTime()) / (24 * 3600 * 1000)) + 1;
            };
            DateTime.prototype.add_years = function (years) {
                return undefined;
            };
            DateTime.prototype.add_months = function (months) {
                return undefined;
            };
            DateTime.prototype.to_universal_time = function () {
                return DateTime.mk(new Date(this.d.getUTCFullYear(), this.d.getUTCMonth(), this.d.getUTCDate(), this.d.getUTCHours(), this.d.getUTCMinutes(), this.d.getUTCSeconds()));
            };
            DateTime.prototype.to_local_time = function () {
                return undefined;
            };
            DateTime.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            DateTime.prototype.debuggerDisplay = function (clickHandler) {
                var tempSpan;
                tempSpan = TDev.span(null, this.toString()).withClick(clickHandler);
                return tempSpan;
            };
            DateTime.defaultValue = DateTime.mkMs(-62135596800000);
            return DateTime;
        })(RT.RTValue);
        RT.DateTime = DateTime;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Device = (function (_super) {
            __extends(Device, _super);
            function Device() {
                _super.call(this);
                this._name = undefined;
            }
            Device.prototype.name = function () {
                return this._name;
            };
            Device.prototype.set_name = function (name) {
                this._name = name;
            };
            Device.prototype.manufacturer = function () {
                return undefined;
            };
            Device.prototype.browse = function () {
            };
            Device.prototype.post_to_wall = function () {
            };
            Device.prototype.is_connected = function () {
                return undefined;
            };
            return Device;
        })(RT.RTValue);
        RT.Device = Device;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var DeviceMotion;
        (function (DeviceMotion) {
            var _raw = undefined;
            var _rawSign = 0;
            var _low = undefined;
            var _optimal = undefined;
            var _rotationRate = undefined;
            var _runtime = undefined;
            var _deviceStableCount = 0;
            var _maximumStabilityTiltDeltaAngle = 0.5 * Math.PI / 180.0;
            var _maximumStabilityDeltaOffset = Math.sin(_maximumStabilityTiltDeltaAngle);
            var _samplesCount = 20;
            function initializeData(r) {
                _raw = RT.Vector3.mk(0, 1, 0);
                _rawSign = 0;
                _low = RT.Vector3.mk(0, 1, 0);
                _optimal = RT.Vector3.mk(0, 1, 0);
                _rotationRate = RT.Vector3.mk(0, 0, 0);
                _deviceStableCount = 0;
                _runtime = r;
            }
            function clearData() {
                _raw = undefined;
                _rawSign = 0;
                _low = undefined;
                _optimal = undefined;
                _rotationRate = undefined;
                _runtime = undefined;
                _deviceStableCount = 0;
            }
            function lowPass(old, current) {
                return old + (current - old) * 0.1;
            }
            function fastLowPass(old, current) {
                if (Math.abs(old - current) < 0.05) {
                    return lowPass(old, current);
                }
                else {
                    return current;
                }
            }
            function isDeviceStable(r) {
                DeviceMotion.start(r.rt);
                r.resumeVal(_deviceStableCount >= _samplesCount);
            }
            DeviceMotion.isDeviceStable = isDeviceStable;
            function setRaw(v, orientation) {
                if (orientation === undefined)
                    orientation = window.orientation;
                if (orientation == 90) {
                    v = RT.Vector3.mk(v.y(), -v.x(), v.z());
                }
                else if (orientation == -90) {
                    v = RT.Vector3.mk(-v.y(), v.x(), v.z());
                }
                else if (orientation == 180) {
                    v = RT.Vector3.mk(-v.x(), -v.y(), v.z());
                }
                _raw = v;
                if (_low) {
                    _low = RT.Vector3.mk(lowPass(_low.x(), _raw.x()), lowPass(_low.y(), _raw.y()), lowPass(_low.z(), _raw.z()));
                }
                else {
                    _low = _raw;
                }
                if (_optimal) {
                    _optimal = RT.Vector3.mk(fastLowPass(_optimal.x(), _raw.x()), fastLowPass(_optimal.y(), _raw.y()), fastLowPass(_optimal.z(), _raw.z()));
                }
                else {
                    _optimal = _raw;
                }
                if (_low && _optimal) {
                    var dv = _low.subtract(_optimal);
                    if (Math.abs(dv.x()) > _maximumStabilityDeltaOffset || Math.abs(dv.y()) > _maximumStabilityDeltaOffset || Math.abs(dv.z()) > _maximumStabilityDeltaOffset)
                        _deviceStableCount = 0;
                    else {
                        if (_deviceStableCount < _samplesCount)
                            ++_deviceStableCount;
                    }
                }
                if (RT.ShakeDetector.accelerationChanged(_raw))
                    RT.Senses.raiseShakeEvent();
            }
            DeviceMotion.setRaw = setRaw;
            function reading(ev) {
                var acc = ev.accelerationIncludingGravity;
                if (acc) {
                    if (!_rawSign)
                        _rawSign = acc.z < 0 ? 1 : -1;
                    var g = 9.81 * _rawSign;
                    var ax = acc.x / g;
                    var ay = -acc.y / g;
                    var az = acc.z / g;
                    setRaw(RT.Vector3.mk(ax, ay, az));
                }
                var rot = ev.rotationRate;
                if (rot) {
                    _rotationRate = RT.Vector3.mk(rot.x, rot.y, rot.z);
                }
                else {
                    _rotationRate = undefined;
                }
            }
            function orientationReading(ev) {
                var beta = RT.Math_.deg_to_rad(ev.beta || 0);
                var gamma = RT.Math_.deg_to_rad(ev.gamma || 0);
                var cosBeta = Math.cos(beta);
                var cosGamma = Math.cos(gamma);
                var v = RT.Vector3.mk(gamma * 1.5, beta * 1.5, -cosBeta * cosGamma * 1.25);
                setRaw(v);
            }
            function mouseReading(ev) {
                var x = (ev.pageX - TDev.SizeMgr.windowWidth / 2) / TDev.SizeMgr.windowWidth;
                var y = (ev.pageY - TDev.SizeMgr.windowHeight / 2) / TDev.SizeMgr.windowHeight;
                x *= 2;
                y *= 2;
                var z = Math.sqrt(Math.max(0, 1 - x * x - y * y));
                if (_runtime)
                    _runtime.host.setTransform3d(TDev.Util.fmt("perspective(30em) rotateX({0}deg) rotateY({1}deg)", -y, x), "50% 50% 50%", "30em");
                setRaw(RT.Vector3.mk(x, y, z));
            }
            DeviceMotion.isSupported = function () {
                return DeviceMotion.isMotionSupported() || RT.DeviceOrientation.isOrientationSupported() || TDev.Browser.assumeMouse;
            };
            DeviceMotion.isMotionSupported = function () {
                return TDev.Browser.deviceMotion;
            };
            DeviceMotion.isGyroscopeSupported = function () {
                return TDev.Browser.deviceMotion;
            };
            function rt_start(r) {
                if (r.eventEnabled("shake"))
                    DeviceMotion.start(r);
            }
            DeviceMotion.rt_start = rt_start;
            DeviceMotion.addReadingEvent = function () {
                if (DeviceMotion.isMotionSupported())
                    window.addEventListener('devicemotion', reading, false);
                else if (RT.DeviceOrientation.isOrientationSupported())
                    window.addEventListener('deviceorientation', orientationReading, false);
                else if (TDev.Browser.assumeMouse)
                    window.addEventListener('mousemove', mouseReading, false);
            };
            DeviceMotion.removeReadingEvent = function () {
                window.removeEventListener('devicemotion', reading, false);
                window.removeEventListener('deviceorientation', orientationReading, false);
                window.removeEventListener('mousemove', mouseReading, false);
            };
            DeviceMotion.start = function (r) {
                if (r.isHeadless())
                    return;
                if (!_runtime) {
                    initializeData(r);
                    if (DeviceMotion.isSupported())
                        DeviceMotion.addReadingEvent();
                }
            };
            DeviceMotion.stop = function (r) {
                if (r.isHeadless())
                    return;
                DeviceMotion.removeReadingEvent();
                clearData();
            };
            function accelerationStable(r) {
                DeviceMotion.start(r.rt);
                r.resumeVal(_raw);
            }
            DeviceMotion.accelerationStable = accelerationStable;
            function accelerationSmooth(r) {
                DeviceMotion.start(r.rt);
                r.resumeVal(_low);
            }
            DeviceMotion.accelerationSmooth = accelerationSmooth;
            function accelerationQuick(r) {
                DeviceMotion.start(r.rt);
                r.resumeVal(_optimal);
            }
            DeviceMotion.accelerationQuick = accelerationQuick;
            function acceleration(r) {
                DeviceMotion.start(r.rt);
                return _optimal;
            }
            DeviceMotion.acceleration = acceleration;
            function rotationRate(r) {
                DeviceMotion.start(r.rt);
                r.resumeVal(_rotationRate);
            }
            DeviceMotion.rotationRate = rotationRate;
        })(DeviceMotion = RT.DeviceMotion || (RT.DeviceMotion = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        (function (DeviceFaceOrientation) {
            DeviceFaceOrientation[DeviceFaceOrientation["Up"] = 0] = "Up";
            DeviceFaceOrientation[DeviceFaceOrientation["Down"] = 1] = "Down";
        })(RT.DeviceFaceOrientation || (RT.DeviceFaceOrientation = {}));
        var DeviceFaceOrientation = RT.DeviceFaceOrientation;
        (function (DeviceLandscapeOrientation) {
            DeviceLandscapeOrientation[DeviceLandscapeOrientation["Portrait"] = 0] = "Portrait";
            DeviceLandscapeOrientation[DeviceLandscapeOrientation["LandscapeLeft"] = 1] = "LandscapeLeft";
            DeviceLandscapeOrientation[DeviceLandscapeOrientation["LandscapeRight"] = 2] = "LandscapeRight";
        })(RT.DeviceLandscapeOrientation || (RT.DeviceLandscapeOrientation = {}));
        var DeviceLandscapeOrientation = RT.DeviceLandscapeOrientation;
        var DeviceOrientation;
        (function (DeviceOrientation) {
            var _alpha = undefined;
            var _beta = undefined;
            var _gamma = undefined;
            var _heading = 0;
            var _face_orientation = undefined;
            var _landscape_orientation = undefined;
            var _runtime = undefined;
            function clearData(clearRuntime) {
                if (clearRuntime === void 0) { clearRuntime = true; }
                TDev.Util.log('deviceorientation: clear data');
                _alpha = undefined;
                _beta = undefined;
                _gamma = undefined;
                _heading = 0;
                _face_orientation = undefined;
                _landscape_orientation = undefined;
                if (clearRuntime)
                    _runtime = undefined;
            }
            function computeHeading() {
                if (Math.abs(_gamma) < 45 && 45 < Math.abs(_beta) && Math.abs(_beta) < 135) {
                    var sinAlpha = Math.sin(_alpha);
                    var cosAlpha = Math.cos(_alpha);
                    var sinBeta = Math.sin(_beta);
                    var sinGamma = Math.sin(_gamma);
                    var cosGamma = Math.cos(_gamma);
                    _heading = Math.atan((-cosAlpha * sinGamma - sinAlpha * sinBeta * cosGamma) / (-sinAlpha * sinGamma + cosGamma * sinBeta * cosGamma));
                }
                else {
                    _heading = 360 - _alpha;
                }
            }
            DeviceOrientation.computeHeading = computeHeading;
            function orientation(r) {
                start(r.rt);
                if (_alpha && _beta && _gamma)
                    r.resumeVal(RT.Vector3.mk(_alpha, _beta, _gamma));
                else
                    r.resumeVal(RT.Vector3.mk(0, 0, 0));
            }
            DeviceOrientation.orientation = orientation;
            function heading(r) {
                start(r.rt);
                r.resumeVal(_heading);
            }
            DeviceOrientation.heading = heading;
            function detectLandscapeOrientation() {
                var threshold = 30;
                if (_beta > 90 - threshold && _beta < 90 + threshold) {
                    if (_landscape_orientation != 0 /* Portrait */) {
                        TDev.Util.log('phone portrait');
                        _landscape_orientation = 0 /* Portrait */;
                        RT.Senses.raisePhonePortrait();
                    }
                }
                else if ((_beta < threshold || _beta > 360 - threshold) && _gamma > 270 - threshold && _gamma < 270 + threshold) {
                    if (_landscape_orientation != 1 /* LandscapeLeft */) {
                        TDev.Util.log('phone landscape left');
                        _landscape_orientation = 1 /* LandscapeLeft */;
                        RT.Senses.raisePhoneLandscapeLeft();
                    }
                }
                else if ((_beta < threshold || _beta > 360 - threshold) && _gamma > 90 - threshold && _gamma < 90 + threshold) {
                    if (_landscape_orientation != 2 /* LandscapeRight */) {
                        TDev.Util.log('phone landscape right');
                        _landscape_orientation = 2 /* LandscapeRight */;
                        RT.Senses.raisePhoneLandscapeRight();
                    }
                }
                else {
                    _landscape_orientation = undefined;
                }
            }
            function detectFaceOrientation() {
                var threshold = 30;
                if ((_beta < threshold || _beta > 360 - threshold) && (_gamma < threshold || _gamma > 360 - threshold)) {
                    if (_face_orientation != 0 /* Up */) {
                        TDev.Util.log('phone face up');
                        _face_orientation = 0 /* Up */;
                        RT.Senses.raisePhoneFaceUp();
                    }
                }
                else if (((_gamma > 180 - threshold && _gamma < 180 + threshold && (_beta < threshold || _beta > 360 - threshold)) || (_beta > 180 - threshold && _beta < 180 + threshold && (_gamma < threshold || _gamma > 360 - threshold)))) {
                    if (_face_orientation != 1 /* Down */) {
                        TDev.Util.log('phone face down');
                        _face_orientation = 1 /* Down */;
                        RT.Senses.raisePhoneFaceDown();
                    }
                }
                else {
                    _face_orientation = undefined;
                }
            }
            function setOrientation(alpha, beta, gamma) {
                _alpha = alpha;
                if (_alpha && _alpha < 0)
                    _alpha += 360.0;
                _beta = beta;
                if (_beta && _beta < 0)
                    _beta += 360.0;
                _gamma = gamma;
                if (_gamma && _gamma < 0)
                    _gamma += 360.0;
                if (!_alpha || !_beta || !_gamma) {
                    clearData(false);
                    return;
                }
                detectLandscapeOrientation();
                detectFaceOrientation();
            }
            DeviceOrientation.setOrientation = setOrientation;
            function setHeading(heading) {
                _heading = heading;
            }
            DeviceOrientation.setHeading = setHeading;
            function reading(ev) {
                TDev.Util.log('deviceorientation: reading...');
                setOrientation(ev.alpha, ev.beta, ev.gamma);
                setHeading(ev.compassHeading || ev.webkitCompassHeading || undefined);
                if (!_heading && ev.absolute) {
                    computeHeading();
                }
            }
            DeviceOrientation.isOrientationSupported = function () {
                return TDev.Browser.deviceOrientation;
            };
            DeviceOrientation.isHeadingSupported = function () {
                return TDev.Browser.deviceHeading;
            };
            function rt_start(r) {
                if (r.eventEnabled("phone face up") || r.eventEnabled("phone face down") || r.eventEnabled("phone portrait") || r.eventEnabled("phone landscape left") || r.eventEnabled("phone landscape right")) {
                    start(r);
                }
            }
            DeviceOrientation.rt_start = rt_start;
            function rt_stop(rt) {
                stop(rt);
            }
            DeviceOrientation.rt_stop = rt_stop;
            DeviceOrientation.addOrientationReadingEvent = function () {
                TDev.Util.log('deviceorientation: attaching');
                window.addEventListener('deviceorientation', reading, false);
            };
            DeviceOrientation.removeOrientationReadingEvent = function () {
                window.removeEventListener('deviceorientation', reading, false);
            };
            DeviceOrientation.addHeadingReadingEvent = function () {
                TDev.Util.log('compassneedscalibration: attaching');
                window.addEventListener("compassneedscalibration", calibrateCompass, false);
            };
            DeviceOrientation.removeHeadingReadingEvent = function () {
                window.removeEventListener("compassneedscalibration", calibrateCompass, false);
            };
            function calibrateCompass(ev) {
                TDev.HTML.showNotificationText("Your compass needs calibrating! Wave your device in a figure-eight motion.");
            }
            function start(r) {
                if (r.isHeadless())
                    return;
                if (DeviceOrientation.isOrientationSupported() || DeviceOrientation.isHeadingSupported()) {
                    if (!_runtime) {
                        _runtime = r;
                        if (DeviceOrientation.isOrientationSupported())
                            DeviceOrientation.addOrientationReadingEvent();
                        if (DeviceOrientation.isHeadingSupported())
                            DeviceOrientation.addHeadingReadingEvent();
                    }
                }
                else {
                    TDev.Util.log('deviceorientation: not supported');
                    clearData();
                }
            }
            DeviceOrientation.start = start;
            function stop(r) {
                if (r.isHeadless())
                    return;
                TDev.Util.log('deviceorientation: stop');
                DeviceOrientation.removeOrientationReadingEvent();
                DeviceOrientation.removeHeadingReadingEvent();
                clearData(true);
            }
            DeviceOrientation.stop = stop;
        })(DeviceOrientation = RT.DeviceOrientation || (RT.DeviceOrientation = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Enumerator = (function (_super) {
            __extends(Enumerator, _super);
            function Enumerator() {
                _super.call(this);
            }
            Enumerator.prototype.current = function () {
            };
            Enumerator.prototype.move_next = function () {
                return undefined;
            };
            return Enumerator;
        })(RT.RTValue);
        RT.Enumerator = Enumerator;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var GeoLocation;
        (function (GeoLocation) {
            function isSupported() {
                return !!window.navigator.geolocation;
            }
            GeoLocation.isSupported = isSupported;
            function getCurrentPosition(accurate, r) {
                if (isSupported()) {
                    window.navigator.geolocation.getCurrentPosition(function (position) {
                        var coords = position.coords;
                        var loc = RT.Location_.mk(coords.latitude, coords.longitude, coords.altitude, coords.accuracy, coords.altitudeAccuracy, coords.heading, coords.speed);
                        r.resumeVal(loc);
                    }, function (error) {
                        r.resumeVal(undefined);
                    }, { enableHighAccuracy: accurate });
                }
                else {
                    r.resumeVal(undefined);
                }
            }
            function currentLocation(r) {
                getCurrentPosition(false, r);
            }
            GeoLocation.currentLocation = currentLocation;
            function currentLocationAccurate(r) {
                getCurrentPosition(true, r);
            }
            GeoLocation.currentLocationAccurate = currentLocationAccurate;
        })(GeoLocation = RT.GeoLocation || (RT.GeoLocation = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Home;
        (function (Home) {
            function printers() {
                return undefined;
            }
            Home.printers = printers;
            function players() {
                return undefined;
            }
            Home.players = players;
            function servers() {
                return undefined;
            }
            Home.servers = servers;
            function choose_printer(r) {
            }
            Home.choose_printer = choose_printer;
            function choose_player(r) {
            }
            Home.choose_player = choose_player;
            function choose_server(r) {
            }
            Home.choose_server = choose_server;
        })(Home = RT.Home || (RT.Home = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Invalid;
        (function (Invalid) {
            function number() {
                return undefined;
            }
            Invalid.number = number;
            function boolean() {
                return undefined;
            }
            Invalid.boolean = boolean;
            function string() {
                return undefined;
            }
            Invalid.string = string;
            function string_collection() {
                return undefined;
            }
            Invalid.string_collection = string_collection;
            function datetime() {
                return undefined;
            }
            Invalid.datetime = datetime;
            function color() {
                return undefined;
            }
            Invalid.color = color;
            function picture() {
                return undefined;
            }
            Invalid.picture = picture;
            function pictures() {
                return undefined;
            }
            Invalid.pictures = pictures;
            function picture_album() {
                return undefined;
            }
            Invalid.picture_album = picture_album;
            function picture_albums() {
                return undefined;
            }
            Invalid.picture_albums = picture_albums;
            function song() {
                return undefined;
            }
            Invalid.song = song;
            function songs() {
                return undefined;
            }
            Invalid.songs = songs;
            function song_album() {
                return undefined;
            }
            Invalid.song_album = song_album;
            function song_albums() {
                return undefined;
            }
            Invalid.song_albums = song_albums;
            function playlist() {
                return undefined;
            }
            Invalid.playlist = playlist;
            function playlists() {
                return undefined;
            }
            Invalid.playlists = playlists;
            function location() {
                return undefined;
            }
            Invalid.location = location;
            function location_collection() {
                return undefined;
            }
            Invalid.location_collection = location_collection;
            function map() {
                return undefined;
            }
            Invalid.map = map;
            function sound() {
                return undefined;
            }
            Invalid.sound = sound;
            function json_object() {
                return undefined;
            }
            Invalid.json_object = json_object;
            function link() {
                return undefined;
            }
            Invalid.link = link;
            function link_collection() {
                return undefined;
            }
            Invalid.link_collection = link_collection;
            function vector3() {
                return undefined;
            }
            Invalid.vector3 = vector3;
            function number_map() {
                return undefined;
            }
            Invalid.number_map = number_map;
            function string_map() {
                return undefined;
            }
            Invalid.string_map = string_map;
            function message() {
                return undefined;
            }
            Invalid.message = message;
            function message_collection() {
                return undefined;
            }
            Invalid.message_collection = message_collection;
            function board() {
                return undefined;
            }
            Invalid.board = board;
            function sprite() {
                return undefined;
            }
            Invalid.sprite = sprite;
            function sprite_animation() {
                return undefined;
            }
            Invalid.sprite_animation = sprite_animation;
            function sprite_set() {
                return undefined;
            }
            Invalid.sprite_set = sprite_set;
            function tile() {
                return undefined;
            }
            Invalid.tile = tile;
            function xml_object() {
                return undefined;
            }
            Invalid.xml_object = xml_object;
            function device() {
                return undefined;
            }
            Invalid.device = device;
            function device_collection() {
                return undefined;
            }
            Invalid.device_collection = device_collection;
            function printer() {
                return undefined;
            }
            Invalid.printer = printer;
            function printer_collection() {
                return undefined;
            }
            Invalid.printer_collection = printer_collection;
            function media_player() {
                return undefined;
            }
            Invalid.media_player = media_player;
            function media_player_collection() {
                return undefined;
            }
            Invalid.media_player_collection = media_player_collection;
            function media_server() {
                return undefined;
            }
            Invalid.media_server = media_server;
            function media_server_collection() {
                return undefined;
            }
            Invalid.media_server_collection = media_server_collection;
            function media_link() {
                return undefined;
            }
            Invalid.media_link = media_link;
            function media_link_collection() {
                return undefined;
            }
            Invalid.media_link_collection = media_link_collection;
            function place() {
                return undefined;
            }
            Invalid.place = place;
            function place_collection() {
                return undefined;
            }
            Invalid.place_collection = place_collection;
            function textbox() {
                return undefined;
            }
            Invalid.textbox = textbox;
            function contact() {
                return undefined;
            }
            Invalid.contact = contact;
            function contact_collection() {
                return undefined;
            }
            Invalid.contact_collection = contact_collection;
            function appointment() {
                return undefined;
            }
            Invalid.appointment = appointment;
            function appointment_collection() {
                return undefined;
            }
            Invalid.appointment_collection = appointment_collection;
            function motion() {
                return undefined;
            }
            Invalid.motion = motion;
            function camera() {
                return undefined;
            }
            Invalid.camera = camera;
            function web_request() {
                return undefined;
            }
            Invalid.web_request = web_request;
            function web_response() {
                return undefined;
            }
            Invalid.web_response = web_response;
            function number_collection() {
                return undefined;
            }
            Invalid.number_collection = number_collection;
            function page() {
                return undefined;
            }
            Invalid.page = page;
            function page_button() {
                return undefined;
            }
            Invalid.page_button = page_button;
            function page_collection() {
                return undefined;
            }
            Invalid.page_collection = page_collection;
            function box_flow() {
                return undefined;
            }
            Invalid.box_flow = box_flow;
            function matrix() {
                return undefined;
            }
            Invalid.matrix = matrix;
            function action() {
                return undefined;
            }
            Invalid.action = action;
            function text_action() {
                return undefined;
            }
            Invalid.text_action = text_action;
            function position_action() {
                return undefined;
            }
            Invalid.position_action = position_action;
            function vector_action() {
                return undefined;
            }
            Invalid.vector_action = vector_action;
            function webresponse_action() {
                return undefined;
            }
            Invalid.webresponse_action = webresponse_action;
            function sprite_action() {
                return undefined;
            }
            Invalid.sprite_action = sprite_action;
            function sprite_set_action() {
                return undefined;
            }
            Invalid.sprite_set_action = sprite_set_action;
            function json_builder() {
                return undefined;
            }
            Invalid.json_builder = json_builder;
            function message_collection_action() {
                return undefined;
            }
            Invalid.message_collection_action = message_collection_action;
            function oauth_response() {
                return undefined;
            }
            Invalid.oauth_response = oauth_response;
            function form_builder() {
                return undefined;
            }
            Invalid.form_builder = form_builder;
            function bluetooth_device() {
                return undefined;
            }
            Invalid.bluetooth_device = bluetooth_device;
            function user() {
                return undefined;
            }
            Invalid.user = user;
            function gamepad() {
                return undefined;
            }
            Invalid.gamepad = gamepad;
        })(Invalid = RT.Invalid || (RT.Invalid = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var JsonObject = (function (_super) {
            __extends(JsonObject, _super);
            function JsonObject() {
                _super.call(this);
                this._item = undefined;
            }
            JsonObject.mk = function (s, log) {
                return RT.JsonParser.parse(s, log);
            };
            JsonObject.wrap = function (json) {
                if (json === undefined)
                    return undefined;
                var js = new JsonObject();
                js._item = json;
                return js;
            };
            JsonObject.prototype.exportJson = function (ctx) {
                return this._item;
            };
            JsonObject.prototype.importJson = function (ctx, json) {
                TDev.Util.oops("should not call immutable instance for importing");
                return undefined;
            };
            JsonObject.mkFromJson = function (ctx, json) {
                if (json === undefined)
                    return undefined;
                var copy = JSON.parse(JSON.stringify(json));
                return JsonObject.wrap(copy);
            };
            JsonObject.prototype.getShortStringRepresentation = function () {
                return JSON.stringify(this._item, null, 2);
            };
            JsonObject.prototype.clone = function () {
                return JsonObject.wrap(JSON.parse(JSON.stringify(this._item)));
            };
            JsonObject.prototype.value = function () {
                return this._item;
            };
            JsonObject.prototype.count = function () {
                return Array.isArray(this._item) ? this._item.length : undefined;
            };
            JsonObject.prototype.at = function (index) {
                return Array.isArray(this._item) ? JsonObject.wrap(this._item[Math.floor(index)]) : undefined;
            };
            JsonObject.prototype.boolean = function (key) {
                if (this._item === null)
                    return undefined;
                var v = this._item[key];
                if (typeof v === 'boolean')
                    return v;
                if (typeof v === 'string')
                    return /^true$/i.test(v) ? true : false;
                if (typeof v === 'number')
                    return v == 0 ? false : true;
                else
                    return !!v;
            };
            JsonObject.prototype.contains_key = function (key) {
                var v = this._item;
                return v !== null && typeof v === 'object' && v.hasOwnProperty(key);
            };
            JsonObject.prototype.time = function (key) {
                if (this._item !== null) {
                    var v = this._item[key];
                    if (typeof v === 'string')
                        return RT.DateTime.mkMs(Date.parse(v));
                    if (typeof v === 'number')
                        return RT.DateTime.mkMs(v);
                }
                return undefined;
            };
            JsonObject.prototype.field = function (key) {
                var v = this._item;
                return v === null ? undefined : JsonObject.wrap(v[key]);
            };
            JsonObject.prototype.keys = function () {
                var v = this._item;
                return RT.Collection.mkStrings(this.kind() === "object" ? Object.keys(v) : []);
            };
            JsonObject.prototype.kind = function () {
                var result = 'array';
                if (this._item === null)
                    result = "null";
                else if (Array.isArray(this._item)) {
                }
                else if (typeof this._item === 'string')
                    result = 'string';
                else if (typeof this._item === 'number')
                    result = 'number';
                else if (typeof this._item === 'boolean')
                    result = 'boolean';
                else if (typeof this._item === 'object')
                    result = 'object';
                return result;
            };
            JsonObject.prototype.number = function (key) {
                if (this._item !== null) {
                    var v = this._item[key];
                    if (typeof v === 'number')
                        return v;
                    if (typeof v === 'string')
                        return parseFloat(v);
                    if (typeof v === 'boolean')
                        return v ? 1 : 0;
                }
                return undefined;
            };
            JsonObject.prototype.string = function (key) {
                if (this._item !== null) {
                    var v = this._item[key];
                    if (typeof v === 'string')
                        return v;
                    if (typeof v === 'number')
                        return v.toString();
                    if (typeof v === 'boolean')
                        return v ? 'true' : 'false';
                }
                return undefined;
            };
            JsonObject.prototype.post_to_wall = function (s) {
                s.rt.postBoxedText(JSON.stringify(this._item, null, 2), s.pc);
            };
            JsonObject.prototype.format = function (spaces) {
                return JSON.stringify(this._item, null, spaces);
            };
            JsonObject.prototype.to_boolean = function () {
                if (typeof this._item === 'boolean')
                    return this._item;
                if (typeof this._item === 'string')
                    return /^true$/i.test(this._item) ? true : false;
                if (typeof this._item === 'number')
                    return this._item == 0 ? false : true;
                return undefined;
            };
            JsonObject.prototype.to_number = function () {
                if (typeof this._item === 'number')
                    return this._item;
                if (typeof this._item === 'string')
                    return parseFloat(this._item);
                if (typeof this._item === 'boolean')
                    return this._item ? 1 : 0;
                return undefined;
            };
            JsonObject.prototype.to_string = function () {
                if (typeof this._item === 'string')
                    return this._item;
                if (typeof this._item === 'number')
                    return this._item.toString();
                if (typeof this._item === 'boolean')
                    return this._item ? 'true' : 'false';
                return undefined;
            };
            JsonObject.prototype.to_time = function () {
                if (typeof this._item === 'string')
                    return RT.DateTime.mkMs(Date.parse(this._item));
                if (typeof this._item === 'number')
                    return RT.DateTime.mkMs(this._item);
                return undefined;
            };
            JsonObject.prototype.to_collection = function () {
                if (Array.isArray(this._item))
                    return RT.Collection.fromArray(this._item.map(function (e) { return JsonObject.wrap(e); }), JsonObject);
                else
                    return undefined;
            };
            JsonObject.prototype.serialize = function () {
                return JSON.stringify(this._item);
            };
            JsonObject.prototype.to_json_builder = function () {
                return RT.JsonBuilder.wrap(JSON.parse(JSON.stringify(this._item)));
            };
            JsonObject.prototype.toString = function () {
                return JSON.stringify(this._item);
            };
            JsonObject.prototype.debuggerDisplay = function (clickHandler) {
                var _this = this;
                var c = this._item;
                if (typeof c === 'boolean' || typeof c === 'string' || typeof c === 'number')
                    return TDev.div(null, c.toString()).withClick(clickHandler);
                else if (c === null)
                    return TDev.div(null, 'null').withClick(clickHandler);
                else if (Array.isArray(c))
                    return TDev.div(null, '[' + c.length + ']').withClick(clickHandler);
                var txt = [];
                Object.keys(c).forEach(function (k) {
                    var v = _this._item[k];
                    if (Array.isArray(v))
                        txt.push(k + ' : [' + v.length + ']');
                    else if (typeof v === 'boolean' || typeof v === 'number')
                        txt.push(k + ' : ' + v);
                    else if (typeof v === 'string')
                        txt.push(k + ' : "' + v.slice(0, 5) + '..."');
                    else
                        txt.push(k + ' : {...}');
                });
                return TDev.div(null, '{' + txt.join(', ') + '}').withClick(clickHandler);
            };
            JsonObject.prototype.debuggerChildren = function () {
                var c = this._item;
                if (c === null || typeof c === 'boolean' || typeof c === 'string' || typeof c === 'number')
                    return null;
                var r = {};
                Object.keys(c).forEach(function (k) {
                    var v = c[k];
                    if (Array.isArray(v) || typeof v === 'object')
                        r[k] = JsonObject.wrap(v);
                    else
                        r[k] = v;
                });
                return r;
            };
            return JsonObject;
        })(RT.RTValue);
        RT.JsonObject = JsonObject;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var JsonBuilder = (function (_super) {
            __extends(JsonBuilder, _super);
            function JsonBuilder() {
                _super.apply(this, arguments);
                this.item = {};
            }
            JsonBuilder.prototype.isSerializable = function () {
                return true;
            };
            JsonBuilder.wrap = function (i) {
                if (i === undefined)
                    return undefined;
                var r = new JsonBuilder();
                r.item = i;
                return r;
            };
            JsonBuilder.prototype.value = function () {
                return this.item;
            };
            JsonBuilder.prototype.exportJson = function (ctx) {
                return TDev.Util.jsonClone(this.item);
            };
            JsonBuilder.prototype.importJson = function (ctx, json) {
                if (json !== undefined) {
                    this.item = TDev.Util.jsonClone(json);
                    return this;
                }
                else
                    return undefined;
            };
            JsonBuilder.prototype.ensureObject = function () {
                if (this.item === null || typeof this.item !== "object" || Array.isArray(this.item))
                    this.item = {};
            };
            JsonBuilder.prototype.set_field = function (name, value) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = this.toValue(value);
            };
            JsonBuilder.prototype.set_builder = function (name, value) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = value.item;
            };
            JsonBuilder.prototype.set_string = function (name, value) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = value;
            };
            JsonBuilder.prototype.clone = function () {
                return JsonBuilder.wrap(TDev.Util.jsonClone(this.item));
            };
            JsonBuilder.prototype.set_number = function (name, value) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = value;
            };
            JsonBuilder.prototype.set_boolean = function (name, value) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = value;
            };
            JsonBuilder.prototype.set_sound = function (name, snd) {
                if (name.length == 0)
                    return;
                this.ensureObject();
                this.item[name] = snd.getDataUri();
            };
            JsonBuilder.prototype.set_picture = function (name, pic, quality, r) {
                var _this = this;
                if (name.length == 0)
                    return;
                this.ensureObject();
                pic.loadFirst(r, function () {
                    _this.item[name] = pic.getDataUri(RT.Math_.normalize(quality));
                });
            };
            JsonBuilder.prototype.set_field_null = function (name) {
                this.set_field(name, null);
            };
            JsonBuilder.prototype.add = function (value) {
                if (!Array.isArray(this.item))
                    this.item = [];
                this.item.push(this.toValue(value));
            };
            JsonBuilder.prototype.copy_from = function (value) {
                var _this = this;
                if (value.kind() != "object")
                    TDev.Util.userError("cannot copy from non-object");
                var v = TDev.Util.jsonClone(value.value());
                Object.keys(v).forEach(function (k) {
                    _this.item[k] = v[k];
                });
            };
            JsonBuilder.prototype.add_builder = function (value) {
                if (!Array.isArray(this.item))
                    this.item = [];
                this.item.push(value.item);
            };
            JsonBuilder.prototype.clear = function () {
                if (Array.isArray(this.item))
                    while (this.item.length > 0)
                        this.item.pop();
            };
            JsonBuilder.prototype.add_null = function () {
                this.add(null);
            };
            JsonBuilder.prototype.toString = function () {
                return JSON.stringify(this.item);
            };
            JsonBuilder.prototype.setItem = function (i) {
                this.item = i;
            };
            JsonBuilder.prototype.toValue = function (o) {
                return o === null ? null : o.value();
            };
            JsonBuilder.prototype.to_json = function () {
                return RT.JsonObject.wrap(JSON.parse(JSON.stringify(this.item)));
            };
            JsonBuilder.prototype.count = function () {
                return Array.isArray(this.item) ? this.item.length : undefined;
            };
            JsonBuilder.prototype.at = function (index) {
                return Array.isArray(this.item) ? JsonBuilder.wrap(this.item[Math.floor(index)]) : undefined;
            };
            JsonBuilder.prototype.set_at = function (index, v) {
                if (!Array.isArray(this.item))
                    this.item = [];
                this.item[index] = v.item;
            };
            JsonBuilder.prototype.remove_at = function (index) {
                if (!Array.isArray(this.item))
                    this.item = [];
                this.item.splice(index, 1);
            };
            JsonBuilder.prototype.remove_field = function (name) {
                var v = this.item;
                this.ensureObject();
                delete this.item[name];
            };
            JsonBuilder.prototype.boolean = function (key) {
                if (this.item === null)
                    return undefined;
                var v = this.item[key];
                if (typeof v === 'boolean')
                    return v;
                if (typeof v === 'string')
                    return /^true$/i.test(v) ? true : false;
                if (typeof v === 'number')
                    return v == 0 ? false : true;
                else
                    return !!v;
            };
            JsonBuilder.prototype.contains_key = function (key) {
                var v = this.item;
                return v !== null && typeof v === 'object' && v.hasOwnProperty(key);
            };
            JsonBuilder.prototype.time = function (key) {
                if (this.item !== null) {
                    var v = this.item[key];
                    if (typeof v === 'string')
                        return RT.DateTime.mkMs(Date.parse(v));
                    if (typeof v === 'number')
                        return RT.DateTime.mkMs(v);
                }
                return undefined;
            };
            JsonBuilder.prototype.field = function (key) {
                var v = this.item;
                return v === null ? undefined : JsonBuilder.wrap(v[key]);
            };
            JsonBuilder.prototype.keys = function () {
                return RT.Collection.mkStrings(this.kind() === "object" ? Object.keys(this.item) : []);
            };
            JsonBuilder.prototype.kind = function () {
                var result = 'array';
                if (this.item === null)
                    result = "null";
                else if (Array.isArray(this.item)) {
                }
                else if (typeof this.item === 'string')
                    result = 'string';
                else if (typeof this.item === 'number')
                    result = 'number';
                else if (typeof this.item === 'boolean')
                    result = 'boolean';
                else if (typeof this.item === 'object')
                    result = 'object';
                return result;
            };
            JsonBuilder.prototype.number = function (key) {
                if (this.item !== null) {
                    var v = this.item[key];
                    if (typeof v === 'number')
                        return v;
                    if (typeof v === 'string')
                        return parseFloat(v);
                    if (typeof v === 'boolean')
                        return v ? 1 : 0;
                }
                return undefined;
            };
            JsonBuilder.prototype.string = function (key) {
                if (this.item !== null) {
                    var v = this.item[key];
                    if (typeof v === 'string')
                        return v;
                    if (typeof v === 'number')
                        return v.toString();
                    if (typeof v === 'boolean')
                        return v ? 'true' : 'false';
                }
                return undefined;
            };
            JsonBuilder.prototype.post_to_wall = function (s) {
                var txt;
                try {
                    txt = JSON.stringify(this.item, null, 2);
                }
                catch (e) {
                    txt = "error stringifying json builder: " + e.message;
                }
                s.rt.postBoxedText(txt, s.pc);
            };
            JsonBuilder.prototype.to_boolean = function () {
                if (typeof this.item === 'boolean')
                    return this.item;
                if (typeof this.item === 'string')
                    return /^true$/i.test(this.item) ? true : false;
                if (typeof this.item === 'number')
                    return this.item == 0 ? false : true;
                return undefined;
            };
            JsonBuilder.prototype.to_number = function () {
                if (typeof this.item === 'number')
                    return this.item;
                if (typeof this.item === 'string')
                    return parseFloat(this.item);
                if (typeof this.item === 'boolean')
                    return this.item ? 1 : 0;
                return undefined;
            };
            JsonBuilder.prototype.to_string = function () {
                if (typeof this.item === 'string')
                    return this.item;
                if (typeof this.item === 'number')
                    return this.item.toString();
                if (typeof this.item === 'boolean')
                    return this.item ? 'true' : 'false';
                return undefined;
            };
            JsonBuilder.prototype.to_time = function () {
                if (typeof this.item === 'string')
                    return RT.DateTime.mkMs(Date.parse(this.item));
                if (typeof this.item === 'number')
                    return RT.DateTime.mkMs(this.item);
                return undefined;
            };
            JsonBuilder.prototype.to_collection = function () {
                if (Array.isArray(this.item))
                    return RT.Collection.fromArray(this.item.map(function (e) { return JsonBuilder.wrap(e); }), JsonBuilder);
                else
                    return undefined;
            };
            JsonBuilder.prototype.serialize = function () {
                return JSON.stringify(this.item);
            };
            JsonBuilder.prototype.getShortStringRepresentation = function () {
                return JSON.stringify(this.item, null, 2);
            };
            JsonBuilder.prototype.debuggerDisplay = function (clickHandler) {
                return this.to_json().debuggerDisplay(clickHandler);
            };
            JsonBuilder.prototype.debuggerChildren = function () {
                return this.to_json().debuggerChildren();
            };
            return JsonBuilder;
        })(RT.RTValue);
        RT.JsonBuilder = JsonBuilder;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var FormBuilder = (function (_super) {
            __extends(FormBuilder, _super);
            function FormBuilder() {
                _super.apply(this, arguments);
                this._data = [];
            }
            FormBuilder.prototype.data = function () {
                var fd = new FormData();
                this._data.forEach(function (d) {
                    if (d.blobName)
                        fd.append(d.name, d.value, d.blobName);
                    else
                        fd.append(d.name, d.value);
                });
                return fd;
            };
            FormBuilder.prototype.toString = function () {
                return "form: " + this._data.map(function (d) { return d.name; }).join(", ");
            };
            FormBuilder.prototype.post_to_wall = function (s) {
                s.rt.postText(this.toString(), s.pc);
            };
            FormBuilder.prototype.contains_key = function (name) {
                return !!this._data.filter(function (fv) { return fv.name == name; })[0];
            };
            FormBuilder.prototype.add_text = function (name, content, mimetype, filename) {
                this._data.push({ name: name, value: new Blob([content], { type: mimetype || 'text/plain' }), blobName: filename });
            };
            FormBuilder.prototype.add_buffer = function (name, buffer, filename) {
                this._data.push({ name: name, value: new Blob([buffer.buffer.buffer]), blobName: filename });
            };
            FormBuilder.prototype.add_string_as_file = function (name, text, filename) {
                this._data.push({ name: name, value: new Blob([text], { type: 'text/plain' }), blobName: filename });
            };
            FormBuilder.prototype.add_string = function (name, value) {
                this._data.push({ name: name, value: value });
            };
            FormBuilder.prototype.add_number = function (name, value) {
                this._data.push({ name: name, value: value });
            };
            FormBuilder.prototype.add_boolean = function (name, value) {
                this._data.push({ name: name, value: value });
            };
            FormBuilder.prototype.add_picture = function (name, value, pictureName, r) {
                var _this = this;
                value.loadFirst(r, function () {
                    var blob = TDev.Util.canvasToBlob(value.getCanvas(), pictureName);
                    _this._data.push({ name: name, value: blob, blobName: pictureName });
                });
            };
            return FormBuilder;
        })(RT.RTValue);
        RT.FormBuilder = FormBuilder;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var WebSpeechManager;
        (function (WebSpeechManager) {
            function initialize() {
                var a = window;
                if (a && !a.SpeechRecognition) {
                    a.SpeechRecognition = a.SpeechRecognition || a.webkitSpeechRecognition || a.mozSpeechRecognition || a.oSpeechRecognition || a.msSpeechRecognition;
                }
                if (a && !a.SpeechSynthesisUtterance) {
                    a.SpeechSynthesisUtterance = a.SpeechSynthesisUtterance || a.webkitSpeechSynthesisUtterance || a.mozSpeechSynthesisUtterance || a.oSpeechSynthesisUtterance || a.msSpeechSynthesisUtterance;
                }
            }
            function isSupported() {
                return isRecognitionSupported() || isSynthesisSupported();
            }
            WebSpeechManager.isSupported = isSupported;
            function isRecognitionSupported() {
                initialize();
                var a = window;
                return !!a.SpeechRecognition;
            }
            WebSpeechManager.isRecognitionSupported = isRecognitionSupported;
            function isSynthesisSupported() {
                initialize();
                var a = window;
                return !!a.speechSynthesis && !!a.SpeechSynthesisUtterance;
            }
            WebSpeechManager.isSynthesisSupported = isSynthesisSupported;
            function createRecognition() {
                return isRecognitionSupported() ? new SpeechRecognition() : undefined;
            }
            WebSpeechManager.createRecognition = createRecognition;
            function createSynthesis() {
                return isSynthesisSupported() ? (window.speechSynthesis) : undefined;
            }
            WebSpeechManager.createSynthesis = createSynthesis;
        })(WebSpeechManager = RT.WebSpeechManager || (RT.WebSpeechManager = {}));
        var MicrosoftTranslator;
        (function (MicrosoftTranslator) {
            function createTranslateButton(cls, tk, elementDiv, from, button, replaceContent) {
                if (button === void 0) { button = false; }
                if (replaceContent === void 0) { replaceContent = false; }
                var current = TDev.RT.Languages.current_language();
                if (from.toLowerCase() == current.toLowerCase())
                    return null;
                var translateBtn = null;
                var trDiv = TDev.div('translated');
                var translateCmt = function () {
                    TDev.tick(tk);
                    if (TDev.Cloud.anonMode(TDev.lf("translation")))
                        return;
                    translateBtn.setFlag("working", true);
                    TDev.RT.MicrosoftTranslator.translateAsync(from || '', current, elementDiv.innerHTML, true).done(function (translated) {
                        replaceContent = replaceContent && translated;
                        TDev.Browser.setInnerHTML(trDiv, translated ? translated : TDev.lf(":( Sorry, we could not translate this."));
                        translateBtn.setFlag("working", false);
                        translateBtn.removeSelf();
                        if (replaceContent)
                            elementDiv.setChildren([trDiv]);
                        else
                            elementDiv.appendChild(trDiv);
                    }, function (e) {
                        translateBtn.setFlag("working", false);
                        var trDiv = TDev.div('translated');
                        TDev.Browser.setInnerHTML(trDiv, TDev.lf(":( Sorry, an error occured while translating this text."));
                        elementDiv.appendChild(trDiv);
                    });
                };
                translateBtn = TDev.createElement(button ? "button" : "div", cls, TDev.lf("translate")).withClick(translateCmt);
                return translateBtn;
            }
            MicrosoftTranslator.createTranslateButton = createTranslateButton;
            MicrosoftTranslator.translateAsync = function (source_lang, target_lang, text, html) {
                if (!target_lang) {
                    RT.Time.log('translate: missing target language');
                    return TDev.Promise.as(undefined);
                }
                if (!text || source_lang === target_lang)
                    return TDev.Promise.as(text);
                if (text.length >= 10000) {
                    RT.Time.log('translate: text too long, 10000 characeters max');
                    return TDev.Promise.as(undefined);
                }
                var url = 'runtime/languages/translate?' + 'to=' + encodeURIComponent(target_lang) + '&text=' + encodeURIComponent(text);
                if (source_lang)
                    url += '&from=' + encodeURIComponent(source_lang);
                if (html)
                    url += '&html=true';
                var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                return request.sendAsync().then(function (response) {
                    var translated = response.content_as_json();
                    return translated ? translated.to_string() : undefined;
                });
            };
            MicrosoftTranslator.detectAsync = function (text) {
                if (text.length == 0) {
                    return TDev.Promise.as(undefined);
                }
                var url = 'runtime/languages/detect?text=' + encodeURIComponent(text);
                var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                return request.sendAsync().then(function (response) {
                    var lg = response.content_as_json();
                    return lg.to_string();
                });
            };
            function speakTranslator(lang, text) {
                var url = 'runtime/languages/speak?language=' + encodeURIComponent(lang || Languages.current_language()) + '&text=' + encodeURIComponent(text || "");
                var snd = RT.Sound.mk(url, 1 /* TouchDevelop */, 'audio/mp4');
                return snd;
            }
            MicrosoftTranslator.speakTranslator = speakTranslator;
            MicrosoftTranslator.speak = speakTranslator;
        })(MicrosoftTranslator = RT.MicrosoftTranslator || (RT.MicrosoftTranslator = {}));
        var Languages;
        (function (Languages) {
            function current_language() {
                return navigator.userLanguage || navigator.language || "en-US";
            }
            Languages.current_language = current_language;
            function speech_to_text(lang, speech) {
                return undefined;
            }
            Languages.speech_to_text = speech_to_text;
            function picture_to_text(lang, pic, r) {
                var url = 'runtime/languages/pictureToText';
                var privateUrl = TDev.Cloud.getPrivateApiUrl(url);
                var request = RT.WebRequest.mk(privateUrl, undefined);
                pic.initAsync().done(function () {
                    request.setContentAsPictureInternal(pic, 0.75);
                    request.set_method("POST");
                    r.progress('Analyzing picture...');
                    request.sendAsync().done(function (response) {
                        var text = response.content();
                        r.resumeVal(text);
                    });
                });
            }
            Languages.picture_to_text = picture_to_text;
            function isSpeechSupported() {
                return WebSpeechManager.isSupported();
            }
            Languages.isSpeechSupported = isSpeechSupported;
            function record_text(r) {
                var recognition = WebSpeechManager.createRecognition();
                if (!recognition) {
                    RT.Wall.ask_string("please enter your text", r);
                    return;
                }
                var res = "";
                var m = new TDev.ModalDialog();
                var status = TDev.div('wall-dialog-body', 'initializing...');
                var btns;
                m.add(TDev.div('wall-dialog-header', 'recording text'));
                m.add(status);
                m.onDismiss = function () { return r.resumeVal(""); };
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.onstart = function (e) {
                    TDev.Util.log('speech recog: start');
                    status.setChildren(['time to talk!']);
                };
                recognition.onresult = function (e) {
                    TDev.Util.log('speech recog: onresult');
                    for (var i = e.resultIndex; i < e.results.length; ++i) {
                        if (e.results[i].isFinal)
                            res += e.results[i][0].transcript;
                    }
                    status.setChildren([res]);
                    m.add(btns = TDev.div('wall-dialog-buttons', TDev.HTML.mkButton('cancel', function () { return m.dismiss(); }), TDev.HTML.mkButton('try again', function () {
                        btns.removeSelf();
                        tryRecognition();
                    }), TDev.HTML.mkButton('ok', function () {
                        m.onDismiss = null;
                        m.dismiss();
                        r.resumeVal(res);
                    })));
                };
                recognition.onerror = function (e) {
                    TDev.Util.log('speech recog: onerror');
                    status.setChildren(['oops, couldn\'t understand what you said.']);
                    m.add(btns = TDev.div('wall-dialog-buttons', TDev.HTML.mkButton('cancel', function () { return m.dismiss(); }), TDev.HTML.mkButton('try again', function () {
                        btns.removeSelf();
                        tryRecognition();
                    })));
                };
                recognition.lang = Languages.current_language();
                function tryRecognition() {
                    res = "";
                    recognition.start();
                }
                tryRecognition();
                m.show();
            }
            Languages.record_text = record_text;
            function translate(source_lang, target_lang, text, r) {
                var rt = r.rt;
                TDev.Cloud.authenticateAsync(TDev.lf("translation")).then(function (authenticated) {
                    if (authenticated)
                        return MicrosoftTranslator.translateAsync(source_lang, target_lang, text, false);
                    else
                        return TDev.Promise.as(undefined);
                }).done(function (translated) { return r.resumeVal(translated); });
            }
            Languages.translate = translate;
            function detect_language(text, r) {
                var rt = r.rt;
                TDev.Cloud.authenticateAsync(TDev.lf("translation")).then(function (authenticated) {
                    if (authenticated)
                        return MicrosoftTranslator.detectAsync(text);
                    else
                        return TDev.Promise.as(undefined);
                }).done(function (lang) { return r.resumeVal(lang); });
            }
            Languages.detect_language = detect_language;
            function speak(lang, text) {
                return MicrosoftTranslator.speakTranslator(lang, text);
            }
            Languages.speak = speak;
            function speak_text(voice_language, voice_gender, text, r) {
                if (!text) {
                    r.resume();
                    return;
                }
                var synthesis = WebSpeechManager.createSynthesis();
                if (synthesis) {
                    var utterance = new SpeechSynthesisUtterance(text);
                    utterance.lang = voice_language || Languages.current_language();
                    synthesis.speak(utterance);
                    r.resume();
                }
                else {
                    var snd = MicrosoftTranslator.speak(voice_language, text);
                    if (snd)
                        snd.play(r);
                    else
                        r.resume();
                }
            }
            Languages.speak_text = speak_text;
            function speak_ssml(ssml, r) {
                var synthesis = WebSpeechManager.createSynthesis();
                if (synthesis) {
                    var utterance = new SpeechSynthesisUtterance(ssml.toString());
                    synthesis.speak(utterance);
                    r.resume();
                }
                else {
                    var text = ssml.value();
                    var snd = MicrosoftTranslator.speak(Languages.current_language(), text);
                    if (snd)
                        snd.play(r);
                    else
                        r.resume();
                }
            }
            Languages.speak_ssml = speak_ssml;
        })(Languages = RT.Languages || (RT.Languages = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        (function (LinkKind) {
            LinkKind[LinkKind["unknown"] = 0] = "unknown";
            LinkKind[LinkKind["media"] = 1] = "media";
            LinkKind[LinkKind["image"] = 2] = "image";
            LinkKind[LinkKind["email"] = 3] = "email";
            LinkKind[LinkKind["phoneNumber"] = 4] = "phoneNumber";
            LinkKind[LinkKind["hyperlink"] = 5] = "hyperlink";
            LinkKind[LinkKind["radio"] = 6] = "radio";
            LinkKind[LinkKind["address"] = 7] = "address";
        })(RT.LinkKind || (RT.LinkKind = {}));
        var LinkKind = RT.LinkKind;
        var Link = (function (_super) {
            __extends(Link, _super);
            function Link() {
                _super.call(this);
                this._title = undefined;
                this._description = undefined;
                this._kind = undefined;
                this._address = undefined;
                this._location = undefined;
                this.previouslyloaded = false;
            }
            Link.prototype.exportJson = function (ctx) {
                return {
                    title: this._title,
                    description: this._description,
                    kind: this._kind && this._kind,
                    address: this._address,
                    location: this._location && this._location.exportJson(ctx)
                };
            };
            Link.prototype.importJson = function (ctx, json) {
                if (typeof json != "object")
                    json = undefined;
                this._title = ctx.importString(json, "title");
                this._description = ctx.importString(json, "description");
                this._kind = ctx.importNumber(json, "kind");
                this._address = ctx.importString(json, "address");
                this._location = ctx.importLocation(json, "location");
                return this;
            };
            Link.mk = function (address, kind) {
                var lnk = new Link();
                lnk._address = address;
                lnk._kind = kind;
                return lnk;
            };
            Link.prototype.toString = function () {
                var s = this.name();
                return s;
            };
            Link.prototype.name = function () {
                if (this._description)
                    return this._title + " : " + this._description;
                else
                    return this._title;
            };
            Link.prototype.set_name = function (name) {
                this._description = "";
                this._title = name;
            };
            Link.prototype.set_title = function (t) {
                this._title = t;
            };
            Link.prototype.set_description = function (d) {
                this._description = d;
            };
            Link.prototype.location = function () {
                return this._location;
            };
            Link.prototype.set_location = function (location) {
                this._location = location;
            };
            Link.prototype.address = function () {
                return this._address;
            };
            Link.prototype.to_picture = function () {
                if (this._kind != 2 /* image */)
                    return undefined;
                return RT.Picture.fromUrlSync(this._address, true);
            };
            Link.prototype.kind = function () {
                return (TDev.enumToString(LinkKind, this._kind)).toLowerCase();
            };
            Link.prototype.getViewCore = function (s, b) {
                if (b === void 0) { b = null; }
                switch (this._kind) {
                    case 2 /* image */:
                        var img = TDev.createElement("img");
                        img.setAttribute('class', 'wall-picture');
                        img.src = this.address();
                        img.alt = this.name();
                        this.slowlyloadingelement = img;
                        b.delayedlayout = true;
                        return img;
                    case 1 /* media */:
                        try {
                            if (/\.(mp3|wav|m4a)$/i.test(this.address())) {
                                var audio = TDev.createElement("audio", "wall-media", this.name());
                                audio.src = this.address();
                                audio.controls = true;
                                audio.autobuffer = true;
                                audio.crossorigin = "anonymous";
                                audio.load();
                                this.slowlyloadingelement = audio;
                                return audio;
                            }
                            else {
                                var video = TDev.createElement("video", "wall-media", this.name());
                                video.src = this.address();
                                video.controls = true;
                                video.autobuffer = true;
                                video.crossorigin = "anonymous";
                                video.load();
                                this.slowlyloadingelement = video;
                                b.delayedlayout = true;
                                return video;
                            }
                        }
                        catch (e) {
                            return TDev.div("item", TDev.div("wall-dialog-header", TDev.lf("invalid media")), TDev.div("wall-dialog-body", this.address()));
                        }
                    default:
                        var url = this.address();
                        var text = "go";
                        switch (this._kind) {
                            case 4 /* phoneNumber */:
                                if (!/^tel:/i.test(url))
                                    url = 'tel:' + url;
                                text = "call";
                                break;
                            case 3 /* email */:
                                if (!/^mailto:/i.test(url))
                                    url = 'mailto:' + encodeURIComponent(url);
                                text = "send";
                                break;
                        }
                        var elt = TDev.div("item link-item", [TDev.div("wall-dialog-header", this._title || this.address() || url), this._description ? TDev.div("wall-dialog-body", this._description) : null]);
                        elt.withClick(function () { return RT.Web.browseAsync(url).done(); });
                        return elt;
                }
            };
            Link.prototype.updateViewCore = function (s, b) {
                if (TDev.LayoutMgr.RenderExecutionMode() && this.slowlyloadingelement) {
                    if (this.slowlyloadingelement.tagName == "IMG") {
                        this.slowlyloadingelement.onload = function () {
                            b.delayedlayout = false;
                            b.RefreshOnScreen();
                        };
                        this.slowlyloadingelement.onerror = function () {
                            b.SwapImageContent(RT.Picture.errorPic());
                        };
                    }
                    else {
                        this.slowlyloadingelement.onloadedmetadata = function () {
                            b.delayedlayout = false;
                            b.RefreshOnScreen();
                        };
                    }
                }
            };
            Link.prototype.share = function (network, r) {
                TDev.HTML.showProgressNotification(TDev.lf("sharing link..."));
                RT.ShareManager.shareLinkAsync(this, network).done(function () { return r.resume(); });
            };
            Link.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Link;
        })(RT.RTValue);
        RT.Link = Link;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var CloudStorage;
        (function (CloudStorage) {
            function upload_picture(pic, folder, filename, r) {
                if (!folder)
                    folder = "public";
                var shared = false;
                var folders = [];
                switch (folder.toLocaleLowerCase()) {
                    case "public":
                        folders.push("me/skydrive/public_documents");
                        shared = true;
                        break;
                    case "documents":
                        folders.push("me/skydrive/my_documents");
                        break;
                    case "pictures":
                        folders.push("me/skydrive/my_photos");
                        break;
                    case "camera roll":
                        folders.push("me/skydrive/camera_roll");
                        break;
                    default:
                        TDev.Util.userError(TDev.lf("this folder is not supported"));
                }
                if (!filename)
                    filename = RT.Picture.niceFilename();
                if (!RT.String_.ends_with(filename.toLocaleLowerCase(), ".jpg"))
                    filename += ".jpg";
                OneDrive.uploadPictureAsyncWithDialog(pic, folders, shared, folder, filename).done(function (cp) { return r.resumeVal(cp); });
            }
            CloudStorage.upload_picture = upload_picture;
            function create_note(html) {
                var fb = RT.Web.create_form_builder();
                fb.add_text("Presentation", html || "", "text/html", undefined);
                return fb;
            }
            CloudStorage.create_note = create_note;
            function upload_note(form, r) {
                if (!form.contains_key("Presentation")) {
                    TDev.Util.userError(TDev.lf("the OneNote page HTML must be stored in the `Presentation` field in `form`."));
                    r.resumeVal(undefined);
                }
                TDev.HTML.showProgressNotification(TDev.lf("uploading to OneNote..."));
                OneNote.uploadPageAsync(form).done(function (url) {
                    TDev.HTML.showProgressNotification("");
                    r.resumeVal(url);
                });
            }
            CloudStorage.upload_note = upload_note;
        })(CloudStorage = RT.CloudStorage || (RT.CloudStorage = {}));
        var LiveConnect;
        (function (LiveConnect) {
            function readContent(response) {
                var js = response.content_as_json();
                if (!js || js.contains_key("error"))
                    return undefined;
                return js;
            }
            LiveConnect.readContent = readContent;
            function matchScopes(current, required) {
                if (!current)
                    return false;
                return required.split(' ').filter(function (r) { return current.indexOf(r) > -1; }).length > 0;
            }
            function mergeScopes(current, required) {
                var all = "wl.signin " + (current ? current + " " : "") + required;
                return TDev.Util.unique(all.split(' '), function (scope) { return scope; }).join(' ');
            }
            function authenticateAsync(scopes) {
                var accessToken = window.localStorage["liveconnect_accesstoken"];
                var accessTokenScopes = window.localStorage["liveconnect_accesstoken_scopes"];
                var accessTokenExpires = parseInt(window.localStorage["liveconnect_accesstoken_expires"] || 0);
                if (accessToken && accessTokenExpires > TDev.Util.now() && matchScopes(accessTokenScopes, scopes))
                    return TDev.Promise.as(accessToken);
                if (!RT.ApiManager.liveConnectClientId || !RT.ApiManager.liveConnectRedirectDomainId || !RT.ApiManager.liveConnectUserId) {
                    TDev.Util.userError(TDev.lf("Live Connect not properly configured."));
                    return TDev.Promise.as(undefined);
                }
                var allScopes = mergeScopes(accessTokenScopes, scopes);
                var url = "https://login.live.com/oauth20_authorize.srf" + "?client_id=" + encodeURIComponent(RT.ApiManager.liveConnectClientId) + "&scope=" + encodeURIComponent(allScopes) + "&response_type=token" + "&tdredirectdomainid=" + encodeURIComponent(RT.ApiManager.liveConnectRedirectDomainId);
                if (TDev.Browser.isMobile)
                    url += "&display=touch";
                var user = RT.ApiManager.liveConnectUserId;
                return RT.Web.oauth_v2_async(url, user).then(function (o) {
                    if (!o || o.is_error()) {
                        accessToken = "";
                        accessTokenScopes = "";
                        accessTokenExpires = 0;
                    }
                    else {
                        accessToken = o.access_token();
                        accessTokenScopes = o.scope();
                        accessTokenExpires = TDev.Util.now() + (1 + o.expires_in()) * 1000;
                    }
                    RT.App.log('liveconnect scopes: ' + allScopes);
                    window.localStorage["liveconnect_accesstoken"] = accessToken;
                    window.localStorage["liveconnect_accesstoken_scopes"] = allScopes;
                    window.localStorage["liveconnect_accesstoken_expires"] = accessTokenExpires;
                    return accessToken;
                });
            }
            LiveConnect.authenticateAsync = authenticateAsync;
        })(LiveConnect = RT.LiveConnect || (RT.LiveConnect = {}));
        var OneNote;
        (function (OneNote) {
            function uploadPageAsync(form) {
                return LiveConnect.authenticateAsync("office.onenote_create").then(function (accessToken) {
                    if (!accessToken)
                        return undefined;
                    var request = RT.WebRequest.mk("https://www.onenote.com/api/v1.0/pages", undefined);
                    request.set_method("POST");
                    request.set_header("Authorization", "Bearer " + accessToken);
                    request.set_content_as_form(form);
                    return request.sendAsync().then(function (response) {
                        if (response.status_code() == 201) {
                            var js = LiveConnect.readContent(response);
                            var links = js.field("links");
                            var oneNoteWebUrl = links.field("oneNoteWebUrl");
                            var href = oneNoteWebUrl.string("href");
                            return href;
                        }
                        return undefined;
                    });
                });
            }
            OneNote.uploadPageAsync = uploadPageAsync;
        })(OneNote = RT.OneNote || (RT.OneNote = {}));
        var OneDrive;
        (function (OneDrive) {
            function mkRequestAsync(scope, path) {
                return LiveConnect.authenticateAsync(scope).then(function (accessToken) {
                    if (!accessToken)
                        return undefined;
                    var request = RT.WebRequest.mk("https://apis.live.net/v5.0/" + path, undefined);
                    request.set_header("Authorization", "Bearer " + accessToken);
                    return request;
                });
            }
            function downloadPictureUrlAsync(id, media) {
                if (media === void 0) { media = 'normal'; }
                return LiveConnect.authenticateAsync("wl.skydrive wl.skydrive_update wl.contacts_skydrive").then(function (accessToken) {
                    if (!accessToken)
                        return undefined;
                    return "https://apis.live.net/v5.0/" + id + "/picture?type=" + media + "&access_token=" + accessToken;
                });
            }
            OneDrive.downloadPictureUrlAsync = downloadPictureUrlAsync;
            function uploadPictureAsyncWithDialog(pic, folders, shared, folderName, filename) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var cp = undefined;
                    var m = new TDev.ModalDialog();
                    m.onDismiss = function () {
                        m.onDismiss = undefined;
                        onSuccess(cp);
                    };
                    var imgDiv = TDev.div('wall-dialog-body');
                    pic.getUrlAsync().done(function (url) { return imgDiv.setChildren([TDev.HTML.mkImg(url, 'wall-picture-preview')]); });
                    m.add(TDev.div('wall-dialog-header', 'upload to OneDrive'));
                    m.add(TDev.div('wall-dialog-body', 'Would you like to upload this picture to "', folderName, '" your OneDrive?'));
                    if (shared)
                        m.add(TDev.div('wall-dialog-body', '!!! This picture will be shared with everyone.'));
                    m.add(TDev.div('wall-dialog-body', imgDiv));
                    m.add(TDev.div('wall-dialog-buttons', [
                        TDev.HTML.mkButton('cancel', function () {
                            m.dismiss();
                        }),
                        TDev.HTML.mkButton('upload', function () {
                            m.onDismiss = undefined;
                            m.dismiss();
                            internalUploadPictureAsync(pic, folders, shared, filename).done(function (c) {
                                onSuccess(c);
                            });
                        })
                    ]));
                    m.show();
                });
            }
            OneDrive.uploadPictureAsyncWithDialog = uploadPictureAsyncWithDialog;
            function getOrCreateFolder(accessToken, folders) {
                if (folders.length == 1)
                    return TDev.Promise.as(folders[0]);
                var parentFolder = folders[0];
                var folder = folders[1];
                RT.App.log('onedrive: create folder ' + parentFolder + '/' + folder);
                var foldersUrl = "https://apis.live.net/v5.0/" + parentFolder + "/files?type=folder&access_token=" + accessToken;
                var foldersRequest = RT.WebRequest.mk(foldersUrl, undefined);
                return foldersRequest.sendAsync().then(function (response) {
                    var js = LiveConnect.readContent(response);
                    if (!js) {
                        RT.App.log('onedrive: folder enumeration failed');
                        return undefined;
                    }
                    var jsFolders = js.field("data");
                    for (var i = 0; i < jsFolders.count(); ++i) {
                        var jsFolder = jsFolders.at(i);
                        if (jsFolder.string('name') == folder) {
                            var folderid = jsFolder.string('id');
                            var newFolders = folders.splice(0, 2, folderid);
                            return getOrCreateFolder(accessToken, newFolders);
                        }
                    }
                    return createFolder(accessToken, parentFolder, folder);
                });
            }
            function createFolder(accessToken, parentFolder, folder) {
                var createFolderUrl = "https://apis.live.net/v5.0/" + parentFolder + "?access_token=" + accessToken;
                var createFolderRequest = RT.WebRequest.mk(createFolderUrl, undefined);
                var createFolderBody = RT.Web.create_json_builder();
                createFolderBody.set_string("name", folder);
                createFolderRequest.set_content_as_json(createFolderBody.to_json());
                createFolderRequest.set_method("POST");
                return createFolderRequest.sendAsync().then(function (createFolderResponse) {
                    var createFolderResponseJs = LiveConnect.readContent(createFolderResponse);
                    if (!createFolderResponseJs) {
                        RT.App.log('onedrive: folder creation failed');
                        return undefined;
                    }
                    var folderid = createFolderResponseJs.string("id");
                    return folderid;
                });
            }
            function internalUploadPictureAsync(pic, folders, shared, filename) {
                var accessToken = undefined;
                RT.App.log('onedrive: uploading picture');
                return pic.initAsync().then(function () { return LiveConnect.authenticateAsync("wl.skydrive wl.skydrive_update wl.contacts_skydrive"); }).then(function (at) {
                    accessToken = at;
                    if (!accessToken) {
                        RT.App.log('onedrive: authentication failed');
                        return TDev.Promise.as(undefined);
                    }
                    var progress = TDev.HTML.mkProgressBar();
                    var imgDiv = TDev.div('wall-dialog-body');
                    pic.getUrlAsync().done(function (url) { return imgDiv.setChildren([TDev.HTML.mkImg(url, 'wall-picture-preview')]); });
                    var m = new TDev.ModalDialog();
                    m.canDismiss = false;
                    m.add(TDev.div('wall-dialog-header', 'uploading picture...'));
                    m.add(imgDiv);
                    m.add(progress);
                    progress.start();
                    m.show();
                    return getOrCreateFolder(accessToken, folders).then(function (folderid) {
                        if (!folderid) {
                            progress.stop();
                            m.canDismiss = true;
                            m.dismiss();
                            return undefined;
                        }
                        RT.App.log('onedrive: uploading to ' + folderid);
                        var uploadUrl = "https://apis.live.net/v5.0/" + folderid + "/files/" + filename + "?downsize_photo_uploads=false" + "&overwrite=ChooseNewName" + "&access_token=" + accessToken;
                        var request = RT.WebRequest.mk(uploadUrl, undefined);
                        request.set_method("PUT");
                        request.setContentAsPictureInternal(pic, 1, true);
                        request.set_content_type(null);
                        return request.sendAsync().then(function (response) {
                            progress.stop();
                            m.canDismiss = true;
                            m.dismiss();
                            var js = response.content_as_json();
                            if (!js) {
                                RT.App.log('onedrive: upload failed');
                                return undefined;
                            }
                            var pictureid = js.string('id');
                            RT.App.log('onedrive: picture uploaded - ' + pictureid);
                            var cp = RT.CloudPicture.mk("onedrive", pictureid, shared, pic.widthSync(), pic.heightSync());
                            return cp;
                        });
                    });
                });
            }
        })(OneDrive = RT.OneDrive || (RT.OneDrive = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Location_ = (function (_super) {
            __extends(Location_, _super);
            function Location_() {
                _super.call(this);
                this._latitude = undefined;
                this._longitude = undefined;
                this._altitude = undefined;
                this._hor_accuracy = undefined;
                this._vert_accuracy = undefined;
                this._speed = undefined;
                this._course = undefined;
            }
            Location_.mkShort = function (lat, lon) {
                return Location_.mk(lat, lon, undefined, undefined, undefined, undefined, undefined);
            };
            Location_.mk = function (lat, lon, alt, horacc, veracc, cou, spe) {
                var l = new Location_();
                l._latitude = lat;
                l._longitude = lon;
                l._altitude = alt;
                l._hor_accuracy = horacc;
                l._vert_accuracy = veracc;
                l._course = cou;
                l._speed = spe;
                return l;
            };
            Location_.mkFromString = function (s) {
                var pos = s.indexOf(",");
                var l = new Location_();
                l._latitude = Number(s.slice(0, pos));
                l._longitude = Number(s.slice(pos + 1));
                return l;
            };
            Location_.prototype.to_string = function () {
                return this._latitude + ',' + this._longitude;
            };
            Location_.prototype.exportJson = function (ctx) {
                return {
                    latitude: this._latitude,
                    longitude: this._longitude,
                    altitude: this._altitude,
                    hor_accuracy: this._hor_accuracy,
                    vert_accuracy: this._vert_accuracy,
                    course: this._course,
                    speed: this._speed
                };
            };
            Location_.prototype.importJson = function (ctx, json) {
                TDev.Util.oops("should not call immutable instance for importing");
                return undefined;
            };
            Location_.mkFromJson = function (ctx, json) {
                if (typeof json != "object")
                    return undefined;
                var loc = new Location_();
                loc._latitude = ctx.importNumber(json, "latitude");
                loc._longitude = ctx.importNumber(json, "longitude");
                loc._altitude = ctx.importNumber(json, "altitude");
                loc._hor_accuracy = ctx.importNumber(json, "hor_accuracy");
                loc._vert_accuracy = ctx.importNumber(json, "vert_accuracy");
                loc._course = ctx.importNumber(json, "course");
                loc._speed = ctx.importNumber(json, "speed");
                return loc;
            };
            Location_.prototype.isSerializable = function () {
                return true;
            };
            Location_.prototype.toJsonKey = function () {
                return [this._latitude, this._longitude, this._altitude, this._hor_accuracy, this._vert_accuracy, this._speed, this._course];
            };
            Location_.prototype.keyCompareTo = function (o) {
                var other = o;
                var diff = this._latitude - other._latitude;
                if (diff)
                    return diff;
                diff = this._longitude - other._longitude;
                if (diff)
                    return diff;
                diff = this._altitude - other._altitude;
                if (diff)
                    return diff;
                diff = this._hor_accuracy - other._hor_accuracy;
                if (diff)
                    return diff;
                diff = this._vert_accuracy - other._vert_accuracy;
                if (diff)
                    return diff;
                diff = this._speed - other._speed;
                if (diff)
                    return diff;
                diff = this._course - other._course;
                return diff;
            };
            Location_.prototype.latitude = function () {
                return this._latitude;
            };
            Location_.prototype.longitude = function () {
                return this._longitude;
            };
            Location_.prototype.altitude = function () {
                return this._altitude;
            };
            Location_.prototype.hor_accuracy = function () {
                return this._hor_accuracy;
            };
            Location_.prototype.vert_accuracy = function () {
                return this._vert_accuracy;
            };
            Location_.prototype.speed = function () {
                return this._speed;
            };
            Location_.prototype.course = function () {
                return this._course;
            };
            Location_.prototype.toString = function () {
                return "(" + this._latitude + "," + this._longitude + ")";
            };
            Location_.prototype.equals = function (other) {
                return (this._latitude === other._latitude && this._longitude === other._longitude && this._altitude === other._altitude && this._hor_accuracy === other._hor_accuracy && this._vert_accuracy === other._vert_accuracy && this._speed === other._speed && this._course === other._course);
            };
            Location_.prototype.share = function (network, message, r) {
                var lnk = RT.Link.mk(RT.Maps.mapUrl(this), 5 /* hyperlink */);
                lnk.set_title(this.to_string());
                lnk.set_description(message);
                TDev.HTML.showProgressNotification(TDev.lf("sharing location..."));
                RT.ShareManager.shareLinkAsync(lnk, network).done(function () { return r.resume(); });
            };
            Location_.prototype.distance = function (other) {
                return Location_.computeDistance(this.latitude(), this.longitude(), other.latitude(), other.longitude());
            };
            Location_.computeDistance = function (lat1, lng1, lat2, lng2) {
                var radius = 6367.0;
                return radius * 2 * Math.asin(Math.min(1, Math.sqrt(Math.pow(Math.sin(((RT.Math_.deg_to_rad(lat2 - lat1))) / 2.0), 2.0) + Math.cos(RT.Math_.deg_to_rad(lat1)) * Math.cos(RT.Math_.deg_to_rad(lat2)) * Math.pow(Math.sin(((RT.Math_.deg_to_rad(lng2 - lng1))) / 2.0), 2.0))));
            };
            Location_.prototype.getViewCore = function (s, b) {
                var map = RT.Maps.create_map();
                map.set_center(this);
                map.add_text(this, this.latitude().toFixed(3) + ', ' + this.longitude().toFixed(3), RT.Colors.background(s), RT.Colors.foreground(s));
                return map.getViewCore(s, b);
            };
            Location_.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Location_;
        })(RT.RTValue);
        RT.Location_ = Location_;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Locations;
        (function (Locations) {
            function create_location(latitude, longitude) {
                return RT.Location_.mk(latitude, longitude, undefined, undefined, undefined, undefined, undefined);
            }
            Locations.create_location = create_location;
            function create_location_list() {
                return RT.Collections.create_location_collection();
            }
            Locations.create_location_list = create_location_list;
            function describe_location(location, r) {
                TDev.Cloud.authenticateAsync(TDev.lf("describing a location")).then(function (authenticated) {
                    if (!authenticated)
                        return TDev.Promise.as(undefined);
                    else {
                        var url = 'runtime/locations/describe?latitude=' + encodeURIComponent(location.latitude().toString()) + '&longitude=' + encodeURIComponent(location.longitude().toString());
                        var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                        r.progress('Describing location...');
                        return request.sendAsync();
                    }
                }).done(function (response) {
                    try {
                        var description = undefined;
                        var json = response ? response.content_as_json() : undefined;
                        if (json)
                            description = json.to_string();
                        r.resumeVal(description);
                    }
                    catch (ex) {
                        RT.Time.log('locations describe failed, ' + ex.message);
                        r.resumeVal(undefined);
                    }
                });
            }
            Locations.describe_location = describe_location;
            function search_location(address, postal_code, city, country, r) {
                TDev.Cloud.authenticateAsync(TDev.lf("searching a location")).then(function (authenticated) {
                    if (!authenticated)
                        return TDev.Promise.as(undefined);
                    else {
                        var url = 'runtime/locations/search?address=' + encodeURIComponent(address);
                        if (postal_code)
                            url += '&postalCode=' + encodeURIComponent(postal_code);
                        if (city)
                            url += '&city=' + encodeURIComponent(city);
                        if (country)
                            url += '&country=' + encodeURIComponent(country);
                        var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                        r.progress('Searching location...');
                        return request.sendAsync();
                    }
                }).done(function (response) {
                    try {
                        var loc = undefined;
                        var json = response ? response.content_as_json() : undefined;
                        if (json)
                            loc = RT.Location_.mkShort(json.number('latitude'), json.number('longitude'));
                        r.resumeVal(loc);
                    }
                    catch (ex) {
                        RT.Time.log('locations search failed, ' + ex.message);
                        r.resumeVal(undefined);
                    }
                });
            }
            Locations.search_location = search_location;
        })(Locations = RT.Locations || (RT.Locations = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BingMaps;
        (function (BingMaps) {
            function createMap(el, loc, zoom) {
                var options = {
                    credentials: RT.ApiManager.bingMapsKey,
                    enableClickableLogo: false,
                    enableSearchLogo: false,
                    disableBirdseye: true,
                    showMapTypeSelector: false
                };
                if (loc)
                    options.center = new Microsoft.Maps.Location(loc.latitude(), loc.longitude());
                if (zoom)
                    options.zoom = zoom;
                var map = new Microsoft.Maps.Map(el, options);
                return map;
            }
            BingMaps.createMap = createMap;
            function isBingMapsLoaded() {
                return typeof (Microsoft) != 'undefined' && typeof (Microsoft.Maps) != 'undefined' && typeof (Microsoft.Maps.Map) != 'undefined';
            }
            BingMaps.isBingMapsLoaded = isBingMapsLoaded;
            BingMaps.mkMapAsync = function (el, loc, zoom) {
                if (isBingMapsLoaded()) {
                    return TDev.Promise.as(createMap(el, loc, zoom));
                }
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var script = document.createElement("script");
                    var loadWatcher = undefined;
                    var loadWatcher = function (retry) {
                        if (isBingMapsLoaded()) {
                            onSuccess(createMap(el, loc, zoom));
                        }
                        else {
                            if (retry-- < 0) {
                                onError(undefined);
                            }
                            else {
                                TDev.Util.setTimeout(100, function () { return loadWatcher(retry - 1); });
                            }
                        }
                    };
                    script.type = "text/javascript";
                    script.charset = "utf-8";
                    script.onload = function () {
                        if (!script.readyState || script.readyState === 'complete') {
                            loadWatcher(50);
                        }
                    };
                    script.onreadystatechange = script.onload;
                    script.onerror = function () {
                        onSuccess(undefined);
                    };
                    script.src = "https://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&s=1";
                    document.head.appendChild(script);
                });
            };
            function addClickHandler(pp, h) {
                Microsoft.Maps.Events.addHandler(pp, 'click', h);
            }
            BingMaps.addClickHandler = addClickHandler;
        })(BingMaps = RT.BingMaps || (RT.BingMaps = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var MapPushpin = (function (_super) {
            __extends(MapPushpin, _super);
            function MapPushpin() {
                _super.apply(this, arguments);
                this.onTap = new RT.Event_();
            }
            MapPushpin.mk = function (location, text, background, foreground, pictureUrl, taptarget) {
                if (pictureUrl === void 0) { pictureUrl = undefined; }
                if (taptarget === void 0) { taptarget = undefined; }
                var p = new MapPushpin();
                p._location = location;
                p._text = text;
                p._background = background;
                p._foreground = foreground;
                p._pictureUrl = pictureUrl;
                p._taptarget = taptarget;
                return p;
            };
            MapPushpin.prototype.on_tap = function (tapped) {
                return this.onTap.addHandler(tapped);
            };
            MapPushpin.prototype.location = function () {
                return this._location;
            };
            MapPushpin.prototype.set_location = function (loc) {
                this._location = loc;
                if (this._pp)
                    this._pp.setLocation(new Microsoft.Maps.Location(this._location.latitude(), this._location.longitude()));
            };
            MapPushpin.prototype.set_visible = function (visible) {
                if (this._pp)
                    this._pp.setOptions({ visible: visible });
            };
            MapPushpin.prototype.setOptions = function () {
                if (!this._pp)
                    return;
                var options = {
                    anchor: new Microsoft.Maps.Point(14, 25 + 16 + 16),
                    width: 39 + 20,
                    height: 25 + 16
                };
                options.htmlContent = "<div class='mapPushpin' style='";
                if (this._foreground)
                    options.htmlContent += "color:" + this._foreground.toHtml() + ";";
                if (this._background)
                    options.htmlContent += "background-color:" + this._background.toHtml() + ";";
                options.htmlContent += "'>";
                if (this._pictureUrl)
                    options.htmlContent += "<img src='" + RT.Web.html_encode(this._pictureUrl) + "' style='float:left;height:auto;max-width:39px;max-height:25px;' />";
                if (this._text)
                    options.htmlContent += "<div class='mapPushpinInner'>" + RT.Web.html_encode(this._text) + "</div>";
                options.htmlContent += "</div>";
                this._pp.setOptions(options);
            };
            MapPushpin.prototype.addToMap = function (map) {
                var _this = this;
                this._map = map;
                if (!map)
                    return;
                this._pp = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(this._location.latitude(), this._location.longitude()), {});
                this.setOptions();
                map.entities.push(this._pp);
                RT.BingMaps.addClickHandler(this._pp, function () {
                    var rt = TDev.Runtime.theRuntime;
                    if (rt) {
                        if (_this.onTap.handlers)
                            rt.queueLocalEvent(_this.onTap, []);
                        if (_this._taptarget) {
                            var evtname = "tap wall " + _this._taptarget.rtType();
                            if (rt.eventEnabled(evtname))
                                rt.eventQ.add(evtname, null, [_this._taptarget]);
                        }
                    }
                });
            };
            MapPushpin.prototype.setPictureUrl = function (url) {
                this._pictureUrl = url;
                this.setOptions();
            };
            return MapPushpin;
        })(RT.RTValue);
        RT.MapPushpin = MapPushpin;
        var MapLine = (function (_super) {
            __extends(MapLine, _super);
            function MapLine() {
                _super.apply(this, arguments);
            }
            MapLine.mk = function (locations, fill, stroke, thickness) {
                var p = new MapLine();
                p._locations = locations;
                p._fill = fill;
                p._stroke = stroke;
                p._thickness = thickness;
                return p;
            };
            MapLine.prototype.addToMap = function (map) {
                var locs = this._locations.a.map(function (l) { return new Microsoft.Maps.Location(l.latitude(), l.longitude()); });
                var options = {
                    strokeColor: new Microsoft.Maps.Color(this._stroke.a, this._stroke.r, this._stroke.g, this._stroke.b),
                    strokeThickness: Math.floor(Math.max(1, this._thickness))
                };
                var pp;
                if (this._fill) {
                    options.fillColor = new Microsoft.Maps.Color(this._fill.a, this._fill.r, this._fill.g, this._fill.b);
                    pp = new Microsoft.Maps.Polygon(locs, options);
                }
                else
                    pp = new Microsoft.Maps.Polyline(locs, options);
                map.entities.push(pp);
            };
            return MapLine;
        })(RT.RTValue);
        RT.MapLine = MapLine;
        var Map = (function (_super) {
            __extends(Map, _super);
            function Map() {
                _super.apply(this, arguments);
                this._full = false;
                this._zoom = 12;
                this._center = undefined;
                this._pushpins = [];
                this._lines = [];
            }
            Map.mk = function (full) {
                var m = new Map();
                m._full = full;
                return m;
            };
            Map.prototype.zoom = function () {
                this.syncView();
                return this._zoom;
            };
            Map.prototype.set_zoom = function (level) {
                this.syncView();
                this._zoom = level;
                this.updateView();
            };
            Map.prototype.center = function () {
                this.syncView();
                return this._center;
            };
            Map.prototype.set_center = function (center) {
                this.syncView();
                this._center = center;
                this.updateView();
            };
            Map.prototype.add_text = function (location, text, background, foreground) {
                var pp = MapPushpin.mk(location, text, background, foreground);
                this._pushpins.push(pp);
                pp.addToMap(this._map);
                return pp;
            };
            Map.prototype.add_cloud_picture = function (location, picture, background) {
                var pp = MapPushpin.mk(location, undefined, background, undefined, undefined, picture);
                this._pushpins.push(pp);
                pp.addToMap(this._map);
                picture.toPictureUrlAsync('thumbnail').done(function (url) {
                    pp.setPictureUrl(url);
                });
                return pp;
            };
            Map.prototype.add_link = function (link, background, foreground) {
                var loc = link.location();
                if (loc) {
                    var pp = MapPushpin.mk(loc, link.name() || link.address(), background, foreground, link.kind() == 'image' ? link.address() : null);
                    this._pushpins.push(pp);
                    pp.addToMap(this._map);
                    return pp;
                }
                else
                    return undefined;
            };
            Map.prototype.add_message = function (msg, background, foreground) {
                var loc = msg.location();
                if (loc)
                    return this.add_text(loc, msg.title() || msg.from(), background, foreground);
                else
                    return undefined;
            };
            Map.prototype.add_picture = function (location, picture, background) {
                var pp = MapPushpin.mk(location, undefined, background, undefined, undefined, picture);
                this._pushpins.push(pp);
                pp.addToMap(this._map);
                picture.getUrlAsync().done(function (url) { return pp.setPictureUrl(url); });
                return pp;
            };
            Map.prototype.add_place = function (place, background, foreground) {
                var loc = place.location();
                if (loc) {
                    var pp = MapPushpin.mk(loc, place.name(), background, foreground, place.picture_link(), place);
                    this._pushpins.push(pp);
                    pp.addToMap(this._map);
                    return pp;
                }
                else
                    return undefined;
            };
            Map.prototype.add_line = function (locations, color, thickness) {
                var pp = MapLine.mk(locations, undefined, color, thickness);
                this._lines.push(pp);
                if (this._map)
                    pp.addToMap(this._map);
            };
            Map.prototype.fill_region = function (locations, fill, stroke, thickness) {
                var pp = MapLine.mk(locations, fill, stroke, thickness);
                this._lines.push(pp);
                if (this._map)
                    pp.addToMap(this._map);
            };
            Map.prototype.clear = function () {
                this._pushpins = [];
                this._lines = [];
                if (this._map)
                    this._map.entities.clear();
            };
            Map.prototype.getViewCore = function (s, b) {
                var _this = this;
                var el = TDev.div("");
                el.style.display = 'inline';
                el.style.margin = '8px 8px 8px 8px';
                el.style.verticalAlign = 'top';
                el.style.width = '400px';
                el.style.height = '400px';
                el.fullScreen = this._full;
                RT.BingMaps.mkMapAsync(el, this.center(), this.zoom()).done(function (map) {
                    _this._map = map;
                    if (!_this._full)
                        _this._map.setOptions({ width: 400, height: 400 });
                    _this._lines.forEach(function (p) { return p.addToMap(_this._map); });
                    _this._pushpins.forEach(function (p) { return p.addToMap(_this._map); });
                    if (!_this._center)
                        _this.view_pushpins();
                    b.RefreshOnScreen();
                    if (_this._full && b instanceof TDev.WallBox) {
                        b.attributes.stretchwidth = 1;
                        b.attributes.stretchheight = 1;
                    }
                });
                return el;
            };
            Map.prototype.updateView = function () {
                if (this._map && this._center) {
                    var options = { zoom: this._zoom };
                    if (this._center)
                        options.center = new Microsoft.Maps.Location(this._center.latitude(), this._center.longitude());
                    this._map.setView(options);
                }
            };
            Map.prototype.syncView = function () {
                if (this._map) {
                    var c = this._map.getCenter();
                    this._center = RT.Location_.mkShort(c.latitude, c.longitude);
                    this._zoom = this._map.getZoom();
                }
            };
            Map.prototype.view_pushpins = function () {
                this.syncView();
                if (this._map && this._pushpins.length > 0) {
                    var locs = this._pushpins.map(function (p) { return new Microsoft.Maps.Location(p.location().latitude(), p.location().longitude()); });
                    var rect = Microsoft.Maps.LocationRect.fromLocations(locs);
                    this._map.setView({ bounds: rect });
                    this.syncView();
                }
            };
            Map.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Map;
        })(RT.RTValue);
        RT.Map = Map;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Maps;
        (function (Maps) {
            function create_map() {
                return RT.Map.mk(false);
            }
            Maps.create_map = create_map;
            function create_full_map() {
                return RT.Map.mk(true);
            }
            Maps.create_full_map = create_full_map;
            function directions(from, to, walking, r) {
                if (from.equals(to)) {
                    var col = RT.Collections.create_location_collection();
                    col.add(from);
                    col.add(to);
                    r.resumeVal(col);
                    return;
                }
                var url = 'runtime/maps/directions?' + 'fromLat=' + encodeURIComponent(from.latitude().toString()) + '&fromLong=' + encodeURIComponent(from.longitude().toString()) + '&toLat=' + encodeURIComponent(to.latitude().toString()) + '&toLong=' + encodeURIComponent(to.longitude().toString()) + '&walking=' + (walking ? 'true' : 'false');
                var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                r.progress('Getting directions...');
                request.sendAsync().then(function (response) {
                    try {
                        var locs = undefined;
                        var json = response.content_as_json();
                        if (json) {
                            locs = RT.Collections.create_location_collection();
                            for (var i = 0; i < json.count(); ++i) {
                                var jloc = json.at(i);
                                locs.add(RT.Location_.mkShort(jloc.number('latitude'), jloc.number('longitude')));
                            }
                        }
                        r.resumeVal(locs);
                    }
                    catch (ex) {
                        RT.Time.log('locations describe failed, ' + ex.message);
                        r.resumeVal(undefined);
                    }
                }).done();
            }
            Maps.directions = directions;
            function open_directions(start_search, start_loc, end_search, end_loc, r) {
                var url = "http://www.bing.com/maps/?v=2&rtp=";
                if (start_search)
                    url += "adr." + encodeURIComponent(start_search);
                else if (start_loc)
                    url += "pos." + encodeURIComponent(start_loc.latitude().toString()) + "_" + encodeURIComponent(start_loc.longitude().toString());
                url += "~";
                if (end_search)
                    url += "adr." + encodeURIComponent(end_search);
                else if (end_loc)
                    url += "pos." + encodeURIComponent(end_loc.latitude().toString()) + "_" + encodeURIComponent(end_loc.longitude().toString());
                url += "&lvl=12";
                RT.Web.browse(url, r);
            }
            Maps.open_directions = open_directions;
            function mapUrl(center, search, zoom) {
                if (search === void 0) { search = undefined; }
                if (zoom === void 0) { zoom = undefined; }
                var url = "http://www.bing.com/maps/?v=2&cp=" + encodeURIComponent(center.latitude().toString()) + "~" + encodeURIComponent(center.longitude().toString());
                if (search)
                    url += "&q=" + encodeURIComponent(search);
                if (zoom) {
                    var z = 1.0 + Math.max(0.0, Math.min(1.0, zoom)) * 18.0;
                    url += "&zoom=" + z;
                }
                url += "&lvl=12";
                return url;
            }
            Maps.mapUrl = mapUrl;
            function open_map(center, search, zoom, r) {
                RT.Web.browse(mapUrl(center, search, zoom), r);
            }
            Maps.open_map = open_map;
        })(Maps = RT.Maps || (RT.Maps = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Math_;
        (function (Math_) {
            function create_matrix(rows, columns) {
                return RT.Matrix.mk(rows, columns);
            }
            Math_.create_matrix = create_matrix;
            function ceiling(x) {
                return Math.ceil(x);
            }
            Math_.ceiling = ceiling;
            function floor(x) {
                return Math.floor(x);
            }
            Math_.floor = floor;
            function pow(x, y) {
                return Math.pow(x, y);
            }
            Math_.pow = pow;
            function random_range(min, max) {
                var r = Math_.random(max - min + 1);
                if (r == undefined)
                    return undefined;
                return min + r;
            }
            Math_.random_range = random_range;
            function random(limit) {
                var max = Math.round(limit);
                if (max == 0)
                    return 0;
                if (is_inf(max) || is_nan(max))
                    return undefined;
                var r = max;
                while (r == max)
                    r = TDev.Random.normalized() * (max);
                return Math.floor(r);
            }
            Math_.random = random;
            function random_normalized() {
                return TDev.Random.normalized();
            }
            Math_.random_normalized = random_normalized;
            function rand_norm() {
                return random_normalized();
            }
            Math_.rand_norm = rand_norm;
            function div(x, y) {
                return (x / y) | 0;
            }
            Math_.div = div;
            function mod(x, y) {
                return x % y;
            }
            Math_.mod = mod;
            function abs(x) {
                return Math.abs(x);
            }
            Math_.abs = abs;
            function acos(x) {
                return Math.acos(x);
            }
            Math_.acos = acos;
            function asin(x) {
                return Math.asin(x);
            }
            Math_.asin = asin;
            function atan(x) {
                return Math.atan(x);
            }
            Math_.atan = atan;
            function atan2(y, x) {
                return Math.atan2(y, x);
            }
            Math_.atan2 = atan2;
            function cos(angle) {
                return Math.cos(angle);
            }
            Math_.cos = cos;
            function e() {
                return Math.E;
            }
            Math_.e = e;
            function exp(x) {
                return Math.exp(x);
            }
            Math_.exp = exp;
            function log(x, base) {
                return base == 0 || base == 1 ? NaN : Math.log(x) / Math.log(base);
            }
            Math_.log = log;
            function loge(x) {
                return Math.log(x);
            }
            Math_.loge = loge;
            function log10(x) {
                return log(x, 10);
            }
            Math_.log10 = log10;
            function max(x, y) {
                return Math.max(x, y);
            }
            Math_.max = max;
            function min(x, y) {
                return Math.min(x, y);
            }
            Math_.min = min;
            function pi() {
                return Math.PI;
            }
            Math_.pi = pi;
            function gravity() {
                return 9.80665;
            }
            Math_.gravity = gravity;
            function round(x) {
                return x < 0 ? Math.ceil(x - 0.5) : Math.floor(x + 0.5);
            }
            Math_.round = round;
            function sign(x) {
                if (x < 0)
                    return -1;
                else if (x > 0)
                    return 1;
                else
                    return 0;
            }
            Math_.sign = sign;
            function sin(angle) {
                return Math.sin(angle);
            }
            Math_.sin = sin;
            function sqrt(x) {
                return Math.sqrt(x);
            }
            Math_.sqrt = sqrt;
            function tan(angle) {
                return Math.tan(angle);
            }
            Math_.tan = tan;
            function deg_to_rad(degrees) {
                return degrees / 180.0 * Math.PI;
            }
            Math_.deg_to_rad = deg_to_rad;
            function rad_to_deg(radians) {
                return radians / Math.PI * 180.0;
            }
            Math_.rad_to_deg = rad_to_deg;
            function pos_inf() {
                return Number.POSITIVE_INFINITY;
            }
            Math_.pos_inf = pos_inf;
            function neg_inf() {
                return Number.NEGATIVE_INFINITY;
            }
            Math_.neg_inf = neg_inf;
            function is_inf(x) {
                return is_pos_inf(x) || is_neg_inf(x);
            }
            Math_.is_inf = is_inf;
            function is_pos_inf(x) {
                return x == Number.POSITIVE_INFINITY;
            }
            Math_.is_pos_inf = is_pos_inf;
            function is_neg_inf(x) {
                return x == Number.NEGATIVE_INFINITY;
            }
            Math_.is_neg_inf = is_neg_inf;
            function is_nan(x) {
                return isNaN(x);
            }
            Math_.is_nan = is_nan;
            function round_with_precision(x, digits) {
                if (digits <= 0)
                    return Math.round(x);
                var d = Math.pow(10, digits);
                return Math.round(x * d) / d;
            }
            Math_.round_with_precision = round_with_precision;
            function cosh(angle) {
                return (Math.pow(Math_.e(), 2 * angle) + 1) / (2 * Math.pow(Math_.e(), angle));
            }
            Math_.cosh = cosh;
            function sinh(angle) {
                return (Math.pow(Math_.e(), 2 * angle) - 1) / (2 * Math.pow(Math_.e(), angle));
            }
            Math_.sinh = sinh;
            function tanh(angle) {
                return (Math.pow(Math_.e(), 2 * angle) - 1) / (Math.pow(Math_.e(), 2 * angle) + 1);
            }
            Math_.tanh = tanh;
            function create_number_map() {
                return RT.Collections.create_number_map();
            }
            Math_.create_number_map = create_number_map;
            function create_vector3(x, y, z) {
                return RT.Vector3.mk(x, y, z);
            }
            Math_.create_vector3 = create_vector3;
            var _epsilon = -1;
            function epsilon() {
                if (_epsilon < 0) {
                    _epsilon = 1;
                    while (1 + _epsilon != 1)
                        _epsilon /= 2;
                }
                return _epsilon;
            }
            Math_.epsilon = epsilon;
            function clamp(min, max, value) {
                return value < min ? min : value > max ? max : value;
            }
            Math_.clamp = clamp;
            function normalize(value) {
                return clamp(0, 1, value);
            }
            Math_.normalize = normalize;
            function ieee_remainder(x, y) {
                return x - (y * Math.round(x / y));
            }
            Math_.ieee_remainder = ieee_remainder;
            function range(start, length) {
                var r = [];
                for (var i = 0; i < length; ++i)
                    r.push(start + i);
                return RT.Collection.fromArray(r, "number");
            }
            Math_.range = range;
        })(Math_ = RT.Math_ || (RT.Math_ = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Media;
        (function (Media) {
            function create_picture(width, height) {
                return RT.Picture.mk(width, height);
            }
            Media.create_picture = create_picture;
            function search_marketplace(terms, type) {
            }
            Media.search_marketplace = search_marketplace;
            function askMusicAccessAsync(r) {
                return r.rt.host.askSourceAccessAsync("music", "your songs, song albums and playlists.", false);
            }
            Media.askMusicAccessAsync = askMusicAccessAsync;
            function askPictureAccessAsync(r) {
                return r.rt.host.askSourceAccessAsync("picture", "your pictures and picture albums.", false);
            }
            Media.askPictureAccessAsync = askPictureAccessAsync;
            function playlists(r) {
                askMusicAccessAsync(r).then(function (allow) { return r.resumeVal(undefined); }).done();
            }
            Media.playlists = playlists;
            function pictureUriForMedia(uri, media) {
                return uri;
            }
            Media.pictureUriForMedia = pictureUriForMedia;
            function pictureDataUriAsync(uri) {
                return TDev.Promise.as(undefined);
            }
            Media.pictureDataUriAsync = pictureDataUriAsync;
            var _pictureUrls = undefined;
            function picturesAsync(uri) {
                if (!!_pictureUrls)
                    return TDev.Promise.as(RT.Pictures.mk(_pictureUrls));
                return RT.BingServices.searchAsync("Images", "cat", null).then(function (results) {
                    _pictureUrls = results.map(function (r) { return r.url; }).slice(0, 4);
                    return RT.Pictures.mk(_pictureUrls);
                });
            }
            Media.picturesAsync = picturesAsync;
            var _pictureAlbums = undefined;
            function pictureAlbumsAsync(uri) {
                if (_pictureAlbums)
                    return TDev.Promise.as(_pictureAlbums);
                return Media.picturesAsync(uri).then(function (pics) {
                    _pictureAlbums = RT.PictureAlbums.mk([RT.PictureAlbum.mk('cats', 'cats', pics)]);
                    return _pictureAlbums;
                });
            }
            Media.pictureAlbumsAsync = pictureAlbumsAsync;
            function pictures(r) {
                askPictureAccessAsync(r).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(RT.Pictures.mk([]));
                    else
                        return Media.picturesAsync('');
                }).done(function (pics) { return r.resumeVal(pics); });
            }
            Media.pictures = pictures;
            function saved_pictures(r) {
                pictures(r);
            }
            Media.saved_pictures = saved_pictures;
            function choosePictureAsync(title, description) {
                if (title === void 0) { title = 'choose a picture'; }
                if (description === void 0) { description = ''; }
                var cam = navigator.camera;
                if (cam) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        cam.getPicture(function (url) {
                            onSuccess(RT.Picture.fromUrlSync(url, false, false));
                        }, function (msg) {
                            TDev.RT.App.logEvent(RT.App.DEBUG, "senses", "choose picture failed: " + msg, undefined);
                            onSuccess(undefined);
                        }, {
                            quality: 85,
                            mediaType: window.Camera.MediaType.JPEG,
                            sourceType: window.Camera.PictureSourceType.PHOTOLIBRARY,
                            destinationType: window.Camera.DestinationType.FILE_URI
                        });
                    });
                }
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var m = new TDev.ModalDialog();
                    var file = TDev.HTML.mkImageInput(true, -1);
                    var pic = null;
                    m.add([TDev.div("wall-dialog-header", title), TDev.div('wall-dialog-body', description), TDev.div("wall-dialog-input", file.element), TDev.div("wall-dialog-buttons", TDev.HTML.mkButtonOnce("ok", function () {
                        file.readAsync().then(function (dataUri) {
                            if (dataUri)
                                return RT.Picture.fromUrl(dataUri);
                            else
                                return TDev.Promise.as(null);
                        }).then(function (p) {
                            pic = p;
                            return p ? p.initAsync() : null;
                        }).done(function () {
                            m.dismiss();
                        });
                    }))]);
                    m.onDismiss = function () { return onSuccess(pic); };
                    m.show();
                });
            }
            Media.choosePictureAsync = choosePictureAsync;
            function choose_picture(r) {
                return choosePictureAsync().done(function (pic) { return r.resumeVal(pic); });
            }
            Media.choose_picture = choose_picture;
            function picture_albums(r) {
                askPictureAccessAsync(r).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(RT.PictureAlbums.mk([]));
                    else
                        return Media.pictureAlbumsAsync('');
                }).done(function (albums) { return r.resumeVal(albums); });
            }
            Media.picture_albums = picture_albums;
            function initSongAlbumAsync(album) {
                album.init('', 0, null);
                return TDev.Promise.as(undefined);
            }
            Media.initSongAlbumAsync = initSongAlbumAsync;
            function loadSongAlbumArtAsync(albumName) {
                return TDev.Promise.as(undefined);
            }
            Media.loadSongAlbumArtAsync = loadSongAlbumArtAsync;
            function songsAsync(album) {
                return TDev.Promise.as(RT.Songs.mk([]));
            }
            Media.songsAsync = songsAsync;
            function songAlbumsAsync() {
                return TDev.Promise.as(RT.SongAlbums.mk([]));
            }
            Media.songAlbumsAsync = songAlbumsAsync;
            function songs(r) {
                askMusicAccessAsync(r).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(RT.Songs.mk([]));
                    else
                        return Media.songsAsync("");
                }).done(function (s) { return r.resumeVal(s); });
            }
            Media.songs = songs;
            function song_albums(r) {
                askMusicAccessAsync(r).then(function (allow) {
                    if (!allow)
                        return TDev.Promise.as(RT.SongAlbums.mk([]));
                    else
                        return Media.songAlbumsAsync();
                }).done(function (s) { return r.resumeVal(s); });
            }
            Media.song_albums = song_albums;
            function create_board(height, s) {
                return RT.Board.mk(s.rt, false, 456, height, false);
            }
            Media.create_board = create_board;
            function create_full_board(s) {
                return RT.Board.mk(s.rt, false, 480, 800, true);
            }
            Media.create_full_board = create_full_board;
            function create_portrait_board(width, height, s) {
                return RT.Board.mk(s.rt, false, width, height, true);
            }
            Media.create_portrait_board = create_portrait_board;
            function create_landscape_board(width, height, s) {
                return RT.Board.mk(s.rt, true, width, height, true);
            }
            Media.create_landscape_board = create_landscape_board;
            var iconNames = [
                '123',
                '8ball',
                'abc',
                'acorn',
                'add',
                'addcircle',
                'addfolder',
                'addressbook',
                'adduser',
                'adminuser',
                'airplane',
                'aligncenter',
                'alignleft',
                'alignright',
                'almostequal',
                'alram',
                'anchor',
                'appointment',
                'approvebutton',
                'arrowbox',
                'arrowcirclealt',
                'arrow-circle-r',
                'arrowcirclerounded',
                'arrowdotted',
                'arrowdownl',
                'arrowdownr',
                'arrowdownrounded',
                'arrowhead',
                'arrowlarge',
                'arrowlr',
                'arrowmoving',
                'arrowr',
                'arrowrlarge',
                'arrowrounded',
                'arrowstandard',
                'arrowstandardcircle',
                'award',
                'barchart',
                'beer',
                'bell',
                'binoculars',
                'blankpage',
                'bold',
                'bolt',
                'bomb',
                'book',
                'bookmark',
                'briefcase',
                'brush',
                'bulletlist',
                'bullseye',
                'business',
                'businesscard',
                'businessperson',
                'butterfly',
                'cactus',
                'calculator',
                'callout',
                'camera',
                'capitalize',
                'caution',
                'chapback',
                'chapbackcircle',
                'chapforward',
                'chargingbattery',
                'check',
                'checkalt',
                'checkbox',
                'checkcircle',
                'checkcirclealt',
                'cherry',
                'clipboard',
                'clock',
                'clover',
                'club',
                'coffeecup',
                'command',
                'commandline',
                'construction',
                'contacts',
                'controller',
                'controls',
                'copyright',
                'creditcard',
                'cube',
                'cut',
                'cycle',
                'dashboard',
                'delete',
                'deleteuser',
                'deliverytruck',
                'directions',
                'document',
                'documents',
                'documentsalt',
                'dollar',
                'downbox',
                'download',
                'downloadbutton',
                'downloadbuttonalt',
                'downloadpage',
                'drawing',
                'email',
                'emaildoc',
                'emailopen',
                'emergency',
                'emptybattery',
                'erase',
                'euro',
                'exclamation',
                'exclamationcircle',
                'exclamationcirclealt',
                'exit',
                'expand',
                'eye',
                'farm',
                'female',
                'files',
                'film',
                'fire',
                'fit',
                'fithorizontal',
                'flag',
                'fleurdelis',
                'flipchart',
                'flowchart',
                'folder',
                'formattext',
                'forward',
                'forwardbutton',
                'fourcolumn',
                'fullbattery',
                'funnel',
                'gaspump',
                'globe',
                'globea',
                'globeas',
                'globeaus',
                'globeeua',
                'globesa',
                'globeus',
                'government',
                'gps',
                'grapes',
                'graph',
                'group',
                'halfbattery',
                'hammer',
                'headphones',
                'heart',
                'heartalt',
                'help',
                'home',
                'homealt',
                'horn',
                'horseshoe',
                'hourglass',
                'im',
                'inbox',
                'info',
                'infocircle',
                'infocirclealt',
                'italic',
                'journal',
                'joystick',
                'justified',
                'key',
                'lab',
                'ladder',
                'leaf',
                'lightbulb',
                'linechart',
                'link',
                'loading',
                'loadingalt',
                'location',
                'lock',
                'lockedfolder',
                'male',
                'map',
                'martini',
                'maximize',
                'megaphone',
                'mic',
                'minusbox',
                'minusboxalt',
                'mobilephone',
                'money',
                'monitor',
                'moon',
                'mountains',
                'movie',
                'mp3player',
                'multiply',
                'multiplycircle',
                'music',
                'mute',
                'needle',
                'newpage',
                'newpagealt',
                'nextscenebutton',
                'ninecolumn',
                'notebook',
                'numberedlist',
                'omega',
                'openfolder',
                'package',
                'pagecurl',
                'paint',
                'painting',
                'paperclip',
                'pause',
                'pausecircle',
                'pear',
                'pen',
                'penalt',
                'pencil',
                'person',
                'phone',
                'photo',
                'photos',
                'pie',
                'piechart',
                'play',
                'playbutton',
                'playcircle',
                'plusbox',
                'plusboxalt',
                'pluscircle',
                'pound',
                'power',
                'presentation',
                'pricetag',
                'printer',
                'pushpin',
                'question',
                'questioncircle',
                'questioncirclealt',
                'quote',
                'raindrop',
                'reading',
                'recycle',
                'removebutton',
                'removefolder',
                'removepage',
                'removeuser',
                'restore',
                'revert',
                'rewind',
                'rewindcircle',
                'ribbon',
                'runningman',
                'save',
                'savealt',
                'screwdriver',
                'search',
                'setting',
                'settings',
                'share',
                'sharethis',
                'shield',
                'shirt',
                'shoppingbag',
                'shoppingbasket',
                'shoppingcart',
                'shoppingcartalt',
                'shrink',
                'shuffle',
                'signal',
                'signalalt',
                'sixcolumn',
                'smartphone',
                'smiliehappy',
                'smiliehappyalt',
                'smiliejustok',
                'smiliejustokalt',
                'smiliesad',
                'smiliesadalt',
                'sms',
                'smsalt',
                'snowflake',
                'sort',
                'sortaz',
                'sound',
                'soundhigh',
                'soundlow',
                'space',
                'spade',
                'split',
                'stacks',
                'star',
                'staralt',
                'strikeout',
                'subtract',
                'subtractcircle',
                'suitcase',
                'sun',
                'switch',
                'tableft',
                'tabright',
                'tanktop',
                'target',
                'terminal',
                'text',
                'threecolumn',
                'thumbsdown',
                'ticket',
                'tools',
                'touchpad',
                'trash',
                'tree',
                'umbrella',
                'underline',
                'unlock',
                'upbox',
                'upload',
                'video',
                'videocam',
                'wand',
                'warning',
                'warningalt',
                'watch',
                'weather',
                'wheel',
                'wifi',
                'wine',
                'workorder',
                'wrench',
                'writepage',
                'yen',
                'zoomin',
                'zoomout'
            ];
            function icon_names() {
                return RT.Collection.mkStrings(iconNames.slice(0));
            }
            Media.icon_names = icon_names;
            function load_icon(name, size) {
                if (iconNames.indexOf(name.toLowerCase()) < 0)
                    return undefined;
                return RT.Picture.fromSVGIcon(name.toLowerCase(), size);
            }
            function icon(name) {
                return load_icon(name, 48);
            }
            Media.icon = icon;
            function large_icon(name) {
                return load_icon(name, 96);
            }
            Media.large_icon = large_icon;
        })(Media = RT.Media || (RT.Media = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var MediaLink = (function (_super) {
            __extends(MediaLink, _super);
            function MediaLink() {
                _super.call(this);
            }
            MediaLink.mk = function (kind, title, url) {
                var m = new MediaLink();
                m._kind = kind;
                m._title = title;
                m._url = url;
                return m;
            };
            MediaLink.prototype.title = function () {
                return this._title;
            };
            MediaLink.prototype.author = function () {
                return this._author;
            };
            MediaLink.prototype.album = function () {
                return this._album;
            };
            MediaLink.prototype.date = function () {
                return this._date;
            };
            MediaLink.prototype.duration = function () {
                return this._duration || 0;
            };
            MediaLink.prototype.kind = function () {
                return this._kind;
            };
            MediaLink.prototype.url = function () {
                return this._url;
            };
            MediaLink.prototype.set_url = function (url) {
                this._url = url;
            };
            MediaLink.prototype.post_to_wall = function (s) {
                switch (this.kind()) {
                    case 'video':
                        var video = TDev.createElement("video", "", this.title());
                        video.src = this.url();
                        video.controls = true;
                        video.autobuffer = true;
                        video.load();
                        s.rt.postBoxedHtml(video, s.pc);
                        break;
                    case 'song':
                        var audio = RT.Song.createAudio(this.url());
                        s.rt.postBoxedHtml(audio, s.pc);
                        break;
                    case 'picture':
                        var img = TDev.HTML.mkImg(this.url());
                        s.rt.postBoxedHtml(img, s.pc);
                        break;
                }
            };
            MediaLink.prototype.play = function () {
                RT.Player.play_home_media(this);
            };
            return MediaLink;
        })(RT.RTValue);
        RT.MediaLink = MediaLink;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var MediaPlayer = (function (_super) {
            __extends(MediaPlayer, _super);
            function MediaPlayer() {
                _super.call(this);
                this._volume = undefined;
            }
            MediaPlayer.prototype.volume = function () {
                return this._volume;
            };
            MediaPlayer.prototype.set_volume = function (volume) {
                this._volume = volume;
            };
            MediaPlayer.prototype.device = function () {
                return undefined;
            };
            MediaPlayer.prototype.name = function () {
                return undefined;
            };
            MediaPlayer.prototype.post_to_wall = function () {
            };
            MediaPlayer.prototype.is_control_supported = function () {
                return undefined;
            };
            MediaPlayer.prototype.resume = function () {
            };
            MediaPlayer.prototype.stop = function () {
            };
            MediaPlayer.prototype.pause = function () {
            };
            MediaPlayer.prototype.next = function () {
            };
            MediaPlayer.prototype.previous = function () {
            };
            MediaPlayer.prototype.play = function () {
            };
            MediaPlayer.prototype.play_media = function (url) {
            };
            MediaPlayer.prototype.play_home_media = function (media) {
            };
            MediaPlayer.prototype.active_media = function () {
                return undefined;
            };
            MediaPlayer.prototype.play_position = function () {
                return undefined;
            };
            MediaPlayer.prototype.is_stopped = function () {
                return undefined;
            };
            MediaPlayer.prototype.is_playing = function () {
                return undefined;
            };
            MediaPlayer.prototype.is_paused = function () {
                return undefined;
            };
            MediaPlayer.prototype.status = function () {
                return undefined;
            };
            MediaPlayer.prototype.is_volume_supported = function () {
                return undefined;
            };
            return MediaPlayer;
        })(RT.RTValue);
        RT.MediaPlayer = MediaPlayer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var MediaServer = (function (_super) {
            __extends(MediaServer, _super);
            function MediaServer() {
                _super.call(this);
            }
            MediaServer.prototype.device = function () {
                return undefined;
            };
            MediaServer.prototype.name = function () {
                return undefined;
            };
            MediaServer.prototype.post_to_wall = function () {
            };
            MediaServer.prototype.songs = function () {
                return undefined;
            };
            MediaServer.prototype.videos = function () {
                return undefined;
            };
            MediaServer.prototype.pictures = function () {
                return undefined;
            };
            MediaServer.prototype.search_songs = function (term) {
                return undefined;
            };
            MediaServer.prototype.search_videos = function (term) {
                return undefined;
            };
            MediaServer.prototype.search_videos_by_date = function (start, end) {
                return undefined;
            };
            MediaServer.prototype.search_pictures_by_date = function (start, end) {
                return undefined;
            };
            MediaServer.prototype.choose_song = function (r) {
            };
            MediaServer.prototype.choose_video = function (r) {
            };
            MediaServer.prototype.choose_picture = function (r) {
            };
            return MediaServer;
        })(RT.RTValue);
        RT.MediaServer = MediaServer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Message = (function (_super) {
            __extends(Message, _super);
            function Message() {
                _super.call(this);
                this._id = undefined;
                this._title = undefined;
                this._message = undefined;
                this._from = undefined;
                this._to = undefined;
                this._picture_link = undefined;
                this._link = undefined;
                this._media_link = undefined;
                this._location = undefined;
                this._time = undefined;
                this._source = undefined;
                this._values = new RT.StringMap();
            }
            Message.mk = function (message) {
                var m = new Message();
                m.set_message(message);
                m.set_source("");
                m.set_from("me");
                return m;
            };
            Message.prototype.title = function () {
                return this._title;
            };
            Message.prototype.set_title = function (title) {
                this._title = title;
            };
            Message.prototype.message = function () {
                return this._message;
            };
            Message.prototype.set_message = function (message) {
                this._message = message;
            };
            Message.prototype.id = function () {
                return this._id;
            };
            Message.prototype.set_id = function (value) {
                this._id = value;
            };
            Message.prototype.from = function () {
                return this._from;
            };
            Message.prototype.set_from = function (author) {
                this._from = author;
            };
            Message.prototype.to = function () {
                return this._to;
            };
            Message.prototype.set_to = function (author) {
                this._to = author;
            };
            Message.prototype.picture_link = function () {
                return this._picture_link;
            };
            Message.prototype.set_picture_link = function (url) {
                this._picture_link = url;
            };
            Message.prototype.link = function () {
                return this._link;
            };
            Message.prototype.set_link = function (url) {
                this._link = url;
            };
            Message.prototype.media_link = function () {
                return this._media_link;
            };
            Message.prototype.set_media_link = function (url) {
                this._media_link = url;
            };
            Message.prototype.location = function () {
                return this._location;
            };
            Message.prototype.set_location = function (location) {
                this._location = location;
            };
            Message.prototype.time = function () {
                return this._time || RT.DateTime.defaultValue;
            };
            Message.prototype.set_time = function (time) {
                this._time = time;
            };
            Message.prototype.source = function () {
                return this._source;
            };
            Message.prototype.set_source = function (source) {
                this._source = source;
            };
            Message.prototype.toString = function () {
                var sb = '';
                if (this.title())
                    sb += this.title() + '\n';
                if (this.message())
                    sb += this.message() + '\n';
                if (this.from() && this.from() != "me")
                    sb += "from " + this.from() + '\n';
                if (this.to())
                    sb += "to " + this.to() + '\n';
                if (this.link())
                    sb += "at " + this.link() + '\n';
                if (this.picture_link())
                    sb += "with " + this.picture_link() + '\n';
                if (this.media_link())
                    sb += "with " + this.media_link() + '\n';
                if (this.location())
                    sb += "at location " + this.location().toString() + '\n';
                if (this.source())
                    sb += "source " + this.source() + '\n';
                if (this.time() && !this.time().isDefaultValue())
                    sb += this.time().from_now() + '\n';
                return sb;
            };
            Message.prototype.getViewCore = function (s, b) {
                var _this = this;
                var d = TDev.div("item");
                if (this.picture_link())
                    d.appendChild(TDev.img("item-image", this.picture_link(), "linked picture"));
                var dc = TDev.div("item-info");
                d.appendChild(dc);
                if (this.from())
                    dc.appendChild(TDev.div("item-title", this.from()));
                if (this.title())
                    dc.appendChild(TDev.div("item-subtitle", this.title()));
                if (this.message())
                    dc.appendChild(TDev.div("item-description", TDev.tweetify(this.message())));
                var subtle = this.source() || '';
                if (this.time() && !this.time().isDefaultValue())
                    subtle += ' ' + this.time().from_now();
                dc.appendChild(TDev.div("item-subtle", subtle));
                if (this.link() || this.media_link()) {
                    var f = function () { return RT.Web.browseAsync(_this.link()).done(); };
                    if (this.media_link()) {
                        f = function () { return RT.Web.play_media(_this.media_link()); };
                    }
                    b.withClick(f);
                }
                return d;
            };
            Message.prototype.share = function (network, r) {
                TDev.HTML.showProgressNotification(TDev.lf("sharing message..."));
                RT.ShareManager.shareTextAsync(this.toString(), network).done(function () { return r.resume(); });
            };
            Message.prototype.values = function () {
                return this._values;
            };
            Message.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Message;
        })(RT.RTValue);
        RT.Message = Message;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Motion = (function (_super) {
            __extends(Motion, _super);
            function Motion() {
                _super.call(this);
            }
            Motion.prototype.acceleration = function () {
                return this._acceleration;
            };
            Motion.prototype.rotation_speed = function () {
                return this._rotation_speed;
            };
            Motion.prototype.gravity = function () {
                return this._gravity;
            };
            Motion.prototype.time = function () {
                return this._time;
            };
            Motion.prototype.yaw = function () {
                return this._yaw;
            };
            Motion.prototype.pitch = function () {
                return this._pitch;
            };
            Motion.prototype.roll = function () {
                return this._roll;
            };
            Motion.prototype.post_to_wall = function (s) {
                var rt = s.rt;
                if (this.acceleration())
                    rt.postBoxedText('acc: ' + this.acceleration.toString(), s.pc);
                if (this.rotation_speed())
                    rt.postBoxedText('rot: ' + this.rotation_speed.toString(), s.pc);
                if (this.gravity())
                    rt.postBoxedText('g: ' + this.gravity().toString(), s.pc);
                if (this.yaw())
                    rt.postBoxedText('yaw: ' + this.yaw.toString(), s.pc);
                if (this.pitch())
                    rt.postBoxedText('pitch: ' + this.pitch.toString(), s.pc);
                if (this.roll())
                    rt.postBoxedText('roll: ' + this.roll.toString(), s.pc);
            };
            return Motion;
        })(RT.RTValue);
        RT.Motion = Motion;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Number_;
        (function (Number_) {
            function to_string(self) {
                return self.toString();
            }
            Number_.to_string = to_string;
            function fromArtUrl(url) {
                return TDev.Promise.wrap(RT.String_.to_number(url));
            }
            Number_.fromArtUrl = fromArtUrl;
            function post_to_wall(self, s) {
                var box = s.rt.postBoxedText(self.toString(), s.pc);
            }
            Number_.post_to_wall = post_to_wall;
            function to_character(self) {
                var c = Math.round(self);
                if (c < -0x8000 || c > 0xFFFF)
                    return undefined;
                c &= 0xFFFF;
                return String.fromCharCode(c);
            }
            Number_.to_character = to_character;
            function to_color(self) {
                return RT.Color.fromInt32(self);
            }
            Number_.to_color = to_color;
            function picker() {
                var inp = TDev.HTML.mkTextInput("number", TDev.lf("number"));
                return {
                    html: inp,
                    validate: function () { return /^[+-]?[0-9]+(\.[0-9]+)?$/.test(inp.value); },
                    get: function () { return parseFloat(inp.value); },
                    set: function (v) {
                        inp.value = v + "";
                    }
                };
            }
            Number_.picker = picker;
            function to_json(self) {
                return RT.JsonObject.wrap(self);
            }
            Number_.to_json = to_json;
            function add(self, other) {
                return 0;
            }
            Number_.add = add;
            function subtract(self, other) {
                return 0;
            }
            Number_.subtract = subtract;
            function multiply(self, other) {
                return 0;
            }
            Number_.multiply = multiply;
            function divide(self, other) {
                return 0;
            }
            Number_.divide = divide;
            function eq(self, other) {
                return false;
            }
            Number_.eq = eq;
            function neq(self, other) {
                return false;
            }
            Number_.neq = neq;
            function le(self, other) {
                return false;
            }
            Number_.le = le;
            function lt(self, other) {
                return false;
            }
            Number_.lt = lt;
            function ge(self, other) {
                return false;
            }
            Number_.ge = ge;
            function gt(self, other) {
                return false;
            }
            Number_.gt = gt;
        })(Number_ = RT.Number_ || (RT.Number_ = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var NumberMap = (function (_super) {
            __extends(NumberMap, _super);
            function NumberMap() {
                _super.call(this);
                this.items = new Object();
                this.length = 0;
                this._canvas = undefined;
            }
            NumberMap.prototype.count = function () {
                return this.length;
            };
            NumberMap.prototype.clear = function () {
                this.items = new Object();
                this.length = 0;
            };
            NumberMap.prototype.sum = function () {
                var _this = this;
                var r = 0;
                Object.keys(this.items).forEach(function (key) {
                    var value = _this.at_key(key);
                    r += value;
                });
                return r;
            };
            NumberMap.prototype.avg = function () {
                return this.sum() / this.length;
            };
            NumberMap.prototype.slice = function (start, end) {
                var _this = this;
                var nm = new NumberMap();
                Object.keys(this.items).forEach(function (skey) {
                    var value = _this.at_key(skey);
                    var key = parseFloat(skey);
                    if (start <= key && key < end)
                        nm.set_at_key(skey, value);
                });
                return nm;
            };
            NumberMap.prototype.min = function () {
                var _this = this;
                if (this.length == 0)
                    return undefined;
                var r = Number.MAX_VALUE;
                Object.keys(this.items).forEach(function (key) {
                    var value = _this.at_key(key);
                    if (value < r)
                        r = value;
                });
                return r;
            };
            NumberMap.prototype.max = function () {
                var _this = this;
                if (this.length == 0)
                    return undefined;
                var r = Number.MIN_VALUE;
                Object.keys(this.items).forEach(function (key) {
                    var value = _this.at_key(key);
                    if (value > r)
                        r = value;
                });
                return r;
            };
            NumberMap.prototype.at_key = function (key) {
                var result = (this.items)[key];
                if (!result) {
                    return 0;
                }
                return (result);
            };
            NumberMap.prototype.at = function (index) {
                var key = index.toString();
                return this.at_key(key);
            };
            NumberMap.prototype.set_at = function (index, value) {
                var key = index.toString();
                this.set_at_key(key, value);
            };
            NumberMap.prototype.set_at_key = function (key, value) {
                var val = this.items[key];
                if (val != undefined)
                    this.length--;
                this.items[key] = value;
                if (value != undefined)
                    this.length++;
            };
            NumberMap.prototype.set_many = function (numbers) {
                var _this = this;
                Object.keys(numbers.items).forEach(function (key) {
                    var value = numbers.at_key(key);
                    _this.set_at_key(key, value);
                });
            };
            NumberMap.prototype.remove = function (index) {
                var val = this.items[index];
                if (val != undefined) {
                    this.length--;
                    this.items[index] = undefined;
                }
            };
            NumberMap.prototype.toString = function () {
                var _this = this;
                var s = "{";
                var count = 0;
                Object.keys(this.items).forEach(function (key) {
                    if (count++ <= 20) {
                        var value = _this.at_key(key);
                        if (s.length > 1)
                            s += ", ";
                        s += key + "->" + value;
                    }
                });
                if (count == 20)
                    s += ', ...';
                s += "}";
                return s;
            };
            NumberMap.prototype.get_enumerator = function () {
                var k = Object.keys(this.items).map(parseFloat);
                k.sort(function (a, b) { return a - b; });
                return k;
            };
            NumberMap.prototype.update_on_wall = function () {
                this.updateCanvas();
            };
            NumberMap.prototype.updateCanvas = function () {
                var _this = this;
                if (this._canvas) {
                    this._canvas.height = this._canvas.width;
                    var points = [];
                    Object.keys(this.items).forEach(function (skey) {
                        var key = parseFloat(skey);
                        var value = _this.at_key(skey);
                        points.push(new TDev.RT.Charts.Point(key, value));
                    });
                    new TDev.RT.Charts.CanvasChart().drawChart(this._canvas, points);
                }
            };
            NumberMap.prototype.updateViewCore = function (s, b) {
                this.updateCanvas();
            };
            NumberMap.prototype.getViewCore = function (s, b) {
                this._canvas = document.createElement("canvas");
                return this._canvas;
            };
            NumberMap.prototype.to_json = function () {
                return RT.JsonObject.wrap(this.exportJson(null));
            };
            NumberMap.prototype.from_json = function (jobj) {
                this.importJson(null, jobj.value());
            };
            NumberMap.prototype.exportJson = function (ctx) {
                var _this = this;
                var obj = {};
                Object.keys(this.items).forEach(function (k) {
                    obj[k] = _this.items[k];
                });
                return obj;
            };
            NumberMap.prototype.importJson = function (ctx, json) {
                var _this = this;
                if ((typeof (json) !== "object") || Array.isArray(json)) {
                    this.clear();
                    return this;
                }
                else {
                    this.items = {};
                    this.length = 0;
                    Object.keys(json).forEach(function (k) {
                        var v = json[k];
                        if (typeof v == "number") {
                            _this.items[k] = v;
                            _this.length++;
                        }
                    });
                }
            };
            NumberMap.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            NumberMap.prototype.debuggerDisplay = function (clickHandler) {
                return TDev.span(null, "NumberMap[" + this.length + "]").withClick(clickHandler);
            };
            NumberMap.prototype.debuggerChildren = function () {
                var ret = {};
                var items = this.items;
                Object.keys(items).forEach(function (k) {
                    ret["at(" + k + ")"] = items[k];
                });
                return ret;
            };
            return NumberMap;
        })(RT.RTValue);
        RT.NumberMap = NumberMap;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Page = (function (_super) {
            __extends(Page, _super);
            function Page() {
                _super.call(this);
            }
            Page.mk = function (p) {
                if (!p)
                    return undefined;
                var r = new Page();
                r.page = p;
                return r;
            };
            Page.prototype.on_navigated_from = function (handler) {
                return this.page.onNavigatedFrom.addHandler(handler);
            };
            Page.prototype.equals = function (other) {
                return this.page === other.page;
            };
            Page.prototype.post_to_wall = function () {
            };
            return Page;
        })(RT.RTValue);
        RT.Page = Page;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var PageButton = (function (_super) {
            __extends(PageButton, _super);
            function PageButton() {
                _super.call(this);
            }
            PageButton.mk = function (icon, text, page) {
                var pb = new PageButton();
                pb._icon = icon;
                pb._text = text;
                pb._page = page;
                return pb;
            };
            PageButton.prototype.page = function () {
                return this._page;
            };
            PageButton.prototype.equals = function (page_button) {
                return this === page_button;
            };
            PageButton.prototype.post_to_wall = function (s) {
            };
            PageButton.prototype.icon = function () {
                return this._icon;
            };
            PageButton.prototype.text = function () {
                return this._text;
            };
            PageButton.prototype.getElement = function () {
                if (!this._element) {
                    this._element = TDev.HTML.mkButtonElt("topMenu-button", [
                        TDev.div("topMenu-button-frame", RT.PageButtonManager.getIconElement(this._icon)),
                        TDev.div("topMenu-button-desc", this._text)
                    ]);
                    this._element.style.display = 'inline-block';
                }
                return this._element;
            };
            return PageButton;
        })(RT.RTValue);
        RT.PageButton = PageButton;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var PageButtonManager;
        (function (PageButtonManager) {
            var _iconSymbols = {
                "add": "add",
                "back": "back",
                "cancel": "cancel",
                "check": "check",
                "close": "cancel",
                "delete": "delete",
                "download": "download",
                "edit": "edit",
                "favs.addto": "heart",
                "favs": "star",
                "feature.camera": "camera",
                "feature.email": "email",
                "feature.search": "search",
                "feature.settings": "settings",
                "feature.video": "video",
                "folder": "folder",
                "minus": "subtract",
                "new": "newpage",
                "next": "forward",
                "questionmark": "question",
                "refresh": "recycle",
                "save": "save",
                "share": "sharethis",
                "stop": "stop",
                "sync": "cycle",
                "transport.ff": "forward",
                "transport.pause": "pause",
                "transport.play": "play",
                "transport.rew": "rewind",
                "upload": "upload"
            };
            PageButtonManager.getIconElement = function (name) {
                var symbol = _iconSymbols[name];
                if (!symbol)
                    return TDev.span('', name.slice(0, 1));
                else
                    return TDev.HTML.mkImg('svg:' + symbol + ",black");
            };
        })(PageButtonManager = RT.PageButtonManager || (RT.PageButtonManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Phone;
        (function (Phone) {
            function dial_phone_number(n, r) {
                var m = new TDev.ModalDialog();
                m.add([TDev.div("wall-dialog-header", TDev.lf("call number")), TDev.div("wall-dialog-body", n)]);
                if (TDev.Browser.isCellphone)
                    m.add(TDev.div("wall-dialog-body", TDev.lf("note: install the Skype app to place Skype calls.")));
                else
                    m.add(TDev.div("wall-dialog-body", TDev.lf("note: Phone calls might not be supported on this platform. Install the Skype app to place Skype calls.")));
                m.add(TDev.div("wall-dialog-buttons", [
                    TDev.HTML.mkButton(TDev.lf("call"), function () {
                        m.onDismiss = null;
                        m.dismiss();
                        var url = "tel:" + encodeURIComponent(n || " ");
                        RT.Web.browse(url, r);
                    }),
                    TDev.HTML.mkButton(TDev.lf("Skype"), function () {
                        m.onDismiss = null;
                        m.dismiss();
                        var url = "skype:" + encodeURIComponent(n || " ");
                        RT.Web.browse(url, r);
                    }),
                ]));
                m.onDismiss = function () { return r.resume(); };
                m.show();
            }
            Phone.dial_phone_number = dial_phone_number;
            function choose_phone_number(r) {
                RT.Social.chooseContactAsync().done(function (c) {
                    var url = c ? (c.phone_number() || c.work_phone() || c.home_phone()) : "";
                    if (url)
                        r.resumeVal(RT.Link.mk(url, 4 /* phoneNumber */));
                    else
                        r.resumeVal(undefined);
                });
            }
            Phone.choose_phone_number = choose_phone_number;
            function save_phone_number(phone_number) {
            }
            Phone.save_phone_number = save_phone_number;
            function save_contact(contact) {
                RT.Social.save_contact(contact);
            }
            Phone.save_contact = save_contact;
            function vibrate(seconds) {
                Phone.vibrateCore(seconds);
            }
            Phone.vibrate = vibrate;
            Phone.vibrateCore = function (seconds) {
                if (window.navigator.vibrate) {
                    var ms = Math.min(5, Math.max(0.02, seconds)) * 1000.0;
                    window.navigator.vibrate(ms);
                }
            };
            function choose_address(r) {
                RT.Social.chooseContactAsync().done(function (c) {
                    var url = c ? (c.home_address() || c.work_address()) : "";
                    if (url)
                        r.resumeVal(RT.Link.mk(url, 7 /* address */));
                    else
                        r.resumeVal(undefined);
                });
            }
            Phone.choose_address = choose_address;
            function power_source(r) {
                r.resumeVal("");
            }
            Phone.power_source = power_source;
        })(Phone = RT.Phone || (RT.Phone = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Picture = (function (_super) {
            __extends(Picture, _super);
            function Picture() {
                _super.call(this);
                this._date = undefined;
                this._location = undefined;
                this._isResource = false;
                this._isReadOnly = false;
                this.imageData = null;
                this.imageDataHasChanges = false;
                this.fitToColumn = false;
            }
            Picture.prototype.clearUrl = function () {
                this._url = undefined;
            };
            Picture.prototype.getReadonlyUrlSync = function () {
                if (this._isReadOnly && this._url && !this.canvas && !/^data:/.test(this._url))
                    return this._url;
                return undefined;
            };
            Picture.prototype.getUrlAsync = function () {
                var url = this.getReadonlyUrlSync();
                if (url)
                    return TDev.Promise.as(url);
                return this.getDataUriAsync();
            };
            Picture.prototype.getDataUriAsync = function (quality, maxWidth) {
                var _this = this;
                if (quality === void 0) { quality = 0.95; }
                if (maxWidth === void 0) { maxWidth = -1; }
                return this.initAsync().then(function () {
                    _this.commitImageData();
                    return _this.getDataUri(quality, maxWidth);
                });
            };
            Picture.prototype.getImageElement = function () {
                if (this._isReadOnly && this._url && !this.canvas) {
                    TDev.Util.log("img: direct display " + this._url.slice(0, 100));
                    var img = TDev.createElement("img");
                    img.src = this._url;
                    img.alt = this._url;
                    return img;
                }
                return undefined;
            };
            Picture.prototype.getDataUri = function (quality, maxWidth, forceJpeg) {
                if (quality === void 0) { quality = 0.9; }
                if (maxWidth === void 0) { maxWidth = -1; }
                if (forceJpeg === void 0) { forceJpeg = false; }
                this.commitImageData();
                var c = this.getCanvas();
                if (c.width == 0 || c.height == 0) {
                    c = document.createElement('canvas');
                    c.width = 1;
                    c.height = 1;
                }
                if (maxWidth > 0 && c.width > maxWidth) {
                    var temp = document.createElement('canvas');
                    temp.width = maxWidth;
                    temp.height = maxWidth / c.width * c.height;
                    var tempCtx = temp.getContext("2d");
                    tempCtx.drawImage(c, 0, 0, c.width, c.height, 0, 0, temp.width, temp.height);
                    c = temp;
                }
                if (quality >= 1 && !forceJpeg)
                    return c.toDataURL('image/png');
                else
                    return c.toDataURL('image/jpeg', quality);
            };
            Picture.mk = function (w, h) {
                var p = new Picture();
                p.initFn = function () {
                    p._init(w, h);
                    return TDev.Promise.as();
                };
                return p;
            };
            Picture.mkSync = function (w, h) {
                var p = new Picture();
                p.initPromise = TDev.Promise.as();
                p._init(w, h);
                return p;
            };
            Picture.prototype.imgLoadAsync = function (url, cors, dataUrl) {
                var _this = this;
                if (dataUrl === void 0) { dataUrl = null; }
                var rt = TDev.Runtime.theRuntime;
                var auth = (!dataUrl && cors && !/^https:\/\/az31353.vo.msecnd.net\/pub\//.test(url)) ? TDev.Cloud.authenticateAsync(TDev.lf("image proxying")) : TDev.Promise.as(true);
                return auth.then(function (authenticated) {
                    TDev.Util.log('picture load: 0');
                    if (dataUrl) {
                        TDev.Util.log('picture load: dataurl, skipping wab request');
                        return undefined;
                    }
                    else
                        return RT.Media.pictureDataUriAsync(url);
                }).then(function (d) {
                    if (!dataUrl && d) {
                        TDev.Util.log('picture: updated dataurl');
                        dataUrl = d;
                    }
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.Util.log('picture: loading');
                        var img = document.createElement("img");
                        img.onload = function () {
                            TDev.Util.log('picture: loaded ' + img.width + 'x' + img.height);
                            _this._init(img.width, img.height);
                            _this._url = url;
                            _this._cors = cors;
                            _this.ctx.drawImage(img, 0, 0);
                            img = null;
                            dataUrl = null;
                            href = null;
                            onSuccess(_this);
                        };
                        img.onerror = function () {
                            TDev.Util.log('picture: failed to load');
                            _this._init(480, 480);
                            _this._url = url;
                            _this._cors = cors;
                            _this.ctx.save();
                            _this.ctx.fillStyle = "lightgray";
                            _this.ctx.fillRect(0, 0, 480, 480);
                            _this.ctx.fillStyle = "white";
                            _this.ctx.textAlign = "center";
                            _this.ctx.textBaseline = "top";
                            _this.ctx.font = "240px sans-serif";
                            _this.ctx.fillText(':(', 240, 60);
                            _this.ctx.font = "42px sans-serif";
                            _this.ctx.fillText('picture failed to load', 240, 360);
                            _this.ctx.restore();
                            img = null;
                            dataUrl = null;
                            href = null;
                            onSuccess(_this);
                        };
                        var href = dataUrl ? dataUrl : cors ? RT.Web.proxy(url) : url;
                        img.src = href;
                        img.alt = url;
                    });
                });
            };
            Picture.prototype.delayLoadSync = function (f) {
                this.initFn = f;
                return this;
            };
            Picture.prototype.delayLoad = function (f) {
                this.delayLoadSync(f);
                return TDev.Promise.as(this);
            };
            Picture.delayed = function (f) {
                return new Picture().delayLoad(f);
            };
            Picture.fromImage = function (img) {
                var p = Picture.mkSync(img.width, img.height);
                p.ctx.save();
                p.ctx.drawImage(img, 0, 0, img.width, img.height);
                p.ctx.restore();
                return p;
            };
            Picture.fromCanvas = function (canvas) {
                var p = Picture.mkSync(canvas.width, canvas.height);
                p.ctx.save();
                p.ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height);
                p.ctx.restore();
                return p;
            };
            Picture.fromDataUrl = function (dataUrl, originalUrl, isResource) {
                if (originalUrl === void 0) { originalUrl = null; }
                if (isResource === void 0) { isResource = false; }
                if (!dataUrl)
                    return TDev.Promise.as(null);
                TDev.Util.log('picture: loading from dataurl');
                TDev.Util.check(/^data:image\/(jpeg|png|svg\+xml);base64,/i.test(dataUrl));
                var img = new Picture();
                img._isResource = isResource;
                img._isReadOnly = isResource;
                return img.delayLoad(function (p) { return p.imgLoadAsync(originalUrl, false, dataUrl); });
            };
            Picture.fromUrlSync = function (url, isReadOnly, cors) {
                if (isReadOnly === void 0) { isReadOnly = false; }
                if (cors === void 0) { cors = true; }
                var img = new Picture();
                img._url = url;
                img._isResource = false;
                img._isReadOnly = isReadOnly;
                return img.delayLoadSync(function (p) { return p.loadAsync(url, cors); });
            };
            Picture.fromUrl = function (url, isReadOnly, cors) {
                if (isReadOnly === void 0) { isReadOnly = false; }
                if (cors === void 0) { cors = true; }
                return TDev.Promise.as(Picture.fromUrlSync(url, isReadOnly, cors));
            };
            Picture.patchLocalArtUrl = function (url) {
                return url;
            };
            Picture.fromArtUrl = function (url) {
                if (/^data:image\/(jpeg|png|svg\+xml);base64,/i.test(url))
                    return Picture.fromDataUrl(url, undefined, true);
                var cors = true;
                if (/^\.\/art\//.test(url)) {
                    url = Picture.patchLocalArtUrl(url);
                    cors = false;
                }
                return RT.ArtCache.getArtAsync(url, "image/*").then(function () {
                    TDev.Util.log('picture: fromArtUrl delayed');
                    var img = new Picture();
                    img._url = url;
                    img._isResource = true;
                    img._isReadOnly = true;
                    return img.delayLoad(function (p) { return p.loadAsync(url, cors); });
                });
            };
            Picture.prototype.loadAsync = function (url, cors) {
                var _this = this;
                if (/^data:image\/(jpeg|png|svg\+xml);base64,/i.test(url))
                    return this.imgLoadAsync(url, false, url);
                if (this._isResource || RT.ArtCache.isArtResource(url))
                    return RT.ArtCache.getArtAsync(url, "image/*").then(function (dataUrl) { return _this.imgLoadAsync(url, cors, dataUrl); });
                return this.imgLoadAsync(url, cors);
            };
            Picture.fromSVGIcon = function (name, sz) {
                var p = Picture.mkSync(sz, sz);
                p.ctx.save();
                var scale = sz / 480;
                p.ctx.fillStyle = "white";
                p.ctx.scale(scale, scale);
                TDev.SVG.drawSVG(p.ctx, name);
                p.ctx.restore();
                p.fitToColumn = false;
                return p;
            };
            Picture.prototype._init = function (w, h) {
                w = Math.round(w);
                h = Math.round(h);
                this.slowlyloadingelement = undefined;
                this.canvas = document.createElement("canvas");
                this.canvas.width = w;
                this.canvas.height = h;
                this.ctx = this.canvas.getContext("2d");
            };
            Picture.prototype.commitImageData = function () {
                if (this.imageDataHasChanges) {
                    this.imageDataHasChanges = false;
                    this.ctx.putImageData(this.imageData, 0, 0);
                }
            };
            Picture.prototype.changed = function (invalidateData) {
                if (invalidateData === void 0) { invalidateData = true; }
                if (this._isReadOnly)
                    TDev.Util.userError(TDev.lf("This picture cannot be modified. Use 'clone' to get a copy of the picture that can be modified.\n\n    var pic := \u273fmy art->clone"));
                if (invalidateData) {
                    this.commitImageData();
                    this.imageData = null;
                }
                this.versioncounter++;
                this._url = undefined;
            };
            Picture.prototype.getImageData = function () {
                TDev.Util.assert(!!this.ctx);
                if (!this.imageData)
                    this.imageData = this.ctx.getImageData(0, 0, this.widthSync(), this.heightSync());
                return this.imageData;
            };
            Picture.prototype.hasCanvas = function () {
                return !!this.canvas;
            };
            Picture.prototype.widthSync = function () {
                return this.canvas.width;
            };
            Picture.prototype.heightSync = function () {
                return this.canvas.height;
            };
            Picture.prototype.getCanvas = function () {
                TDev.Util.assert(!!this.canvas);
                return this.canvas;
            };
            Picture.prototype.count = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this.canvas.width * _this.canvas.height;
                });
            };
            Picture.prototype.date = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this._date;
                });
            };
            Picture.prototype.height = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this.canvas.height;
                });
            };
            Picture.prototype.equals = function (other_picture) {
                return this == other_picture;
            };
            Picture.prototype.is_panorama = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this.canvas.width > _this.canvas.height;
                });
            };
            Picture.prototype.location = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this._location;
                });
            };
            Picture.prototype.width = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    return _this.canvas.width;
                });
            };
            Picture.prototype.update_on_wall = function () {
                if (this.imageData)
                    this.ctx.putImageData(this.imageData, 0, 0);
            };
            Picture.prototype.at = function (index, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    if (isNaN(index))
                        return RT.Colors.transparent();
                    index = Math.round(index);
                    index *= 4;
                    var id = _this.getImageData();
                    if (index < 0 || index >= id.data.length)
                        return RT.Colors.transparent();
                    return RT.Color.fromArgb(id.data[index + 3], id.data[index], id.data[index + 1], id.data[index + 2]);
                });
            };
            Picture.prototype.initAsync = function () {
                var _this = this;
                if (this.initPromise)
                    return this.initPromise;
                var f = this.initFn;
                if (f) {
                    this.initFn = null;
                    this.initPromise = f(this);
                    this.initPromise.done(function () {
                        _this.initPromise = null;
                    });
                    if (this.initPromise)
                        return this.initPromise;
                }
                return TDev.Promise.as();
            };
            Picture.prototype.loadFirst = function (r, f) {
                TDev.Util.assert(!!r);
                if (!this.initPromise && !this.initFn) {
                    if (!f)
                        r.resume();
                    else
                        r.resumeVal(f());
                }
                else {
                    this.initAsync().done(function () {
                        if (!f)
                            r.resume();
                        else
                            r.resumeVal(f());
                    });
                }
            };
            Picture.prototype.atPosition = function (r, left, top, angle, opacity, f) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    _this.ctx.translate(left, top);
                    _this.ctx.rotate(angle / 180 * Math.PI);
                    _this.ctx.globalAlpha = RT.Math_.normalize(opacity);
                    f();
                    _this.ctx.restore();
                });
            };
            Picture.prototype.blend = function (other, left, top, angle, opacity, r) {
                var _this = this;
                opacity = RT.Math_.normalize(opacity);
                this.atPosition(r, left, top, angle, opacity, function () {
                    other.initAsync().done(function () { return _this.ctx.drawImage(other.getCanvas(), 0, 0); });
                });
            };
            Picture.prototype.clone = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.commitImageData();
                    var p = Picture.mkSync(_this.widthSync(), _this.heightSync());
                    p.ctx.drawImage(_this.canvas, 0, 0);
                    p._url = _this._url;
                    p._cors = _this._cors;
                    p._date = _this._date;
                    p._location = _this._location;
                    return p;
                });
            };
            Picture.prototype.fill_rect = function (left, top, width, height, angle, color, r) {
                var _this = this;
                this.atPosition(r, left, top, angle, color.A(), function () {
                    _this.ctx.fillStyle = color.toHtml();
                    _this.ctx.fillRect(0, 0, width, height);
                });
            };
            Picture.prototype.pixel = function (left, top, r) {
                var _this = this;
                this.initAsync().done(function () {
                    left = Math.round(left);
                    top = Math.round(top);
                    _this.at(left + top * _this.widthSync(), r);
                });
            };
            Picture.prototype.getViewCanvasClone = function () {
                this.commitImageData();
                var rc = document.createElement("canvas");
                rc.width = this.widthSync();
                rc.height = this.heightSync();
                var rx = rc.getContext("2d");
                rx.drawImage(this.canvas, 0, 0);
                return rc;
            };
            Picture.prototype.getViewCanvas = function () {
                this.commitImageData();
                if (this.canvas.parentElement || TDev.LayoutMgr.RenderExecutionMode()) {
                    var rc = document.createElement("canvas");
                    rc.width = this.widthSync();
                    rc.height = this.heightSync();
                    var rx = rc.getContext("2d");
                    rx.drawImage(this.canvas, 0, 0);
                    this.canvas = rc;
                    this.ctx = rx;
                    this.slowlyloadingelement = undefined;
                }
                this.fitToColumn = !TDev.LayoutMgr.RenderExecutionMode();
                if (this.fitToColumn && this.heightSync() > 0 && this.widthSync() > 0) {
                    var r = this.heightSync() / this.widthSync();
                    var colwidth = TDev.SizeMgr.getColumnWidth();
                    if (this.widthSync() > colwidth) {
                        this.canvas.style.width = colwidth + "px";
                        this.canvas.style.height = (colwidth * r) + "px";
                    }
                }
                return this.canvas;
            };
            Picture.prototype.getViewCore = function (s, b) {
                var _this = this;
                var r = TDev.div("viewPicture");
                var img = this.getImageElement();
                if (img) {
                    img.setAttribute('class', 'wall-picture');
                    this.slowlyloadingelement = img;
                    return img;
                }
                else {
                    this.slowlyloadingelement = undefined;
                    this.initAsync().done(function () {
                        _this.commitImageData();
                        r.setChildren(_this.getViewCanvas());
                        b.RefreshOnScreen();
                    });
                }
                return r;
            };
            Picture.prototype.updateViewCore = function (s, b) {
                var _this = this;
                if (TDev.LayoutMgr.RenderExecutionMode() && this.slowlyloadingelement) {
                    this.slowlyloadingelement.onload = function () {
                        if (_this.slowlyloadingelement.offsetParent) {
                            var c = _this.getViewCore(s, b);
                            c.onload = function () {
                                b.RefreshOnScreen();
                            };
                            c.onerror = function () {
                                b.SwapImageContent(Picture.errorPic());
                            };
                            b.SwapImageContent(c);
                        }
                        else {
                            b.RefreshOnScreen();
                        }
                    };
                    this.slowlyloadingelement.onerror = function () {
                        b.SwapImageContent(Picture.errorPic());
                    };
                }
            };
            Picture.errorPic = function () {
                var frowny = TDev.div(null, ":(");
                var msg = TDev.div(null, "picture failed to load");
                var rect = TDev.div(null, frowny, document.createElement("br"), msg);
                rect.style.background = "lightgray";
                rect.style.fontFamily = "sans-serif";
                rect.style.color = "white";
                frowny.style.fontSize = "240px";
                msg.style.marginBottom = "1em";
                msg.style.marginLeft = "1em";
                msg.style.fontSize = "42px";
                rect.style.height = "480px";
                rect.style.width = "480px";
                return rect;
            };
            Picture.prototype.resize = function (width, height, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    width = Math.round(width);
                    height = Math.round(height);
                    if (width < 1)
                        width = Math.floor(_this.widthSync() / _this.heightSync() * height);
                    if (height < 1)
                        height = Math.floor(_this.heightSync() / _this.widthSync() * width);
                    if (width == _this.widthSync() && height == _this.heightSync())
                        return;
                    var ow = _this.widthSync();
                    var oh = _this.heightSync();
                    var temp = document.createElement('canvas');
                    temp.width = ow;
                    temp.height = oh;
                    var tempCtx = temp.getContext("2d");
                    tempCtx.drawImage(_this.canvas, 0, 0, ow, oh);
                    _this.canvas.width = width;
                    _this.canvas.height = height;
                    _this.ctx.save();
                    _this.ctx.drawImage(temp, 0, 0, ow, oh, 0, 0, width, height);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.save_to_library = function (r) {
                var _this = this;
                TDev.HTML.showProgressNotification(TDev.lf("saving picture"));
                this.loadFirst(r, function () {
                    var defaultName = Picture.niceFilename() + ".png";
                    if (window.navigator.msSaveOrOpenBlob) {
                        try {
                            var result = window.navigator.msSaveOrOpenBlob(_this.canvas.msToBlob(), defaultName);
                            return defaultName;
                        }
                        catch (e) {
                            TDev.HTML.showProgressNotification(TDev.lf("saving picture failed..."));
                            return "";
                        }
                    }
                    else {
                        var url = _this.canvas.toDataURL('image/png');
                        var link = window.document.createElement('a');
                        link.href = url;
                        link.download = defaultName;
                        var click = document.createEvent("Event");
                        click.initEvent("click", true, true);
                        link.dispatchEvent(click);
                    }
                    return defaultName;
                });
            };
            Picture.prototype.clear = function (color, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    _this.ctx.clearRect(0, 0, _this.widthSync(), _this.heightSync());
                    _this.ctx.fillStyle = color.toHtml();
                    _this.ctx.fillRect(0, 0, _this.widthSync(), _this.heightSync());
                    _this.ctx.restore();
                });
            };
            Picture.prototype.clear_rect = function (color, left, top, width, height, r) {
                var _this = this;
                if (isNaN(left) || isNaN(top) || isNaN(width) || isNaN(height) || width <= 0 || height <= 0) {
                    r.resume();
                }
                else {
                    this.loadFirst(r, function () {
                        _this.changed();
                        _this.ctx.save();
                        _this.ctx.clearRect(left, top, width, height);
                        _this.ctx.fillStyle = color.toHtml();
                        _this.ctx.fillRect(left, top, width, height);
                        _this.ctx.restore();
                    });
                }
            };
            Picture.prototype.eraseWhiteBackgroundAsync = function () {
                var _this = this;
                return this.initAsync().then(function () {
                    _this.changed();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    var threshold = 25;
                    for (var i = 0; i < p.length; i += 4) {
                        var dr = 255 - p[i];
                        var dg = 255 - p[i + 1];
                        var db = 255 - p[i + 2];
                        if (dr < threshold && dg < threshold && db < threshold) {
                            p[i + 3] = Math.floor((dr + dg + db) / (3 * threshold) * 255);
                        }
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.colorize = function (background, foreground, threshold, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    var ba = background.a;
                    var br = background.r;
                    var bg = background.g;
                    var bb = background.b;
                    var fa = foreground.a;
                    var fr = foreground.r;
                    var fg = foreground.g;
                    var fb = foreground.b;
                    var threshold255 = 255 * RT.Math_.normalize(threshold) * 3;
                    for (var i = 0; i < p.length; i += 4) {
                        var k = (p[i] + p[i + 1] + p[i + 2]);
                        var isb = k < threshold255;
                        p[i] = isb ? br : fr;
                        p[i + 1] = isb ? bg : fg;
                        p[i + 2] = isb ? bb : fb;
                        p[i + 3] = isb ? ba : fa;
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.negative = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        p[i] = 255 - p[i];
                        p[i + 1] = 255 - p[i + 1];
                        p[i + 2] = 255 - p[i + 2];
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.desaturate = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        var k = (p[i] + p[i + 1] + p[i + 2]) / 3;
                        p[i] = k;
                        p[i + 1] = k;
                        p[i + 2] = k;
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.invert = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        p[i] = 255 - p[i];
                        p[i + 1] = 255 - p[i + 1];
                        p[i + 2] = 255 - p[i + 2];
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.tint = function (color, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    var tint = color;
                    _this.changed();
                    var ta = tint.A();
                    var tr = tint.R();
                    var tg = tint.G();
                    var tb = tint.B();
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        var a = p[i + 3];
                        var r = p[i];
                        var g = p[i + 1];
                        var b = p[i + 2];
                        ;
                        var gray = (r * 0.2126 + g * 0.7152 + b * 0.0722);
                        a = a * ta;
                        r = gray * tr;
                        g = gray * tg;
                        b = gray * tb;
                        p[i + 3] = a;
                        p[i] = r;
                        p[i + 1] = g;
                        p[i + 2] = b;
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.brightness = function (factor, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    var f = factor < -1.0 ? -1.0 : factor > 1.0 ? 1.0 : factor;
                    var fi = f * 255;
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        var r = p[i];
                        var g = p[i + 1];
                        var b = p[i + 2];
                        ;
                        var ri = r + fi;
                        var gi = g + fi;
                        var bi = b + fi;
                        r = ri > 255 ? 255 : (ri < 0 ? 0 : ri);
                        g = gi > 255 ? 255 : (gi < 0 ? 0 : gi);
                        b = bi > 255 ? 255 : (bi < 0 ? 0 : bi);
                        p[i] = r;
                        p[i + 1] = g;
                        p[i + 2] = b;
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.contrast = function (factor, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    var f = factor < -1.0 ? -1.0 : factor > 1.0 ? 1.0 : factor;
                    var cfi = 1 + f;
                    _this.ctx.save();
                    var data = _this.ctx.getImageData(0, 0, _this.widthSync(), _this.heightSync());
                    var p = data.data;
                    for (var i = 0; i < p.length; i += 4) {
                        var r = p[i];
                        var g = p[i + 1];
                        var b = p[i + 2];
                        ;
                        var ri = r - 128;
                        var gi = g - 128;
                        var bi = b - 128;
                        ri = ri * cfi;
                        gi = gi * cfi;
                        bi = bi * cfi;
                        ri = ri + 128;
                        gi = gi + 128;
                        bi = bi + 128;
                        r = ri > 255 ? 255 : (ri < 0 ? 0 : ri);
                        g = gi > 255 ? 255 : (gi < 0 ? 0 : gi);
                        b = bi > 255 ? 255 : (bi < 0 ? 0 : bi);
                        p[i] = r;
                        p[i + 1] = g;
                        p[i + 2] = b;
                    }
                    _this.ctx.putImageData(data, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.crop = function (left, top, width, height, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    var ileft = Math.round(left);
                    var itop = Math.round(top);
                    var iwidth = Math.round(width);
                    var iheight = Math.round(height);
                    if (_this.widthSync() == 0 || _this.heightSync() == 0)
                        return;
                    if (ileft < 0)
                        ileft = 0;
                    else if (ileft >= _this.widthSync())
                        ileft = _this.widthSync() - 1;
                    if (itop < 0)
                        itop = 0;
                    else if (itop >= _this.heightSync())
                        itop = _this.heightSync() - 1;
                    if (ileft + iwidth > _this.widthSync())
                        iwidth = _this.widthSync() - ileft;
                    if (itop + iheight > _this.heightSync())
                        iheight = _this.heightSync() - itop;
                    _this.cropInternal(ileft, itop, iwidth, iheight);
                });
            };
            Picture.prototype.cropInternal = function (left, top, cwidth, cheight) {
                TDev.Contract.Requires(left >= 0 && left < this.widthSync());
                TDev.Contract.Requires(top >= 0 && top < this.heightSync());
                TDev.Contract.Requires(cwidth >= 0 && left + cwidth <= this.widthSync());
                TDev.Contract.Requires(cheight >= 0 && top + cheight <= this.heightSync());
                this.changed();
                var imageData = undefined;
                if (cwidth > 0 && cheight > 0)
                    imageData = this.ctx.getImageData(left, top, cwidth, cheight);
                this.canvas.width = cwidth;
                this.canvas.height = cheight;
                this.ctx = this.canvas.getContext("2d");
                if (imageData)
                    this.ctx.putImageData(imageData, 0, 0);
            };
            Picture.prototype.draw_ellipse = function (left, top, width, height, angle, c, thickness, r) {
                var _this = this;
                if (isNaN(thickness) || thickness < 0)
                    thickness = 2.0;
                this.atPosition(r, left + width / 2, top + height / 2, angle, c.A(), function () {
                    _this.ctx.scale(width / height, 1);
                    _this.ctx.strokeStyle = c.toHtml();
                    _this.ctx.lineWidth = thickness;
                    _this.ctx.beginPath();
                    _this.ctx.arc(0, 0, height / 2, 0, 2 * Math.PI);
                    _this.ctx.stroke();
                });
            };
            Picture.prototype.draw_line = function (x1, y1, x2, y2, color, thickness, r) {
                var _this = this;
                if (isNaN(thickness) || thickness < 0)
                    thickness = 2.0;
                this.atPosition(r, 0, 0, 0, color.A(), function () {
                    _this.ctx.beginPath();
                    _this.ctx.strokeStyle = color.toHtml();
                    _this.ctx.lineWidth = thickness;
                    _this.ctx.moveTo(x1, y1);
                    _this.ctx.lineTo(x2, y2);
                    _this.ctx.stroke();
                });
            };
            Picture.prototype.draw_rect = function (left, top, width, height, angle, color, thickness, r) {
                var _this = this;
                if (isNaN(thickness) || thickness < 0)
                    thickness = 2.0;
                this.atPosition(r, left, top, angle, color.A(), function () {
                    _this.ctx.strokeStyle = color.toHtml();
                    _this.ctx.lineWidth = thickness;
                    _this.ctx.strokeRect(0, 0, width, height);
                });
            };
            Picture.prototype.draw_text = function (left, top, text, font_size, angle, color, r) {
                var _this = this;
                this.atPosition(r, left, top, angle, color.A(), function () {
                    _this.ctx.fillStyle = color.toHtml();
                    _this.ctx.font = font_size + "px sans-serif";
                    _this.ctx.textBaseline = "top";
                    _this.ctx.fillText(text, 0, 0);
                });
            };
            Picture.prototype.fill_ellipse = function (left, top, width, height, angle, color, r) {
                var _this = this;
                this.atPosition(r, left + width / 2, top + height / 2, angle, color.A(), function () {
                    _this.ctx.scale(width / height, 1);
                    _this.ctx.strokeStyle = color.toHtml();
                    _this.ctx.fillStyle = color.toHtml();
                    _this.ctx.beginPath();
                    _this.ctx.arc(0, 0, height / 2, 0, 2 * Math.PI);
                    _this.ctx.fill();
                });
            };
            Picture.parseSvg = function (xml, width, height) {
                try {
                    var svg = RT.XmlObject.mk(xml);
                    if (!svg || svg.name() != "svg")
                        return null;
                    var svgWidth = parseFloat(svg.attr("width"));
                    var svgHeight = parseFloat(svg.attr("height"));
                    if (height < 0)
                        height = width / svgWidth * svgHeight;
                    else if (width < 0)
                        width = height / svgHeight * svgWidth;
                    var canvas = document.createElement("canvas");
                    canvas.width = width;
                    canvas.height = height;
                    var ctx = canvas.getContext("2d");
                    ctx.scale(width / svgWidth, height / svgHeight);
                    var g = svg.child("g");
                    if (!g)
                        return null;
                    var transform = g.attr("transform");
                    var m = /matrix\(([^)]+)\)/.exec(transform);
                    if (m) {
                        var v = m[1].split(/[, ]/).map(function (p) { return parseFloat(p); });
                        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
                    }
                    var paths = g.children('');
                    ctx.fillStyle = 'none';
                    ctx.strokeStyle = 'none';
                    for (var i = 0; i < paths.count(); ++i) {
                        var path = paths.at(i);
                        ctx.save();
                        switch (path.name()) {
                            case 'path':
                                ctx.beginPath();
                                if (!Picture.parsePathData(ctx, path.attr('d')))
                                    return null;
                                Picture.parsePathStyle(ctx, path);
                                break;
                            case 'polygon':
                                ctx.beginPath();
                                if (!Picture.parsePolygonData(ctx, path.attr('points')))
                                    return null;
                                ctx.closePath();
                                Picture.parseFillStyle(ctx, path);
                                Picture.parseStrokeStyle(ctx, path);
                                break;
                            case 'line':
                                ctx.moveTo(parseFloat(path.attr('x1')), parseFloat(path.attr('y1')));
                                ctx.lineTo(parseFloat(path.attr('x2')), parseFloat(path.attr('y2')));
                                Picture.parseStrokeStyle(ctx, path);
                                break;
                            default:
                                TDev.Util.log('svg rendering: unsupported command ' + path.name());
                                return null;
                        }
                        ctx.restore();
                    }
                    return canvas;
                }
                catch (e) {
                    return null;
                }
            };
            Picture.parsePolygonData = function (ctx, data) {
                if (!data)
                    return false;
                var points = data.split(' ').map(function (p) { return p.split(',').map(function (x) { return parseFloat(x); }); });
                for (var i = 0; i < points.length; ++i) {
                    var p = points[i];
                    if (i == 0)
                        ctx.moveTo(p[0], p[1]);
                    else
                        ctx.lineTo(p[0], p[1]);
                }
                return true;
            };
            Picture.parseFillStyle = function (ctx, x) {
                var fill = x.attr('fill');
                if (fill)
                    ctx.fillStyle = x.attr('fill');
                if (!fill || fill != 'none') {
                    ctx.closePath();
                    ctx.fill();
                }
            };
            Picture.parseStrokeStyle = function (ctx, x) {
                var stroke = x.attr('stroke');
                if (stroke && stroke != 'none') {
                    ctx.strokeStyle = stroke;
                    if (x.attr('stroke-width'))
                        ctx.lineWidth = parseFloat(x.attr('stroke-width'));
                    if (x.attr('stroke-linejoin'))
                        ctx.lineJoin = x.attr('stroke-linejoin');
                    ctx.stroke();
                }
            };
            Picture.parsePathStyle = function (ctx, x) {
                if (!x.attr('fill') && !x.attr('style')) {
                    ctx.strokeStyle = '#000000';
                    ctx.closePath();
                    ctx.fill();
                    return;
                }
                Picture.parseFillStyle(ctx, x);
                Picture.parseStrokeStyle(ctx, x);
                var data = x.attr('style');
                if (data) {
                    var m = /fill:([^;]+);/i.exec(data);
                    if (m && !/none/.test(m[1])) {
                        ctx.fillStyle = m[1];
                        ctx.closePath();
                        ctx.fill();
                    }
                    m = /stroke:([^;]+);/i.exec(data);
                    if (m && !/none/.test(m[1])) {
                        ctx.strokeStyle = m[1];
                        m = /stroke-width:([^;]+);/.exec(data);
                        if (m)
                            ctx.lineWidth = parseFloat(m[1]);
                        ctx.stroke();
                    }
                }
            };
            Picture.applyStyle = function (ctx) {
                if (ctx.fillStyle && ctx.fillStyle != 'none')
                    ctx.fill();
            };
            Picture.parsePathData = function (ctx, data) {
                if (!data)
                    return false;
                var parts = data.replace(/-/gm, ' -').replace(/[a-zA-Z]/gm, ' $& ').replace(/,/gm, ' ').split(/\s+/).filter(function (p) { return !!p; });
                var x = 0;
                var y = 0;
                var rx = 0;
                var ry = 0;
                var i = 0;
                var cpx = 0;
                var cpy = 0;
                var lastCommand = '';
                while (i < parts.length) {
                    var command = parts[i++];
                    switch (command) {
                        case 'Z':
                        case 'z':
                            ctx.closePath();
                            break;
                        case 'm':
                            rx = x;
                            ry = y;
                            ctx.moveTo(rx = rx + parseFloat(parts[i++]), ry = ry + parseFloat(parts[i++]));
                            while (i + 1 < parts.length && !isNaN(parseFloat(parts[i])))
                                ctx.lineTo(rx = rx + parseFloat(parts[i++]), ry = ry + parseFloat(parts[i++]));
                            x = rx;
                            y = ry;
                            break;
                        case 'M':
                            ctx.moveTo(x = parseFloat(parts[i++]), y = parseFloat(parts[i++]));
                            while (i + 1 < parts.length && !isNaN(parseFloat(parts[i])))
                                ctx.lineTo(x = parseFloat(parts[i++]), y = parseFloat(parts[i++]));
                            break;
                        case 'l':
                            rx = x;
                            ry = y;
                            do {
                                ctx.lineTo(rx = rx + parseFloat(parts[i++]), ry = ry + parseFloat(parts[i++]));
                            } while (i + 1 < parts.length && !isNaN(parseFloat(parts[i])));
                            x = rx;
                            y = ry;
                            break;
                        case 'L':
                            do {
                                ctx.lineTo(x = parseFloat(parts[i++]), y = parseFloat(parts[i++]));
                            } while (i + 1 < parts.length && !isNaN(parseFloat(parts[i])));
                            break;
                        case 'c':
                            rx = x;
                            ry = y;
                            do {
                                var x1 = rx + parseFloat(parts[i++]);
                                var y1 = ry + parseFloat(parts[i++]);
                                var x2 = rx + parseFloat(parts[i++]);
                                var y2 = ry + parseFloat(parts[i++]);
                                ctx.bezierCurveTo(x1, y1, x2, y2, rx = rx + parseFloat(parts[i++]), ry = ry + parseFloat(parts[i++]));
                            } while (i + 5 < parts.length && !isNaN(parseFloat(parts[i])));
                            cpx = x2;
                            cpy = y2;
                            x = rx;
                            y = ry;
                            break;
                        case 'C':
                            do {
                                ctx.bezierCurveTo(parseFloat(parts[i++]), parseFloat(parts[i++]), cpx = parseFloat(parts[i++]), cpy = parseFloat(parts[i++]), x = parseFloat(parts[i++]), y = parseFloat(parts[i++]));
                            } while (i + 5 < parts.length && !isNaN(parseFloat(parts[i])));
                            break;
                        case 'S':
                            if (!/^[CcSs]$/.test(lastCommand)) {
                                cpx = x;
                                cpy = y;
                            }
                            do {
                                var x2 = parseFloat(parts[i++]);
                                var y2 = parseFloat(parts[i++]);
                                var x1 = 2 * x - cpx;
                                var y1 = 2 * y - cpy;
                                ctx.bezierCurveTo(x1, y1, cpx = x2, cpy = y2, x = parseFloat(parts[i++]), y = parseFloat(parts[i++]));
                            } while (i + 3 < parts.length && !isNaN(parseFloat(parts[i])));
                            break;
                        case 's':
                            rx = x;
                            ry = y;
                            if (!/^[CcSs]$/.test(lastCommand)) {
                                cpx = rx;
                                cpy = ry;
                            }
                            do {
                                var x2 = rx + parseFloat(parts[i++]);
                                var y2 = ry + parseFloat(parts[i++]);
                                var x1 = 2 * rx - cpx;
                                var y1 = 2 * ry - cpy;
                                ctx.bezierCurveTo(x1, y1, cpx = x2, cpy = y2, rx = rx + parseFloat(parts[i++]), ry = ry + parseFloat(parts[i++]));
                            } while (i + 3 < parts.length && !isNaN(parseFloat(parts[i])));
                            x = rx;
                            y = ry;
                            break;
                        case 'H':
                            rx = parseFloat(parts[i++]);
                            ctx.lineTo(rx, y);
                            x = rx;
                            break;
                        case 'h':
                            rx = x + parseFloat(parts[i++]);
                            ctx.lineTo(rx, y);
                            x = rx;
                            break;
                        case 'V':
                            ry = parseFloat(parts[i++]);
                            ctx.lineTo(x, ry);
                            y = ry;
                            break;
                        case 'v':
                            ry = y + parseFloat(parts[i++]);
                            ctx.lineTo(x, ry);
                            y = ry;
                            break;
                        default:
                            TDev.Util.log('svg rendering: unknown path command ' + command);
                            return false;
                    }
                    lastCommand = command;
                }
                return true;
            };
            Picture.prototype.set_pixel = function (left, top, color, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    left = Math.round(left);
                    top = Math.round(top);
                    if (left < 0 || top < 0 || left >= _this.widthSync() || top >= _this.heightSync())
                        return;
                    _this.changed(false);
                    _this.imageDataHasChanges = true;
                    _this.getImageData();
                    var d = _this.imageData.data;
                    var idx = (left + top * _this.widthSync()) * 4;
                    d[idx + 0] = color.r;
                    d[idx + 1] = color.g;
                    d[idx + 2] = color.b;
                    d[idx + 3] = color.a;
                });
            };
            Picture.prototype.to_buffer = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    var d = _this.getImageData();
                    _this.imageData = null;
                    return RT.Buffer.fromImageData(d);
                });
            };
            Picture.prototype.write_buffer = function (buffer, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    var d = buffer.imageData;
                    if (!d) {
                        d = _this.ctx.createImageData(_this.widthSync(), _this.heightSync());
                        var sz = d.width * d.height * 4;
                        var dst = d.data;
                        var src = buffer.buffer;
                        for (var i = 0; i < sz; ++i)
                            dst[i] = src[i];
                    }
                    _this.ctx.putImageData(d, 0, 0);
                });
            };
            Picture.prototype.share = function (where, message, r) {
                var _this = this;
                TDev.HTML.showProgressNotification(TDev.lf("sharing picture..."));
                this.initAsync().then(function () { return RT.ShareManager.sharePictureAsync(_this, where, message); }).done(function () { return r.resume(); });
            };
            Picture.prototype.flip_horizontal = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    _this.ctx.translate(_this.canvas.width, 0);
                    _this.ctx.scale(-1, 1);
                    _this.ctx.drawImage(_this.canvas, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.flip_vertical = function (r) {
                var _this = this;
                this.loadFirst(r, function () {
                    _this.changed();
                    _this.ctx.save();
                    _this.ctx.translate(0, _this.canvas.height);
                    _this.ctx.scale(1, -1);
                    _this.ctx.drawImage(_this.canvas, 0, 0);
                    _this.ctx.restore();
                });
            };
            Picture.prototype.to_data_uri = function (quality, r) {
                var _this = this;
                this.loadFirst(r, function () {
                    var uri = _this.getDataUri(RT.Math_.normalize(quality));
                    r.resumeVal(uri);
                });
            };
            Picture.prototype.blend_svg = function (markup, left, top, width, height, angle, r) {
                var _this = this;
                if (TDev.Browser.browser == 1 /* ie10 */ || TDev.Browser.browser == 2 /* ie11 */) {
                    var cvs = Picture.parseSvg(markup, width, height);
                    if (cvs) {
                        this.atPosition(r, left, top, angle, 1, function () {
                            _this.ctx.drawImage(cvs, 0, 0, cvs.width, cvs.height);
                        });
                        return;
                    }
                }
                var svg = "data:image/svg+xml;base64," + RT.Web.base64_encode(markup);
                var img = document.createElement("img");
                var svgWidth = markup.match(/width="(\d+)"/);
                if (svgWidth)
                    img.width = parseInt(svgWidth[1]);
                var svgHeight = markup.match(/height="(\d+)"/);
                if (svgHeight)
                    img.height = parseInt(svgHeight[1]);
                var unhappy = function () {
                    _this.ctx.fillStyle = "lightgray";
                    _this.ctx.fillRect(0, 0, 100, 100);
                    _this.ctx.fillStyle = "white";
                    _this.ctx.textAlign = "center";
                    _this.ctx.textBaseline = "top";
                    _this.ctx.font = "80px sans-serif";
                    _this.ctx.fillText(':(', 50, 0);
                };
                var svgLoadFailed = function () {
                    _this.atPosition(r, left, top, angle, 1, function () {
                        unhappy();
                    });
                };
                img.onload = function () {
                    _this.atPosition(r, left, top, angle, 1, function () {
                        if (!img.width || !img.height) {
                            RT.Time.log('blend_svg error: empty svg');
                            unhappy();
                        }
                        else {
                            var w = width > 0 ? width : img.width;
                            var h = height > 0 ? height : img.height;
                            if (width < 0 && height > 0)
                                w = height / img.height * img.width;
                            else if (height < 0 && width > 0)
                                h = width / img.width * img.height;
                            try {
                                _this.ctx.drawImage(img, 0, 0, w, h);
                            }
                            catch (ex) {
                                try {
                                    _this.ctx.drawImage(img, 0, 0, w, h);
                                }
                                catch (ex2) {
                                    unhappy();
                                }
                            }
                        }
                    });
                };
                img.onerror = function () {
                    RT.Time.log('blend_svg error: svg load failed');
                    svgLoadFailed();
                };
                img.src = svg;
            };
            Picture.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            Picture.niceFilename = function () {
                var now = RT.Time.now();
                return now.year() + "-" + now.month() + "-" + now.day() + "-" + now.hour() + "-" + now.minute() + "-" + now.second() + "-" + now.millisecond();
            };
            return Picture;
        })(RT.RTValue);
        RT.Picture = Picture;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var PictureAlbum = (function (_super) {
            __extends(PictureAlbum, _super);
            function PictureAlbum() {
                _super.call(this);
            }
            PictureAlbum.mk = function (name, uri, pictures) {
                if (pictures === void 0) { pictures = null; }
                var pa = new PictureAlbum();
                pa._name = name;
                pa._uri = uri;
                pa._pictures = pictures;
                return pa;
            };
            PictureAlbum.prototype.albums = function (r) {
                var _this = this;
                if (this._albums)
                    r.resumeVal(this._albums);
                RT.Media.pictureAlbumsAsync(this._uri).done(function (albums) {
                    _this._albums = albums;
                    r.resumeVal(_this._albums);
                });
            };
            PictureAlbum.prototype.name = function () {
                return this._name;
            };
            PictureAlbum.prototype.pictures = function (r) {
                var _this = this;
                if (this._pictures)
                    r.resumeVal(this._pictures);
                RT.Media.picturesAsync(this._uri).done(function (pics) {
                    _this._pictures = pics;
                    r.resumeVal(_this._pictures);
                });
            };
            PictureAlbum.prototype.post_to_wall = function (s) {
                s.rt.postText(this.name(), s.pc);
            };
            return PictureAlbum;
        })(RT.RTValue);
        RT.PictureAlbum = PictureAlbum;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var PictureAlbums = (function (_super) {
            __extends(PictureAlbums, _super);
            function PictureAlbums() {
                _super.call(this);
                this.a = [];
            }
            PictureAlbums.mk = function (albums) {
                var pa = new PictureAlbums();
                pa.a = albums;
                return pa;
            };
            PictureAlbums.prototype.at = function (index) {
                return this.a[Math.floor(index)];
            };
            PictureAlbums.prototype.random = function () {
                return this.at(RT.Math_.random(this.count()));
            };
            PictureAlbums.prototype.count = function () {
                return this.a.length;
            };
            PictureAlbums.prototype.post_to_wall = function (s) {
                for (var i = this.a.length - 1; i >= 0; i--) {
                    this.a[i].post_to_wall(s);
                }
            };
            return PictureAlbums;
        })(RT.RTValue);
        RT.PictureAlbums = PictureAlbums;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Pictures = (function (_super) {
            __extends(Pictures, _super);
            function Pictures() {
                _super.call(this);
                this._urls = [];
            }
            Pictures.mk = function (urls) {
                if (!urls)
                    return undefined;
                var pics = new Pictures();
                pics._urls = urls;
                return pics;
            };
            Pictures.prototype.at = function (index, r) {
                this.atAsync(index, 'screen').done(function (p) { return r.resumeVal(p); });
            };
            Pictures.prototype.atAsync = function (index, media) {
                index = Math.floor(index);
                if (index < 0 || index > this._urls.length)
                    return TDev.Promise.as(undefined);
                var url = RT.Media.pictureUriForMedia(this._urls[index], media);
                return RT.Picture.fromUrl(url);
            };
            Pictures.prototype.random = function (r) {
                this.at(RT.Math_.random(this.count()), r);
            };
            Pictures.prototype.count = function () {
                return this._urls.length;
            };
            Pictures.prototype.find = function (name) {
                for (var i = 0; i < length; ++i)
                    if (this._urls[i] === name)
                        return i;
                return -1;
            };
            Pictures.prototype.post_to_wall = function (s) {
                this._urls.forEach(function (url) {
                    RT.Link.mk(url, 2 /* image */).post_to_wall(s);
                });
            };
            Pictures.prototype.full = function (index, r) {
                this.atAsync(index, 'full').done(function (p) { return r.resumeVal(p); });
            };
            Pictures.prototype.thumbnail = function (index, r) {
                this.atAsync(index, 'thumbnail').done(function (p) { return r.resumeVal(p); });
            };
            Pictures.prototype.rand = function (r) {
                this.random(r);
            };
            return Pictures;
        })(RT.RTValue);
        RT.Pictures = Pictures;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Place = (function (_super) {
            __extends(Place, _super);
            function Place() {
                _super.call(this);
                this._id = undefined;
                this._location = undefined;
                this._name = undefined;
                this._picture_link = undefined;
                this._link = undefined;
                this._category = undefined;
                this._source = undefined;
                this._values = undefined;
            }
            Place.mk = function (name, location) {
                var m = new Place();
                m.set_name(name);
                m.set_location(location);
                return m;
            };
            Place.prototype.location = function () {
                return this._location;
            };
            Place.prototype.set_location = function (location) {
                this._location = location;
            };
            Place.prototype.id = function () {
                return this._id;
            };
            Place.prototype.set_id = function (id) {
                this._id = id;
            };
            Place.prototype.name = function () {
                return this._name;
            };
            Place.prototype.set_name = function (name) {
                this._name = name;
            };
            Place.prototype.picture_link = function () {
                return this._picture_link;
            };
            Place.prototype.set_picture_link = function (url) {
                this._picture_link = url;
            };
            Place.prototype.link = function () {
                return this._link;
            };
            Place.prototype.set_link = function (url) {
                this._link = url;
            };
            Place.prototype.category = function () {
                return this._category;
            };
            Place.prototype.set_category = function (category) {
                this._category = category;
            };
            Place.prototype.source = function () {
                return this._source;
            };
            Place.prototype.set_source = function (source) {
                this._source = source;
            };
            Place.prototype.values = function () {
                if (!this._values)
                    this._values = RT.Collections.create_string_map();
                return this._values;
            };
            Place.prototype.to_string = function () {
                return this._name;
            };
            Place.prototype.getViewCore = function (s, b) {
                var d = TDev.div("item");
                if (this.picture_link())
                    d.appendChild(TDev.img("item-image", this.picture_link(), "linked picture"));
                var dc = TDev.div("item-info");
                d.appendChild(dc);
                if (this.name())
                    dc.appendChild(TDev.div("item-title", this.name()));
                if (this.category())
                    dc.appendChild(TDev.div("item-subtitle", this.category()));
                if (this.location())
                    dc.appendChild(TDev.div("item-description", this.location().to_string()));
                dc.appendChild(TDev.div("item-subtle", this.source()));
                return d;
            };
            Place.prototype.check_in = function () {
            };
            Place.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Place;
        })(RT.RTValue);
        RT.Place = Place;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Player;
        (function (Player) {
            var _rt;
            var _activeSong;
            var _songs = undefined;
            var _audio;
            var _source;
            var _shuffled;
            var _onActiveSongChanged;
            var _onPlayerStateChanged;
            function rt_start(rt) {
                _rt = rt;
                _activeSong = null;
                _songs = null;
                _onActiveSongChanged = undefined;
                _onPlayerStateChanged = undefined;
                if (rt.eventEnabled("active song changed"))
                    Player.addActiveSongChangedEvent(rt);
                if (rt.eventEnabled("player state changed"))
                    Player.addPlayerStateChangedEvent(rt);
            }
            Player.rt_start = rt_start;
            function rt_stop(rt) {
                Player.removeActiveSongChangedEvent();
                Player.removePlayerStateChangedEvent();
                _rt = null;
                _activeSong = null;
                _songs = null;
                _onActiveSongChanged = undefined;
                _onPlayerStateChanged = undefined;
            }
            Player.rt_stop = rt_stop;
            function addActiveSongChangedEvent(rt) {
            }
            Player.addActiveSongChangedEvent = addActiveSongChangedEvent;
            function removeActiveSongChangedEvent() {
            }
            Player.removeActiveSongChangedEvent = removeActiveSongChangedEvent;
            function addPlayerStateChangedEvent(rt) {
            }
            Player.addPlayerStateChangedEvent = addPlayerStateChangedEvent;
            function removePlayerStateChangedEvent() {
            }
            Player.removePlayerStateChangedEvent = removePlayerStateChangedEvent;
            function active_song(r) {
                r.resumeVal(_activeSong);
            }
            Player.active_song = active_song;
            function on_active_song_changed(changed) {
                if (_rt && !_onActiveSongChanged) {
                    _onActiveSongChanged = new RT.Event_();
                    Player.addActiveSongChangedEvent(_rt);
                }
                return _onActiveSongChanged.addHandler(changed);
            }
            Player.on_active_song_changed = on_active_song_changed;
            function raiseActiveSongChanged() {
                if (_rt) {
                    if (_rt.eventEnabled("player state changed"))
                        _rt.queueEvent("active song changed", null, []);
                    if (_onActiveSongChanged && _onActiveSongChanged.handlers)
                        _rt.queueLocalEvent(_onActiveSongChanged, [], false);
                }
            }
            function on_player_state_changed(changed) {
                if (_rt && !_onPlayerStateChanged) {
                    _onPlayerStateChanged = new RT.Event_();
                    Player.addPlayerStateChangedEvent(_rt);
                }
                return _onPlayerStateChanged.addHandler(changed);
            }
            Player.on_player_state_changed = on_player_state_changed;
            function raisePlayerStateChanged() {
                if (_rt) {
                    if (_rt.eventEnabled("player state changed"))
                        _rt.queueEvent("player state changed", null, []);
                    if (_onPlayerStateChanged && _onPlayerStateChanged.handlers)
                        _rt.queueLocalEvent(_onPlayerStateChanged, [], false);
                }
            }
            function ensureAudio() {
                if (!_audio) {
                    _audio = document.createElement("audio");
                    _audio.crossorigin = "anonymous";
                    _audio.style.display = 'none';
                    _audio.onpause = function () {
                        raisePlayerStateChanged();
                    };
                    _audio.onplay = _audio.onpause;
                    _audio.onplaying = _audio.onpause;
                    _audio.onended = function () {
                        raisePlayerStateChanged();
                        if (_songs) {
                            if (_shuffled) {
                                var i = (RT.Math_.random(_songs.count() - 1) + 1);
                                Player.playOne(_songs.at(i));
                            }
                            else
                                Player.next();
                        }
                    };
                    _source = document.createElement("source");
                    _audio.appendChild(_source);
                    document.body.appendChild(_audio);
                }
            }
            function next() {
                if (_songs) {
                    var i = _songs.indexOf(_activeSong);
                    i++;
                    if (i < _songs.count()) {
                        Player.playOne(_songs.at(i));
                    }
                }
            }
            Player.next = next;
            function previous() {
                if (_songs) {
                    var i = _songs.indexOf(_activeSong);
                    i--;
                    if (i > -1) {
                        Player.playOne(_songs.at(i));
                    }
                }
            }
            Player.previous = previous;
            function pause() {
                if (_audio) {
                    _audio.pause();
                }
            }
            Player.pause = pause;
            function playOne(song) {
                if (_activeSong != song) {
                    ensureAudio();
                    _activeSong = song;
                    var url = song.url();
                    _source.src = url;
                    if (TDev.RuntimeSettings.sounds()) {
                        TDev.HTML.showProgressNotification(TDev.lf("playing song..."));
                        _audio.play();
                    }
                    raiseActiveSongChanged();
                }
            }
            Player.playOne = playOne;
            function play(song) {
                _songs = undefined;
                Player.playOne(song);
            }
            Player.play = play;
            function play_many(songs) {
                if (songs.count() == 0) {
                    _songs = undefined;
                    Player.stop();
                }
                else {
                    _songs = songs;
                    _activeSong = undefined;
                    Player.playOne(_songs.at(0));
                }
            }
            Player.play_many = play_many;
            function play_position(r) {
                r.resumeVal(_audio ? _audio.currentTime : undefined);
            }
            Player.play_position = play_position;
            function resume() {
                if (_audio && TDev.RuntimeSettings.sounds()) {
                    _audio.play();
                }
            }
            Player.resume = resume;
            function stop() {
                if (_audio) {
                    _source.src = null;
                    _audio.load();
                }
            }
            Player.stop = stop;
            function is_muted(r) {
                r.resumeVal(_audio ? _audio.muted : false);
            }
            Player.is_muted = is_muted;
            function sound_volume() {
                return undefined;
            }
            Player.sound_volume = sound_volume;
            function set_sound_volume(x) {
            }
            Player.set_sound_volume = set_sound_volume;
            function is_repeating(r) {
                r.resumeVal(_audio ? _audio.loop : false);
            }
            Player.is_repeating = is_repeating;
            function set_repeating(repeating, r) {
                ensureAudio();
                _audio.loop = repeating;
                r.resume();
            }
            Player.set_repeating = set_repeating;
            function is_shuffled(r) {
                r.resumeVal(_shuffled);
            }
            Player.is_shuffled = is_shuffled;
            function set_shuffled(shuffled, r) {
                _shuffled = shuffled;
                r.resume();
            }
            Player.set_shuffled = set_shuffled;
            function is_stopped(r) {
                r.resumeVal(_audio ? _audio.ended : true);
            }
            Player.is_stopped = is_stopped;
            function is_playing(r) {
                r.resumeVal(_audio ? (!_audio.ended && !_audio.paused) : false);
            }
            Player.is_playing = is_playing;
            function is_paused(r) {
                r.resumeVal(_audio ? _audio.paused : false);
            }
            Player.is_paused = is_paused;
            function play_home_media(media) {
                switch (media.kind()) {
                    case 'song':
                        var s = RT.Song.mk(media.url(), 'media', media.title());
                        Player.play(s);
                        break;
                    default:
                        RT.Web.play_media(media.url());
                        break;
                }
            }
            Player.play_home_media = play_home_media;
            function volume() {
                return 0;
            }
            Player.volume = volume;
        })(Player = RT.Player || (RT.Player = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Playlist = (function (_super) {
            __extends(Playlist, _super);
            function Playlist() {
                _super.call(this);
            }
            Playlist.prototype.duration = function () {
                return undefined;
            };
            Playlist.prototype.name = function () {
                return undefined;
            };
            Playlist.prototype.songs = function () {
                return undefined;
            };
            Playlist.prototype.post_to_wall = function () {
            };
            Playlist.prototype.play = function () {
            };
            return Playlist;
        })(RT.RTValue);
        RT.Playlist = Playlist;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Playlists = (function (_super) {
            __extends(Playlists, _super);
            function Playlists() {
                _super.call(this);
            }
            Playlists.prototype.count = function () {
                return undefined;
            };
            Playlists.prototype.at = function (index) {
                return undefined;
            };
            Playlists.prototype.post_to_wall = function () {
            };
            return Playlists;
        })(RT.RTValue);
        RT.Playlists = Playlists;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Printer = (function (_super) {
            __extends(Printer, _super);
            function Printer() {
                _super.call(this);
            }
            Printer.prototype.device = function () {
                return undefined;
            };
            Printer.prototype.name = function () {
                return undefined;
            };
            Printer.prototype.post_to_wall = function () {
            };
            Printer.prototype.print_text = function (text) {
            };
            Printer.prototype.is_idle = function () {
                return undefined;
            };
            Printer.prototype.is_processing = function () {
                return undefined;
            };
            Printer.prototype.is_stopped = function () {
                return undefined;
            };
            Printer.prototype.state_reason = function () {
                return undefined;
            };
            return Printer;
        })(RT.RTValue);
        RT.Printer = Printer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Radio;
        (function (Radio) {
            function is_playing(r) {
                r.resumeVal(false);
            }
            Radio.is_playing = is_playing;
            function start(r) {
                r.resume();
            }
            Radio.start = start;
            function stop(r) {
                r.resume();
            }
            Radio.stop = stop;
            function signal_strength(r) {
                r.resumeVal(0.0);
            }
            Radio.signal_strength = signal_strength;
            function frequency(r) {
                r.resumeVal(0.0);
            }
            Radio.frequency = frequency;
            function set_frequency(frequency, r) {
                r.resume();
            }
            Radio.set_frequency = set_frequency;
            function link_frequency(name, frequency) {
                var lnk = RT.Link.mk("radio:" + frequency, 6 /* radio */);
                lnk.set_name(name);
                return lnk;
            }
            Radio.link_frequency = link_frequency;
        })(Radio = RT.Radio || (RT.Radio = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
;
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Senses;
        (function (Senses) {
            var _rt;
            var _camera = undefined;
            var _frontCamera = undefined;
            var _onShake;
            var _onPhoneFaceUp;
            var _onPhoneFaceDown;
            var _onPhonePortrait;
            var _onPhoneLandscapeLeft;
            var _onPhoneLandscapeRight;
            function clearData() {
                _camera = undefined;
                _frontCamera = undefined;
                _onShake = undefined;
                _onPhoneFaceUp = undefined;
                _onPhoneFaceDown = undefined;
                _onPhonePortrait = undefined;
                _onPhoneLandscapeLeft = undefined;
                _onPhoneLandscapeRight = undefined;
                _rt = undefined;
            }
            function rt_start(rt) {
                clearData();
                _rt = rt;
                RT.DeviceMotion.rt_start(rt);
                RT.DeviceOrientation.rt_start(rt);
                gamepadsSupported = !!(navigator && navigator.getGamepads);
            }
            Senses.rt_start = rt_start;
            function rt_stop(rt) {
                clearData();
                RT.DeviceMotion.stop(rt);
                RT.DeviceOrientation.stop(rt);
            }
            Senses.rt_stop = rt_stop;
            function on_shake(handler) {
                if (!_onShake) {
                    _onShake = new RT.Event_();
                    if (_rt)
                        RT.DeviceMotion.start(_rt);
                }
                return _onShake.addHandler(handler);
            }
            Senses.on_shake = on_shake;
            function raiseShakeEvent() {
                if (_rt) {
                    _rt.queueEvent("shake", null, []);
                    if (_onShake && _onShake.handlers)
                        _rt.queueLocalEvent(_onShake, []);
                }
            }
            Senses.raiseShakeEvent = raiseShakeEvent;
            function on_phone_face_up(handler) {
                if (!_onPhoneFaceUp) {
                    _onPhoneFaceUp = new RT.Event_();
                    if (_rt)
                        RT.DeviceOrientation.start(_rt);
                }
                return _onPhoneFaceUp.addHandler(handler);
            }
            Senses.on_phone_face_up = on_phone_face_up;
            function raisePhoneFaceUp() {
                raisePhoneEvent("phone face up", _onPhoneFaceUp);
            }
            Senses.raisePhoneFaceUp = raisePhoneFaceUp;
            function on_phone_face_down(handler) {
                if (!_onPhoneFaceDown) {
                    _onPhoneFaceDown = new RT.Event_();
                    if (_rt)
                        RT.DeviceOrientation.start(_rt);
                }
                return _onPhoneFaceDown.addHandler(handler);
            }
            Senses.on_phone_face_down = on_phone_face_down;
            function raisePhoneFaceDown() {
                raisePhoneEvent("phone face down", _onPhoneFaceDown);
            }
            Senses.raisePhoneFaceDown = raisePhoneFaceDown;
            function on_phone_portrait(handler) {
                if (!_onPhonePortrait) {
                    _onPhonePortrait = new RT.Event_();
                    if (_rt)
                        RT.DeviceOrientation.start(_rt);
                }
                return _onPhonePortrait.addHandler(handler);
            }
            Senses.on_phone_portrait = on_phone_portrait;
            function raisePhonePortrait() {
                raisePhoneEvent("phone portrait", _onPhonePortrait);
            }
            Senses.raisePhonePortrait = raisePhonePortrait;
            function on_phone_landscape_left(handler) {
                if (!_onPhoneLandscapeLeft) {
                    _onPhoneLandscapeLeft = new RT.Event_();
                    if (_rt)
                        RT.DeviceOrientation.start(_rt);
                }
                return _onPhoneLandscapeLeft.addHandler(handler);
            }
            Senses.on_phone_landscape_left = on_phone_landscape_left;
            function raisePhoneLandscapeLeft() {
                raisePhoneEvent("phone landscape left", _onPhoneLandscapeLeft);
            }
            Senses.raisePhoneLandscapeLeft = raisePhoneLandscapeLeft;
            function on_phone_landscape_right(handler) {
                if (!_onPhoneLandscapeRight) {
                    _onPhoneLandscapeRight = new RT.Event_();
                    if (_rt)
                        RT.DeviceOrientation.start(_rt);
                }
                return _onPhoneLandscapeRight.addHandler(handler);
            }
            Senses.on_phone_landscape_right = on_phone_landscape_right;
            function raisePhoneLandscapeRight() {
                raisePhoneEvent("phone landscape right", _onPhoneLandscapeRight);
            }
            Senses.raisePhoneLandscapeRight = raisePhoneLandscapeRight;
            function raisePhoneEvent(name, ev) {
                if (_rt) {
                    _rt.queueEvent(name, null, []);
                    if (ev && ev.handlers)
                        _rt.queueLocalEvent(ev, []);
                }
            }
            function take_camera_picture(r) {
                var cam = navigator.camera;
                if (cam) {
                    cam.getPicture(function (url) {
                        r.resumeVal(RT.Picture.fromUrlSync(url, false, false));
                    }, function (msg) {
                        TDev.RT.App.logEvent(RT.App.DEBUG, "senses", "take camera picture failed: " + msg, undefined);
                        r.resumeVal(undefined);
                    }, {
                        quality: 85,
                        mediaType: window.Camera.MediaType.JPEG,
                        sourceType: window.Camera.PictureSourceType.CAMERA,
                        destinationType: window.Camera.DestinationType.FILE_URI
                    });
                    return;
                }
                RT.UserMediaManager.getCameraUrlAsync().done(function (url) {
                    if (!url) {
                        RT.Media.choosePictureAsync('take or choose a picture', 'The app wants to take a picture but it could not launch the camera. Try opening the picture chooser to access the camera.').done(function (pic) { return r.resumeVal(pic); });
                    }
                    else {
                        var m = new TDev.ModalDialog();
                        m.add(TDev.div('wall-dialog-header', 'take a picture'));
                        var v = TDev.createElement('video');
                        v.src = url;
                        v.controls = false;
                        v.autoplay = true;
                        m.add(TDev.div('wall-dialog-body', v));
                        m.add(TDev.div('wall-dialog-buttons', [
                            TDev.HTML.mkButton(TDev.lf("cancel"), function () {
                                v.pause();
                                m.dismiss();
                                r.resumeVal(undefined);
                            }),
                            TDev.HTML.mkButton(TDev.lf("take picture"), function () {
                                RT.Picture.fromUrl(RT.UserMediaManager.previewVideo(v)).done(function (p) {
                                    v.pause();
                                    m.dismiss();
                                    r.resumeVal(p);
                                });
                            }),
                        ]));
                        m.show();
                    }
                });
            }
            Senses.take_camera_picture = take_camera_picture;
            function record_microphone(r) {
                RT.AudioContextManager.recordMicrophoneAsync().then(function (url) { return url ? RT.Sound.fromArtUrl(url) : undefined; }).done(function (snd) { return r.resumeVal(snd); });
            }
            Senses.record_microphone = record_microphone;
            function is_device_stable(r) {
                RT.DeviceMotion.isDeviceStable(r);
            }
            Senses.is_device_stable = is_device_stable;
            function has_accelerometer() {
                return RT.DeviceMotion.isMotionSupported();
            }
            Senses.has_accelerometer = has_accelerometer;
            function acceleration_stable(r) {
                RT.DeviceMotion.accelerationStable(r);
            }
            Senses.acceleration_stable = acceleration_stable;
            function acceleration_smooth(r) {
                RT.DeviceMotion.accelerationSmooth(r);
            }
            Senses.acceleration_smooth = acceleration_smooth;
            function acceleration_quick(r) {
                RT.DeviceMotion.accelerationQuick(r);
            }
            Senses.acceleration_quick = acceleration_quick;
            function askLocationAccessAsync(r) {
                if (!TDev.RuntimeSettings.location()) {
                    TDev.HTML.showProgressNotification(TDev.lf("denied access to location (global setting)"));
                    return TDev.Promise.as(false);
                }
                return r.rt.host.askSourceAccessAsync("location", "your current geo location, based on your GPS, WiFi or IP address.", false);
            }
            function current_location(r) {
                askLocationAccessAsync(r).then(function (allow) {
                    if (allow)
                        RT.GeoLocation.currentLocation(r);
                    else
                        r.resumeVal(undefined);
                }).done();
            }
            Senses.current_location = current_location;
            function current_location_accurate(r) {
                askLocationAccessAsync(r).then(function (allow) {
                    if (allow)
                        RT.GeoLocation.currentLocationAccurate(r);
                    else
                        r.resumeVal(undefined);
                }).done();
            }
            Senses.current_location_accurate = current_location_accurate;
            function camera(r) {
                if (!_camera && RT.UserMediaManager.isSupported()) {
                    _camera = new RT.Camera();
                }
                r.resumeVal(_camera);
            }
            Senses.camera = camera;
            function front_camera(r) {
                if (!_frontCamera && RT.UserMediaManager.isSupported()) {
                    _frontCamera = new RT.Camera();
                    _frontCamera.set_is_front(true);
                }
                r.resumeVal(_frontCamera);
            }
            Senses.front_camera = front_camera;
            function has_front_camera(r) {
                r.resumeVal(true);
            }
            Senses.has_front_camera = has_front_camera;
            function has_motion() {
                return false;
            }
            Senses.has_motion = has_motion;
            function motion() {
                return undefined;
            }
            Senses.motion = motion;
            function orientation(r) {
                RT.DeviceOrientation.orientation(r);
            }
            Senses.orientation = orientation;
            function has_compass() {
                return RT.DeviceOrientation.isHeadingSupported();
            }
            Senses.has_compass = has_compass;
            function heading(r) {
                RT.DeviceOrientation.heading(r);
            }
            Senses.heading = heading;
            function has_gyroscope() {
                return RT.DeviceMotion.isSupported();
            }
            Senses.has_gyroscope = has_gyroscope;
            function rotation_speed(r) {
                RT.DeviceMotion.rotationRate(r);
            }
            Senses.rotation_speed = rotation_speed;
            function battery_level(r) {
                var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;
                r.resumeVal(battery ? battery.level : undefined);
            }
            Senses.battery_level = battery_level;
            function bluetooth_devices(r) {
                RT.BluetoothDevice.getDevicesAsync().done(function (v) {
                    r.resumeVal(RT.Collection.fromArray(v, RT.BluetoothDevice));
                });
            }
            Senses.bluetooth_devices = bluetooth_devices;
            function is_key_pressed(key, s) {
                return s.rt.host.keyboard.isPressed(key);
            }
            Senses.is_key_pressed = is_key_pressed;
            function on_key_pressed(key, handler, s) {
                return s.rt.host.keyboard.registerDown(key, handler);
            }
            Senses.on_key_pressed = on_key_pressed;
            var gamepadsSupported = false;
            var _lastGamepadsTimestamp = 0;
            var _lastGamepads = undefined;
            var _emptyGamepads = undefined;
            function gamepads() {
                if (gamepadsSupported) {
                    var ts = TDev.Util.perfNow();
                    if (!_lastGamepads || ts - _lastGamepadsTimestamp > 0.02) {
                        _lastGamepadsTimestamp = ts;
                        if (gamepadsSupported) {
                            _lastGamepads = new RT.Collection(Gamepad_);
                            var gs = navigator.getGamepads();
                            for (var i = 0; i < gs.length; ++i)
                                if (!!gs[i])
                                    _lastGamepads.add(new Gamepad_(gs[i]));
                        }
                        else {
                            _lastGamepads = _emptyGamepads;
                        }
                    }
                }
                if (!_emptyGamepads)
                    _emptyGamepads = new RT.Collection(Gamepad_);
                return _lastGamepads || _emptyGamepads;
            }
            Senses.gamepads = gamepads;
            function first_gamepad() {
                var gs = gamepads();
                for (var i = 0; i < gs.count(); ++i)
                    if (gs.at(i).is_connected())
                        return gs.at(i);
                return undefined;
            }
            Senses.first_gamepad = first_gamepad;
        })(Senses = RT.Senses || (RT.Senses = {}));
        var Gamepad_ = (function (_super) {
            __extends(Gamepad_, _super);
            function Gamepad_(gp) {
                _super.call(this);
                this.gp = gp;
            }
            Gamepad_.prototype.toString = function () {
                return JSON.stringify(this.gp);
            };
            Gamepad_.prototype.equals = function (other) {
                var op = other.gp;
                return this.gp.timestamp == op.timestamp && this.gp.index == op.index && this.gp.buttons.length == op.buttons.length && this.gp.buttons.every(function (v, index) { return op.buttons[index].pressed == v.pressed && op.buttons[index].value == v.value; }) && this.gp.axes.length == op.axes.length && this.gp.axes.every(function (v, index) { return op.axes[index] == v; });
            };
            Gamepad_.prototype.post_to_wall = function (s) {
                s.rt.postText(JSON.stringify(this.gp), s.pc);
            };
            Gamepad_.prototype.id = function () {
                return this.gp.id;
            };
            Gamepad_.prototype.index = function () {
                return this.gp.index;
            };
            Gamepad_.prototype.timestamp = function () {
                return this.gp.timestamp;
            };
            Gamepad_.prototype.is_connected = function () {
                return this.gp.connected;
            };
            Gamepad_.prototype.is_button_pressed = function (name) {
                var index = Gamepad_.buttonNames[name.trim().toLowerCase()];
                if (index == undefined)
                    return false;
                else {
                    var b = this.gp.buttons[index];
                    return b && b.pressed;
                }
            };
            Gamepad_.prototype.button_value = function (name) {
                var index = Gamepad_.buttonNames[name.trim().toLowerCase()];
                if (index == undefined)
                    return 0;
                else {
                    var b = this.gp.buttons[index];
                    return b ? b.value : 0;
                }
            };
            Gamepad_.prototype.axes = function (name) {
                switch (name.trim().toLowerCase()) {
                    case "left stick": return RT.Vector3.mk(this.gp.axes[0], this.gp.axes[1], 0);
                    case "right stick": return RT.Vector3.mk(this.gp.axes[2], this.gp.axes[3], 0);
                    default: return RT.Vector3.zero;
                }
            };
            Gamepad_.prototype.debuggerDisplay = function (clickHandler) {
                return RT.JsonObject.wrap(this.gp).debuggerDisplay(clickHandler);
            };
            Gamepad_.prototype.debuggerChildren = function () {
                return RT.JsonObject.wrap(this.gp).debuggerChildren();
            };
            Gamepad_.buttonNames = {
                "a": 0,
                "b": 1,
                "x": 2,
                "y": 3,
                "left bumper": 4,
                "right bumper": 5,
                "left trigger": 6,
                "right trigger": 7,
                "back": 8,
                "start": 9,
                "left stick": 10,
                "right stick": 11,
                "up": 12,
                "down": 13,
                "left": 14,
                "right": 15,
                "home": 16
            };
            return Gamepad_;
        })(RT.RTValue);
        RT.Gamepad_ = Gamepad_;
        var RuntimeKeyboard = (function () {
            function RuntimeKeyboard(_rt) {
                this._rt = _rt;
                this.keys = {};
                this.repeatDelay = 200;
                this.repeatInterval = 50;
            }
            RuntimeKeyboard.prototype.keyState = function (keyCode, create) {
                var kc = keyCode.toUpperCase();
                var state = this.keys[kc];
                if (!state && create)
                    this.keys[kc] = state = { timeStamp: 0, downTimeStamp: 0, repeating: false };
                return state;
            };
            RuntimeKeyboard.prototype.keyDown = function (evt) {
                TDev.Util.normalizeKeyEvent(evt);
                if (!evt.keyName || evt.fromTextBox || evt.fromTextArea)
                    return false;
                var state = this.keyState(evt.keyName, false);
                if (!state)
                    return false;
                var now = evt.timeStamp || TDev.Util.perfNow();
                if (state.timeStamp == 0) {
                    state.timeStamp = now;
                    state.downTimeStamp = 0;
                }
                if (this._rt && state.down && state.down.handlers && (now - state.downTimeStamp) > (state.repeating ? this.repeatInterval : this.repeatDelay)) {
                    TDev.Util.log("key down " + evt.keyName);
                    this._rt.queueLocalEvent(state.down, [], false);
                    state.downTimeStamp = now;
                    state.repeating = true;
                }
                return true;
            };
            RuntimeKeyboard.prototype.keyUp = function (evt) {
                TDev.Util.normalizeKeyEvent(evt);
                if (!evt.keyName || evt.fromTextBox || evt.fromTextArea)
                    return false;
                var state = this.keyState(evt.keyName, false);
                if (!state)
                    return false;
                if (this._rt && state.timeStamp > 0 && state.up && state.up.handlers)
                    this._rt.queueLocalEvent(state.up, [], false);
                state.timeStamp = 0;
                state.repeating = false;
                return true;
            };
            RuntimeKeyboard.prototype.toKeyCode = function (key, modifier) {
                var k = key;
                if (modifier)
                    k = modifier + "-" + key;
                return k;
            };
            RuntimeKeyboard.prototype.isPressed = function (key) {
                return this.keyState(key, true).timeStamp > 0;
            };
            RuntimeKeyboard.prototype.registerDown = function (key, handler) {
                var state = this.keyState(key, true);
                if (!state.down)
                    state.down = new RT.Event_();
                return state.down.addHandler(handler);
            };
            RuntimeKeyboard.prototype.registerUp = function (key, handler) {
                var state = this.keyState(key, true);
                if (!state.up)
                    state.up = new RT.Event_();
                return state.up.addHandler(handler);
            };
            return RuntimeKeyboard;
        })();
        RT.RuntimeKeyboard = RuntimeKeyboard;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Social;
        (function (Social) {
            function send_email(to, subject, body, r) {
                var url = "mailto:" + encodeURIComponent(to || " ") + "?subject=" + encodeURIComponent(subject || " ") + "&body=" + encodeURIComponent(body);
                RT.Web.browse(url, r);
            }
            Social.send_email = send_email;
            function save_email(email_address) {
                TDev.ModalDialog.showText(email_address, 'save email', 'Saving emails is not supported on this platform. Please copy and save this email manually.');
            }
            Social.save_email = save_email;
            function save_contact(contact) {
                TDev.ModalDialog.showText(contact.toFullString(), 'save contact', 'Saving contacts is not supported on this platform. Please copy and save this contact manually.');
            }
            Social.save_contact = save_contact;
            Social.sendSmsAsync = function (to, body) {
                var url = "sms:" + encodeURIComponent(to || " ") + "?body=" + encodeURIComponent(body);
                return RT.Web.browseAsync(url);
            };
            function send_sms(to, body, r) {
                return Social.sendSmsAsync(to, body).done(function () { return r.resume(); });
            }
            Social.send_sms = send_sms;
            function link_phone_number(phone_number) {
                return RT.Link.mk(phone_number, 4 /* phoneNumber */);
            }
            Social.link_phone_number = link_phone_number;
            function link_email(email_address) {
                return RT.Link.mk(email_address, 3 /* email */);
            }
            Social.link_email = link_email;
            function create_message(message) {
                return RT.Message.mk(message);
            }
            Social.create_message = create_message;
            function create_place(name, location) {
                return RT.Place.mk(name, location);
            }
            Social.create_place = create_place;
            function search(network, terms, r) {
                var links = RT.Collections.create_message_collection();
                r.resumeVal(links);
            }
            Social.search = search;
            function search_places_nearby(network, terms, location, distance) {
                return RT.Collections.create_place_collection();
            }
            Social.search_places_nearby = search_places_nearby;
            var _fakeContacts = [
                RT.Contact.mkFake("Orlando", "N.", "Gee", "orlando0@adventure-works.com", "245-555-0173", "1.jpg"),
                RT.Contact.mkFake("Janet", "M.", "Gates", "janet1@adventure-works.com", "710-555-0173", "9.jpg"),
                RT.Contact.mkFake("Donna", "F.", "Carreras", "donna0@adventure-works.com", "279-555-0130", "10.jpg"),
                RT.Contact.mkFake("Lucy", null, "Harrington", "lucy0@adventure-works.com", "828-555-0186", "32.jpg"),
                RT.Contact.mkFake("Rosmarie", "J.", "Carroll", "rosmarie0@adventure-works.com", "244-555-0112", "42.jpg"),
                RT.Contact.mkFake("Dominic", "P.", "Gash", "dominic0@adventure-works.com", "192-555-0173", "5.jpg"),
                RT.Contact.mkFake("Kathleen", "M.", "Garza", "kathleen0@adventure-works.com", "150-555-0127", "72.jpg"),
                RT.Contact.mkFake("Johnny", "A.", "Caprio", "johnny0@adventure-works.com", "112-555-0191", "28.jpg"),
                RT.Contact.mkFake("Christopher", "R.", "Beck", "christopher1@adventure-works.com", "1 (11) 500 555-0132", "48.jpg"),
                RT.Contact.mkFake("Donald", "L.", "Blanton", "donald0@adventure-works.com", "357-555-0161", "184.jpg")
            ];
            function contacts(network, r) {
                search_contacts("", r);
            }
            Social.contacts = contacts;
            Social.askCalendarAccessAsync = function (r) {
                return r.rt.host.askSourceAccessAsync("calendar", "your calendar and appointments.", false);
            };
            Social.askContactsAccessAsync = function (r) {
                return r.rt.host.askSourceAccessAsync("contacts", "your contact list.", false);
            };
            Social.searchContactsAsync = function (prefix) {
                var prefix = prefix.toUpperCase();
                var cs = [];
                _fakeContacts.forEach(function (c) {
                    if (c.name().toUpperCase().indexOf(prefix) > -1)
                        cs.push(c.clone());
                });
                return TDev.Promise.as(RT.Collection.mkAny(RT.Contact, cs));
            };
            function search_contacts(prefix, r) {
                Social.askContactsAccessAsync(r).then(function (allow) {
                    if (allow)
                        return Social.searchContactsAsync(prefix);
                    else
                        return TDev.Promise.as(RT.Collection.mkAny(RT.Contact));
                }).done(function (cs) { return r.resumeVal(cs); });
            }
            Social.search_contacts = search_contacts;
            function choose_email(r) {
                Social.chooseContactAsync().done(function (c) {
                    var url = c ? (c.email() || c.work_email() || c.personal_email()) : "";
                    if (url)
                        r.resumeVal(RT.Link.mk(url, 3 /* email */));
                    else
                        r.resumeVal(undefined);
                });
            }
            Social.choose_email = choose_email;
            Social.chooseContactAsync = function () {
                var c = _fakeContacts[RT.Math_.random(_fakeContacts.length)].clone();
                return TDev.Promise.as(c);
            };
            function choose_contact(r) {
                Social.chooseContactAsync().done(function (c) { return r.resumeVal(c); });
            }
            Social.choose_contact = choose_contact;
            Social.searchAppointmentsAsync = function (start, end) {
                TDev.Util.log('returning fake appointments');
                return TDev.Promise.as(RT.Collection.mkAny(RT.Appointment));
            };
            function search_appointments(start, end, r) {
                Social.askCalendarAccessAsync(r).then(function (allow) {
                    if (allow)
                        return Social.searchAppointmentsAsync(start, end);
                    else
                        return TDev.Promise.as(RT.Collection.mkAny(RT.Appointment));
                }).done(function (cs) { return r.resumeVal(cs); });
            }
            Social.search_appointments = search_appointments;
            function create_contact(nickname) {
                return RT.Contact.mk(nickname);
            }
            Social.create_contact = create_contact;
        })(Social = RT.Social || (RT.Social = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Song = (function (_super) {
            __extends(Song, _super);
            function Song() {
                _super.call(this);
                this._url = undefined;
                this._path = undefined;
                this._album = undefined;
                this._albumName = undefined;
                this._artist = undefined;
                this._duration = undefined;
                this._genre = undefined;
                this._name = undefined;
                this._playCount = -1;
                this._rating = -1;
                this._track = -1;
                this._initialized = false;
            }
            Song.mk = function (url, path, name) {
                var song = new Song();
                song._url = url;
                song._path = path;
                song._name = name;
                return song;
            };
            Song.prototype.initAsync = function () {
                this._initialized = true;
                return TDev.Promise.as();
            };
            Song.prototype.initNoData = function () {
                this._initialized = true;
            };
            Song.prototype.init = function (name, albumName, artist, duration, genre, rating, track) {
                this._initialized = true;
                this._name = name;
                this._albumName = albumName;
                this._artist = artist;
                this._album = RT.SongAlbum.mk(this._albumName, this._artist);
                this._duration = duration;
                this._genre = genre;
                this._rating = rating;
                this._track = track;
            };
            Song.prototype.album = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._album);
                else
                    this.initAsync().done(function () { return r.resumeVal(_this._album); });
            };
            Song.prototype.artist = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._artist);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._artist || '');
                    });
            };
            Song.prototype.duration = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._duration);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._duration);
                    });
            };
            Song.prototype.genre = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._genre);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._genre || '');
                    });
            };
            Song.prototype.name = function () {
                return this._name;
            };
            Song.prototype.play_count = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._playCount);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._playCount);
                    });
            };
            Song.prototype.rating = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._rating);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._rating);
                    });
            };
            Song.prototype.track = function (r) {
                var _this = this;
                if (this._initialized)
                    r.resumeVal(this._track);
                else
                    this.initAsync().done(function () {
                        r.resumeVal(_this._track);
                    });
            };
            Song.prototype.url = function () {
                return this._url;
            };
            Song.prototype.path = function () {
                return this._path;
            };
            Song.createAudio = function (url) {
                var audio = document.createElement("audio");
                audio.controls = true;
                audio.crossorigin = "anonymous";
                var source = document.createElement("source");
                source.src = url;
                audio.appendChild(source);
                return audio;
            };
            Song.prototype.play = function () {
                RT.Player.play(this);
            };
            Song.prototype.getViewCore = function (s, b) {
                var _this = this;
                var d = TDev.div("item");
                var dc = TDev.div("item-info item-with-button");
                d.appendChild(dc);
                if (this._name)
                    dc.appendChild(TDev.div("item-title", this._name));
                this.initAsync().done(function () {
                    if (_this._artist)
                        dc.appendChild(TDev.div("item-subtitle", _this._artist));
                    if (_this._album)
                        dc.appendChild(TDev.div("item-subtle", _this._album.name()));
                    d.appendChild(TDev.div('item-buttons', TDev.HTML.mkRoundButton("svg:play,black", TDev.lf("play"), 422 /* songPlay */, function () { return _this.play(); })));
                });
                return d;
            };
            Song.prototype.protected = function () {
                return undefined;
            };
            Song.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return Song;
        })(RT.RTValue);
        RT.Song = Song;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var SongAlbum = (function (_super) {
            __extends(SongAlbum, _super);
            function SongAlbum() {
                _super.call(this);
                this._genre = undefined;
                this._duration = 0;
                this._artInit = false;
            }
            SongAlbum.mk = function (name, artist) {
                var sa = new SongAlbum();
                sa._name = name;
                sa._artist = artist;
                return sa;
            };
            SongAlbum.prototype.init = function (genre, duration, thumbnail) {
                this._genre = genre;
                this._duration = duration;
                this._thumbnail = thumbnail;
            };
            SongAlbum.prototype.initArtAsync = function () {
                var _this = this;
                if (this._artInit)
                    return TDev.Promise.as(undefined);
                return RT.Media.loadSongAlbumArtAsync(this.name()).then(function (art) {
                    _this._artInit = true;
                    _this._art = art;
                });
            };
            SongAlbum.prototype.initAsync = function () {
                if (this._genre != undefined)
                    return TDev.Promise.as(undefined);
                return RT.Media.initSongAlbumAsync(this);
            };
            SongAlbum.prototype.initSongsAsync = function () {
                var _this = this;
                if (this._songs)
                    return TDev.Promise.as(undefined);
                return RT.Media.songsAsync(this._name).then(function (s) { return _this._songs = s; });
            };
            SongAlbum.prototype.toString = function () {
                return this.name();
            };
            SongAlbum.prototype.art = function (r) {
                var _this = this;
                this.initArtAsync().done(function () { return r.resumeVal(_this._art); });
            };
            SongAlbum.prototype.artist = function () {
                return this._artist || '';
            };
            SongAlbum.prototype.duration = function (r) {
                var _this = this;
                this.initAsync().done(function () { return r.resumeVal(_this._duration || 0); });
            };
            SongAlbum.prototype.genre = function (r) {
                var _this = this;
                this.initAsync().done(function () { return r.resumeVal(_this._genre || ''); });
            };
            SongAlbum.prototype.has_art = function (r) {
                var _this = this;
                this.initArtAsync().done(function () { return r.resumeVal(!!_this._art); });
            };
            SongAlbum.prototype.name = function () {
                return this._name;
            };
            SongAlbum.prototype.getViewCore = function (s, b) {
                var _this = this;
                var d = TDev.div("item");
                var di = TDev.div("item-image contact-image");
                var dc = TDev.div("item-info item-with-button");
                d.setChildren([di, dc]);
                if (this.name())
                    dc.appendChild(TDev.div("item-title", this.name()));
                if (this.artist())
                    dc.appendChild(TDev.div("item-subtitle", this.artist()));
                this.initAsync().done(function () {
                    if (_this._thumbnail) {
                        var img = _this._thumbnail.getImageElement();
                        if (img) {
                            img.className = "contact-image";
                            di.appendChild(img);
                        }
                        else {
                            _this._thumbnail.initAsync().done(function () {
                                var c = _this._thumbnail.getViewCanvasClone();
                                c.className = "contact-image";
                                di.appendChild(c);
                            });
                        }
                    }
                    if (_this._genre)
                        dc.appendChild(TDev.div("item-subtle", _this._genre));
                    d.appendChild(TDev.div('item-buttons', TDev.HTML.mkRoundButton("svg:play,black", TDev.lf("play"), 421 /* songAlbumPlay */, function () { return _this.playAsync().done(); })));
                });
                return d;
            };
            SongAlbum.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            SongAlbum.prototype.songs = function (r) {
                var _this = this;
                this.initSongsAsync().done(function () { return r.resumeVal(_this._songs); });
            };
            SongAlbum.prototype.thumbnail = function (r) {
                var _this = this;
                this.initAsync().done(function () { return r.resumeVal(_this._thumbnail); });
            };
            SongAlbum.prototype.playAsync = function () {
                var _this = this;
                return this.initSongsAsync().then(function () {
                    if (_this._songs)
                        RT.Player.play_many(_this._songs);
                });
            };
            SongAlbum.prototype.play = function (r) {
                this.playAsync().done(function () { return r.resume(); });
            };
            return SongAlbum;
        })(RT.RTValue);
        RT.SongAlbum = SongAlbum;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var SongAlbums = (function (_super) {
            __extends(SongAlbums, _super);
            function SongAlbums() {
                _super.call(this);
                this.a = [];
            }
            SongAlbums.mk = function (albums) {
                var r = new SongAlbums();
                r.a = albums;
                return r;
            };
            SongAlbums.prototype.at = function (index) {
                return this.a[Math.floor(index)];
            };
            SongAlbums.prototype.random = function () {
                return this.a.length == 0 ? undefined : this.at(RT.Math_.random(this.a.length));
            };
            SongAlbums.prototype.count = function () {
                return this.a.length;
            };
            SongAlbums.prototype.post_to_wall = function (s) {
                for (var i = this.a.length - 1; i > -1; --i)
                    this.a[i].post_to_wall(s);
            };
            return SongAlbums;
        })(RT.RTValue);
        RT.SongAlbums = SongAlbums;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Songs = (function (_super) {
            __extends(Songs, _super);
            function Songs() {
                _super.call(this);
                this._songs = [];
            }
            Songs.mk = function (songs) {
                var s = new Songs();
                s._songs = songs;
                return s;
            };
            Songs.prototype.at = function (index) {
                return this._songs[index];
            };
            Songs.prototype.indexOf = function (song) {
                if (!song)
                    return -1;
                var url = song.url();
                for (var i = 0; i < this._songs.length; ++i) {
                    if (this._songs[i].url() === url)
                        return i;
                }
                return -1;
            };
            Songs.prototype.random = function () {
                if (this._songs.length == 0)
                    return undefined;
                return this._songs[RT.Math_.random(this._songs.length)];
            };
            Songs.prototype.count = function () {
                return this._songs.length;
            };
            Songs.prototype.play = function () {
                RT.Player.play_many(this);
            };
            Songs.prototype.post_to_wall = function (s) {
                for (var i = this._songs.length - 1; i >= 0; --i) {
                    this._songs[i].post_to_wall(s);
                }
            };
            Songs.prototype.rand = function () {
                return this.random();
            };
            return Songs;
        })(RT.RTValue);
        RT.Songs = Songs;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Sound = (function (_super) {
            __extends(Sound, _super);
            function Sound() {
                _super.call(this);
                this._pan = 0;
                this._pitch = 0;
                this._volume = 1;
                this._url = undefined;
                this._urlToken = 0 /* None */;
                this._originalUrl = undefined;
                this._buffer = undefined;
                this._audio = undefined;
            }
            Sound.mk = function (url, urlToken, originalUrl) {
                if (urlToken === void 0) { urlToken = 0 /* None */; }
                if (originalUrl === void 0) { originalUrl = null; }
                var s = new Sound();
                s._url = url;
                s._urlToken = urlToken;
                s._originalUrl = originalUrl;
                return s;
            };
            Sound.fromDataUrl = function (dataUrl, originalUrl) {
                if (!dataUrl)
                    return TDev.Promise.as(null);
                var m = dataUrl.match(/^data:audio\/(wav|mp4|mp3);base64,/i);
                if (!m)
                    return TDev.Promise.as(null);
                var p = Sound.mk(dataUrl, 0 /* None */, originalUrl);
                return p.initAsync();
            };
            Sound.dataUriMimeType = function (url) {
                var m = /^data:(audio\/(wav|mp4|mp3));base64,/.exec(url);
                return m ? m[1] : undefined;
            };
            Sound.patchLocalArtUrl = function (url) {
                return url;
            };
            Sound.fromUrl = function (url) {
                if (Sound.dataUriMimeType(url))
                    return Sound.fromDataUrl(url, null);
                var s = Sound.mk(url, 0 /* None */, url);
                return s.initAsync();
            };
            Sound.fromArtId = function (id) {
                return Sound.fromArtUrl('https://az31353.vo.msecnd.net/pub/' + id);
            };
            Sound.fromArtUrl = function (url) {
                if (Sound.dataUriMimeType(url))
                    return Sound.fromDataUrl(url, null);
                if (/^\.\/art\//.test(url)) {
                    url = Sound.patchLocalArtUrl(url);
                }
                if (!TDev.Browser.audioWav && RT.ArtCache.isArtResource(url)) {
                    url = TDev.HTML.patchWavToMp4Url(url);
                    TDev.Util.log('fixed art sound: ' + url);
                }
                url = TDev.HTML.proxyResource(url);
                function streamed() {
                    var s = Sound.mk(url, 0 /* None */, url);
                    return s.initAsync();
                }
                if (TDev.Browser.audioDataUrls || RT.AudioContextManager.isSupported()) {
                    return RT.ArtCache.getArtAsync(url, "audio/*").then(function (dataUrl) {
                        if (dataUrl)
                            return Sound.fromDataUrl(dataUrl, url);
                        else
                            return streamed();
                    });
                }
                return streamed();
            };
            Sound.prototype.toWabRequestAsync = function () {
                var _this = this;
                return this.createUrlAsync().then(function (url) {
                    return {
                        uri: url,
                        pan: _this._pan,
                        pitch: _this._pitch,
                        volume: _this._volume
                    };
                });
            };
            Sound.prototype.initAsync = function () {
                var _this = this;
                if (this._buffer || this._audio)
                    return TDev.Promise.as(this);
                if (RT.AudioContextManager.isSupported() && Sound.dataUriMimeType(this._url)) {
                    var array = TDev.Util.decodeDataURL(this._url);
                    if (array)
                        return RT.AudioContextManager.loadAsync(array.buffer).then(function (b) {
                            _this._buffer = b;
                            return _this;
                        });
                }
                return this.createAudioAsync().then(function (audio) { return TDev.HTML.audioLoadAsync(audio); }).then(function (audio) {
                    _this._audio = audio;
                    return _this;
                });
            };
            Sound.prototype.getDataUri = function () {
                if (this._url && Sound.dataUriMimeType(this._url))
                    return this._url;
                return undefined;
            };
            Sound.prototype.createUrlAsync = function () {
                var _this = this;
                var url = this._url;
                switch (this._urlToken) {
                    case 1 /* TouchDevelop */:
                        url = TDev.Cloud.getPrivateApiUrl(url);
                        break;
                    case 2 /* MicrosoftTranslator */:
                        return RT.AzureMarketplace.requestAccessTokenAsync(RT.ApiManager.microsoftTranslatorClientId, RT.ApiManager.microsoftTranslatorClientSecret, "http://api.microsofttranslator.com", "client_credentials").then(function (accessToken) {
                            return url + "&appId=" + encodeURIComponent("BEARER " + accessToken);
                        });
                        break;
                }
                if (/^https?:\/\/.*\.wav$/i.test(url)) {
                    TDev.Util.log('sound createurl: loading online wav file');
                    var wr = RT.WebRequest.mk(url, null);
                    wr.set_accept('audio/wav');
                    return wr.sendAsync().then(function (response) {
                        var bytes = response.contentAsArraybuffer();
                        if (bytes) {
                            var dataUri = 'data:audio/wav;base64,' + TDev.Util.base64EncodeBytes(bytes);
                            TDev.Util.log('sound createurl: loaded online wav file');
                            _this._url = dataUri;
                        }
                        else {
                            TDev.Util.log('sound createurl: failed loading online wav file');
                        }
                        return dataUri;
                    });
                }
                return TDev.Promise.as(url);
            };
            Sound.prototype.createAudioAsync = function () {
                return this.createUrlAsync().then(function (url) {
                    var audio = TDev.HTML.mkAudio(url);
                    return audio;
                });
            };
            Sound.prototype.syncAudioProperties = function (audio) {
                audio.volume = this._volume;
                audio.playbackRate = 1 + this._pitch / 2;
            };
            Sound.prototype.pan = function () {
                return this._pan;
            };
            Sound.prototype.set_pan = function (pan) {
                this._pan = pan;
            };
            Sound.prototype.pitch = function () {
                return this._pitch;
            };
            Sound.prototype.set_pitch = function (pitch) {
                this._pitch = pitch;
            };
            Sound.prototype.volume = function () {
                return this._volume;
            };
            Sound.prototype.set_volume = function (v) {
                this._volume = RT.Math_.normalize(v);
                if (this._audio)
                    this.syncAudioProperties(this._audio);
            };
            Sound.prototype.duration = function (r) {
                var _this = this;
                this.initAsync().then(function () {
                    var d = _this._audio ? _this._audio.duration : 0;
                    r.resumeVal(isNaN(d) ? 0 : d);
                }).done();
            };
            Sound.prototype.pause = function () {
            };
            Sound.prototype.resetAsync = function () {
                try {
                    if (this._audio) {
                        this.syncAudioProperties(this._audio);
                        if (this._audio.currentTime != 0) {
                            this._audio.currentTime = 0;
                            if (this._audio.currentTime != 0) {
                                this._audio = null;
                                return this.initAsync();
                            }
                        }
                    }
                }
                catch (e) {
                    RT.Time.log('failed to reset sound position - ' + e);
                }
                return TDev.Promise.as();
            };
            Sound.prototype.playAsync = function () {
                return this.playCoreAsync();
            };
            Sound.prototype.playCoreAsync = function () {
                var _this = this;
                if (!TDev.RuntimeSettings.sounds()) {
                    return TDev.Promise.as(undefined);
                }
                return this.initAsync().then(function () { return _this.resetAsync(); }).then(function () {
                    try {
                        if (_this._buffer && RT.AudioContextManager.isSupported())
                            RT.AudioContextManager.play(_this._buffer, _this._volume);
                        else if (_this._audio)
                            _this._audio.play();
                    }
                    catch (e) {
                        RT.Time.log('failed to play sound - ' + e);
                    }
                });
            };
            Sound.prototype.play = function (r) {
                this.playAsync().done(function () { return r.resumeVal(undefined); });
            };
            Sound.prototype.play_special = function (volume, pitch, pan, r) {
                this.set_volume(volume);
                this.set_pitch(pitch);
                this.set_pan(pan);
                this.play(r);
            };
            Sound.prototype.post_to_wall = function (s) {
                var _this = this;
                s.rt.postBoxedHtml(TDev.HTML.mkButton('play', function () {
                    _this.playAsync().done();
                }), s.pc);
            };
            Sound.prototype.resume = function () {
            };
            Sound.prototype.state = function () {
                return undefined;
            };
            Sound.prototype.stop = function () {
            };
            return Sound;
        })(RT.RTValue);
        RT.Sound = Sound;
        (function (SoundUrlTokenDomain) {
            SoundUrlTokenDomain[SoundUrlTokenDomain["None"] = 0] = "None";
            SoundUrlTokenDomain[SoundUrlTokenDomain["TouchDevelop"] = 1] = "TouchDevelop";
            SoundUrlTokenDomain[SoundUrlTokenDomain["MicrosoftTranslator"] = 2] = "MicrosoftTranslator";
        })(RT.SoundUrlTokenDomain || (RT.SoundUrlTokenDomain = {}));
        var SoundUrlTokenDomain = RT.SoundUrlTokenDomain;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Spring = (function (_super) {
            __extends(Spring, _super);
            function Spring(board, sprite1, sprite2, stiffness) {
                _super.call(this);
                this.board = board;
                this.sprite1 = sprite1;
                this.sprite2 = sprite2;
                this.stiffness = stiffness;
            }
            Spring.prototype.set_stiffness = function (stiffness) {
                this.stiffness = stiffness;
            };
            Spring.prototype.delete_ = function () {
                this.board.deleteSpring(this);
            };
            Spring.prototype.forceOn = function (sprite) {
                var other = sprite === this.sprite1 ? this.sprite2 : this.sprite1;
                var force = other._position.subtract(sprite._position).scale(this.stiffness);
                return force;
            };
            return Spring;
        })(RT.RTValue);
        RT.Spring = Spring;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        (function (SpriteType) {
            SpriteType[SpriteType["Ellipse"] = 0] = "Ellipse";
            SpriteType[SpriteType["Rectangle"] = 1] = "Rectangle";
            SpriteType[SpriteType["Text"] = 2] = "Text";
            SpriteType[SpriteType["Picture"] = 3] = "Picture";
            SpriteType[SpriteType["Anchor"] = 4] = "Anchor";
        })(RT.SpriteType || (RT.SpriteType = {}));
        var SpriteType = RT.SpriteType;
        var SpriteContent = (function (_super) {
            __extends(SpriteContent, _super);
            function SpriteContent() {
                _super.call(this);
            }
            return SpriteContent;
        })(RT.RTValue);
        var Sprite = (function (_super) {
            __extends(Sprite, _super);
            function Sprite() {
                _super.call(this);
                this._parent = undefined;
                this._sheet = undefined;
                this._friction = Number.NaN;
                this._angular_speed = 0;
                this._height = undefined;
                this._location = undefined;
                this._angle = 0;
                this._elasticity = 1;
                this._scale = 1;
                this._speed = RT.Vector2.mk(0, 0);
                this._acceleration = RT.Vector2.mk(0, 0);
                this._width = undefined;
                this._mass = Number.NaN;
                this._position = RT.Vector2.mk(0, 0);
                this._color = RT.Colors.light_gray();
                this._text = undefined;
                this._textBaseline = undefined;
                this._hidden = false;
                this._opacity = 1;
                this._clip = undefined;
                this.shapeDirty = true;
                this.hasChanged = true;
                this.normalTouchPoints = [];
                this._springs = [];
                this.onTap = new RT.Event_();
                this.onSwipe = new RT.Event_();
                this.onDrag = new RT.Event_();
                this.onTouchDown = new RT.Event_();
                this.onTouchUp = new RT.Event_();
                this.onEveryFrame = new RT.Event_();
                this._z_index = undefined;
            }
            Sprite.mk = function (tp, x, y, w, h) {
                var s = new Sprite();
                s.spriteType = tp;
                s._width = w;
                s._height = h;
                s._position = new RT.Vector2(x, y);
                s.computeBoundingBox();
                return s;
            };
            Sprite.prototype.friction = function () {
                if (!this._parent)
                    return NaN;
                if (isNaN(this._friction))
                    return this._parent._worldFriction;
                return this._friction;
            };
            Sprite.prototype.set_friction = function (friction) {
                this._friction = Math.min(1, Math.abs(friction));
            };
            Sprite.prototype.scale = function () {
                return this._scale;
            };
            Sprite.prototype.set_scale = function (value) {
                this._scale = value;
            };
            Sprite.prototype.angular_speed = function () {
                return this._angular_speed;
            };
            Sprite.prototype.set_angular_speed = function (speed) {
                this._angular_speed = speed;
            };
            Sprite.prototype.height = function () {
                return this._height;
            };
            Sprite.prototype.location = function () {
                return this._location;
            };
            Sprite.prototype.set_location = function (location) {
                this._location = location;
            };
            Sprite.prototype.angle = function () {
                return this._angle;
            };
            Sprite.prototype.set_angle = function (angle) {
                if (this._angle != angle) {
                    this._angle = angle;
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.elasticity = function () {
                return this._elasticity;
            };
            Sprite.prototype.set_elasticity = function (elasticity) {
                this._elasticity = Math.abs(elasticity);
            };
            Sprite.prototype.speed_x = function () {
                return this._speed.x();
            };
            Sprite.prototype.set_speed_x = function (vx) {
                this._speed = new RT.Vector2(vx, this._speed.y());
            };
            Sprite.prototype.speed_y = function () {
                return this._speed.y();
            };
            Sprite.prototype.set_speed_y = function (vy) {
                this._speed = new RT.Vector2(this._speed.x(), vy);
            };
            Sprite.prototype.width = function () {
                return this._width;
            };
            Sprite.prototype.set_height = function (height) {
                height = Math.max(1, height);
                if (height != this._height) {
                    this._height = height;
                    if (this._picture)
                        this._width = this._picture.widthSync() / Math.max(1, this._picture.heightSync()) * this._height;
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.set_width = function (width) {
                width = Math.max(1, width);
                if (this._width != width) {
                    this._frame = null;
                    this._width = width;
                    if (this._picture)
                        this._height = this._picture.heightSync() / Math.max(1, this._picture.widthSync()) * this._width;
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.top = function () {
                return this._position.y() - this._height / 2;
            };
            Sprite.prototype.set_top = function (y) {
                this._position = new RT.Vector2(this._position.x(), y + this._height / 2);
            };
            Sprite.prototype.bottom = function () {
                return this._position.y() + this._height / 2;
            };
            Sprite.prototype.set_bottom = function (y) {
                this._position = new RT.Vector2(this._position.x(), y - this._height / 2);
            };
            Sprite.prototype.right = function () {
                return this._position.x() + this._width / 2;
            };
            Sprite.prototype.set_right = function (x) {
                this._position = new RT.Vector2(x - this._width / 2, this._position.y());
            };
            Sprite.prototype.left = function () {
                return this._position.x() - this._width / 2;
            };
            Sprite.prototype.set_left = function (x) {
                this._position = new RT.Vector2(x + this._width / 2, this._position.y());
            };
            Sprite.prototype.x = function () {
                return this._position.x();
            };
            Sprite.prototype.set_x = function (x) {
                this._position = new RT.Vector2(x, this._position.y());
            };
            Sprite.prototype.y = function () {
                return this._position.y();
            };
            Sprite.prototype.set_y = function (y) {
                this._position = new RT.Vector2(this._position.x(), y);
            };
            Sprite.prototype.color = function () {
                return this._color;
            };
            Sprite.prototype.set_color = function (color) {
                this._color = color;
                this.contentChanged();
            };
            Sprite.prototype.opacity = function () {
                return this._opacity;
            };
            Sprite.prototype.set_opacity = function (opacity) {
                this._opacity = Math.min(1, Math.max(0, opacity));
                this.contentChanged();
            };
            Sprite.prototype.sheet = function () {
                return this._sheet;
            };
            Sprite.prototype.setSheet = function (sheet) {
                this._sheet = sheet;
                this.setPictureInternal(this._sheet._picture);
                this._width = 0;
                this._height = 0;
            };
            Sprite.prototype.set_font_size = function (size, s) {
                var size = Math.round(size);
                if (this.fontSize != size) {
                    this.fontSize = size;
                    this.changed();
                }
            };
            Sprite.prototype.font_size = function () {
                return this.fontSize || 0;
            };
            Sprite.prototype.set_text_baseline = function (pos, s) {
                pos = pos.trim().toLowerCase();
                if (!/^(alphabetic|top|hanging|middle|ideographic|bottom)$/.test(pos))
                    TDev.Util.userError(TDev.lf("invalid text baseline value"), s.pc);
                this._textBaseline = pos;
            };
            Sprite.prototype.text_baseline = function () {
                return this._textBaseline;
            };
            Sprite.prototype.fit_text = function () {
                var ctx;
                if (this._text && this._parent && (ctx = this._parent.renderingContext())) {
                    ctx.save();
                    ctx.font = this.font(this.fontSize);
                    var lines = this._text.split('\n');
                    var w = 0, h = this.fontSize * ((lines.length - 1) * 1.25 + 1);
                    lines.forEach(function (line) { return w = Math.max(w, ctx.measureText(line).width); });
                    ctx.restore();
                    this.set_width(w);
                    this.set_height(h);
                    this._textBaseline = "middle";
                }
            };
            Sprite.prototype.text = function () {
                return this._text;
            };
            Sprite.prototype.set_text = function (text) {
                if (this.spriteType == 2 /* Text */) {
                    this._text = text;
                    this.contentChanged();
                }
            };
            Sprite.prototype.mass = function () {
                if (isNaN(this._mass)) {
                    return Math.max(1e-6, this.width() * this.height());
                }
                return this._mass;
            };
            Sprite.prototype.set_mass = function (mass) {
                if (isNaN(mass) || isFinite(mass) && mass > 0) {
                    this._mass = mass;
                }
            };
            Sprite.prototype.acceleration_x = function () {
                return this._acceleration._x;
            };
            Sprite.prototype.acceleration_y = function () {
                return this._acceleration._y;
            };
            Sprite.prototype.set_acceleration_x = function (x) {
                this._acceleration = new RT.Vector2(x, this._acceleration._y);
            };
            Sprite.prototype.set_acceleration_y = function (y) {
                this._acceleration = new RT.Vector2(this._acceleration._x, y);
            };
            Sprite.prototype.set_acceleration = function (x, y) {
                this._acceleration = new RT.Vector2(x, y);
            };
            Sprite.prototype.on_tap = function (tapped) {
                return this.onTap.addHandler(tapped);
            };
            Sprite.prototype.on_swipe = function (swiped) {
                return this.onSwipe.addHandler(swiped);
            };
            Sprite.prototype.on_drag = function (dragged) {
                return this.onDrag.addHandler(dragged);
            };
            Sprite.prototype.on_touch_down = function (touch_down) {
                return this.onTouchDown.addHandler(touch_down);
            };
            Sprite.prototype.on_touch_up = function (touch_up) {
                return this.onTouchUp.addHandler(touch_up);
            };
            Sprite.prototype.on_every_frame = function (perform, s) {
                if (this._parent)
                    this._parent.enableEveryFrameOnSprite(s);
                return this.onEveryFrame.addHandler(perform);
            };
            Sprite.prototype.changed = function () {
                this.hasChanged = true;
            };
            Sprite.prototype.contentChanged = function () {
                this.changed();
                this.shapeDirty = true;
            };
            Sprite.prototype.redraw = function (ctx, debug) {
                if (!debug && (this._hidden || this._opacity == 0 || this._width <= 0 || this._height <= 0 || this._scale == 0))
                    return;
                this.drawShape(ctx, debug);
            };
            Sprite.prototype.font = function (size) {
                return size + "px " + '"Segoe UI", "Segoe WP", "Helvetica Neue", Sans-Serif';
            };
            Sprite.prototype.drawShape = function (ctx, debug) {
                var _this = this;
                var fcolor = this.color().toHtml();
                var dcolor = function () { return _this.color().make_transparent(1).toHtml(); };
                var scaledWidth = this._width * this._scale;
                var scaledHeight = this._height * this._scale;
                var scaledFontSize = RT.Math_.round_with_precision(this.fontSize * this._scale, 1);
                ctx.save();
                ctx.translate(this.x(), this.y());
                var ag = this._angle / 180 * Math.PI;
                if (this._frame && this._frame.rotated)
                    ag -= 90;
                ctx.rotate(ag);
                switch (this.spriteType) {
                    case 1 /* Rectangle */:
                        ctx.translate(-scaledWidth / 2, -scaledHeight / 2);
                        if (debug) {
                            ctx.strokeStyle = dcolor();
                            ctx.strokeRect(0, 0, scaledWidth, scaledHeight);
                        }
                        ctx.globalAlpha = this._opacity;
                        ctx.fillStyle = fcolor;
                        if (!this._hidden) {
                            ctx.fillRect(0, 0, scaledWidth, scaledHeight);
                        }
                        break;
                    case 0 /* Ellipse */:
                        ctx.scale(scaledWidth / scaledHeight, 1);
                        ctx.translate(-scaledHeight / 2, -scaledHeight / 2);
                        if (debug) {
                            ctx.strokeStyle = dcolor();
                            ctx.strokeRect(0, 0, scaledHeight, scaledHeight);
                        }
                        ctx.globalAlpha = this._opacity;
                        if (!this._hidden) {
                            ctx.beginPath();
                            ctx.arc(scaledHeight / 2, scaledHeight / 2, scaledHeight / 2, 0, 2 * Math.PI);
                            if (TDev.Browser.brokenGradient) {
                                ctx.fillStyle = fcolor;
                            }
                            else {
                                try {
                                    var radgrad = ctx.createRadialGradient(scaledHeight * 0.75, scaledHeight * 0.25, 1, scaledHeight / 2, scaledHeight / 2, scaledHeight / 2);
                                    radgrad.addColorStop(0, '#FFFFFF');
                                    radgrad.addColorStop(1, fcolor);
                                    ctx.fillStyle = radgrad;
                                }
                                catch (e) {
                                    TDev.Util.log("draw shape crash, color: " + fcolor);
                                    throw e;
                                }
                            }
                            ctx.closePath();
                            ctx.fill();
                        }
                        break;
                    case 3 /* Picture */:
                        ctx.translate(-scaledWidth / 2, -scaledHeight / 2);
                        if (debug) {
                            ctx.strokeStyle = dcolor();
                            ctx.strokeRect(0, 0, scaledWidth, scaledHeight);
                        }
                        if (this._opacity > 0 && this._picture) {
                            ctx.globalAlpha = this._opacity;
                            if (!this._hidden) {
                                if (this._clip) {
                                    if (this._clip[2] > 0 && this._clip[3] > 0)
                                        ctx.drawImage(this._picture.getCanvas(), this._clip[0], this._clip[1], this._clip[2], this._clip[3], 0, 0, scaledWidth, scaledHeight);
                                }
                                else {
                                    ctx.drawImage(this._picture.getCanvas(), 0, 0, this._picture.widthSync(), this._picture.heightSync(), 0, 0, scaledWidth, scaledHeight);
                                }
                            }
                        }
                        break;
                    case 2 /* Text */:
                        ctx.translate(-scaledWidth / 2, -scaledHeight / 2);
                        ctx.fillStyle = fcolor;
                        if (debug) {
                            ctx.strokeStyle = dcolor();
                            ctx.strokeRect(0, 0, scaledWidth, scaledHeight);
                        }
                        if (!this._hidden) {
                            ctx.globalAlpha = this._opacity;
                            ctx.font = this.font(scaledFontSize);
                            var lines = this._text.split("\n");
                            ctx.textBaseline = this._textBaseline || "top";
                            if (!this._textBaseline)
                                ctx.translate(0, scaledFontSize * 0.2);
                            else
                                ctx.translate(0, scaledHeight / 2);
                            for (var line = 0; line < lines.length; line++) {
                                var msr = ctx.measureText(lines[line]);
                                ctx.save();
                                var offset = scaledWidth - msr.width;
                                if (offset > 0) {
                                    offset = offset / 2;
                                }
                                else {
                                    offset = 0;
                                }
                                ctx.translate(offset, 0);
                                ctx.fillText(lines[line], 0, 0);
                                ctx.restore();
                                ctx.translate(0, scaledFontSize * 1.25);
                            }
                        }
                        break;
                    case 4 /* Anchor */:
                        ctx.translate(-scaledWidth / 2, -scaledHeight / 2);
                        if (debug) {
                            ctx.strokeStyle = dcolor();
                            ctx.strokeRect(0, 0, scaledWidth, scaledHeight);
                        }
                        break;
                }
                if (debug) {
                    ctx.restore();
                    ctx.save();
                    ctx.translate(this.x() + this.boundingMaxX + 2, this.y() + this.boundingMinY);
                    ctx.font = "10px sans-serif";
                    ctx.fillStyle = dcolor();
                    ctx.fillText("x:" + this.x().toFixed(1), 0, 0);
                    ctx.translate(0, 10);
                    ctx.fillText("y:" + this.y().toFixed(1), 0, 0);
                    if (this.speed_x() != 0 || this.speed_y() != 0) {
                        ctx.translate(0, 10);
                        ctx.fillText("vx:" + this.speed_x().toFixed(1), 0, 0);
                        ctx.translate(0, 10);
                        ctx.fillText("vy:" + this.speed_y().toFixed(1), 0, 0);
                    }
                    ctx.restore();
                    ctx.save();
                    ctx.strokeStyle = "green";
                    ctx.beginPath();
                    var cap = this.capsule();
                    ctx.moveTo(cap.x(), cap.y());
                    ctx.lineWidth = 5;
                    ctx.lineTo(cap.x() + cap.z(), cap.y() + cap.w());
                    ctx.lineWidth = 1;
                    ctx.moveTo(this.x() + this.boundingMinX, this.y() + this.boundingMinY);
                    ctx.lineTo(this.x() + this.boundingMaxX, this.y() + this.boundingMinY);
                    ctx.lineTo(this.x() + this.boundingMaxX, this.y() + this.boundingMaxY);
                    ctx.lineTo(this.x() + this.boundingMinX, this.y() + this.boundingMaxY);
                    ctx.lineTo(this.x() + this.boundingMinX, this.y() + this.boundingMinY);
                    ctx.moveTo(this.x() - 3, this.y());
                    ctx.lineTo(this.x() + 3, this.y());
                    ctx.moveTo(this.x(), this.y() - 3);
                    ctx.lineTo(this.x(), this.y() + 3);
                    ctx.stroke();
                }
                ctx.restore();
            };
            Sprite.prototype.computeBoundingBox = function () {
                var rx = this.radiusX();
                var ry = this.radiusY();
                if (this._angle == 0 || this._angle == 180) {
                    this.boundingMinX = -rx;
                    this.boundingMaxX = rx;
                    this.boundingMinY = -ry;
                    this.boundingMaxY = ry;
                    return;
                }
                if (this._angle == 90 || this._angle == 270 || this._angle == -90) {
                    this.boundingMinX = -ry;
                    this.boundingMaxX = ry;
                    this.boundingMinY = -rx;
                    this.boundingMaxY = rx;
                    return;
                }
                this.boundingMinX = Number.MAX_VALUE;
                this.boundingMaxX = Number.MIN_VALUE;
                this.boundingMinY = Number.MAX_VALUE;
                this.boundingMaxY = Number.MIN_VALUE;
                var sine = Math.sin(Math.PI * this._angle / 180);
                var cosine = Math.cos(Math.PI * this._angle / 180);
                this.updateBoundingX(this.rotateX(rx, -ry, sine, cosine));
                this.updateBoundingY(this.rotateY(rx, -ry, sine, cosine));
                this.updateBoundingX(this.rotateX(rx, ry, sine, cosine));
                this.updateBoundingY(this.rotateY(rx, ry, sine, cosine));
                this.updateBoundingX(this.rotateX(-rx, ry, sine, cosine));
                this.updateBoundingY(this.rotateY(-rx, ry, sine, cosine));
                this.updateBoundingX(this.rotateX(-rx, -ry, sine, cosine));
                this.updateBoundingY(this.rotateY(-rx, -ry, sine, cosine));
            };
            Sprite.prototype.rotateX = function (x, y, sine, cosine) {
                return x * cosine - y * sine;
            };
            Sprite.prototype.rotateY = function (x, y, sine, cosine) {
                return x * sine + y * cosine;
            };
            Sprite.prototype.rotate = function (v) {
                var sine = Math.sin(Math.PI * this._angle / 180);
                var cosine = Math.cos(Math.PI * this._angle / 180);
                var x = this.rotateX(v.x(), v.y(), sine, cosine);
                var y = this.rotateY(v.x(), v.y(), sine, cosine);
                return new RT.Vector2(x, y);
            };
            Sprite.prototype.minPointSegment = function (x0, y0, dx0, dy0, x1, y1) {
                var wx = x0 - x1;
                var wy = y0 - y1;
                var d = dx0 * dx0 + dy0 * dy0;
                if (Math.abs(d) < 0.00001) {
                    var result = new RT.Vector2(wx, wy);
                    result.from = 0;
                    return result;
                }
                var from = 1;
                var t = -(wx * dx0 + wy * dy0) / d;
                if (t < 0) {
                    t = 0;
                    from = 2;
                }
                else if (t > 1) {
                    t = 1;
                    from = 3;
                }
                var result = new RT.Vector2(wx + t * dx0, wy + t * dy0);
                result.from = from;
                return result;
            };
            Sprite.prototype.minConnectingSegment = function (x0, y0, dx0, dy0, x1, y1, dx1, dy1) {
                var b = dx0 * dy1 - dy0 * dx1;
                if (b != 0) {
                    var wx = x0 - x1;
                    var wy = y0 - y1;
                    var d = dx0 * wy - dy0 * wx;
                    var e = dx1 * wy - dy1 * wx;
                    var t = d / b;
                    var s = e / b;
                    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
                        var result = new RT.Vector4(x0 + s * dx0, y0 + s * dy0, 0, 0);
                        result.from = 32;
                        return result;
                    }
                }
                var v1 = this.minPointSegment(x0, y0, dx0, dy0, x1, y1);
                var v2 = this.minPointSegment(x0, y0, dx0, dy0, x1 + dx1, y1 + dy1);
                var v3 = this.minPointSegment(x1, y1, dx1, dy1, x0, y0);
                var v4 = this.minPointSegment(x1, y1, dx1, dy1, x0 + dx0, y0 + dy0);
                var d1 = v1.length();
                var d2 = v2.length();
                var d3 = v3.length();
                var d4 = v4.length();
                var m = Math.min(d1, d2, d3, d4);
                if (m == d1) {
                    var result = new RT.Vector4(x1, y1, v1.x(), v1.y());
                    result.from = v1.from + 4;
                    return result;
                }
                if (m == d2) {
                    var result = new RT.Vector4(x1 + dx1, y1 + dy1, v2.x(), v2.y());
                    result.from = v1.from + 8;
                    return result;
                }
                if (m == d3) {
                    var result = new RT.Vector4(x0, y0, v3.x(), v3.y());
                    result.from = v1.from + 12;
                    return result;
                }
                var result = new RT.Vector4(x0 + dx0, y0 + dy0, v4.x(), v4.y());
                result.from = v1.from + 16;
                return result;
            };
            Sprite.prototype.updateBoundingX = function (newX) {
                this.boundingMaxX = Math.max(this.boundingMaxX, newX);
                this.boundingMinX = Math.min(this.boundingMinX, newX);
            };
            Sprite.prototype.updateBoundingY = function (newY) {
                this.boundingMaxY = Math.max(this.boundingMaxY, newY);
                this.boundingMinY = Math.min(this.boundingMinY, newY);
            };
            Sprite.prototype.bbRadius = function (unitNormal) {
                var angle = Math.atan(unitNormal.y() / unitNormal.x());
                angle = angle - Math.PI * this._angle / 180;
                var tan = Math.tan(angle);
                var horiz = Math.abs(this.radiusY() / tan);
                if (horiz <= this.radiusX()) {
                    return Math.abs(this.radiusY() / Math.sin(angle));
                }
                var vert = Math.abs(this.radiusX() * tan);
                if (vert > this.radiusY()) {
                    debugger;
                }
                return Math.abs(this.radiusX() / Math.cos(angle));
            };
            Sprite.prototype.radius = function (unitNormal) {
                var angle = Math.atan(unitNormal.y() / unitNormal.x());
                angle = angle - Math.PI * this._angle / 180;
                var sin = Math.sin(angle);
                var cos = Math.cos(angle);
                var majorAxis, majorAxisMult;
                var minorAxis, minorAxisMult;
                if (this.width >= this.height) {
                    majorAxis = this.radiusX();
                    minorAxis = this.radiusY();
                    majorAxisMult = sin;
                    minorAxisMult = cos;
                }
                else {
                    majorAxis = this.radiusY();
                    minorAxis = this.radiusX();
                    majorAxisMult = cos;
                    minorAxisMult = -sin;
                }
                var rad = (majorAxis * minorAxis) / (Math.sqrt(majorAxis * majorAxis * majorAxisMult * majorAxisMult + minorAxis * minorAxis * minorAxisMult * minorAxisMult));
                return rad;
            };
            Sprite.prototype.radiusX = function () {
                return this.width() / 2;
            };
            Sprite.prototype.radiusY = function () {
                return this.height() / 2;
            };
            Sprite.prototype.stepDisplacement = function () {
                return this.newPosition.subtract(this._position);
            };
            Sprite.prototype.computeForces = function (positionSpeed) {
                var force = (this._parent.gravity().add(this._acceleration)).scale(this.mass());
                for (var i = 0; i < this._springs.length; i++) {
                    var spring = this._springs[i];
                    force = force.add(spring.forceOn(this));
                }
                for (var i = 0; i < this.normalTouchPoints.length; i++) {
                    var unitNormal = this.normalTouchPoints[i];
                    if (RT.Vector2.dot(unitNormal, force) > 0)
                        continue;
                    if (RT.Vector2.dot(unitNormal, new RT.Vector2(positionSpeed.z(), positionSpeed.w())) > 0)
                        continue;
                    var unitParallel = unitNormal.rotate90Left();
                    var proj = unitParallel.scale(RT.Vector2.dot(force, unitParallel));
                    force = proj;
                }
                if (Math.abs(force.x()) < 0.1)
                    force = new RT.Vector2(0, force.y());
                if (Math.abs(force.y()) < 0.1)
                    force = new RT.Vector2(force.x(), 0);
                return force;
            };
            Sprite.prototype.isEqualToEpsilon = function (x, p) {
                return (Math.round((x - p) / 2) == 0.0);
            };
            Sprite.prototype.derivativePosAndSpeed = function (dT, positionSpeed) {
                var accel = this.computeForces(positionSpeed).scale(1 / this.mass());
                return new RT.Vector4((positionSpeed.z() + dT * accel.x()), (positionSpeed.w() + dT * accel.y()), accel.x(), accel.y());
            };
            Sprite.prototype.actualFriction = function () {
                if (isNaN(this._friction))
                    return this._parent._worldFriction;
                return this._friction;
            };
            Sprite.prototype.RungaKutta = function (dT) {
                var yi = RT.Vector4.fromV2V2(this._position, this._speed);
                var u1 = this.derivativePosAndSpeed(0, yi).scale(dT);
                var u2 = this.derivativePosAndSpeed(dT / 2, yi.add(u1.scale(.5))).scale(dT);
                var u3 = this.derivativePosAndSpeed(dT / 2, yi.add(u2.scale(.5))).scale(dT);
                var u4 = this.derivativePosAndSpeed(dT, yi.add(u3)).scale(dT);
                var avg = (u1.add(u2.scale(2)).add(u3.scale(2)).add(u4)).scale(1 / 6);
                var nz = avg.z();
                if (avg.z() < 0.1 && avg.z() > -0.1)
                    nz = 0;
                var nw = avg.w();
                if (avg.w() < 0.1 && avg.w() > -0.1)
                    nw = 0;
                var nx = avg.x() * (1 - this.actualFriction());
                var ny = avg.y() * (1 - this.actualFriction());
                avg = new RT.Vector4(nx, ny, nz, nw);
                this.midSpeed = new RT.Vector2(avg.x() / dT, avg.y() / dT);
                var yip1 = yi.add(avg);
                yip1 = yip1.withW(yip1.w() * (1 - this.actualFriction()));
                yip1 = yip1.withZ(yip1.z() * (1 - this.actualFriction()));
                return yip1;
            };
            Sprite.prototype.update = function (dT) {
                TDev.Contract.Requires(dT >= 0);
                if (!this._parent)
                    return;
                var yip1 = this.RungaKutta(dT);
                this.newPosition = new RT.Vector2(yip1.x(), yip1.y());
                this.newSpeed = new RT.Vector2(yip1.z(), yip1.w());
                this.newRotation = this._angle + this._angular_speed * dT;
            };
            Sprite.prototype.commitUpdate = function (rt, dT) {
                if (!this._lastPosition || !this._lastPosition.equals(this.newPosition) || this._angle != this.newRotation)
                    this.changed();
                this._position = this.newPosition;
                this._angle = this.newRotation;
                this._speed = this.newSpeed;
                if (this._animations) {
                    var anyDone = false;
                    this._animations.forEach(function (anim) { return anyDone = !anim.evolve(rt, dT) || anyDone; });
                    if (anyDone) {
                        this._animations = this._animations.filter(function (anim) { return anim.isActive; });
                        if (this._animations.length == 0)
                            this._animations = undefined;
                    }
                }
                this.computeBoundingBox();
            };
            Sprite.prototype.hide = function () {
                this._hidden = true;
            };
            Sprite.prototype.is_visible = function () {
                return !this._hidden;
            };
            Sprite.prototype.move = function (delta_x, delta_y) {
                this._position = new RT.Vector2(this._position._x + delta_x, this._position._y + delta_y);
            };
            Sprite.prototype.move_towards = function (other, fraction) {
                var center1 = this._position;
                var center2 = other._position;
                var dir = center2.subtract(center1).scale(fraction);
                this.move(dir._x, dir._y);
            };
            Sprite.prototype.capsule = function () {
                var s0x, s0y, s1x, s1y, d0x, d0y, d1x, d1y;
                if (this._width > this._height) {
                    d0x = (this._width - this._height);
                    d0y = 0;
                    s0x = -d0x / 2;
                    s0y = 0;
                }
                else {
                    d0x = 0;
                    d0y = (this._height - this._width);
                    s0x = 0;
                    s0y = -d0y / 2;
                }
                var d0 = this.rotate(new RT.Vector2(d0x, d0y));
                var s0 = this.rotate(new RT.Vector2(s0x, s0y));
                return new RT.Vector4(this.x() + s0.x(), this.y() + s0.y(), d0.x(), d0.y());
            };
            Sprite.prototype.capsuleRadius = function () {
                if (this._width < this._height) {
                    return this._width / 2;
                }
                return this._height / 2;
            };
            Sprite.prototype.overlaps_with = function (other) {
                if (!this._parent)
                    return false;
                if (!other._parent)
                    return false;
                if (isNaN(this.x()) || isNaN(this.y()) || isNaN(other.x()) || isNaN(other.y()))
                    return false;
                if (this.x() + this.boundingMaxX <= other.x() + other.boundingMinX)
                    return false;
                if (this.x() + this.boundingMinX >= other.x() + other.boundingMaxX)
                    return false;
                if (this.y() + this.boundingMaxY <= other.y() + other.boundingMinY)
                    return false;
                if (this.y() + this.boundingMinY >= other.y() + other.boundingMaxY)
                    return false;
                var cap1 = this.capsule();
                var cap2 = other.capsule();
                var seg = this.minConnectingSegment(cap1.x(), cap1.y(), cap1.z(), cap1.w(), cap2.x(), cap2.y(), cap2.z(), cap2.w());
                if (this._parent) {
                    this._parent._minSegments.push(seg);
                }
                var radi = this.capsuleRadius() + other.capsuleRadius();
                var dist = seg.z() * seg.z() + seg.w() * seg.w();
                if (dist >= radi * radi) {
                    seg.overlap = false;
                    return false;
                }
                seg.overlap = true;
                return true;
                var center1 = this._position;
                var center2 = other._position;
                var distVec = center2.subtract(center1);
                var dist = distVec.length();
                if (dist == 0)
                    return true;
                var norm = distVec.normalize();
                var radius1 = this.radius(norm);
                var radius2 = other.radius(norm);
                if (radius1 + radius2 >= dist)
                    return true;
                return false;
            };
            Sprite.prototype.overlap_with = function (sprites) {
                if (!this._parent)
                    return new RT.SpriteSet();
                return this._parent.overlapWithAny(this, sprites);
            };
            Sprite.prototype.equals = function (other) {
                return this === other;
            };
            Sprite.prototype.set_picture = function (pic, r) {
                var _this = this;
                if (this.spriteType != 3 /* Picture */)
                    r.resume();
                else
                    pic.loadFirst(r, function () {
                        _this.setPictureInternal(pic);
                    });
            };
            Sprite.prototype.setPictureInternal = function (pic) {
                this._picture = pic;
                this._width = pic.widthSync();
                this._height = pic.heightSync();
                this.computeBoundingBox();
                this.contentChanged();
            };
            Sprite.prototype.picture = function () {
                return this._picture;
            };
            Sprite.prototype.set_pos = function (x, y) {
                this._position = new RT.Vector2(x, y);
            };
            Sprite.prototype.set_speed = function (vx, vy) {
                this._speed = new RT.Vector2(vx, vy);
            };
            Sprite.prototype.show = function () {
                this._hidden = false;
            };
            Sprite.prototype.speed_towards = function (other, magnitude) {
                var center1 = this._position;
                var center2 = other._position;
                var speed = center2.subtract(center1);
                speed = speed.normalize();
                speed = speed.scale(magnitude);
                this._speed = speed;
            };
            Sprite.prototype.set_clip = function (left, top, width, height) {
                if (this._picture && isFinite(left) && isFinite(top) && isFinite(width) && isFinite(height)) {
                    this._frame = undefined;
                    this._width = width;
                    this._height = height;
                    this._clip = [left, top, width, height];
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.setFrame = function (frame) {
                if (this._frame != frame) {
                    this._frame = frame;
                    if (this._width <= 0)
                        this._width = frame.width;
                    this._height = frame.width <= 0 ? frame.height : this._width / frame.width * frame.height;
                    this._clip = [frame.x, frame.y, frame.width, frame.height];
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.move_clip = function (x, y) {
                if (this._clip && this._picture) {
                    var left = (this._clip[0] + x) % this._picture.widthSync();
                    if (left < 0)
                        left += this._clip[2];
                    else if (left + this._clip[2] > this._picture.widthSync())
                        left = 0;
                    var top = (this._clip[1] + y) % this._picture.heightSync();
                    if (top < 0)
                        top += this._clip[3];
                    else if (top + this._clip[3] > this._picture.heightSync())
                        top = 0;
                    this._clip = [left, top, this._clip[2], this._clip[3]];
                    this.computeBoundingBox();
                    this.contentChanged();
                }
            };
            Sprite.prototype.delete_ = function () {
                if (!this._parent) {
                    return;
                }
                this._parent.deleteSprite(this);
                this._parent = null;
            };
            Sprite.prototype.is_deleted = function () {
                return !this._parent;
            };
            Sprite.prototype.contains = function (x, y) {
                var diff = RT.Vector2.mk(x, y).subtract(this._position);
                var norm = diff.normalize();
                var rad = this.bbRadius(norm);
                if (diff.length() <= rad)
                    return true;
                return false;
            };
            Sprite.prototype.addSpring = function (sp) {
                this._springs.push(sp);
            };
            Sprite.prototype.removeSpring = function (sp) {
                var idx = this._springs.indexOf(sp);
                if (idx > -1)
                    this._springs.splice(idx, 1);
            };
            Sprite.prototype.z_index = function () {
                return this._z_index;
            };
            Sprite.prototype.set_z_index = function (zindex) {
                if (this._z_index != zindex) {
                    this._z_index = zindex;
                    if (this._parent)
                        this._parent.spritesChanged();
                }
            };
            Sprite.prototype.createAnimation = function () {
                var anim = new RT.SpriteAnimation(this);
                return anim;
            };
            Sprite.prototype.startAnimation = function (anim) {
                TDev.Util.assert(anim._sprite == this);
                if (!this._animations)
                    this._animations = [];
                this._animations.push(anim);
            };
            Sprite.prototype.create_animation = function () {
                var anim = this.createAnimation();
                this.startAnimation(anim);
                return anim;
            };
            Sprite.prototype.debuggerChildren = function () {
                return {
                    'Z-index': this.z_index(),
                    Friction: this.friction(),
                    'Angular speed': this.angular_speed(),
                    Angle: this.angle(),
                    Elasticity: this.elasticity(),
                    'Speed X': this.speed_x(),
                    'Speed Y': this.speed_y(),
                    X: this.x(),
                    Y: this.y(),
                    Color: this.color(),
                    Opacity: this.opacity(),
                    Text: this.text(),
                    Picture: this.picture(),
                    Mass: this.mass(),
                    'Acceleration X': this.acceleration_x(),
                    'Acceleration Y': this.acceleration_y(),
                    Visible: this.is_visible(),
                };
            };
            return Sprite;
        })(RT.RTValue);
        RT.Sprite = Sprite;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var SpriteSet = (function (_super) {
            __extends(SpriteSet, _super);
            function SpriteSet() {
                _super.call(this);
                this._elements = [];
            }
            SpriteSet.prototype.clear = function () {
                this._elements = [];
            };
            SpriteSet.prototype.count = function () {
                return this._elements.length;
            };
            SpriteSet.prototype.add = function (sprite) {
                if (this.contains(sprite))
                    return false;
                this._elements.push(sprite);
                return true;
            };
            SpriteSet.prototype.add_from = function (old_set, sprite) {
                if (!old_set.contains(sprite) || this.contains(sprite))
                    return false;
                old_set.remove(sprite);
                this.add(sprite);
                return true;
            };
            SpriteSet.prototype.remove = function (sprite) {
                var idx = this.index_of(sprite);
                if (idx >= 0) {
                    this._elements.splice(idx, 1);
                    return true;
                }
                return false;
            };
            SpriteSet.prototype.contains = function (sprite) {
                var idx = this.index_of(sprite);
                if (idx < 0) {
                    return false;
                }
                return true;
            };
            SpriteSet.prototype.remove_first = function () {
                var result = this._elements.shift();
                return result;
            };
            SpriteSet.prototype.index_of = function (sprite) {
                var idx = this._elements.indexOf(sprite);
                return idx;
            };
            SpriteSet.prototype.index_of_obj = function (sprite) {
                return this.index_of(sprite);
            };
            SpriteSet.prototype.at = function (index) {
                var elmt = this._elements[index];
                return elmt;
            };
            SpriteSet.prototype.get_enumerator = function () {
                return this._elements.slice(0);
            };
            SpriteSet.prototype.debuggerChildren = function () {
                return this._elements;
            };
            return SpriteSet;
        })(RT.RTValue);
        RT.SpriteSet = SpriteSet;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var String_;
        (function (String_) {
            function split(self, separator) {
                return RT.Collection.mkStrings(self.split(separator));
            }
            String_.split = split;
            function valueFromKeyUrl(url) {
                if (/^apikey:/i.test(url))
                    return RT.Web.url_decode(url.substring("apikey:".length));
                return null;
            }
            String_.valueFromKeyUrl = valueFromKeyUrl;
            function valueToKeyUrl(value) {
                return "apikey:" + RT.Web.url_encode(value);
            }
            String_.valueToKeyUrl = valueToKeyUrl;
            function valueFromArtUrl(url) {
                var m = /^data:[^,]*base64,/i.exec(url);
                if (m)
                    return RT.Web.base64_decode(url.substring(m[0].length));
                return null;
            }
            String_.valueFromArtUrl = valueFromArtUrl;
            function valueToArtUrl(value) {
                return "data:text/plain;base64," + RT.Web.base64_encode(value);
            }
            String_.valueToArtUrl = valueToArtUrl;
            function fromArtUrl(url) {
                var value = valueFromArtUrl(url);
                if (value)
                    return TDev.Promise.wrap(value);
                var key = valueFromKeyUrl(url);
                if (key)
                    return RT.ApiManager.getKeyAsync(key);
                return RT.ArtCache.getArtAsync(url).then(function (dataUrl) {
                    if (dataUrl)
                        return TDev.Promise.as(valueFromArtUrl(dataUrl));
                    else
                        TDev.Util.httpGetTextAsync(url);
                }).then(function (txt) { return txt; }, function (e) {
                    RT.App.logEvent(RT.App.ERROR, "art", TDev.lf("failed to load url {0}", url), undefined);
                    return "";
                });
            }
            String_.fromArtUrl = fromArtUrl;
            function trim_overflow(self, lim) {
                var v = self;
                if (v && v.length > lim)
                    v = v.slice(0, lim) + "...";
                return v;
            }
            String_.trim_overflow = trim_overflow;
            function post_to_wall(self, s) {
                if (TDev.dbg && self != null && self.indexOf("magic trap ") == 0) {
                    var tests = new TDev.Revisions.SessionTests(s.rt);
                    tests.runtest(self.substr(11));
                    return;
                }
                if (self != null) {
                    if (s.rt.onCssPage())
                        s.rt.postUnboxedText(self, s.pc);
                    else
                        s.rt.postBoxedTextWithTap(self, self, s.pc);
                }
            }
            String_.post_to_wall = post_to_wall;
            function count(self) {
                return self.length;
            }
            String_.count = count;
            function code_at(self, index) {
                return self.charCodeAt(index);
            }
            String_.code_at = code_at;
            function at(self, index) {
                return index < 0 || index >= self.length ? undefined : self.charAt(index);
            }
            String_.at = at;
            function to_lower_case(self) {
                return self.toLocaleLowerCase();
            }
            String_.to_lower_case = to_lower_case;
            function to_upper_case(self) {
                return self.toLocaleUpperCase();
            }
            String_.to_upper_case = to_upper_case;
            function to_unicode(self) {
                return self.length == 1 ? self.charCodeAt(0) : undefined;
            }
            String_.to_unicode = to_unicode;
            function compare(self, other) {
                var r = self.localeCompare(other);
                if (r < 0)
                    return -1;
                if (r > 0)
                    return 1;
                return 0;
            }
            String_.compare = compare;
            function concat(self, other) {
                return self + other;
            }
            String_.concat = concat;
            function concat_op(self, other) {
                return self + other;
            }
            String_.concat_op = concat_op;
            function concatAny(a, b) {
                function toStr(v) {
                    if (v === undefined || v === null)
                        return "(invalid)";
                    if (typeof v == "string")
                        return v;
                    if (typeof v == "JsonObject")
                        return v.toString();
                    if (v.to_string)
                        return v.to_string();
                    return v + "";
                }
                return toStr(a) + toStr(b);
            }
            String_.concatAny = concatAny;
            function contains(self, value) {
                return self.indexOf(value) > -1;
            }
            String_.contains = contains;
            function equals(self, other) {
                return self == other;
            }
            String_.equals = equals;
            function ends_with(self, value) {
                var i = self.lastIndexOf(value);
                return i > -1 && i == (self.length - value.length);
            }
            String_.ends_with = ends_with;
            function index_of(self, value, start) {
                return self.indexOf(value, start);
            }
            String_.index_of = index_of;
            function insert(self, start, value) {
                if (!value)
                    return self;
                if (start < 0 || start > self.length)
                    return undefined;
                return self.slice(0, start) + value + self.slice(start);
            }
            String_.insert = insert;
            function is_empty(self) {
                return self.length == 0;
            }
            String_.is_empty = is_empty;
            function is_match_regex(self, pattern) {
                var rx = new RegExp(pattern, "gm");
                return rx.test(self);
            }
            String_.is_match_regex = is_match_regex;
            function last_index_of(self, value, start) {
                return self.lastIndexOf(value, start);
            }
            String_.last_index_of = last_index_of;
            function match(self, pattern) {
                try {
                    var rx = new RegExp(pattern, "m");
                    var r = rx.exec(self);
                    if (!r)
                        return RT.Collections.create_string_collection();
                    return RT.Collection.mkStrings(TDev.Util.toArray(r));
                }
                catch (e) {
                    RT.Time.log('invalid regex pattern: ' + pattern);
                    return RT.Collections.create_string_collection();
                }
            }
            String_.match = match;
            function matches(self, pattern) {
                try {
                    var rx = new RegExp(pattern, "gm");
                    var r = self.match(rx);
                    return RT.Collection.mkStrings(r || []);
                }
                catch (e) {
                    RT.Time.log('invalid regex pattern: ' + pattern);
                    return RT.Collections.create_string_collection();
                }
            }
            String_.matches = matches;
            function remove(self, start) {
                return self.slice(0, start);
            }
            String_.remove = remove;
            function replace(self, old, new_) {
                if (!old)
                    return self;
                return self.split(old).join(new_);
            }
            String_.replace = replace;
            function replace_regex(self, pattern, replace) {
                try {
                    var rx = new RegExp(pattern, "gm");
                    return self.replace(rx, replace);
                }
                catch (e) {
                    RT.Time.log('invalid regex pattern: ' + pattern);
                    return undefined;
                }
            }
            String_.replace_regex = replace_regex;
            function replace_regex_with_converter(self, pattern, replace, s) {
                try {
                    var rx = new RegExp(pattern, "gm");
                }
                catch (e) {
                    RT.Time.log('invalid regex pattern: ' + pattern);
                    return undefined;
                }
                return self.replace(rx, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    return s.rt.runUserAction(replace, [RT.Collection.fromArray(args, "string")]);
                });
            }
            String_.replace_regex_with_converter = replace_regex_with_converter;
            function starts_with(self, value) {
                return self.indexOf(value) == 0;
            }
            String_.starts_with = starts_with;
            function substring(self, start, length) {
                return self.substr(start, length);
            }
            String_.substring = substring;
            function trim(self, chars) {
                if (!self || !chars)
                    return self;
                return trim_start(trim_end(self, chars), chars);
            }
            String_.trim = trim;
            function trim_start(self, chars) {
                if (!self || !chars)
                    return self;
                var i = 0;
                for (; i < self.length && chars.indexOf(self[i]) > -1; i++) {
                }
                return self.substr(i);
            }
            String_.trim_start = trim_start;
            function trim_end(self, chars) {
                if (!self || !chars)
                    return self;
                var i = self.length;
                for (; i > 0 && chars.indexOf(self[i - 1]) > -1; i--) {
                }
                return self.substring(0, i);
            }
            String_.trim_end = trim_end;
            function to_time(self) {
                if (self != null) {
                    var s = trim(self, ' \t\n\r');
                    var m = s.match(/(\d{1,2})\s*:\s*(\d{1,2})\s*(:\s*(\d{1,2}))?\s*(pm|am)?/i);
                    if (m) {
                        var hours = parseFloat(m[1]);
                        if (m[5] && /pm/i.test(m[5]))
                            hours += 12;
                        var minutes = parseFloat(m[2]);
                        var seconds = m[4] ? parseFloat(m[4]) : 0;
                        return RT.Math_.clamp(0, 23, hours) * 3600 + RT.Math_.clamp(0, 59, minutes) * 60 + seconds;
                    }
                }
                return undefined;
            }
            String_.to_time = to_time;
            function to_number(self) {
                if (/^\s*[-+]?\d*\.?(\d+([eE][-+]?\d+)?)?\s*$/.test(self)) {
                    var r = parseFloat(self);
                    if (isNaN(r))
                        return undefined;
                    return r;
                }
                else {
                    return undefined;
                }
            }
            String_.to_number = to_number;
            function to_boolean(self) {
                return self.trim().toLocaleLowerCase() == "true";
            }
            String_.to_boolean = to_boolean;
            function to_location(self) {
                var s = trim_start(trim_end(self, ")}] "), "([{ ");
                var seps = ',;:';
                for (var i = 0; i < seps.length; ++i) {
                    var index = s.indexOf(seps[i]);
                    if (index > -1) {
                        var lat = to_number(s.substring(0, index));
                        var long = to_number(s.substring(index + 1));
                        if (lat && long && !isNaN(lat) && !isNaN(long)) {
                            return RT.Location_.mkShort(lat, long);
                        }
                    }
                }
                return undefined;
            }
            String_.to_location = to_location;
            function share(self, network, r) {
                TDev.HTML.showProgressNotification(TDev.lf("sharing text..."));
                RT.ShareManager.shareTextAsync(self, network).done(function () { return r.resume(); });
            }
            String_.share = share;
            function copy_to_clipboard(self, r) {
                RT.ShareManager.copyToClipboardAsync(self).done(function () { return r.resume(); });
            }
            String_.copy_to_clipboard = copy_to_clipboard;
            function to_datetime(self) {
                return RT.DateTime.parse(self);
            }
            String_.to_datetime = to_datetime;
            function to_color(self) {
                return RT.Color.fromHtml(self);
            }
            String_.to_color = to_color;
            function picker() {
                var inp = TDev.HTML.mkTextInput("text", TDev.lf("color"));
                return {
                    html: inp,
                    validate: function () { return true; },
                    get: function () { return inp.value; },
                    set: function (v) {
                        inp.value = v + "";
                    }
                };
            }
            String_.picker = picker;
            function to_json(self) {
                return RT.JsonObject.wrap(self);
            }
            String_.to_json = to_json;
        })(String_ = RT.String_ || (RT.String_ = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var StringMap = (function (_super) {
            __extends(StringMap, _super);
            function StringMap() {
                _super.call(this);
                this.items = new Object();
                this.length = 0;
            }
            StringMap.mk = function (items) {
                var r = new StringMap();
                r.items = TDev.Util.clone(items);
                r.length = Object.keys(r.items).length;
                return r;
            };
            StringMap.prototype.count = function () {
                return this.length;
            };
            StringMap.prototype.keys = function () {
                var keys = Object.keys(this.items);
                return RT.Collection.mkStrings(keys);
            };
            StringMap.prototype.at = function (key) {
                var result = (this.items)[key];
                return (result);
            };
            StringMap.prototype.set_at = function (key, value) {
                var val = this.items[key];
                if (val != value) {
                    if (val != null) {
                        this.length--;
                        delete this.items[key];
                    }
                    if (value != null) {
                        this.items[key] = value;
                        this.length++;
                    }
                }
            };
            StringMap.prototype.to_json = function () {
                return RT.JsonObject.wrap(this.exportJson(null));
            };
            StringMap.prototype.from_json = function (jobj) {
                this.importJson(null, jobj.value());
            };
            StringMap.prototype.exportJson = function (ctx) {
                var _this = this;
                var obj = {};
                Object.keys(this.items).forEach(function (k) {
                    obj[k] = _this.items[k];
                });
                return obj;
            };
            StringMap.prototype.importJson = function (ctx, json) {
                var _this = this;
                if ((typeof (json) !== "object") || Array.isArray(json)) {
                    this.clear();
                    return this;
                }
                else {
                    this.items = {};
                    this.length = 0;
                    Object.keys(json).forEach(function (k) {
                        var v = json[k];
                        if (typeof v == "string") {
                            _this.items[k] = v;
                            _this.length++;
                        }
                    });
                }
            };
            StringMap.prototype.clear = function () {
                this.items = new Object();
                this.length = 0;
            };
            StringMap.prototype.set_many = function (strings) {
                var _this = this;
                Object.keys(strings.items).forEach(function (key) {
                    var value = strings.at(key);
                    _this.set_at(key, value);
                });
            };
            StringMap.prototype.remove = function (key) {
                var val = this.items[key];
                if (val != null) {
                    this.length--;
                    delete this.items[key];
                }
            };
            StringMap.prototype.toString = function () {
                var _this = this;
                var s = "{" + Object.keys(this.items).map(function (key) { return key + "->" + _this.at(key); }).join(",") + "}";
                return s;
            };
            StringMap.prototype.get_enumerator = function () {
                return Object.keys(this.items);
            };
            StringMap.prototype.post_to_wall = function (s) {
                s.rt.postBoxedText(this.toString(), s.pc);
            };
            StringMap.prototype.debuggerDisplay = function (clickHandler) {
                return TDev.span(null, "String Map[" + this.length + "]").withClick(clickHandler);
            };
            StringMap.prototype.debuggerChildren = function () {
                var ret = {};
                var items = this.items;
                Object.keys(items).forEach(function (k) { return ret['"' + k + '"'] = items[k]; });
                return ret;
            };
            return StringMap;
        })(RT.RTValue);
        RT.StringMap = StringMap;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Tags;
        (function (Tags) {
            Tags.sendNFC = function (writeTag, type, value, sent, transferred) {
                transferred();
            };
            Tags.stopSendNFCAsync = function (id) {
                return TDev.Promise.as();
            };
            Tags.receiveNFC = function (type, sent, received) {
                received('');
            };
            Tags.stopReceiveNFCAsync = function (id) {
                return TDev.Promise.as();
            };
            function askProximityAccessAsync(r) {
                return r.host.askSourceAccessAsync("proximity", "send and receive data using NFC.", false);
            }
            function sendNFCDialogAsync(writeTag, type, value) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var mid = 0;
                    var m = new TDev.ModalDialog();
                    m.onDismiss = function () {
                        Tags.stopSendNFCAsync(mid).done();
                        onSuccess(undefined);
                    };
                    if (writeTag) {
                        m.add(TDev.div('wall-dialog-header', 'write tag'));
                        m.add(TDev.div('wall-dialog-body', 'Place your device near your tag to write it.'));
                    }
                    else {
                        m.add(TDev.div('wall-dialog-header', 'tap+send'));
                        m.add(TDev.div('wall-dialog-body', 'Go ahead and tap your device to another device that supports NFC.'));
                    }
                    m.add(TDev.div('wall-dialog-buttons', TDev.HTML.mkButton('cancel', function () {
                        TDev.Util.log('nfc: user cancel');
                        m.dismiss();
                    })));
                    m.show();
                    Tags.sendNFC(writeTag, type, value, function (publishId) {
                        mid = publishId;
                        TDev.Util.log('nfc: message id: ' + mid);
                    }, function () {
                        mid = 0;
                        m.dismiss();
                        TDev.Util.log('nfc: transferred id: ' + mid);
                    });
                });
            }
            function receiveNFCDialogAsync(type) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var mid = 0;
                    var m = new TDev.ModalDialog();
                    var value = undefined;
                    m.onDismiss = function () {
                        Tags.stopReceiveNFCAsync(mid).done();
                        onSuccess(value);
                    };
                    m.add(TDev.div('wall-dialog-header', 'tap+receive'));
                    m.add(TDev.div('wall-dialog-body', 'Go ahead and tap your device to another device that supports NFC.'));
                    m.add(TDev.div('wall-dialog-buttons', TDev.HTML.mkButton('cancel', function () {
                        TDev.Util.log('nfc: user cancel');
                        m.dismiss();
                    })));
                    m.show();
                    Tags.receiveNFC(type, function (publishId) {
                        mid = publishId;
                        TDev.Util.log('nfc: message id: ' + mid);
                    }, function (v) {
                        value = v;
                        mid = 0;
                        m.dismiss();
                        TDev.Util.log('nfc: transferred id: ' + mid);
                    });
                });
            }
            function nfc_receive(type, r) {
                receiveNFCDialogAsync(type).done(function (v) { return r.resumeVal(v || ''); });
            }
            Tags.nfc_receive = nfc_receive;
            function nfc_receive_picture(r) {
                receiveNFCDialogAsync('image/jpeg').then(function (v) { return RT.Picture.fromUrl(v); }).done(function (p) { return r.resumeVal(p); });
            }
            Tags.nfc_receive_picture = nfc_receive_picture;
            function nfc_send(type, value, r) {
                if (!value) {
                    r.resume();
                    return;
                }
                askProximityAccessAsync(r.rt).then(function (allow) {
                    if (allow)
                        return sendNFCDialogAsync(false, type, value);
                    else
                        return TDev.Promise.as();
                }).done(function () { return r.resume(); });
            }
            Tags.nfc_send = nfc_send;
            function nfc_send_picture(pic, r) {
                askProximityAccessAsync(r.rt).then(function (allow) {
                    if (allow)
                        return pic.initAsync().then(function () { return sendNFCDialogAsync(false, 'picture', pic.getDataUri()); });
                    else
                        return TDev.Promise.as();
                }).done(function () { return r.resume(); });
            }
            Tags.nfc_send_picture = nfc_send_picture;
            function nfc_write_tag(type, value, r) {
                askProximityAccessAsync(r.rt).then(function (allow) {
                    if (allow) {
                        if (type == "app")
                            value = "scriptid=" + r.rt.currentScriptId + "&" + value;
                        return sendNFCDialogAsync(true, type, value);
                    }
                    else
                        return TDev.Promise.as();
                }).done(function () { return r.resume(); });
            }
            Tags.nfc_write_tag = nfc_write_tag;
            function tag(text, size, bw, kind, r) {
                if (size < 0.75)
                    size = 0.75;
                else if (size > 3)
                    size = 3;
                if (text.length > 1000)
                    text = text.substr(0, 1000);
                var url = 'runtime/tags/tag?kind=' + encodeURIComponent(kind) + '&size=' + encodeURIComponent(size.toString()) + '&bw=' + (bw ? 'true' : 'false') + '&text=' + text;
                var purl = TDev.Cloud.getPrivateApiUrl(url);
                RT.Picture.fromUrl(purl).then(function (p) { return r.resumeVal(p); });
            }
            function tag_url(url, size, bw, r) {
                tag(url, size, bw, 'url', r);
            }
            Tags.tag_url = tag_url;
            function tag_text(text, size, bw, r) {
                tag(text, size, bw, 'text', r);
            }
            Tags.tag_text = tag_text;
            function scan() {
                return '';
            }
            Tags.scan = scan;
        })(Tags = RT.Tags || (RT.Tags = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var TextBox = (function (_super) {
            __extends(TextBox, _super);
            function TextBox() {
                _super.apply(this, arguments);
                this._text = undefined;
                this._icon = undefined;
                this._font_size = undefined;
                this._background = undefined;
                this._foreground = undefined;
                this._border = undefined;
            }
            TextBox.mk = function (text, font_size) {
                var tb = new TextBox();
                tb._text = text;
                tb._font_size = font_size;
                return tb;
            };
            TextBox.prototype.text = function () {
                return this._text;
            };
            TextBox.prototype.set_text = function (text, s) {
                this._text = text;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.icon = function () {
                return this._icon;
            };
            TextBox.prototype.set_icon = function (pic, s) {
                this._icon = pic;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.font_size = function () {
                return this._font_size;
            };
            TextBox.prototype.set_font_size = function (size, s) {
                this._font_size = size;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.background = function () {
                return this._background;
            };
            TextBox.prototype.set_background = function (color, s) {
                this._background = color;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.foreground = function () {
                return this._foreground;
            };
            TextBox.prototype.set_foreground = function (color, s) {
                this._foreground = color;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.border = function () {
                return this._border;
            };
            TextBox.prototype.set_border = function (color, s) {
                this._border = color;
                this.updateOnWall(s, this.box);
            };
            TextBox.prototype.getViewCore = function (s, b) {
                this._el = TDev.div('wall-text');
                this.box = b;
                this.updateOnWall(s, b);
                return this._el;
            };
            TextBox.prototype.updateOnWall = function (s, b) {
                var el = this._el;
                if (!el)
                    return;
                el.setChildren([]);
                var style = el.style;
                style.margin = '0.5em';
                if (this._background) {
                    style.backgroundColor = this._background.toHtml();
                }
                else {
                    style.backgroundColor = '#F0F0F0';
                }
                if (this._foreground) {
                    style.color = this._foreground.toHtml();
                }
                else {
                    style.color = null;
                }
                if (this._border) {
                    style.border = "3px solid " + this._border.toHtml();
                }
                else {
                    style.border = null;
                }
                if (this._icon) {
                    var pel = TDev.div('', this._icon.getViewCore(s, b));
                    pel.style.display = 'inline';
                    pel.style.margin = '8px 8px 8px 8px';
                    el.appendChild(pel);
                }
                var txt = TDev.div('', this._text);
                txt.style.display = 'inline';
                txt.style.margin = '8px 8px 8px 8px';
                txt.style.verticalAlign = 'top';
                if (this._font_size) {
                    txt.style.fontSize = (this._font_size / 20.0 * 0.8).toFixed(1) + "em";
                }
                el.appendChild(txt);
                b.RefreshOnScreen();
            };
            TextBox.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return TextBox;
        })(RT.RTValue);
        RT.TextBox = TextBox;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Tile = (function (_super) {
            __extends(Tile, _super);
            function Tile() {
                _super.call(this);
            }
            Tile.prototype.title = function () {
                return '';
            };
            Tile.prototype.set_title = function (title) {
            };
            Tile.prototype.back_title = function () {
                return '';
            };
            Tile.prototype.set_back_title = function (title) {
            };
            Tile.prototype.background = function () {
                return RT.Colors.transparent();
            };
            Tile.prototype.set_background = function (color) {
            };
            Tile.prototype.back_icon = function () {
                return undefined;
            };
            Tile.prototype.set_back_icon = function (pic) {
            };
            Tile.prototype.content = function () {
                return '';
            };
            Tile.prototype.set_content = function (content) {
            };
            Tile.prototype.counter = function () {
                return 0;
            };
            Tile.prototype.set_counter = function (counter) {
            };
            Tile.prototype.icon = function () {
                return undefined;
            };
            Tile.prototype.set_icon = function (pic) {
            };
            Tile.prototype.panorama = function () {
                return false;
            };
            Tile.prototype.set_panorama = function (panorama) {
            };
            Tile.prototype.height = function () {
                return 0;
            };
            Tile.prototype.width = function () {
                return 0;
            };
            Tile.prototype.clear_back_icon = function () {
            };
            Tile.prototype.clear_icon = function () {
            };
            Tile.prototype.pin_to_start = function () {
            };
            Tile.mkDefaultValue = function () {
                var t = new Tile();
                return t;
            };
            Tile.prototype.post_to_wall = function (s) {
            };
            return Tile;
        })(RT.RTValue);
        RT.Tile = Tile;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Time;
        (function (Time) {
            var _rt;
            var everyFrameTimer;
            function rt_start(rt) {
                _rt = rt;
                everyFrameTimer = undefined;
            }
            Time.rt_start = rt_start;
            function rt_stop(rt) {
                _rt = undefined;
                if (everyFrameTimer)
                    everyFrameTimer.pause();
                everyFrameTimer = undefined;
            }
            Time.rt_stop = rt_stop;
            function on_every_frame(perform, s) {
                if (!everyFrameTimer)
                    everyFrameTimer = new RT.Timer(s.rt, 0.02, false);
                return everyFrameTimer.on_trigger(perform);
            }
            Time.on_every_frame = on_every_frame;
            function run_after(seconds, perform, s) {
                seconds = Math.max(0.02, seconds);
                var timer = new RT.Timer(s.rt, seconds, true);
                timer.on_trigger(perform);
                return timer;
            }
            Time.run_after = run_after;
            function run_every(seconds, perform, s) {
                seconds = Math.max(0.02, seconds);
                var timer = new RT.Timer(s.rt, seconds, false);
                timer.on_trigger(perform);
                return timer;
            }
            Time.run_every = run_every;
            function sleep(seconds, s) {
                s.rt.yield_now();
                TDev.Util.setTimeout(seconds * 1000, function () {
                    s.rt.yield_now();
                    s.resume();
                });
            }
            Time.sleep = sleep;
            function now(s) {
                if (s)
                    s.rt.registerTimeDependency();
                return RT.DateTime.mk(new Date());
            }
            Time.now = now;
            function today() {
                return now().date();
            }
            Time.today = today;
            function tomorrow() {
                return today().add_days(1);
            }
            Time.tomorrow = tomorrow;
            function fail_if_not(condition) {
                RT.App.fail_if_not(condition);
            }
            Time.fail_if_not = fail_if_not;
            function stop(r) {
                RT.App.stop(r);
            }
            Time.stop = stop;
            function log(message) {
                RT.App.log(message);
            }
            Time.log = log;
            function stop_and_close(r) {
                RT.App.stop(r);
            }
            Time.stop_and_close = stop_and_close;
            function create(year, month, day, hour, minute, second) {
                return RT.DateTime.mkFull(year, month, day, hour, minute, second);
            }
            Time.create = create;
        })(Time = RT.Time || (RT.Time = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Timer = (function (_super) {
            __extends(Timer, _super);
            function Timer(rt, interval, oneTime) {
                if (oneTime === void 0) { oneTime = true; }
                _super.call(this);
                this.rt = rt;
                this.interval = interval;
                this.oneTime = oneTime;
                this.armed = false;
                this.active = true;
                this.version = rt.versionNumber;
                this.handlerEvent = new RT.Event_();
            }
            Timer.prototype.clear = function () {
                this.handlerEvent.clearHandlers();
                this.pause();
            };
            Timer.prototype.on_trigger = function (perform) {
                var b = this.handlerEvent.addHandler(perform);
                this.arm();
                return b;
            };
            Timer.prototype.is_active = function () {
                return this.active;
            };
            Timer.prototype.is_interval = function () {
                return !this.oneTime;
            };
            Timer.prototype.set_interval = function (seconds) {
                this.interval = seconds;
                this.oneTime = false;
            };
            Timer.prototype.set_timeout = function (seconds) {
                this.interval = seconds;
                this.oneTime = true;
            };
            Timer.prototype.pause = function () {
                this.active = false;
            };
            Timer.prototype.resume = function () {
                this.active = true;
                this.arm();
            };
            Timer.prototype.arm = function () {
                var _this = this;
                if (this.armed || this.rt.isStopped() || this.version != this.rt.versionNumber) {
                    return;
                }
                var milli = this.interval * 1000;
                var eventHandler = function () {
                    _this.armed = false;
                    if (_this.version != _this.rt.versionNumber)
                        return;
                    if (_this.oneTime) {
                        _this.active = false;
                    }
                    else {
                        if (_this.rt && _this.handlerEvent.handlers && _this.active && !_this.armed) {
                            _this.armed = true;
                            TDev.Util.setTimeout(milli, eventHandler);
                        }
                    }
                    if (_this.handlerEvent.pendinghandlers == 0)
                        _this.rt.queueLocalEvent(_this.handlerEvent);
                };
                if (this.rt && this.handlerEvent.handlers && this.active && !this.armed) {
                    this.armed = true;
                    TDev.Util.setTimeout(milli, eventHandler);
                }
            };
            return Timer;
        })(RT.RTValue);
        RT.Timer = Timer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Vector2 = (function (_super) {
            __extends(Vector2, _super);
            function Vector2(_x, _y) {
                _super.call(this);
                this._x = _x;
                this._y = _y;
            }
            Vector2.mk = function (x, y) {
                return new Vector2(x, y);
            };
            Vector2.prototype.x = function () {
                return this._x;
            };
            Vector2.prototype.y = function () {
                return this._y;
            };
            Vector2.prototype.length = function () {
                return Math.sqrt(this._x * this._x + this._y * this._y);
            };
            Vector2.prototype.distance = function (other) {
                return this.subtract(other).length();
            };
            Vector2.prototype.negate = function () {
                return Vector2.mk(-this._x, -this._y);
            };
            Vector2.prototype.normalize = function () {
                return this.scale(1 / this.length());
            };
            Vector2.prototype.add = function (other) {
                return Vector2.mk(this._x + other._x, this._y + other._y);
            };
            Vector2.prototype.subtract = function (other) {
                return Vector2.mk(this._x - other._x, this._y - other._y);
            };
            Vector2.prototype.multiply = function (other) {
                return Vector2.mk(this._x * other._x, this._y * other._y);
            };
            Vector2.prototype.scale = function (scalar) {
                return Vector2.mk(this._x * scalar, this._y * scalar);
            };
            Vector2.dot = function (v1, other) {
                return v1._x * other._x + v1._y * other._y;
            };
            Vector2.prototype.clamp = function (min, max) {
                return Vector2.mk(RT.Math_.clamp(min._x, max._x, this._x), RT.Math_.clamp(min._y, max._y, this._y));
            };
            Vector2.prototype.linear_interpolation = function (other, amount) {
                var a = RT.Math_.normalize(amount);
                var a1 = 1.0 - a;
                return Vector2.mk(a * this._x + a1 * other._x, a * this._y + a1 * other._y);
            };
            Vector2.prototype.to_string = function () {
                return '(' + this._x + ',' + this._y + ')';
            };
            Vector2.prototype.rotate90Left = function () {
                return Vector2.mk(-this._y, this._x);
            };
            Vector2.prototype.equals = function (that) {
                return this._x == that._x && this._y == that._y;
            };
            return Vector2;
        })(RT.RTValue);
        RT.Vector2 = Vector2;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Vector3 = (function (_super) {
            __extends(Vector3, _super);
            function Vector3(_x, _y, _z) {
                _super.call(this);
                this._x = _x;
                this._y = _y;
                this._z = _z;
            }
            Vector3.mk = function (x, y, z) {
                var v = new Vector3(x, y, z);
                return v;
            };
            Vector3.prototype.toJsonKey = function () {
                return [this._x, this._y, this._z];
            };
            Vector3.prototype.keyCompareTo = function (o) {
                var other = o;
                var diff = this._x - other._x;
                if (diff)
                    return diff;
                diff = this._y - other._y;
                if (diff)
                    return diff;
                diff = this._z - other._z;
                return diff;
            };
            Vector3.prototype.exportJson = function (ctx) {
                return [this._x, this._y, this._z];
            };
            Vector3.prototype.importJson = function (ctx, json) {
                TDev.Util.oops("should not call immutable instance for importing");
                return undefined;
            };
            Vector3.mkFromJson = function (ctx, json) {
                if (!Array.isArray(json) || json.length !== 3)
                    return undefined;
                var ensurenr = function (x) { return (typeof x === "number" ? x : 0); };
                return new Vector3(ensurenr(json[0]), ensurenr(json[1]), ensurenr(json[2]));
            };
            Vector3.prototype.x = function () {
                return this._x;
            };
            Vector3.prototype.y = function () {
                return this._y;
            };
            Vector3.prototype.z = function () {
                return this._z;
            };
            Vector3.prototype.length = function () {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);
            };
            Vector3.prototype.distance = function (other) {
                return this.subtract(other).length();
            };
            Vector3.prototype.negate = function () {
                return Vector3.mk(-this._x, -this._y, -this._z);
            };
            Vector3.prototype.normalize = function () {
                return this.scale(1 / this.length());
            };
            Vector3.prototype.add = function (other) {
                return Vector3.mk(this._x + other._x, this._y + other._y, this._z + other._z);
            };
            Vector3.prototype.subtract = function (other) {
                return Vector3.mk(this._x - other._x, this._y - other._y, this._z - other._z);
            };
            Vector3.prototype.multiply = function (other) {
                return Vector3.mk(this._x * other._x, this._y * other._y, this._z * other._z);
            };
            Vector3.prototype.scale = function (scalar) {
                return Vector3.mk(this._x * scalar, this._y * scalar, this._z * scalar);
            };
            Vector3.prototype.clamp = function (min, max) {
                return Vector3.mk(RT.Math_.clamp(min._x, max._x, this._x), RT.Math_.clamp(min._y, max._y, this._y), RT.Math_.clamp(min._z, max._z, this._z));
            };
            Vector3.prototype.cross = function (other) {
                return Vector3.mk(this._y * other._z - this._z * other._y, this._z * other._x - this._x * other._z, this._x * other._y - this._y * other._x);
            };
            Vector3.prototype.linear_interpolation = function (other, amount) {
                var a = RT.Math_.normalize(amount);
                var a1 = 1.0 - a;
                return Vector3.mk(a * this._x + a1 * other._x, a * this._y + a1 * other._y, a * this._z + a1 * other._z);
            };
            Vector3.prototype.to_string = function () {
                return '(' + this._x.toPrecision(6) + ',' + this._y.toPrecision(6) + ',' + this._z.toPrecision(6) + ')';
            };
            Vector3.prototype.toString = function () {
                return this.to_string();
            };
            Vector3.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            Vector3.zero = Vector3.mk(0, 0, 0);
            return Vector3;
        })(RT.RTValue);
        RT.Vector3 = Vector3;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Vector4 = (function (_super) {
            __extends(Vector4, _super);
            function Vector4(_x, _y, _z, _w) {
                _super.call(this);
                this._x = _x;
                this._y = _y;
                this._z = _z;
                this._w = _w;
            }
            Vector4.mk = function (x, y, z, w) {
                return new Vector4(x, y, z, w);
            };
            Vector4.fromV3 = function (v, w) {
                return new Vector4(v.x(), v.y(), v.z(), w);
            };
            Vector4.fromV2 = function (v, z, w) {
                return new Vector4(v.x(), v.y(), z, w);
            };
            Vector4.fromV2V2 = function (v1, v2) {
                return new Vector4(v1.x(), v1.y(), v2.x(), v2.y());
            };
            Vector4.prototype.x = function () {
                return this._x;
            };
            Vector4.prototype.y = function () {
                return this._y;
            };
            Vector4.prototype.z = function () {
                return this._z;
            };
            Vector4.prototype.w = function () {
                return this._w;
            };
            Vector4.prototype.length = function () {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
            };
            Vector4.prototype.distance = function (other) {
                return this.subtract(other).length();
            };
            Vector4.prototype.negate = function () {
                return Vector4.mk(-this._x, -this._y, -this._z, -this._w);
            };
            Vector4.prototype.normalize = function () {
                return this.scale(1 / this.length());
            };
            Vector4.prototype.add = function (other) {
                return Vector4.mk(this._x + other._x, this._y + other._y, this._z + other._z, this._w + other._w);
            };
            Vector4.prototype.subtract = function (other) {
                return Vector4.mk(this._x - other._x, this._y - other._y, this._z - other._z, this._w - other._w);
            };
            Vector4.prototype.multiply = function (other) {
                return Vector4.mk(this._x * other._x, this._y * other._y, this._z * other._z, this._w * other._w);
            };
            Vector4.prototype.scale = function (scalar) {
                return Vector4.mk(this._x * scalar, this._y * scalar, this._z * scalar, this._w * scalar);
            };
            Vector4.prototype.clamp = function (min, max) {
                return Vector4.mk(RT.Math_.clamp(min._x, max._x, this._x), RT.Math_.clamp(min._y, max._y, this._y), RT.Math_.clamp(min._z, max._z, this._z), RT.Math_.clamp(min._w, max._w, this._w));
            };
            Vector4.prototype.linear_interpolation = function (other, amount) {
                var a = RT.Math_.normalize(amount);
                var a1 = 1.0 - a;
                return Vector4.mk(a * this._x + a1 * other._x, a * this._y + a1 * other._y, a * this._z + a1 * other._z, a * this._w + a1 * other._w);
            };
            Vector4.prototype.to_string = function () {
                return '(' + this._x + ',' + this._y + ',' + this._z + ',' + this._w + ')';
            };
            Vector4.prototype.withX = function (x) {
                return Vector4.mk(x, this._y, this._z, this._w);
            };
            Vector4.prototype.withY = function (y) {
                return Vector4.mk(this._x, y, this._z, this._w);
            };
            Vector4.prototype.withZ = function (z) {
                return Vector4.mk(this._x, this._y, z, this._w);
            };
            Vector4.prototype.withW = function (w) {
                return Vector4.mk(this._x, this._y, this._z, w);
            };
            return Vector4;
        })(RT.RTValue);
        RT.Vector4 = Vector4;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wall;
        (function (Wall) {
            var R = TDev.HTML;
            function clear(s) {
                s.rt.clearWall();
            }
            Wall.clear = clear;
            function display_search(on) {
            }
            Wall.display_search = display_search;
            function body(text) {
                var r = TDev.div("wall-dialog-body");
                TDev.Browser.setInnerHTML(r, TDev.Util.formatText(text));
                return r;
            }
            Wall.body = body;
            function prompt(text, r) {
                var rt = r.rt;
                var m = new TDev.ModalDialog();
                m.add([body(text), TDev.div("wall-dialog-buttons", [R.mkButtonOnce("ok", function () { return m.dismiss(); })])]);
                m.onDismiss = function () { return r.resume(); };
                m.show();
            }
            Wall.prompt = prompt;
            function ask_boolean(text, caption, r) {
                var rt = r.rt;
                var value = false;
                var m = new TDev.ModalDialog();
                m.add([TDev.div("wall-dialog-header", text), body(caption), TDev.div("wall-dialog-buttons", [R.mkButton(TDev.lf("no"), function () {
                    value = false;
                    m.dismiss();
                }), R.mkButton(TDev.lf("yes"), function () {
                    value = true;
                    m.dismiss();
                })])]);
                m.onDismiss = function () { return r.resumeVal(value); };
                m.show();
            }
            Wall.ask_boolean = ask_boolean;
            function ask_number(text, r) {
                var rt = r.rt;
                var t = R.mkTextInput("number", TDev.lf("enter a decimal number"));
                t.value = "";
                var value = 0;
                var m = new TDev.ModalDialog();
                m.add([
                    body(text),
                    TDev.div("wall-dialog-input", t),
                    TDev.div("wall-dialog-buttons", [R.mkButton(TDev.lf("ok"), function () {
                        value = t.valueAsNumber;
                        if (!isFinite(value))
                            value = parseFloat(t.value);
                        if (!isFinite(value))
                            value = undefined;
                        m.dismiss();
                    })])
                ]);
                m.onDismiss = function () { return r.resumeVal(value); };
                m.show();
                TDev.Util.setKeyboardFocus(t);
            }
            Wall.ask_number = ask_number;
            function ask_string(text, r) {
                var rt = r.rt;
                var t = R.mkTextArea("variableDesc");
                t.value = "";
                var value = "";
                var m = new TDev.ModalDialog();
                m.add([body(text), TDev.div("wall-dialog-input", t), TDev.div("wall-dialog-buttons", [R.mkButton(TDev.lf("ok"), function () {
                    value = t.value;
                    m.dismiss();
                })])]);
                m.onDismiss = function () { return r.resumeVal(value); };
                m.show();
                TDev.Util.setKeyboardFocusTextArea(t);
            }
            Wall.ask_string = ask_string;
            function screenshot(r) {
                ScreenshotManager.toScreenshotURLAsync(r.rt.host).then(function (data) {
                    if (data != null)
                        return RT.Picture.fromUrl(data);
                    else
                        return TDev.Promise.as(undefined);
                }).done(function (p) { return r.resumeVal(p); });
            }
            Wall.screenshot = screenshot;
            function create_text_box(text, font_size) {
                return RT.TextBox.mk(text, font_size);
            }
            Wall.create_text_box = create_text_box;
            function pick_string(text, caption, values, r) {
                var rt = r.rt;
                var m = new TDev.ModalDialog();
                var index = -1;
                var btns = values.a.map(function (st, i) { return TDev.div('modalDialogChooseItem', st).withClick(function () {
                    index = i;
                    m.dismiss();
                }); });
                m.add([TDev.div("wall-dialog-header", text), body(caption)]);
                m.onDismiss = function () { return r.resumeVal(index); };
                m.choose(btns);
            }
            Wall.pick_string = pick_string;
            function pick_time(text, caption, r) {
                var rt = r.rt;
                var t = R.mkTextInput("time", TDev.lf("enter a time"));
                t.style.borderStyle = 'hidden';
                t.style.borderColor = 'red';
                t.onkeyup = function (ev) {
                    t.style.borderStyle = RT.String_.to_time(t.value) != null ? 'hidden' : 'solid';
                };
                var value = undefined;
                var m = new TDev.ModalDialog();
                m.add([TDev.div("wall-dialog-header", text), body(caption), TDev.div("wall-dialog-input", t), body("Enter a time like 15:43 or 3:43pm or 15:43:20 or 3:43:20pm"), TDev.div("wall-dialog-buttons", [R.mkButton(TDev.lf("ok"), function () {
                    var tt = RT.String_.to_time(t.value);
                    if (tt != null)
                        value = RT.Time.today().add_seconds(tt);
                    m.dismiss();
                })])]);
                m.onDismiss = function () { return r.resumeVal(value); };
                m.show();
                TDev.Util.setKeyboardFocus(t);
            }
            Wall.pick_time = pick_time;
            function pick_date(text, caption, r) {
                var rt = r.rt;
                var t = R.mkTextInput("date", TDev.lf("enter a date"));
                t.style.borderStyle = 'hidden';
                t.style.borderColor = 'red';
                t.onkeyup = function (ev) {
                    t.style.borderStyle = RT.DateTime.parse(t.value) != null ? 'hidden' : 'solid';
                };
                var value = undefined;
                var m = new TDev.ModalDialog();
                m.add([TDev.div("wall-dialog-header", text), body(caption), TDev.div("wall-dialog-input", t), TDev.div("wall-dialog-buttons", [R.mkButton(TDev.lf("ok"), function () {
                    value = RT.DateTime.parse(t.value);
                    m.dismiss();
                })])]);
                m.onDismiss = function () { return r.resumeVal(value); };
                m.show();
                TDev.Util.setKeyboardFocus(t);
            }
            Wall.pick_date = pick_date;
            function set_foreground(color, s) {
                s.rt.getCurrentPage().fgColor = color.toHtml();
                s.rt.applyPageAttributes(true);
            }
            Wall.set_foreground = set_foreground;
            function clear_background(s) {
                var p = s.rt.getCurrentPage();
                p.bgColor = null;
                p.bgPicture = null;
                p.bgPictureUrl = null;
                p.bgVideo = null;
                s.rt.applyPageAttributes(true);
            }
            Wall.clear_background = clear_background;
            function set_background(color, s) {
                s.rt.getCurrentPage().bgColor = color.toHtml();
                s.rt.applyPageAttributes(true);
            }
            Wall.set_background = set_background;
            function set_page_transition_style(style, s) {
                s.rt.pageTransitionStyle = style;
            }
            Wall.set_page_transition_style = set_page_transition_style;
            function set_background_cloud_picture(picture, r) {
                picture.toPictureUrlAsync("screen").done(function (url) {
                    if (url) {
                        var wp = r.rt.getCurrentPage();
                        wp.bgPictureUrl = url;
                        wp.bgPicture = null;
                        r.rt.applyPageAttributes(true);
                    }
                    r.resume();
                });
            }
            Wall.set_background_cloud_picture = set_background_cloud_picture;
            function set_background_picture(picture, r) {
                var wp = r.rt.getCurrentPage();
                var url = picture.getReadonlyUrlSync();
                if (url) {
                    wp.bgPictureUrl = url;
                    wp.bgPicture = null;
                    r.rt.applyPageAttributes(true);
                    r.resume();
                }
                else {
                    picture.loadFirst(r, function () {
                        if (picture.widthSync() === 0 || picture.heightSync() === 0)
                            return;
                        wp.bgPictureWidth = picture.widthSync();
                        wp.bgPictureHeight = picture.heightSync();
                        wp.bgPicture = picture.getViewCanvas();
                        wp.bgPictureUrl = null;
                        r.rt.applyPageAttributes(true);
                    });
                }
            }
            Wall.set_background_picture = set_background_picture;
            function set_background_camera(camera, r) {
                camera.getVideoAsync(r.rt).then(function (v) {
                    if (v) {
                        r.rt.getCurrentPage().bgVideo = v;
                        r.rt.applyPageAttributes(true);
                    }
                    r.resume();
                }).done();
            }
            Wall.set_background_camera = set_background_camera;
            function set_transform_matrix(m11, m12, m21, m22, offsetx, offsety) {
            }
            Wall.set_transform_matrix = set_transform_matrix;
            function set_reversed(bottom, s) {
                s.rt.setWallDirection(bottom);
            }
            Wall.set_reversed = set_reversed;
            function show_title_bar(visible, s) {
                s.rt.getCurrentPage().chromeVisible = visible;
                s.rt.applyPageAttributes(true);
            }
            Wall.show_title_bar = show_title_bar;
            function show_back_button(visible, s) {
                s.rt.getCurrentPage().backButtonVisible = visible;
                s.rt.applyPageAttributes(true);
            }
            Wall.show_back_button = show_back_button;
            function set_title(text, s) {
                s.rt.getCurrentPage().title = text;
                s.rt.applyPageAttributes(true);
            }
            Wall.set_title = set_title;
            function set_subtitle(text, s) {
                s.rt.getCurrentPage().subtitle = text;
                s.rt.applyPageAttributes(true);
            }
            Wall.set_subtitle = set_subtitle;
            function icon_names() {
                return button_icon_names();
            }
            Wall.icon_names = icon_names;
            function clear_buttons(s) {
                s.rt.clearPageButtons();
            }
            Wall.clear_buttons = clear_buttons;
            function add_button(icon, text, s) {
                if (s.rt.getPageButtons().length < 4) {
                    if (text.length > 8)
                        text = text.substr(0, 8);
                    else if (text.length == 0)
                        text = "???";
                    var pageButton = RT.PageButton.mk(icon, text, s.rt.getCurrentPage().rtPage());
                    s.rt.addPageButton(pageButton);
                    s.rt.applyPageAttributes(true);
                    return pageButton;
                }
                return undefined;
            }
            Wall.add_button = add_button;
            function current_page(s) {
                return s.rt.getCurrentPage().rtPage();
            }
            Wall.current_page = current_page;
            function push_new_page(s) {
                s.rt.forceNonRender("You may not push a page here");
                return s.rt.pushPage().rtPage();
            }
            Wall.push_new_page = push_new_page;
            function pop_page(s) {
                s.rt.forceNonRender("You may not pop a page here");
                return s.rt.popPage();
            }
            Wall.pop_page = pop_page;
            function pop_page_with_transition(style, s) {
                s.rt.forceNonRender("You may not pop a page here");
                return s.rt.popPage(style);
            }
            Wall.pop_page_with_transition = pop_page_with_transition;
            function pages(s) {
                var c = s.rt.getPageCount();
                var arr = [];
                for (var i = 0; i < c; ++i)
                    arr.push(s.rt.getPageAt(i).rtPage());
                return RT.Collection.mkAny(RT.Page, arr);
            }
            Wall.pages = pages;
            function button_icon_names() {
                return RT.Collection.mkStrings([
                    "add",
                    "back",
                    "cancel",
                    "check",
                    "close",
                    "delete",
                    "download",
                    "edit",
                    "favs.addto",
                    "favs",
                    "feature.camera",
                    "feature.email",
                    "feature.search",
                    "feature.settings",
                    "feature.video",
                    "folder",
                    "minus",
                    "new",
                    "next",
                    "questionmark",
                    "refresh",
                    "save",
                    "share",
                    "stop",
                    "sync",
                    "transport.ff",
                    "transport.pause",
                    "transport.play",
                    "transport.rew",
                    "upload"
                ]);
            }
            Wall.button_icon_names = button_icon_names;
            function width(s) {
                return s.rt.host.fullWallWidth();
            }
            Wall.width = width;
            function height(s) {
                return s.rt.host.fullWallHeight();
            }
            Wall.height = height;
        })(Wall = RT.Wall || (RT.Wall = {}));
        var ScreenshotManager;
        (function (ScreenshotManager) {
            ScreenshotManager.toScreenshotURLAsync = function (rt) {
                var c = rt.toScreenshotCanvas();
                try {
                    var data = c ? c.toDataURL('image/png') : undefined;
                    return TDev.Promise.as(data);
                }
                catch (e) {
                    return TDev.Promise.as(undefined);
                }
            };
        })(ScreenshotManager = RT.ScreenshotManager || (RT.ScreenshotManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BingServices;
        (function (BingServices) {
            function readBingSearchResponse(response) {
                var links = [];
                try {
                    var json = response.content_as_json();
                    if (json) {
                        for (var i = 0; i < json.count(); ++i) {
                            var jlink = json.at(i);
                            var url = jlink.string('address');
                            var name = jlink.string('name');
                            var thumb = jlink.string('thumb');
                            var web = jlink.string('web');
                            if (url != null && url.length > 0)
                                links.push({ url: url, name: name, thumbUrl: thumb, web: web });
                        }
                    }
                    return links;
                }
                catch (ex) {
                }
                return links;
            }
            BingServices.searchAsync = function (kind, query, loc) {
                if (!query)
                    return TDev.Promise.as([]);
                var url = 'runtime/web/search?kind=' + encodeURIComponent(kind) + '&query=' + encodeURIComponent(query);
                if (loc) {
                    url += '&latitude=' + encodeURIComponent(loc.latitude().toString()) + '&longitude=' + encodeURIComponent(loc.longitude().toString());
                }
                var request = RT.WebRequest.mk(TDev.Cloud.getPrivateApiUrl(url), undefined);
                return request.sendAsync().then(function (response) { return readBingSearchResponse(response); });
            };
        })(BingServices = RT.BingServices || (RT.BingServices = {}));
        var WebEventSource = (function (_super) {
            __extends(WebEventSource, _super);
            function WebEventSource(rt, source) {
                _super.call(this, rt);
                this.source = source;
                this.onMessages = {};
            }
            WebEventSource.prototype.on_message = function (name, handler) {
                var _this = this;
                if (!name || /^close|error$/i.test(name))
                    TDev.Util.userError(TDev.lf("name cannot be 'close' or 'error'"));
                var onMessage = this.onMessages[name];
                if (!onMessage) {
                    onMessage = new RT.Event_();
                    if (this.source)
                        this.source.addEventListener(name, function (e) {
                            if (_this.source && onMessage.handlers) {
                                var d = e.data || "";
                                _this.rt.queueLocalEvent(onMessage, [d]);
                            }
                        }, false);
                }
                return onMessage.addHandler(handler);
            };
            WebEventSource.prototype.state = function () {
                if (!this.source)
                    return "closed";
                else
                    switch (this.source.readyState) {
                        case 0: return "connecting";
                        case 1: return "open";
                        case 2: return "closed";
                        default: return "unkown";
                    }
            };
            WebEventSource.prototype.on_open = function (opened) {
                var _this = this;
                if (!this.onOpen) {
                    this.onOpen = new RT.Event_();
                    if (this.source)
                        this.source.addEventListener('open', function (e) {
                            if (_this.source && _this.onOpen.handlers)
                                _this.rt.queueLocalEvent(_this.onOpen);
                        }, false);
                }
                return this.onOpen.addHandler(opened);
            };
            WebEventSource.prototype.on_error = function (handler) {
                var _this = this;
                if (!this.onError) {
                    this.onError = new RT.Event_();
                    if (this.source)
                        this.source.addEventListener('error', function (e) {
                            if (_this.source && _this.onError.handlers)
                                _this.rt.queueLocalEvent(_this.onError);
                        }, false);
                }
                return this.onError.addHandler(handler);
            };
            WebEventSource.prototype.close = function () {
                if (this.source) {
                    try {
                        this.source.close();
                    }
                    catch (e) {
                    }
                    this.source = undefined;
                }
            };
            WebEventSource.prototype.dispose = function () {
                this.close();
                _super.prototype.dispose.call(this);
            };
            return WebEventSource;
        })(RT.RTDisposableValue);
        RT.WebEventSource = WebEventSource;
        var Web;
        (function (Web) {
            function rt_start(rt) {
                clearReceivedMessageEvent(rt);
            }
            Web.rt_start = rt_start;
            function rt_stop(rt) {
                clearReceivedMessageEvent(rt);
            }
            Web.rt_stop = rt_stop;
            function toLink(jlink, kind) {
                var link = RT.Link.mk(jlink.url, kind);
                var idx = jlink.name.indexOf(' : ');
                if (idx > 0) {
                    link.set_title(jlink.name.slice(0, idx));
                    link.set_description(jlink.name.slice(idx + 3));
                }
                else {
                    link.set_name(jlink.name);
                }
                return link;
            }
            function bingSearch(kind, query, loc, linkKind, r) {
                BingServices.searchAsync(kind, query, loc).done(function (results) {
                    var links = RT.Collections.create_link_collection();
                    results.forEach(function (result) {
                        links.add(toLink(result, linkKind));
                    });
                    r.resumeVal(links);
                });
            }
            function search(query, r) {
                bingSearch("Web", query, undefined, 5 /* hyperlink */, r);
            }
            Web.search = search;
            function search_nearby(query, location, distance, r) {
                bingSearch("Web", query, location, 5 /* hyperlink */, r);
            }
            Web.search_nearby = search_nearby;
            function search_images(query, r) {
                bingSearch("Images", query, undefined, 2 /* image */, r);
            }
            Web.search_images = search_images;
            function search_images_nearby(query, location, distance, r) {
                bingSearch("Images", query, location, 2 /* image */, r);
            }
            Web.search_images_nearby = search_images_nearby;
            function search_phone_numbers(query) {
                return undefined;
            }
            Web.search_phone_numbers = search_phone_numbers;
            function search_phone_numbers_nearby(query, location, distance) {
                return undefined;
            }
            Web.search_phone_numbers_nearby = search_phone_numbers_nearby;
            function search_news(query, r) {
                bingSearch("News", query, undefined, 5 /* hyperlink */, r);
            }
            Web.search_news = search_news;
            function search_news_nearby(query, location, distance, r) {
                bingSearch("News", query, location, 5 /* hyperlink */, r);
            }
            Web.search_news_nearby = search_news_nearby;
            function is_connected() {
                return window.navigator.onLine;
            }
            Web.is_connected = is_connected;
            function connection_type(r) {
                var res = 'unknown';
                var connection = navigator.connection;
                if (connection) {
                    res = connection.type || 'unknown';
                }
                r.resumeVal(res);
            }
            Web.connection_type = connection_type;
            function connection_name(r) {
                r.resumeVal('');
            }
            Web.connection_name = connection_name;
            function open_connection_settings(page, r) {
                r.resume();
            }
            Web.open_connection_settings = open_connection_settings;
            function browse(url, r) {
                Web.browseAsync(url).done(function () { return r.resume(); });
            }
            Web.browse = browse;
            function redirect(url, r) {
                if (r.rt.devMode)
                    TDev.Util.userError(TDev.lf("web->redirect not available when running in the editor"));
                else {
                    TDev.Util.setTimeout(1500, function () { return TDev.Util.navigateInWindow(url); });
                }
            }
            Web.redirect = redirect;
            Web.browseAsync = function (url) {
                window.open(url, "_blank");
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var d = new TDev.ModalDialog();
                    d.onDismiss = function () { return onSuccess(undefined); };
                    d.add(TDev.div("wall-dialog-header", TDev.lf("web browsing...")));
                    d.add(TDev.div("wall-dialog-body", "We tried to open the following web page: " + url + "."));
                    d.add(TDev.div("wall-dialog-body", TDev.lf("If the page did not open, tap the 'open' button below, otherwise tap 'done'.")));
                    d.add(TDev.div("wall-dialog-buttons", TDev.HTML.mkA("button wall-button", url, "_blank", "open"), TDev.HTML.mkButton(TDev.lf("done"), function () {
                        d.dismiss();
                    })));
                    d.show();
                });
            };
            function play_media(url) {
                window.open(url);
            }
            Web.play_media = play_media;
            function link_media(url) {
                return RT.Link.mk(url, 1 /* media */);
            }
            Web.link_media = link_media;
            function link_image(url) {
                return RT.Link.mk(url, 2 /* image */);
            }
            Web.link_image = link_image;
            function link_url(name, url) {
                var l = RT.Link.mk(url, 5 /* hyperlink */);
                l.set_name(name);
                return l;
            }
            Web.link_url = link_url;
            function link_deep_zoom(url) {
                return undefined;
            }
            Web.link_deep_zoom = link_deep_zoom;
            function proxy(url) {
                if (!url || /^http:\/\/localhost(:[0-9]+)?\//i.test(url))
                    return url;
                var m = url.match(/^http:\/\/([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)(:[0-9]+)?\//i);
                if (m) {
                    var a = parseInt(m[1]);
                    if (a == 10)
                        return url;
                    var b = parseInt(m[2]);
                    if (a == 172 && b >= 16 && b <= 31)
                        return url;
                    if (a == 192 && b == 168)
                        return url;
                }
                return TDev.Cloud.getPrivateApiUrl("runtime/web/proxy?url=" + encodeURIComponent(url));
            }
            Web.proxy = proxy;
            function download(url, r) {
                r.progress('Downloading...');
                var request = create_request(url);
                request.sendAsync().done(function (response) { return r.resumeVal(response.content()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.download = download;
            function download_json(url, r) {
                r.progress('Downloading...');
                var request = create_request(url);
                request.set_accept('application/json');
                request.sendAsync().done(function (response) { return r.resumeVal(response.content_as_json()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.download_json = download_json;
            function download_xml(url, r) {
                var request = create_request(url);
                r.progress('Downloading...');
                request.set_accept('text/xml');
                request.sendAsync().done(function (response) { return r.resumeVal(response.content_as_xml()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.download_xml = download_xml;
            function download_sound(url, r) {
                r.progress("Downloading...");
                RT.Sound.fromUrl(url).done(function (snd) { return r.resumeVal(snd); });
            }
            Web.download_sound = download_sound;
            function download_song(url, name) {
                return RT.Song.mk(url, undefined, name);
            }
            Web.download_song = download_song;
            function upload(url, body, r) {
                var request = create_request(url);
                r.progress('Uploading...');
                request.set_method('post');
                request.set_content(body);
                request.sendAsync().done(function (response) { return r.resumeVal(response.content()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.upload = upload;
            function upload_sound(url, snd, r) {
                var request = create_request(url);
                r.progress('Uploading...');
                request.set_method('post');
                request.setContentAsSoundInternal(snd);
                request.sendAsync().done(function (response) { return r.resumeVal(response.content()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.upload_sound = upload_sound;
            function upload_picture(url, pic, r) {
                var request = create_request(url);
                r.progress('Uploading...');
                request.set_method('post');
                pic.initAsync().then(function () {
                    request.setContentAsPictureInternal(pic, 0.85);
                    return request.sendAsync();
                }).done(function (response) { return r.resumeVal(response.content()); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.upload_picture = upload_picture;
            function download_picture(url, r) {
                r.progress('Downloading...');
                var pic = undefined;
                RT.Picture.fromUrl(url).then(function (p) {
                    pic = p;
                    return p.initAsync();
                }).done(function () { return r.resumeVal(pic); }, function (e) { return r.resumeVal(undefined); });
            }
            Web.download_picture = download_picture;
            function html_decode(html) {
                return TDev.Util.htmlUnescape(html);
            }
            Web.html_decode = html_decode;
            function html_encode(text) {
                return TDev.Util.htmlEscape(text);
            }
            Web.html_encode = html_encode;
            function decode_uri(url) {
                return decodeURI(url);
            }
            Web.decode_uri = decode_uri;
            function encode_uri(text) {
                return encodeURI(text);
            }
            Web.encode_uri = encode_uri;
            function decode_uri_component(url) {
                return decodeURIComponent(url);
            }
            Web.decode_uri_component = decode_uri_component;
            function encode_uri_component(text) {
                return encodeURIComponent(text);
            }
            Web.encode_uri_component = encode_uri_component;
            function url_decode(url) {
                return decodeURIComponent(url);
            }
            Web.url_decode = url_decode;
            function url_encode(text) {
                return encodeURIComponent(text);
            }
            Web.url_encode = url_encode;
            function json(value) {
                return RT.JsonObject.mk(value, function (msg) {
                    RT.App.logEvent(RT.App.DEBUG, 'json', TDev.lf("error parsing json: {0}", msg), undefined);
                });
            }
            Web.json = json;
            function json_object() {
                return RT.JsonObject.wrap({});
            }
            Web.json_object = json_object;
            function json_array() {
                return RT.JsonObject.wrap([]);
            }
            Web.json_array = json_array;
            function xml(value) {
                return RT.XmlObject.mk(value);
            }
            Web.xml = xml;
            function rss(value) {
                return feed(value);
            }
            Web.rss = rss;
            function create_request(url) {
                return RT.WebRequest.mk(url, "text");
            }
            Web.create_request = create_request;
            function open_web_socket(url, r) {
                var ws = new WebSocket(url);
                ws.onopen = function () {
                    ws.onerror = null;
                    ws.onopen = null;
                    r.resumeVal(RT.WebSocket_.mk(ws, r.rt));
                };
                ws.onerror = function (err) {
                    RT.App.log("Error opening WebSocket to " + url + ": " + err.message);
                    r.resumeVal(undefined);
                };
            }
            Web.open_web_socket = open_web_socket;
            function base64_decode(text) {
                return TDev.Util.base64Decode(text);
            }
            Web.base64_decode = base64_decode;
            function base64_encode(text) {
                return TDev.Util.base64Encode(text);
            }
            Web.base64_encode = base64_encode;
            function htmlToPictureUrl(value) {
                if (!value)
                    return value;
                var m = value.match(/<img.*?src=['"](.*?)['"].*?\/?>/i);
                if (m)
                    return m[1];
                return null;
            }
            function htmlToText(value) {
                if (!value)
                    return value;
                var r = value.replace(/<[^>]+>/ig, '');
                var decoded = Web.html_decode(r);
                var decodedescaped = decoded.replace(/<[^>]+>/ig, '');
                return decodedescaped;
            }
            function parseRss(rssx, msgs) {
                var channel = rssx.child('channel');
                if (!channel)
                    return;
                var imgRx = /^image\/(png|jpg|jpeg)$/i;
                var mediaRx = TDev.Browser.isGecko ? /^video\/webm|audio\/mp3$/i : /^video\/mp4|audio\/mp3$/i;
                var items = channel.children('item');
                for (var i = 0; i < items.count(); ++i) {
                    var item = items.at(i);
                    var msg = RT.Message.mk("");
                    msg.set_from(undefined);
                    msgs.add(msg);
                    var description = item.child('description');
                    if (description)
                        parseHtmlContent(msg, description.value());
                    var title = item.child('title');
                    if (title)
                        msg.set_title(htmlToText(title.value()));
                    var link = item.child('link');
                    if (link)
                        msg.set_link(link.value());
                    var pubDate = item.child('pubDate');
                    if (pubDate)
                        msg.set_time(RT.DateTime.parse(pubDate.value()));
                    var speaker = item.child('{http://www.microsoft.com/dtds/mavis/}speaker');
                    if (speaker)
                        msg.set_from(htmlToText(speaker.value()));
                    var author = item.child('{http://www.itunes.com/dtds/podcast-1.0.dtd}author');
                    if (author)
                        msg.set_from(htmlToText(author.value()));
                    var creator = item.child('creator');
                    if (creator)
                        msg.set_from(htmlToText(creator.value()));
                    var img = item.child('{http://www.itunes.com/dtds/podcast-1.0.dtd}image');
                    if (img && img.attr('href'))
                        msg.set_picture_link(img.attr('href'));
                    var enclosure = item.child('enclosure');
                    if (enclosure) {
                        var enclosureType = enclosure.attr('type') || "";
                        if (imgRx.test(enclosureType))
                            msg.set_picture_link(enclosure.attr('url'));
                        else if (mediaRx.test(enclosureType))
                            msg.set_media_link(enclosure.attr('url'));
                    }
                    var thumbnails = item.children('{http://search.yahoo.com/mrss/}thumbnail');
                    var tisize = -1;
                    for (var ti = 0; ti < thumbnails.count(); ++ti) {
                        var thumbnail = thumbnails.at(ti);
                        var cisize = (RT.String_.to_number(thumbnail.attr('width')) || 1) * (RT.String_.to_number(thumbnail.attr('height')) || 1);
                        if (thumbnail.attr('url') && cisize > tisize) {
                            msg.set_picture_link(thumbnail.attr('url'));
                            tisize = cisize;
                        }
                    }
                    var group = item.child('{http://search.yahoo.com/mrss/}group');
                    if (group) {
                        var contents = group.children('{http://search.yahoo.com/mrss/}content');
                        var mcsize = 0;
                        for (var ci = 0; ci < contents.count(); ++ci) {
                            var content = contents.at(ci);
                            var csize = RT.String_.to_number(content.attr('fileSize')) || 0;
                            var curl = content.attr('url');
                            var ctype = content.attr('type');
                            if (curl && mediaRx.test(ctype) && csize > mcsize) {
                                msg.set_media_link(curl);
                                mcsize = csize;
                            }
                        }
                    }
                    parseGeoRss(msg, item);
                }
            }
            function parseGeoRss(msg, item) {
                var point = item.child('{http://www.georss.org/georss}point');
                if (point) {
                    var txt = point.value();
                    var i = txt.indexOf(' ');
                    if (i > 0) {
                        var lat = parseFloat(txt.substr(0, i));
                        var long = parseFloat(txt.substr(i + 1));
                        if (!isNaN(lat) && !isNaN(long))
                            msg.set_location(RT.Location_.mkShort(lat, long));
                    }
                }
            }
            function parseProperties(msg, entry) {
                var properties = entry.child('{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}properties');
                if (properties) {
                    var props = properties.children("");
                    for (var j = 0; j < props.count(); ++j) {
                        var prop = props.at(j);
                        msg.values().set_at(prop.local_name(), prop.value());
                    }
                }
            }
            function parseHtmlContent(msg, value) {
                if (!value)
                    return;
                msg.set_message(htmlToText(value));
                var pic = htmlToPictureUrl(value);
                if (pic)
                    msg.set_picture_link(pic);
            }
            function parseAtom(feed, msgs) {
                var channelTitlex = feed.child('title');
                var channelTitle = channelTitlex ? channelTitlex.value() : "atom";
                var entries = feed.children('entry');
                if (entries) {
                    for (var i = 0; i < entries.count(); ++i) {
                        var entry = entries.at(i);
                        var msg = RT.Message.mk("");
                        msg.set_from(undefined);
                        msgs.add(msg);
                        var summary = entry.child('summary');
                        if (summary)
                            parseHtmlContent(msg, summary.value());
                        var title = entry.child('title');
                        if (title)
                            msg.set_title(htmlToText(title.value()));
                        var updated = entry.child('updated');
                        if (updated) {
                            var updatedd = RT.DateTime.parse(updated.value());
                            if (updatedd)
                                msg.set_time(updatedd);
                        }
                        var content = entry.child('content');
                        if (content) {
                            var contentType = content.attr('type') || "";
                            if (/^image\//i.test(contentType) && content.attr('src'))
                                msg.set_picture_link(content.attr('src'));
                            else if (/^application\/xml/i.test(contentType))
                                parseProperties(msg, content);
                            else if (/html/i.test(contentType))
                                parseHtmlContent(msg, content.value());
                        }
                        var author = entry.child('author');
                        if (author) {
                            var authorName = author.child('name');
                            if (authorName)
                                msg.set_from(authorName.value());
                        }
                        parseGeoRss(msg, entry);
                    }
                }
            }
            function feed(value) {
                var msgs = RT.Collections.create_message_collection();
                var xml = RT.XmlObject.mk(value);
                while (xml != null) {
                    if (xml.name() === 'rss') {
                        parseRss(xml, msgs);
                        break;
                    }
                    else if (xml.name() === 'feed') {
                        parseAtom(xml, msgs);
                        break;
                    }
                    else {
                        xml = xml.next_sibling();
                    }
                }
                return msgs;
            }
            Web.feed = feed;
            function create_json_builder() {
                return new RT.JsonBuilder();
            }
            Web.create_json_builder = create_json_builder;
            function csv(text, delimiter) {
                var file = new TDev.CsvParser().parse(text, delimiter);
                return RT.JsonObject.wrap(file);
            }
            Web.csv = csv;
            function picture(url) {
                return RT.Picture.fromUrlSync(url, true);
            }
            Web.picture = picture;
            function oauth_v2(oauth_url, r) {
                if (!oauth_url) {
                    r.resumeVal(RT.OAuthResponse.mkError("access_denied", "Empty oauth url.", null));
                    return;
                }
                if (/state=|redirect_uri=/i.test(oauth_url)) {
                    r.resumeVal(RT.OAuthResponse.mkError("access_denied", "The `redirect_uri` and `state` query arguments are not allowed.", null));
                    return;
                }
                if (!Web.is_connected()) {
                    r.resumeVal(RT.OAuthResponse.mkError("access_denied", "No internet connection.", null));
                    return;
                }
                var userid = r.rt.currentAuthorId;
                Web.oauth_v2_async(oauth_url, userid).done(function (v) {
                    r.resumeVal(v);
                });
            }
            Web.oauth_v2 = oauth_v2;
            function oauth_v2_async(oauth_url, userid) {
                var redirectURI = "https://www.touchdevelop.com/" + userid + "/oauth";
                var state = TDev.Util.guidGen();
                var stateArg = "state=" + state.replace('-', '');
                var hostM = /^([^\/]+:\/\/[^\/]+)/.exec(document.URL);
                var host = hostM ? hostM[1] : "";
                if (host && !/\.touchdevelop\.com$/i.test(host)) {
                    redirectURI = host + "/api/oauth";
                    userid = "web-app";
                }
                var actualRedirectURI = redirectURI;
                var subdomainRx = /&tdredirectdomainid=([a-z0-9]{1,64})/i;
                var msubdomain = oauth_url.match(subdomainRx);
                if (msubdomain) {
                    var appid = msubdomain[1];
                    actualRedirectURI = 'https://' + appid + '-' + userid + '.users.touchdevelop.com/oauth';
                    redirectURI = "https://www.touchdevelop.com/" + appid + '-' + userid + "/oauth";
                    RT.App.log('oauth appid redirect: ' + appid);
                    oauth_url = oauth_url.replace(subdomainRx, '');
                }
                var stateRx = /&tdstateinredirecturi=true/i;
                if (stateRx.test(oauth_url)) {
                    actualRedirectURI += "?" + stateArg;
                    RT.Time.log('oauth adding state to url');
                    oauth_url = oauth_url.replace(stateRx, '');
                }
                RT.App.log('oauth login uri: ' + oauth_url);
                RT.App.log('oauth redirect uri: ' + actualRedirectURI);
                var url = oauth_url + (/\?/.test(oauth_url) ? '&' : '?') + 'redirect_uri=' + encodeURIComponent(actualRedirectURI) + "&" + stateArg;
                if (!/response_type=token/i.test(url))
                    url += "&response_type=token";
                RT.App.log('oauth auth url: ' + url);
                return Web.oauth_v2_dance_async(url, actualRedirectURI, userid, stateArg);
            }
            Web.oauth_v2_async = oauth_v2_async;
            function oauth_v2_dance_async(url, redirect_uri, userid, stateArg) {
                var res = new TDev.PromiseInv();
                var response;
                var oauthWindow;
                var m = new TDev.ModalDialog();
                function handleMessage(event) {
                    var origin = document.URL.replace(/(.*:\/\/[^\/]+).*/, function (a, b) { return b; });
                    if (event.origin == origin && Array.isArray(event.data)) {
                        processRedirects(event.data);
                    }
                }
                function handleStorage(event) {
                    if (event.key == "oauth_redirect")
                        processRedirects(JSON.parse(event.newValue || "[]"));
                }
                function dismiss() {
                    window.removeEventListener("message", handleMessage, false);
                    window.removeEventListener("storage", handleStorage, false);
                    if (!response)
                        response = RT.OAuthResponse.mkError("access_denied", "The user cancelled the authentication.", null);
                    if (oauthWindow)
                        oauthWindow.close();
                    res.success(response);
                }
                function processRedirects(redirects) {
                    redirects.reverse();
                    var matches = redirects.filter(function (redirect) { return userid == redirect.user_id && redirect.redirect_url.indexOf(stateArg) > -1; });
                    if (matches.length > 0) {
                        RT.Time.log('oauth redirect_uri: ' + matches[0].redirect_url);
                        response = RT.OAuthResponse.parse(matches[0].redirect_url);
                        m.dismiss();
                        return;
                    }
                    if (!response && oauthWindow && oauthWindow.closed) {
                        response = RT.OAuthResponse.mkError("access_denied", "The authentication window was closed", null);
                        m.dismiss();
                        return;
                    }
                }
                function tracker() {
                    if (response)
                        return;
                    window.localStorage.setItem("last_oauth_check", Date.now() + "");
                    processRedirects(JSON.parse(window.localStorage.getItem("oauth_redirect") || "[]"));
                    if (!response)
                        TDev.Util.setTimeout(100, tracker);
                }
                var woptions = 'menubar=no,toolbar=no';
                oauthWindow = window.open(url, '_blank', woptions);
                m.add(TDev.div('wall-dialog-header', 'authenticating...'));
                m.add(TDev.div('wall-dialog-body', 'A separate window with the sign in dialog has opened, please sign in in that window.'));
                m.add(TDev.div('wall-dialog-body', "Can't see any window? Try tapping the button below to log in manually."));
                m.add(TDev.div('wall-dialog-buttons', TDev.HTML.mkA("button wall-button", url, "_blank", "log in")));
                m.onDismiss = function () {
                    dismiss();
                };
                m.show();
                TDev.Util.setTimeout(100, tracker);
                return res;
            }
            Web.oauth_v2_dance_async = oauth_v2_dance_async;
            function create_form_builder() {
                return new RT.FormBuilder();
            }
            Web.create_form_builder = create_form_builder;
            function post_message_to_parent(target_origin, message, s) {
                if (!target_origin || target_origin == "*")
                    TDev.Util.userError(TDev.lf("target origin cannot be empty or *"));
                if (TDev.isWebWorker) {
                    var msg = message.value();
                    if (s && s.rt.pluginSlotId) {
                        msg = TDev.Util.jsonClone(msg);
                        msg.tdSlotId = s.rt.pluginSlotId;
                    }
                    self.postMessage(msg);
                    return;
                }
                var parent = window.parent;
                if (parent && parent != window && parent.postMessage) {
                    try {
                        parent.postMessage(message.value(), target_origin);
                    }
                    catch (e) {
                        RT.App.log("web: posting message to parent failed");
                    }
                }
            }
            Web.post_message_to_parent = post_message_to_parent;
            function receiveMessage(rt, event) {
                var s = rt.webState;
                if (window != window.parent && event.source === window.parent && s._onReceivedMessageEvent) {
                    RT.App.log("web: receiving message from parent");
                    var json = RT.JsonObject.wrap(event.data);
                    var waiters = s._messageWaiters.filter(function (m) { return m.origin === event.origin; });
                    if (waiters.length > 0) {
                        s._messageWaiters = s._messageWaiters.filter(function (m) { return m.origin !== event.origin; });
                        waiters.forEach(function (w) { return w.handler(json); });
                    }
                    if (s._onReceivedMessageEvent.handlers) {
                        rt.queueLocalEvent(s._onReceivedMessageEvent, [json], false, false, function (binding) {
                            var origin = binding.data;
                            return event.origin === origin;
                        });
                    }
                }
            }
            function receiveWorkerMessage(rt, data) {
                var s = rt.webState;
                if (s._onReceivedMessageEvent) {
                    var json = RT.JsonObject.wrap(data);
                    var waiters = s._messageWaiters;
                    if (waiters.length > 0) {
                        s._messageWaiters = [];
                        waiters.forEach(function (w) { return w.handler(json); });
                    }
                    if (s._onReceivedMessageEvent.handlers) {
                        rt.queueLocalEvent(s._onReceivedMessageEvent, [json], false, false);
                    }
                }
            }
            Web.receiveWorkerMessage = receiveWorkerMessage;
            function installReceiveMessage(rt, origin) {
                if (!origin)
                    TDev.Util.userError(TDev.lf("origin cannot be empty"));
                var s = rt.webState;
                if (!s._onReceivedMessageEvent) {
                    s._onReceivedMessageEvent = new RT.Event_();
                    s._messageWaiters = [];
                    if (!TDev.isWebWorker) {
                        s.receiveMessage = function (e) { return receiveMessage(rt, e); };
                        window.addEventListener("message", s.receiveMessage, false);
                    }
                }
            }
            function wait_for_message_from_parent(origin, r) {
                installReceiveMessage(r.rt, origin);
                r.rt.webState._messageWaiters.push({
                    origin: origin,
                    handler: function (j) { return r.resumeVal(j); }
                });
            }
            Web.wait_for_message_from_parent = wait_for_message_from_parent;
            function on_received_message_from_parent(origin, received, s) {
                installReceiveMessage(s.rt, origin);
                var st = s.rt.webState;
                var binding = st._onReceivedMessageEvent.addHandler(received);
                binding.data = origin;
                return binding;
            }
            Web.on_received_message_from_parent = on_received_message_from_parent;
            function clearReceivedMessageEvent(rt) {
                var s = rt.webState;
                if (s._onReceivedMessageEvent) {
                    if (s.receiveMessage)
                        window.removeEventListener("message", s.receiveMessage, false);
                    s._onReceivedMessageEvent = undefined;
                    s._messageWaiters = undefined;
                }
            }
            function create_event_source(url, s) {
                if (!url)
                    TDev.Util.userError(TDev.lf("url cannot be empty"), s.pc);
                if (!!window.EventSource) {
                    var source = new window.EventSource(url);
                    return new WebEventSource(s.rt, source);
                }
                else {
                    return undefined;
                }
            }
            Web.create_event_source = create_event_source;
            function oauth_token_from_url(redirect_url) {
                return RT.OAuthResponse.parse(redirect_url);
            }
            Web.oauth_token_from_url = oauth_token_from_url;
            function oauth_token_from_json(response) {
                return RT.OAuthResponse.parseJSON(response);
            }
            Web.oauth_token_from_json = oauth_token_from_json;
        })(Web = RT.Web || (RT.Web = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var WebRequest = (function (_super) {
            __extends(WebRequest, _super);
            function WebRequest() {
                _super.call(this);
                this._method = undefined;
                this._url = undefined;
                this._showNotifications = true;
                this._proxyResponseType = undefined;
                this._headers = new RT.StringMap();
                this._content = undefined;
                this._credentialsName = undefined;
                this._credentialsPassword = undefined;
                this._responseReceived = new RT.Event_();
            }
            WebRequest.mk = function (url, proxyResponseType) {
                var wr = new WebRequest();
                wr._url = url;
                wr._method = "GET";
                wr._proxyResponseType = proxyResponseType;
                return wr;
            };
            WebRequest.prototype.show_notifications = function (visible) {
                this._showNotifications = visible;
            };
            WebRequest.prototype.proxyResponseType = function () {
                return this._proxyResponseType;
            };
            WebRequest.prototype.method = function () {
                return this._method;
            };
            WebRequest.prototype.set_method = function (method) {
                this._method = method;
            };
            WebRequest.prototype.url = function () {
                return this._url;
            };
            WebRequest.prototype.set_url = function (url) {
                this._url = url;
            };
            WebRequest.prototype.header = function (name) {
                return this._headers.at(name);
            };
            WebRequest.prototype.set_header = function (name, value) {
                if (!value)
                    this._headers.remove(name);
                else
                    this._headers.set_at(name, value);
            };
            WebRequest.prototype.equals = function (other) {
                return this == other;
            };
            WebRequest.prototype.toString = function () {
                return this.method() + " " + this.url();
            };
            WebRequest.prototype.set_accept = function (type) {
                this._headers.set_at("Accept", type);
            };
            WebRequest.prototype.post_to_wall = function (s) {
                var rt = s.rt;
                if (this._content && this._content.length)
                    rt.postBoxedText("Content-Length: " + this._content.length, s.pc);
                var keys = this._headers.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var key = keys.at(i);
                    rt.postBoxedText(keys.at(i) + ": " + this._headers.at(key), s.pc);
                }
                if (this._credentialsName || this._credentialsPassword)
                    rt.postBoxedText("credentials: " + this._credentialsName, s.pc);
                rt.postBoxedText(this.toString(), s.pc);
            };
            WebRequest.prototype.serializeForProxy = function () {
                var _this = this;
                var credentials = undefined;
                if (this._credentialsName || this._credentialsPassword) {
                    credentials = {
                        name: this._credentialsName || "",
                        password: this._credentialsPassword || ""
                    };
                }
                var headers = this._headers.keys().a.map(function (k) {
                    return { name: k, value: _this._headers.at(k) };
                });
                var isString = typeof this._content == "string";
                return {
                    url: this._url,
                    method: this._method,
                    contentText: isString ? this._content : undefined,
                    content: this._content && !isString ? TDev.Util.base64EncodeBytes(this._content) : undefined,
                    responseType: this._proxyResponseType,
                    headers: headers,
                    credentials: credentials
                };
            };
            WebRequest.prototype.set_content_type = function (contentType) {
                this._headers.set_at("Content-Type", contentType);
            };
            WebRequest.prototype.debuggerChildren = function () {
                var r = {
                    'method': this._method,
                    'url': this._url,
                    'headers': this._headers,
                    'content': this._content,
                    'user name': this._credentialsName,
                    'password': this._credentialsPassword,
                    'notifications': this._showNotifications
                };
                return r;
            };
            WebRequest.prototype.mkProxyCrash = function (proxyResponse) {
                return {
                    statusCode: proxyResponse.status_code(),
                    response: RT.WebResponse.mkCrash(this)
                };
            };
            WebRequest.prototype.sendViaProxyAsync = function () {
                var _this = this;
                if (!TDev.Util.check(!!this._proxyResponseType))
                    return TDev.Promise.as({ statusCode: 0, response: RT.WebResponse.mkCrash(this) });
                var proxy = WebRequest.mk(TDev.Cloud.getPrivateApiUrl("runtime/web/request"), undefined);
                proxy.set_method("POST");
                proxy.set_content(JSON.stringify(this.serializeForProxy()));
                return proxy.sendAsync().then(function (proxyResponse) {
                    switch (proxyResponse.status_code()) {
                        case 502:
                            if (_this._showNotifications)
                                TDev.HTML.showProxyNotification("Proxy Error: Could not perform web request. " + TDev.Cloud.onlineInfo(), _this._url);
                            return _this.mkProxyCrash(proxyResponse);
                        case 503:
                            if (_this._showNotifications)
                                TDev.HTML.showProxyNotification("Proxy Error: Could not perform web request. Did you transfer a lot of data recently? (code 503)", _this._url);
                            return _this.mkProxyCrash(proxyResponse);
                        case 403:
                            TDev.Cloud.accessTokenExpired();
                            if (_this._showNotifications)
                                TDev.HTML.showProxyNotification("Proxy Error: Could not perform web request; access denied; your access token might have expired.", _this._url);
                            return _this.mkProxyCrash(proxyResponse);
                        case 504:
                            if (_this._showNotifications)
                                TDev.HTML.showProxyNotification("Proxy Error: Could not perform web request. Response too big.  (code 504)", _this._url);
                            return _this.mkProxyCrash(proxyResponse);
                        case 400:
                            if (_this._showNotifications)
                                TDev.HTML.showProxyNotification("Proxy Error: Malformed inputs: " + TDev.Util.decodeErrorMessage(proxyResponse.header("ErrorMessage")), _this._url);
                            return _this.mkProxyCrash(proxyResponse);
                        default:
                            return {
                                statusCode: proxyResponse.status_code(),
                                response: RT.WebResponse.mkProxy(_this, JSON.parse(proxyResponse.content()))
                            };
                    }
                });
            };
            WebRequest.prototype.prepareAndSend = function (client) {
                if (this._credentialsName || this._credentialsPassword) {
                    client.open(this.method().toUpperCase(), this.url(), true, this._credentialsName || "", this._credentialsPassword || "");
                    client.withCredentials = true;
                }
                else
                    client.open(this.method().toUpperCase(), this.url(), true);
                var isForms = !TDev.isWebWorker && !!this._content && this._content instanceof FormData;
                var keys = this._headers.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var header = keys.at(i);
                    if (isForms && /^content-type$/i.test(header))
                        continue;
                    var headerValue = this._headers.at(header);
                    client.setRequestHeader(header, headerValue);
                    if (/^accept$/i.test(header) && /^image\/|^audio\//i.test(headerValue)) {
                        client.responseType = 'arraybuffer';
                    }
                }
                RT.Time.log(this.toString());
                client.send(this._content);
            };
            WebRequest.prototype.sendAsync = function () {
                return this.sendCoreAsync();
            };
            WebRequest.prototype.sendCoreAsync = function () {
                var _this = this;
                var request = this;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    if (TDev.Cloud.isOffline()) {
                        if (request._showNotifications)
                            TDev.HTML.showNotificationText('Web request failed, please connect to Internet.');
                        onSuccess(RT.WebResponse.mkCrash(request));
                        return;
                    }
                    var onCORS = function () {
                        if (request._proxyResponseType) {
                            TDev.Cloud.authenticateAsync(TDev.lf("web request proxying")).done(function (authenticated) {
                                if (!authenticated)
                                    onSuccess(RT.WebResponse.mkCrash(request));
                                else
                                    request.sendViaProxyAsync().then(function (r) {
                                        if (r.statusCode == 403) {
                                            TDev.Cloud.authenticateAsync(TDev.lf("web request proxying")).done(function (authenticated) {
                                                if (!authenticated)
                                                    onSuccess(RT.WebResponse.mkCrash(request));
                                                else
                                                    request.sendViaProxyAsync().then(function (r) { return onSuccess(r.response); }, function (e) { return onError(e); });
                                            });
                                        }
                                        else
                                            onSuccess(r.response);
                                    }, function (e) { return onError(e); });
                            });
                        }
                        else {
                            if (request._showNotifications)
                                TDev.HTML.showCorsNotification(request.url());
                            onSuccess(RT.WebResponse.mkCrash(request));
                        }
                    };
                    if (RT.Web.proxy(_this.url()) != _this.url() && /^https:\//i.test(document.URL) && /^http:\//.test(_this.url())) {
                        onCORS();
                        return;
                    }
                    try {
                        var client = new XMLHttpRequest();
                        client.onerror = function (e) {
                            RT.Time.log('error with ' + _this.toString());
                        };
                        client.onreadystatechange = function () {
                            if (client.readyState == (XMLHttpRequest.DONE || 4)) {
                                if (client.status == 0)
                                    onCORS();
                                else {
                                    var r = RT.WebResponse.mk(request, client);
                                    onSuccess(r);
                                }
                            }
                        };
                        if (TDev.HttpLog.enabled)
                            TDev.HttpLog.log(request.serializeForProxy());
                        request.prepareAndSend(client);
                    }
                    catch (e) {
                        onCORS();
                    }
                });
            };
            WebRequest.prototype.testCORSAsync = function () {
                var _this = this;
                if (RT.Web.proxy(this._url) == this._url)
                    return TDev.Promise.as(false);
                var request = this;
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        var client = new XMLHttpRequest();
                        client.onerror = function (e) { return RT.Time.log('error with ' + _this.toString()); };
                        client.onreadystatechange = function () {
                            if (client.readyState == (XMLHttpRequest.DONE || 4)) {
                                onSuccess(client.status == 0);
                            }
                        };
                        request.prepareAndSend(client);
                    }
                    catch (e) {
                        onSuccess(true);
                    }
                });
            };
            WebRequest.prototype.send_async = function (s) {
                var _this = this;
                this.sendAsync().then(function (response) {
                    if (_this._responseReceived && _this._responseReceived.handlers)
                        s.rt.queueLocalEvent(_this._responseReceived, [response]);
                }, function (e) {
                    var r = RT.WebResponse.mkCrash(_this);
                    if (_this._responseReceived && _this._responseReceived.handlers)
                        s.rt.queueLocalEvent(_this._responseReceived, [r]);
                });
            };
            WebRequest.prototype.on_response_received = function (handler) {
                return this._responseReceived.addHandler(handler);
            };
            WebRequest.prototype.send = function (r) {
                var _this = this;
                this.sendAsync().then(function (response) {
                    r.resumeVal(response);
                }, function (e) {
                    r.resumeVal(RT.WebResponse.mkCrash(_this));
                });
            };
            WebRequest.prototype.set_content = function (content) {
                this._content = content;
                this.set_content_type("text/plain; charset=utf-8");
            };
            WebRequest.prototype.set_content_as_json = function (json) {
                this.set_content(json.toString());
                this.set_content_type("application/json; charset=utf-8");
            };
            WebRequest.prototype.set_content_as_buffer = function (bytes) {
                this._content = bytes.buffer;
                this.set_content_type("application/octet-stream");
            };
            WebRequest.prototype.set_content_as_form = function (form) {
                this._content = form.data();
                if (/^get$/i.test(this.method()))
                    this.set_method("post");
            };
            WebRequest.prototype.set_content_as_picture = function (pic, quality, r) {
                var _this = this;
                pic.loadFirst(r, function () {
                    _this.setContentAsPictureInternal(pic, quality);
                });
            };
            WebRequest.prototype.setContentAsSoundInternal = function (snd) {
                var url = snd.getDataUri();
                if (url) {
                    var mimeType = RT.Sound.dataUriMimeType(url);
                    var bytes = TDev.Util.decodeDataURL(url, mimeType);
                    if (bytes) {
                        this._content = bytes;
                        this.set_content_type(mimeType);
                    }
                }
            };
            WebRequest.prototype.setContentAsPictureInternal = function (pic, quality, forceJpeg) {
                if (forceJpeg === void 0) { forceJpeg = false; }
                quality = RT.Math_.normalize(quality);
                var mimeType = (quality >= 1 && !forceJpeg) ? "image/png" : "image/jpeg";
                var jpegUrl = pic.getDataUri(quality, -1, forceJpeg);
                var bytes = TDev.Util.decodeDataURL(jpegUrl, mimeType);
                if (bytes) {
                    this._content = bytes;
                    this.set_content_type(mimeType);
                }
            };
            WebRequest.prototype.set_content_as_xml = function (xml) {
                this.set_content(xml.toString());
                this.set_content_type("text/xml; charset=utf-8");
            };
            WebRequest.prototype.set_credentials = function (name, password) {
                if (!this.url().match(/^https:\/\//i))
                    TDev.Util.userError(TDev.lf("Web Request->set credentials requires a secure HTTP url (https)"));
                this._credentialsName = name;
                this._credentialsPassword = password;
            };
            WebRequest.prototype.header_names = function () {
                return this._headers.keys();
            };
            WebRequest.prototype.set_compress = function (value) {
            };
            return WebRequest;
        })(RT.RTValue);
        RT.WebRequest = WebRequest;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var WebResponse = (function (_super) {
            __extends(WebResponse, _super);
            function WebResponse() {
                _super.call(this);
                this._request = undefined;
                this._content = undefined;
                this._statusCode = undefined;
                this._binaryContent = undefined;
                this._headers = new RT.StringMap();
            }
            WebResponse.mkCrash = function (request) {
                var r = new WebResponse();
                r._request = request;
                r._statusCode = 0;
                r._content = undefined;
                return r;
            };
            WebResponse.mkProxy = function (request, proxyResponse) {
                var r = new WebResponse();
                r._request = request;
                r._statusCode = proxyResponse.code;
                var headers = proxyResponse.headers;
                if (headers)
                    headers.forEach(function (h) { return r._headers.set_at(h.name.toLowerCase(), h.value); });
                if (proxyResponse.forceText || request.proxyResponseType() == "text")
                    r._content = proxyResponse.contentText;
                else
                    r._content = atob(proxyResponse.content);
                r._binaryContent = proxyResponse.binaryContent;
                return r;
            };
            WebResponse.mk = function (request, xrequest) {
                var r = new WebResponse();
                r._request = request;
                r._statusCode = xrequest.status;
                TDev.Util.forEachResponseHeader(xrequest, function (name, value) { return r._headers.set_at(name.toLowerCase(), value); });
                if (r._statusCode == 0) {
                    TDev.HTML.showCorsNotification(request.url());
                    r._content = undefined;
                }
                else {
                    r._content = xrequest.response;
                }
                return r;
            };
            WebResponse.prototype.request = function () {
                return this._request;
            };
            WebResponse.prototype.status_code = function () {
                return this._statusCode;
            };
            WebResponse.prototype.content = function () {
                return this._content;
            };
            WebResponse.prototype.contentAsArraybuffer = function () {
                if (this._binaryContent)
                    return this._binaryContent;
                if (!this._content)
                    return null;
                return new Uint8Array(this._content);
            };
            WebResponse.prototype.content_as_buffer = function () {
                var arr = this.contentAsArraybuffer();
                if (arr)
                    return RT.Buffer.fromTypedArray(arr);
                return undefined;
            };
            WebResponse.prototype.content_as_json = function () {
                if (this.content())
                    return RT.JsonObject.mk(this.content(), RT.Time.log);
                return undefined;
            };
            WebResponse.prototype.toString = function () {
                return this.status_code() + " --> " + this.request().toString();
            };
            WebResponse.prototype.content_as_picture = function (r) {
                var bytes = this.contentAsArraybuffer();
                if (!bytes)
                    r.resumeVal(undefined);
                else {
                    var img = document.createElement('img');
                    img.onload = function (e) {
                        var pic = RT.Picture.fromImage(img);
                        URL.revokeObjectURL(img.src);
                        r.resumeVal(pic);
                    };
                    img.onerror = function (e) {
                        r.resumeVal(undefined);
                    };
                    img.src = URL.createObjectURL(new Blob([bytes.buffer], { type: 'application/octect-stream' }));
                }
            };
            WebResponse.prototype.content_as_sound = function () {
                return undefined;
            };
            WebResponse.prototype.content_as_xml = function () {
                if (this.content())
                    return RT.XmlObject.mk(this._content);
                return undefined;
            };
            WebResponse.prototype.header = function (name) {
                return this._headers.at(name.toLowerCase());
            };
            WebResponse.prototype.header_names = function () {
                return this._headers.keys();
            };
            WebResponse.prototype.post_to_wall = function (s) {
                var rt = s.rt;
                rt.postBoxedText(this.toString(), s.pc);
                var keys = this._headers.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var key = keys.at(i);
                    rt.postBoxedText(keys.at(i) + ": " + this._headers.at(key), s.pc);
                }
                if (this.content())
                    rt.postBoxedText(this.content(), s.pc);
            };
            WebResponse.prototype.debuggerChildren = function () {
                var r = {
                    'status code': this._statusCode,
                    'headers': this._headers,
                    'content': this._content,
                    'request': this._request
                };
                return r;
            };
            return WebResponse;
        })(RT.RTValue);
        RT.WebResponse = WebResponse;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var XmlObject = (function (_super) {
            __extends(XmlObject, _super);
            function XmlObject() {
                _super.call(this);
                this._element = undefined;
                this._nodeList = undefined;
            }
            XmlObject.removeWhitespace = function (node) {
                for (var i = node.childNodes.length; i-- > 0;) {
                    var child = node.childNodes[i];
                    if (child.nodeType === 3 && child.data.match(/^\s*$/))
                        node.removeChild(child);
                    if (child.nodeType === 1)
                        XmlObject.removeWhitespace(child);
                }
            };
            XmlObject.parseToDOM = function (value) {
                try {
                    var x = new XmlObject();
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(value, "application/xml");
                    XmlObject.removeWhitespace(doc);
                    return doc;
                }
                catch (e) {
                    RT.App.logEvent(RT.App.DEBUG, "xml", TDev.lf("error parsing xml: {0}", e.message), undefined);
                    return undefined;
                }
            };
            XmlObject.mk = function (value) {
                var doc = XmlObject.parseToDOM(value);
                if (doc) {
                    var x = new XmlObject();
                    x._element = doc.firstChild;
                    return x;
                }
                return undefined;
            };
            XmlObject.mkNode = function (element) {
                if (element) {
                    var x = new XmlObject();
                    x._element = element;
                    return x;
                }
                else {
                    return null;
                }
            };
            XmlObject.mkNodeList = function (nodeList) {
                if (nodeList) {
                    var x = new XmlObject();
                    x._nodeList = XmlObject.toElements(nodeList);
                    return x;
                }
                else {
                    return null;
                }
            };
            XmlObject.toElements = function (childNodes) {
                var nodes = [];
                for (var i = 0; i < childNodes.length; ++i) {
                    var child = childNodes[i];
                    nodes.push(XmlObject.mkNode(child));
                }
                return nodes;
            };
            XmlObject.prototype.initializeElements = function () {
                if (this._nodeList == null) {
                    var childNodes = this._element.childNodes;
                    var args = [];
                    for (var i = 0; i < childNodes.length; ++i) {
                        var child = childNodes[i];
                        args.push(child);
                    }
                    this._nodeList = XmlObject.toElements(args);
                }
            };
            XmlObject.prototype.count = function () {
                this.initializeElements();
                if (this._nodeList)
                    return this._nodeList.length;
                return 0;
            };
            XmlObject.prototype.is_element = function () {
                return this._element ? true : false;
            };
            XmlObject.prototype.name = function () {
                return this._element ? this.create_name(this._element.localName, this._element.namespaceURI) : "";
            };
            XmlObject.prototype.value = function () {
                if (this._element)
                    return this._element.textContent;
                else if (this._nodeList) {
                    var s = [];
                    this._nodeList.forEach(function (e) {
                        s.push(e.value());
                    });
                    return s.join("\n");
                }
                return "";
            };
            XmlObject.prototype.at = function (index) {
                this.initializeElements();
                if (this._nodeList)
                    return this._nodeList[Math.floor(index)];
                return undefined;
            };
            XmlObject.prototype.attr = function (name) {
                if (this._element)
                    return this._element.getAttribute(name);
                return undefined;
            };
            XmlObject.prototype.attr_names = function () {
                var c = new RT.Collection("string");
                if (this._element) {
                    var attrs = this._element.attributes;
                    if (attrs) {
                        for (var i = 0; i < attrs.length; ++i) {
                            var attr = attrs[i].name;
                            c.add(attr);
                        }
                    }
                }
                return c;
            };
            XmlObject.prototype.child = function (name) {
                if (this._element && name) {
                    var localName = name;
                    var namespaceURI = null;
                    var m = /^\{([^\}]*)\}(.*)$/i.exec(name);
                    if (m) {
                        namespaceURI = m[1];
                        localName = m[2];
                    }
                    var childNodes = this._element.childNodes;
                    for (var i = 0; i < childNodes.length; ++i) {
                        var child = childNodes[i];
                        if (child.nodeType == Node.ELEMENT_NODE && child.localName == localName && (!namespaceURI || child.namespaceURI == namespaceURI))
                            return XmlObject.mkNode(child);
                    }
                }
                return undefined;
            };
            XmlObject.prototype.children = function (name) {
                if (!name)
                    name = '';
                if (this._element) {
                    var localName = name;
                    var namespaceURI = null;
                    if (localName) {
                        var m = /^\{([^\}]*)\}(.*)$/i.exec(name);
                        if (m) {
                            namespaceURI = m[1];
                            localName = m[2];
                        }
                    }
                    var nodes = [];
                    var childNodes = this._element.childNodes;
                    for (var i = 0; i < childNodes.length; ++i) {
                        var child = childNodes[i];
                        if (child.nodeType == Node.ELEMENT_NODE && (name.length === 0 || (child.localName == localName && (!namespaceURI || child.namespaceURI == namespaceURI))))
                            nodes.push(child);
                    }
                    return XmlObject.mkNodeList(nodes);
                }
                return undefined;
            };
            XmlObject.prototype.post_to_wall = function (s) {
                s.rt.postBoxedText(this.to_string(), s.pc);
            };
            XmlObject.prototype.toString = function () {
                return this.to_string();
            };
            XmlObject.prototype.to_string = function () {
                if (this._element) {
                    return (new XMLSerializer()).serializeToString(this._element);
                }
                else if (this._nodeList) {
                    var result = [];
                    this._nodeList.forEach(function (e) {
                        result.push(e.to_string());
                    });
                    return result.join("\n");
                }
                else
                    return "";
            };
            XmlObject.prototype.local_name = function () {
                if (this._element)
                    return this._element.localName || "";
                return "";
            };
            XmlObject.prototype.namespace = function () {
                if (this._element)
                    return this._element.namespaceURI || "";
                return "";
            };
            XmlObject.prototype.next_sibling = function () {
                if (this._element)
                    return XmlObject.mkNode(this._element.nextSibling);
                else
                    return null;
            };
            XmlObject.prototype.previous_sibling = function () {
                if (this._element)
                    return XmlObject.mkNode(this._element.previousSibling);
                else
                    return null;
            };
            XmlObject.prototype.create_name = function (local_name, namespace_uri) {
                if (!namespace_uri)
                    return local_name;
                if (this._element && this._element.isDefaultNamespace(namespace_uri))
                    return local_name;
                return "{" + namespace_uri + "}" + local_name;
            };
            return XmlObject;
        })(RT.RTValue);
        RT.XmlObject = XmlObject;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        (function (ShakeType) {
            ShakeType[ShakeType["X"] = 0] = "X";
            ShakeType[ShakeType["Y"] = 1] = "Y";
            ShakeType[ShakeType["Z"] = 2] = "Z";
        })(RT.ShakeType || (RT.ShakeType = {}));
        var ShakeType = RT.ShakeType;
        var ShakeDetector;
        (function (ShakeDetector) {
            var shakeMagnitudeWithoutGravitationThreshold = 0.2;
            var stillCounterThreshold = 8;
            var stillMagnitudeWithoutGravitationThreshold = 0.02;
            var maximumStillVectorsNeededForAverage = 20;
            var minimumStillVectorsNeededForAverage = 5;
            var minimumShakeVectorsNeededForShake = 8;
            var weakMagnitudeWithoutGravitationThreshold = 0.2;
            var minimumRequiredMovesForShake = 2;
            var _lastStillVector = RT.Vector3.mk(0, -1, 0);
            var _isInShakeState = false;
            var _stillCounter = 0;
            var _shakeSignal = [];
            var _shakeHistogram = [0, 0, 0];
            var _stillSignal = [];
            function accelerationChanged(currentVector) {
                var shakeType = undefined;
                var isShakeMagnitude = Math.abs(_lastStillVector.length() - currentVector.length()) > shakeMagnitudeWithoutGravitationThreshold;
                if ((!_isInShakeState) && (isShakeMagnitude)) {
                    _isInShakeState = true;
                    clearShakeSignal();
                    processStillSignal();
                    addVectorToShakeSignal(currentVector);
                }
                else if ((!_isInShakeState) && (!isShakeMagnitude)) {
                    addVectorToStillSignal(currentVector);
                }
                else if ((_isInShakeState) && (isShakeMagnitude)) {
                    addVectorToShakeSignal(currentVector);
                    _stillCounter = 0;
                    shakeType = processShakeSignal();
                    if (shakeType)
                        clearShakeSignal();
                }
                else if ((_isInShakeState) && (!isShakeMagnitude)) {
                    addVectorToShakeSignal(currentVector);
                    _stillCounter++;
                    if (_stillCounter > stillCounterThreshold) {
                        _stillSignal.clear();
                        for (var i = 0; i < stillCounterThreshold; ++i) {
                            var currentSampleIndex = _shakeSignal.length - stillCounterThreshold + i;
                            addVectorToStillSignal(currentVector);
                        }
                        _shakeSignal.splice(_shakeSignal.length - stillCounterThreshold, stillCounterThreshold);
                        _isInShakeState = false;
                        _stillCounter = 0;
                        shakeType = processShakeSignal();
                        if (shakeType)
                            clearShakeSignal();
                    }
                }
                return !!shakeType;
            }
            ShakeDetector.accelerationChanged = accelerationChanged;
            function addVectorToStillSignal(currentVector) {
                _stillSignal.unshift(currentVector);
                if (_stillSignal.length > 2 * maximumStillVectorsNeededForAverage) {
                    _stillSignal.pop();
                }
            }
            function addVectorToShakeSignal(currentVector) {
                var currentVectorWithoutGravitation = currentVector.subtract(_lastStillVector);
                _shakeSignal.push(currentVectorWithoutGravitation);
                if (currentVectorWithoutGravitation.length() < weakMagnitudeWithoutGravitationThreshold) {
                    return;
                }
                var vectorShakeType = classifyVectorShakeType(currentVectorWithoutGravitation);
                _shakeHistogram[vectorShakeType]++;
            }
            function clearShakeSignal() {
                _shakeSignal.clear();
                for (var i = 0; i < _shakeHistogram.length; ++i)
                    _shakeHistogram[i] = 0;
            }
            function processStillSignal() {
                var sumVector = RT.Vector3.mk(0, 0, 0);
                var count = 0;
                for (var i = 0; i < _stillSignal.length; ++i) {
                    var currentStillVector = _stillSignal[i];
                    var isStillMagnitude = (Math.abs(_lastStillVector.length() - currentStillVector.length()) < stillMagnitudeWithoutGravitationThreshold);
                    if (isStillMagnitude) {
                        sumVector = sumVector.add(currentStillVector);
                        ++count;
                        if (count >= maximumStillVectorsNeededForAverage) {
                            break;
                        }
                    }
                }
                if (count >= minimumStillVectorsNeededForAverage) {
                    _lastStillVector = sumVector.scale(1 / count);
                }
            }
            function classifyVectorShakeType(v) {
                var absX = Math.abs(v.x());
                var absY = Math.abs(v.y());
                var absZ = Math.abs(v.z());
                if ((absX >= absY) && (absX >= absZ)) {
                    return 0 /* X */;
                }
                if ((absY >= absX) && (absY >= absZ)) {
                    return 1 /* Y */;
                }
                return 2 /* Z */;
            }
            function processShakeSignal() {
                var xCount = _shakeHistogram[0];
                var yCount = _shakeHistogram[1];
                var zCount = _shakeHistogram[2];
                var shakeType = undefined;
                if ((xCount >= yCount) && (xCount >= zCount) && (xCount >= minimumShakeVectorsNeededForShake)) {
                    shakeType = 0 /* X */;
                }
                else if ((yCount >= xCount) && (yCount >= zCount) && (yCount >= minimumShakeVectorsNeededForShake)) {
                    shakeType = 1 /* Y */;
                }
                else if ((zCount >= xCount) && (zCount >= yCount) && (zCount >= minimumShakeVectorsNeededForShake)) {
                    shakeType = 2 /* Z */;
                }
                if (shakeType) {
                    var countSignsChanges = countSignChanges(shakeType);
                    if (countSignsChanges < minimumRequiredMovesForShake) {
                        shakeType = undefined;
                    }
                }
                return shakeType;
            }
            function countSignChanges(shakeType) {
                var countSignsChanges = 0;
                var currentSign = 0;
                var prevSign = undefined;
                for (var i = 0; i < _shakeSignal.length; ++i) {
                    switch (shakeType) {
                        case 0 /* X */:
                            currentSign = RT.Math_.sign(_shakeSignal[i].x());
                            break;
                        case 1 /* Y */:
                            currentSign = RT.Math_.sign(_shakeSignal[i].y());
                            break;
                        case 2 /* Z */:
                            currentSign = RT.Math_.sign(_shakeSignal[i].z());
                            break;
                    }
                    if (currentSign == 0) {
                        continue;
                    }
                    if (!prevSign) {
                        prevSign = currentSign;
                    }
                    if (currentSign != prevSign) {
                        ++countSignsChanges;
                    }
                    prevSign = currentSign;
                }
                return countSignsChanges;
            }
        })(ShakeDetector = RT.ShakeDetector || (RT.ShakeDetector = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ShareManager;
        (function (ShareManager) {
            ShareManager.copyToClipboardAsync = function (text) {
                if (window.clipboardData && window.clipboardData.setData) {
                    window.clipboardData.setData('Text', text);
                    return TDev.Promise.as();
                }
                else {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.ModalDialog.showText(text, 'copy to clipboard', 'Copy this text to your clipboard.', function () { return onSuccess(undefined); });
                    });
                }
            };
            ShareManager.sharePictureAsync = function (pic, network, message) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var m = new TDev.ModalDialog();
                    m.onDismiss = function () { return onSuccess(undefined); };
                    m.add(TDev.div('wall-dialog-header', "share picture"));
                    m.add(TDev.div('wall-dialog-body', "Copy this picture or save it on your device."));
                    var canvas = pic.getViewCanvasClone();
                    canvas.style.maxWidth = '100%';
                    canvas.style.maxHeight = '100%';
                    canvas.style.border = 'solid 2px gray';
                    m.addOk('done');
                    m.add(TDev.div('wall-dialog-body', canvas));
                    m.setScroll();
                    m.show();
                });
            };
            ShareManager.facebookLike = function (text, url, fburl) {
                var r = TDev.div('');
                if (TDev.Cloud.isOnline() && !TDev.Browser.isMobile && !TDev.Browser.inCordova && !TDev.Browser.localProxy) {
                    r.innerHTML = TDev.RT.ShareManager.createTwitterTweet(text, url) + "&nbsp;&nbsp;" + TDev.RT.ShareManager.createFacebookLike(fburl || url);
                }
                return r;
            };
            ShareManager.createFacebookLike = function (url) {
                return "<iframe src='//www.facebook.com/plugins/like.php?href=" + encodeURI(url) + "&amp;layout=button_count&amp;show_faces=false&amp;width=100&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light" + "&amp;height=20' scrolling='no' frameborder='0' style='border:none; overflow:hidden; width:80px; height:20px;' allowTransparency='true'></iframe>";
            };
            ShareManager.createTwitterTweet = function (text, url) {
                return "<iframe src='//platform.twitter.com/widgets/tweet_button.html?url=" + encodeURI(url) + "&amp;text=" + encodeURI(text) + "&amp;count=none'style='border:none;overflow:hidden;width:56px;height:20px;' frameBorder='0' scrolling='no' allowTransparency='true'></iframe>";
            };
            ShareManager.shareButtons = function (m, link, options) {
                return [
                    TDev.HTML.mkButton('email', function () {
                        shareOnNetwork(link, "email", options);
                        if (!options.noDismiss)
                            m.dismiss();
                    }),
                    TDev.HTML.mkButton('facebook', function () {
                        shareOnNetwork(link, "facebook-share", options);
                        if (!options.noDismiss)
                            m.dismiss();
                    }),
                    TDev.HTML.mkButton('twitter', function () {
                        shareOnNetwork(link, "twitter", options);
                        if (!options.noDismiss)
                            m.dismiss();
                    })
                ];
            };
            function addShareButtons(m, link, options) {
                if (options === void 0) { options = {}; }
                var buttons = ShareManager.shareButtons(m, link, options);
                var cls = 'wall-dialog-buttons';
                if (options.moreButtons) {
                    cls += ' wall-dialog-buttons-many';
                    options.moreButtons.forEach(function (b) {
                        buttons.push(TDev.HTML.mkButton(b.text, function () {
                            if (!options.noDismiss)
                                m.dismiss();
                            b.handler();
                        }));
                    });
                }
                if (!options.justButtons) {
                    m.add(TDev.div('wall-dialog-header', options.header || "share"));
                    m.add(TDev.div('wall-dialog-body', TDev.tweetify(link.name())));
                    var txtAddress = TDev.HTML.mkTextInput('text', TDev.lf("url"));
                    txtAddress.value = link.address();
                    txtAddress.readOnly = true;
                    txtAddress.style.width = '90%';
                    TDev.Util.selectOnFocus(txtAddress);
                    m.add(TDev.div('wall-dialog-body', txtAddress));
                }
                var d = TDev.div(cls, buttons);
                m.add(d);
                return d;
            }
            ShareManager.addShareButtons = addShareButtons;
            function shareOnNetwork(link, network, options) {
                if (options === void 0) { options = {}; }
                var text = link.name() + " " + link.address();
                var encodedText = encodeURIComponent(text);
                var encodedName = encodeURIComponent(link.name());
                var encodedAddress = encodeURIComponent(link.address());
                function shareEmail() {
                    window.open('mailto:?subject=' + encodedName + '&body=' + encodedAddress);
                }
                function shareTweet() {
                    window.open('https://twitter.com/intent/tweet?text=' + encodedText);
                }
                function shareFacebookLike() {
                    window.open('http://www.facebook.com/plugins/like.php?send=false&layout=standard&width=200&show_faces=false&font&colorscheme=light&action=like&height=35&href=' + encodedAddress);
                }
                function shareFacebook() {
                    window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodedAddress, 'facebook-share-dialog', 'width=626,height=436');
                }
                if (options.tickCallback)
                    options.tickCallback(network);
                switch (RT.String_.trim(network, ' \t').toLowerCase()) {
                    case "email":
                        shareEmail();
                        break;
                    case "facebook":
                        shareFacebookLike();
                        break;
                    case "facebook-share":
                        shareFacebook();
                        break;
                    case "twitter":
                    case "social":
                        shareTweet();
                        break;
                    default: return false;
                }
                return true;
            }
            ShareManager.shareOnNetwork = shareOnNetwork;
            ShareManager.shareSocialAsync = function (provider, text, uri) {
                var encodedText = encodeURIComponent(text || ' ' || uri);
                window.open('https://twitter.com/intent/tweet?text=' + encodedText);
                return TDev.Promise.as();
            };
            function shareLinkAsync(link, network) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    if (shareOnNetwork(link, network))
                        onSuccess(null);
                    else {
                        var m = new TDev.ModalDialog();
                        addShareButtons(m, link);
                        m.onDismiss = function () {
                            onSuccess(null);
                        };
                        m.show();
                    }
                });
            }
            ShareManager.shareLinkAsync = shareLinkAsync;
            function shareTextAsync(text, network) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var encodedText = encodeURIComponent(text);
                    function shareSms() {
                        RT.Social.sendSmsAsync('', text).done();
                    }
                    function shareEmail() {
                        window.open('mailto:?body=' + encodedText);
                    }
                    function shareSocial() {
                        ShareManager.shareSocialAsync(network, text, null).done();
                    }
                    function shareSkype() {
                        window.open("skype:?chat&topic=" + encodedText);
                    }
                    switch (RT.String_.trim(network, ' \t').toLowerCase()) {
                        case "email":
                            shareEmail();
                            onSuccess(null);
                            break;
                        case "twitter":
                        case "social":
                            shareSocial();
                            onSuccess(null);
                            break;
                        case "sms":
                            shareSms();
                            onSuccess(null);
                            break;
                        case "skype":
                            shareSkype();
                            onSuccess(null);
                            break;
                        default:
                            var m = new TDev.ModalDialog();
                            m.add(TDev.div('wall-dialog-header', "share"));
                            m.add(TDev.div('wall-dialog-body', TDev.tweetify(text)));
                            m.add(TDev.div('wall-dialog-body', TDev.HTML.mkButton('email', function () {
                                shareEmail();
                                m.dismiss();
                            }), TDev.HTML.mkButton('sms', function () {
                                shareSms();
                                m.dismiss();
                            }), TDev.HTML.mkButton('Skype', function () {
                                shareSkype();
                                m.dismiss();
                            }), TDev.HTML.mkButton('social', function () {
                                shareSocial();
                                m.dismiss();
                            })));
                            m.onDismiss = function () {
                                onSuccess(null);
                            };
                            m.show();
                            break;
                    }
                });
            }
            ShareManager.shareTextAsync = shareTextAsync;
        })(ShareManager = RT.ShareManager || (RT.ShareManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var PrintManager;
        (function (PrintManager) {
            PrintManager.setPrintable = function (isPrintable) {
            };
        })(PrintManager = RT.PrintManager || (RT.PrintManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var JsonParser = (function () {
            function JsonParser() {
            }
            JsonParser.parse = function (s, log) {
                var index = 0;
                var current = s[0];
                var onerror = function (m) {
                    throw { message: m };
                };
                var cnext = function (expected) {
                    if (expected != current) {
                        onerror(TDev.lf("got `{0}`, but expected `{1}`", current, expected));
                    }
                    current = s[++index];
                    return current;
                };
                var parseNumber = function () {
                    var value;
                    var sofar = "";
                    if (current === "-") {
                        sofar = "-";
                        cnext("-");
                    }
                    while (current >= "0" && current <= "9") {
                        sofar += current;
                        cnext(current);
                    }
                    if (current === ".") {
                        sofar += current;
                        while (cnext(current) && current >= "0" && current <= "9") {
                            sofar += current;
                        }
                    }
                    if (current === "E" || current === "e") {
                        sofar += current;
                        cnext(current);
                        if (current === "-" || current === "+") {
                            sofar += current;
                            cnext(current);
                        }
                        while (current >= "0" && current <= "9") {
                            sofar += current;
                            cnext(current);
                        }
                    }
                    value = +sofar;
                    if (isNaN(value)) {
                        onerror(TDev.lf("not a number"));
                    }
                    return value;
                };
                var getQuoteChar = function () {
                    if (current == '"')
                        return current;
                    if (current == "'")
                        return current;
                    onerror(TDev.lf("missing quote for string"));
                };
                var parseString = function () {
                    var quote = getQuoteChar();
                    var escapedChar = false;
                    var sofar = "";
                    while (cnext(current)) {
                        if (current === "\\") {
                            if (escapedChar) {
                                sofar += '\\';
                                escapedChar = false;
                            }
                            else {
                                escapedChar = true;
                            }
                            continue;
                        }
                        if (escapedChar) {
                            escapedChar = false;
                            if (current === '"' || current === "'" || current === "/") {
                                sofar += current;
                            }
                            else if (current === "b") {
                                sofar += "\b";
                            }
                            else if (current === "f") {
                                sofar += "\f";
                            }
                            else if (current === "n") {
                                sofar += "\n";
                            }
                            else if (current === "r") {
                                sofar += "\r";
                            }
                            else if (current === "t") {
                                sofar += "\t";
                            }
                            else if (current === "u") {
                                var value = 0;
                                for (var i = 0; i < 4; i++) {
                                    var digit = parseInt(cnext(current), 16);
                                    if (!isFinite(digit)) {
                                        break;
                                    }
                                    value = value * 16 + digit;
                                }
                                sofar += String.fromCharCode(value);
                            }
                            else {
                                onerror(TDev.lf("bad escaped char: {0}", current));
                            }
                        }
                        else {
                            if (current === quote) {
                                cnext(quote);
                                return sofar;
                            }
                            sofar += current;
                        }
                    }
                    onerror(TDev.lf("non-terminated string"));
                };
                var skipWhiteSpace = function () {
                    while (current && current <= " ") {
                        cnext(current);
                    }
                };
                var parsePrimitiveToken = function () {
                    var sofar = "";
                    while (current) {
                        if (current >= "0" && current <= "9" || current >= "a" && current <= "z" || current >= "A" && current <= "Z" || current === "." || current === "-" || current === "_" || current === "+") {
                            sofar += current;
                            cnext(current);
                        }
                        else {
                            break;
                        }
                    }
                    return sofar;
                };
                var parsePrimitive = function () {
                    switch (current) {
                        case 't':
                            cnext("t");
                            cnext("r");
                            cnext("u");
                            cnext("e");
                            return true;
                        case 'f':
                            cnext("f");
                            cnext("a");
                            cnext("l");
                            cnext("s");
                            cnext("e");
                            return false;
                        case 'n':
                            cnext("n");
                            cnext("u");
                            cnext("l");
                            cnext("l");
                            return null;
                    }
                    onerror("expected true, false, or null at \n" + "      " + s.slice(Math.max(0, index - 20), index) + "\n" + " ---->" + s.slice(index + 1, Math.min(s.length, index + 20)));
                };
                var parseArray = function () {
                    var result = [];
                    cnext('[');
                    skipWhiteSpace();
                    if (current === ']') {
                        cnext(']');
                        return result;
                    }
                    while (current) {
                        result.push(parseValue());
                        skipWhiteSpace();
                        if (current === ']') {
                            cnext(']');
                            return result;
                        }
                        cnext(",");
                        skipWhiteSpace();
                    }
                    onerror(TDev.lf("incomplete array"));
                    return result;
                };
                var parseValue = function () {
                    skipWhiteSpace();
                    switch (current) {
                        case '{': return parseObject();
                        case '[': return parseArray();
                        case '"':
                        case "'":
                            return parseString();
                        case '-':
                            return parseNumber();
                        default:
                            if (current >= '0' && current <= '9')
                                return parseNumber();
                            else
                                return parsePrimitive();
                    }
                };
                var parseObject = function () {
                    var result = {};
                    cnext("{");
                    skipWhiteSpace();
                    if (current === "}") {
                        cnext("}");
                        return result;
                    }
                    var key;
                    while (current) {
                        if (current === "'" || current === '"') {
                            key = parseString();
                        }
                        else {
                            key = parsePrimitiveToken();
                        }
                        if (key === null || key === undefined) {
                            onerror(TDev.lf("bad key"));
                        }
                        skipWhiteSpace();
                        cnext(":");
                        result[key] = parseValue();
                        skipWhiteSpace();
                        if (current === "}") {
                            cnext("}");
                            return result;
                        }
                        cnext(",");
                        skipWhiteSpace();
                    }
                    onerror(TDev.lf("incomplete object"));
                };
                try {
                    return RT.JsonObject.wrap(JSON.parse(s));
                }
                catch (e) {
                    try {
                        var value = parseValue();
                        skipWhiteSpace();
                        if (current) {
                            onerror(TDev.lf("illegal json value"));
                        }
                        var js = RT.JsonObject.wrap(value);
                        return js;
                    }
                    catch (e) {
                        if (log)
                            log(TDev.lf("error parsing json {0} {1}", s, e.message));
                        return undefined;
                    }
                }
            };
            return JsonParser;
        })();
        RT.JsonParser = JsonParser;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var UserMediaManager;
        (function (UserMediaManager) {
            var _initialized = false;
            function init() {
                if (!_initialized) {
                    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
                    window.URL = window.URL || window.webkitURL;
                    _initialized = true;
                }
            }
            function isSupported() {
                init();
                return !!(navigator.getUserMedia);
            }
            UserMediaManager.isSupported = isSupported;
            function getMicrophoneStreamAsync() {
                if (!isSupported())
                    return TDev.Promise.as(undefined);
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        navigator.getUserMedia({ audio: true }, function (localMediaStream) {
                            onSuccess(localMediaStream);
                        }, function (e) {
                            RT.Time.log('microphone access failed, ' + e.message);
                            onSuccess(undefined);
                        });
                    }
                    catch (e) {
                        RT.Time.log('microphone access failed, ' + e.message);
                        onError(undefined);
                    }
                });
            }
            UserMediaManager.getMicrophoneStreamAsync = getMicrophoneStreamAsync;
            function getCameraUrlAsync(front, sourceId) {
                if (front === void 0) { front = false; }
                if (sourceId === void 0) { sourceId = undefined; }
                if (!isSupported())
                    return TDev.Promise.as(undefined);
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    try {
                        var constraints = {
                            video: {
                                optional: []
                            }
                        };
                        constraints.video.optional.push({ facingMode: front ? "user" : "environment" });
                        if (sourceId)
                            constraints.video.optional.push({ sourceId: sourceId });
                        navigator.getUserMedia(constraints, function (localMediaStream) {
                            var url = window.URL.createObjectURL(localMediaStream);
                            onSuccess(url);
                        }, function (e) {
                            RT.Time.log('camera access failed, ' + e.message);
                            onSuccess(undefined);
                        });
                    }
                    catch (e) {
                        RT.Time.log('camera access failed, ' + e.message);
                        onError(undefined);
                    }
                });
            }
            UserMediaManager.getCameraUrlAsync = getCameraUrlAsync;
            function previewVideo(v) {
                var canvas = TDev.createElement('canvas');
                canvas.width = v.clientWidth;
                canvas.height = v.clientHeight;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(v, 0, 0);
                var picurl = canvas.toDataURL('image/jpeg');
                return picurl;
            }
            UserMediaManager.previewVideo = previewVideo;
        })(UserMediaManager = RT.UserMediaManager || (RT.UserMediaManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Charts;
        (function (Charts) {
            var Point = (function () {
                function Point(x, y) {
                    this.x = x;
                    this.y = y;
                }
                return Point;
            })();
            Charts.Point = Point;
            var CanvasChart = (function () {
                function CanvasChart() {
                    this.lineColor = "#f00";
                    this.gridColor = "#ccc";
                    this.backgroundColor = undefined;
                    this.axesColor = "#fff";
                    this.gridLineWidth = 1;
                    this.graphLineWidth = 2;
                    this.axesFontSize = 6;
                    this.gridRows = 11;
                    this.gridCols = 11;
                    this.area = true;
                    this.axesPaddingX = 20;
                    this.axesPaddingY = 30;
                }
                CanvasChart.prototype.drawChart = function (canvas, points) {
                    this.initialize(canvas, points);
                    if (this.points.length < 2)
                        return;
                    this.points.sort(function (left, right) {
                        if (left.x > right.x) {
                            return 1;
                        }
                        if (left.x < right.x) {
                            return -1;
                        }
                        return 0;
                    });
                    this.calculateScale();
                    this.drawAxes();
                    this.drawChartGrid();
                    this.drawGraphPoints();
                };
                CanvasChart.prototype.initialize = function (canvas, points) {
                    this.canvas = canvas;
                    this.context = this.canvas.getContext("2d");
                    this.points = points;
                    this.chartWidth = canvas.width - this.axesPaddingY;
                    this.chartHeight = canvas.height - this.axesPaddingX;
                    this.context.save();
                    this.context.clearRect(0, 0, canvas.width, canvas.height);
                };
                CanvasChart.prototype.drawChartGrid = function () {
                    if (this.backgroundColor) {
                        this.context.save();
                        this.context.fillStyle = this.backgroundColor;
                        this.context.fillRect(0, 0, this.chartWidth, this.chartHeight);
                        this.context.restore();
                    }
                    this.context.save();
                    this.context.strokeStyle = this.gridColor;
                    this.context.lineWidth = this.gridLineWidth;
                    this.context.strokeRect(0, 0, this.chartWidth, this.chartHeight);
                    var tipLength = 5;
                    for (var i = 0; i < this.gridCols; i++) {
                        this.context.beginPath();
                        this.context.moveTo(i * this.gridWidth, this.chartHeight);
                        this.context.lineTo(i * this.gridWidth, this.chartHeight - tipLength);
                        this.context.stroke();
                        this.context.beginPath();
                        this.context.moveTo(i * this.gridWidth, 0);
                        this.context.lineTo(i * this.gridWidth, tipLength);
                        this.context.stroke();
                    }
                    for (var i = 0; i < this.gridRows; i++) {
                        this.context.beginPath();
                        this.context.moveTo(0, i * this.gridHeight);
                        this.context.lineTo(tipLength, i * this.gridHeight);
                        this.context.stroke();
                        this.context.beginPath();
                        this.context.moveTo(this.chartWidth, i * this.gridHeight);
                        this.context.lineTo(this.chartWidth - tipLength, i * this.gridHeight);
                        this.context.stroke();
                    }
                    this.context.restore();
                };
                CanvasChart.prototype.drawAxes = function () {
                    this.context.save();
                    var xRange = this.scaleXMax - this.scaleXMin;
                    var yRange = this.scaleYMax - this.scaleYMin;
                    var xUnit = xRange / this.gridCols;
                    var yUnit = yRange / this.gridRows;
                    this.context.fillStyle = this.axesColor;
                    this.context.font = this.axesFontSize + "pt Arial";
                    var text = '';
                    for (var i = 0; i <= this.gridRows; i++) {
                        text = RT.Math_.round_with_precision(this.scaleYMax - (i * yUnit), 2).toString();
                        var y = i * this.gridHeight + this.axesFontSize / 2;
                        if (i === this.gridRows)
                            y -= this.axesFontSize / 2;
                        else if (i === 0)
                            y += this.axesFontSize / 2;
                        this.context.fillText(text, this.chartWidth + 5, y);
                    }
                    for (i = 0; i <= this.gridCols; i++) {
                        text = RT.Math_.round_with_precision(this.scaleXMin + (i * xUnit), 2).toString();
                        this.context.fillText(text, i * this.gridWidth, this.chartHeight + (this.axesPaddingX - this.axesFontSize));
                    }
                    this.context.restore();
                };
                CanvasChart.prototype.calculateScale = function () {
                    this.scaleXMin = this.points[0].x;
                    this.scaleXMax = this.points[0].x;
                    this.scaleYMax = this.points[0].y;
                    this.scaleYMin = this.points[0].y;
                    for (var j = 0, len2 = this.points.length; j < len2; j++) {
                        if (this.scaleXMax < this.points[j].x) {
                            this.scaleXMax = this.points[j].x;
                        }
                        if (this.scaleYMax < this.points[j].y) {
                            this.scaleYMax = this.points[j].y;
                        }
                        if (this.scaleXMin > this.points[j].x) {
                            this.scaleXMin = this.points[j].x;
                        }
                        if (this.scaleYMin > this.points[j].y) {
                            this.scaleYMin = this.points[j].y;
                        }
                    }
                    var rx = CanvasChart.generateSteps(this.scaleXMin, this.scaleXMax, this.gridCols);
                    this.scaleXMin = rx[0];
                    this.scaleXMax = rx[1];
                    this.gridCols = rx[2];
                    var ry = CanvasChart.generateSteps(this.scaleYMin, this.scaleYMax, this.gridRows);
                    this.scaleYMin = ry[0];
                    this.scaleYMax = ry[1];
                    this.gridRows = ry[2];
                    if (this.scaleXMin === this.scaleXMax) {
                        this.scaleXMin = 0.5;
                        this.scaleXMax = 0.5;
                    }
                    if (this.scaleYMin === this.scaleYMax) {
                        this.scaleYMin = 0.5;
                        this.scaleYMax = 0.5;
                    }
                    this.gridWidth = this.chartWidth / this.gridCols;
                    this.gridHeight = this.chartHeight / this.gridRows;
                };
                CanvasChart.generateSteps = function (start, end, numberOfTicks) {
                    var bases = [1, 5, 2, 3];
                    var currentBase;
                    var n;
                    var intervalSize, upperBound, lowerBound;
                    var nIntervals, nMaxIntervals;
                    var the_intervalsize = 0.1;
                    var exponentYmax = Math.floor(Math.max(RT.Math_.log10(Math.abs(start)), RT.Math_.log10(Math.abs(end))));
                    var mantissaYmax = end / Math.pow(10.0, exponentYmax);
                    var significative_numbers = Math.min(3, Math.abs(exponentYmax) + 1);
                    var expo = Math.pow(10.0, significative_numbers);
                    var start_norm = Math.abs(start) * expo;
                    var end_norm = Math.abs(end) * expo;
                    var mant_norm = Math.abs(mantissaYmax) * expo;
                    var ip_start, ip_end;
                    var start = ip_start = Math.floor(start_norm * RT.Math_.sign(start));
                    var end = ip_end = Math.ceil(end_norm * RT.Math_.sign(end));
                    mantissaYmax = Math.ceil(mant_norm);
                    nMaxIntervals = 0;
                    for (var k = 0; k < bases.length; ++k) {
                        currentBase = bases[k];
                        n = 4;
                        do {
                            --n;
                            intervalSize = currentBase * Math.pow(10.0, exponentYmax - n);
                            upperBound = Math.ceil(mantissaYmax * Math.pow(10.0, n) / currentBase) * intervalSize;
                            nIntervals = Math.ceil((upperBound - start) / intervalSize);
                            lowerBound = upperBound - nIntervals * intervalSize;
                        } while (nIntervals > numberOfTicks);
                        if (nIntervals > nMaxIntervals) {
                            nMaxIntervals = nIntervals;
                            ip_start = ip_start = lowerBound;
                            ip_end = upperBound;
                            the_intervalsize = intervalSize;
                        }
                    }
                    if (start < 0)
                        start = Math.floor(ip_start) / expo;
                    else
                        start = Math.ceil(ip_start) / expo;
                    if (end < 0)
                        end = Math.floor(ip_end) / expo;
                    else
                        end = Math.ceil(ip_end) / expo;
                    return [start, end, nMaxIntervals];
                };
                CanvasChart.prototype.drawGraphPoints = function () {
                    var _this = this;
                    this.context.save();
                    var xRange = this.scaleXMax - this.scaleXMin;
                    var yRange = this.scaleYMax - this.scaleYMin;
                    var xFactor = this.chartWidth / xRange;
                    var yFactor = this.chartHeight / yRange;
                    var draw = function (close) {
                        var nextX = (_this.points[0].x - _this.scaleXMin) * xFactor;
                        var nextY = (_this.points[0].y - _this.scaleYMin) * yFactor;
                        var startX = nextX;
                        var startY = nextY;
                        _this.context.moveTo(nextX, _this.chartHeight - nextY);
                        for (var i = 1, len = _this.points.length; i < len; i++) {
                            nextX = (_this.points[i].x - _this.scaleXMin) * xFactor, nextY = (_this.points[i].y - _this.scaleYMin) * yFactor;
                            _this.context.lineTo(nextX, (_this.chartHeight - nextY));
                        }
                        if (close) {
                            _this.context.lineTo(nextX, _this.chartHeight);
                            _this.context.lineTo(startX, _this.chartHeight);
                            _this.context.closePath();
                        }
                    };
                    this.context.miterLimit = this.graphLineWidth / 4;
                    this.context.strokeStyle = this.lineColor;
                    this.context.lineWidth = this.graphLineWidth;
                    if (this.area) {
                        this.context.fillStyle = this.lineColor;
                        this.context.globalAlpha = 0.3;
                        this.context.beginPath();
                        draw(true);
                        this.context.fill();
                        this.context.globalAlpha = 1;
                    }
                    this.context.beginPath();
                    draw(false);
                    this.context.stroke();
                    this.context.restore();
                };
                return CanvasChart;
            })();
            Charts.CanvasChart = CanvasChart;
        })(Charts = RT.Charts || (RT.Charts = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ApiManager;
        (function (ApiManager) {
            ApiManager.bingMapsKey;
            ApiManager.bingSearchKey;
            ApiManager.microsoftTranslatorKey;
            ApiManager.microsoftTranslatorClientId;
            ApiManager.microsoftTranslatorClientSecret;
            ApiManager.liveConnectClientId;
            ApiManager.liveConnectRedirectDomainId;
            ApiManager.liveConnectUserId;
            ApiManager.projectHawaiiKey;
            ApiManager.pubCenterApplicationId;
            ApiManager.pubCenterAdUnitId;
            ApiManager.keys = {};
            function addKey(url, value) {
                ApiManager.keys[url] = value;
            }
            ApiManager.addKey = addKey;
            ApiManager.getKeyAsync = function (url) {
                var v = ApiManager.keys[url];
                if (v)
                    return TDev.Promise.as(v);
                return TDev.Cloud.getPrivateApiAsync("me/keys?uri=" + encodeURIComponent(url)).then(function (k) {
                    if (k.value === null)
                        return undefined;
                    return k.value;
                }, function (e) { return null; });
            };
        })(ApiManager = RT.ApiManager || (RT.ApiManager = {}));
        var AzureMarketplace;
        (function (AzureMarketplace) {
            var tokens = {};
            function requestAccessTokenAsync(clientId, clientSecret, scope, grantType) {
                var form = 'grant_type=' + encodeURIComponent(grantType) + '&client_id=' + encodeURIComponent(clientId) + '&client_secret=' + encodeURIComponent(clientSecret) + '&scope=' + encodeURIComponent(scope);
                var token = tokens[form];
                if (token && token.expires < Date.now()) {
                    return TDev.Promise.as(token.accessToken);
                }
                var url = 'https://datamarket.accesscontrol.windows.net/v2/OAuth2-13';
                var request = RT.Web.create_request(url);
                request.set_content(form);
                request.set_content_type('application/x-www-form-urlencoded');
                request.set_method('POST');
                return request.sendAsync().then(function (response) {
                    var json = response.content_as_json();
                    if (json) {
                        var expires = Date.now() + RT.String_.to_number(json.string('expires_in')) - 10;
                        var accessToken = json.string('access_token');
                        tokens[form] = { accessToken: accessToken, expires: expires };
                        return accessToken;
                    }
                    return null;
                });
            }
            AzureMarketplace.requestAccessTokenAsync = requestAccessTokenAsync;
        })(AzureMarketplace = RT.AzureMarketplace || (RT.AzureMarketplace = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var AdManager;
        (function (AdManager) {
            AdManager.initialize = function (el) {
                el.setChildren([TDev.HTML.mkA('', TDev.Cloud.getServiceUrl() + '/help/advertisement', '_blank', 'Learn how to display Ads in your apps!')]);
            };
        })(AdManager = RT.AdManager || (RT.AdManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Matrix = (function (_super) {
            __extends(Matrix, _super);
            function Matrix() {
                _super.apply(this, arguments);
                this.data = [];
                this.rowCount = 0;
                this.columnCount = 0;
            }
            Matrix.mk = function (rowCount, columnCount) {
                if (rowCount < 0 || isNaN(rowCount))
                    return null;
                if (columnCount < 0 || isNaN(columnCount))
                    return null;
                var irow = Math.floor(rowCount);
                if (irow < 0)
                    return null;
                var icolumn = Math.floor(columnCount);
                if (icolumn < 0)
                    return null;
                if (irow * icolumn < 0)
                    return null;
                var m = new Matrix();
                m.rowCount = irow;
                m.columnCount = icolumn;
                m.data = new Array(irow * icolumn);
                m.clear(0);
                return m;
            };
            Matrix.prototype.index = function (i, j) {
                return this.columnCount * Math.floor(i) + Math.floor(j);
            };
            Matrix.prototype.toString = function () {
                var r = ["["];
                for (var i = 0; i < this.rowCount; i++) {
                    if (i > 0)
                        r.push("\n");
                    for (var j = 0; j < this.columnCount; j++) {
                        if (j > 0)
                            r.push(", ");
                        r.push(this.data[this.index(i, j)].toString());
                    }
                }
                r.push("]");
                return r.join("");
            };
            Matrix.prototype.get_enumerator = function () {
                return this.data.slice(0);
            };
            Matrix.prototype.count = function () {
                return this.rowCount * this.columnCount;
            };
            Matrix.prototype.row_count = function () {
                return this.rowCount;
            };
            Matrix.prototype.column_count = function () {
                return this.columnCount;
            };
            Matrix.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            Matrix.prototype.getViewCore = function (s, b) {
                var d = TDev.div("item");
                for (var i = 0; i < this.rowCount; i++) {
                    var r = i == 0 ? "[" : "";
                    for (var j = 0; j < this.columnCount; j++) {
                        if (j > 0)
                            r += ", ";
                        r += this.data[this.index(i, j)];
                    }
                    if (i == this.rowCount - 1)
                        r += "]";
                    d.appendChild(TDev.div(null, r));
                }
                return d;
            };
            Matrix.prototype.copy_from = function (row, column, other) {
                row = Math.floor(row);
                column = Math.floor(column);
                for (var i = 0; i < other.rowCount; ++i) {
                    for (var j = 0; j < other.columnCount; ++j) {
                        this.data[this.index(row + i, column + j)] = other.data[other.index(i, j)];
                    }
                }
            };
            Matrix.prototype.at = function (index) {
                return this.data[Math.floor(index)];
            };
            Matrix.prototype.set_at = function (index, value) {
                var _index = Math.floor(index);
                if (0 <= _index && index < this.data.length)
                    this.data[_index] = value;
            };
            Matrix.prototype.item = function (row, column) {
                return this.at(this.index(row, column));
            };
            Matrix.prototype.set_item = function (row, column, value) {
                this.set_at(this.index(row, column), value);
            };
            Matrix.prototype.clone = function () {
                var m = new Matrix();
                m.rowCount = this.rowCount;
                m.columnCount = this.columnCount;
                m.data = this.data.slice(0);
                return m;
            };
            Matrix.prototype.min = function () {
                if (this.data.length == 0)
                    return undefined;
                var r = this.data[0];
                for (var i = 1; i < this.data.length; ++i)
                    r = this.data[i] < r ? this.data[i] : r;
                return r;
            };
            Matrix.prototype.max = function () {
                if (this.data.length == 0)
                    return undefined;
                var r = this.data[0];
                for (var i = 1; i < this.data.length; ++i)
                    r = this.data[i] > r ? this.data[i] : r;
                return r;
            };
            Matrix.prototype.scale = function (factor) {
                var m = Matrix.mk(this.rowCount, this.columnCount);
                for (var i = 0; i < this.data.length; ++i)
                    m.data[i] = this.data[i] * factor;
                return m;
            };
            Matrix.prototype.negate = function () {
                var m = Matrix.mk(this.rowCount, this.columnCount);
                for (var i = 0; i < this.data.length; ++i)
                    m.data[i] = -this.data[i];
                return m;
            };
            Matrix.prototype.transpose = function () {
                var m = Matrix.mk(this.columnCount, this.rowCount);
                for (var i = 0; i < this.rowCount; ++i)
                    for (var j = 0; j < this.columnCount; ++j)
                        m.data[m.index(j, i)] = this.data[this.index(i, j)];
                return m;
            };
            Matrix.prototype.add = function (b) {
                if (this.rowCount != b.rowCount || this.columnCount != b.columnCount) {
                    RT.Time.log("matrix add error: incompatible matrix sizes");
                    return undefined;
                }
                var m = Matrix.mk(this.rowCount, this.columnCount);
                for (var i = 0; i < this.data.length; ++i)
                    m.data[i] = this.data[i] + b.data[i];
                return m;
            };
            Matrix.prototype.subtract = function (b) {
                if (this.rowCount != b.rowCount || this.columnCount != b.columnCount) {
                    RT.Time.log("matrix subtract error: incompatible matrix sizes");
                    return undefined;
                }
                var m = Matrix.mk(this.rowCount, this.columnCount);
                for (var i = 0; i < this.data.length; ++i)
                    m.data[i] = this.data[i] - b.data[i];
                return m;
            };
            Matrix.prototype.multiply = function (b) {
                if (this.columnCount != b.rowCount) {
                    RT.Time.log("matrix multiply error: incompatible matrix sizes");
                    return undefined;
                }
                var r = Matrix.mk(this.rowCount, b.columnCount);
                var m = this.rowCount;
                var n = this.columnCount;
                var p = b.columnCount;
                for (var i = 0; i < m; i++)
                    for (var j = 0; j < n; j++)
                        for (var k = 0; k < p; k++)
                            r.data[r.index(i, k)] += this.data[this.index(i, j)] * b.data[b.index(j, k)];
                return r;
            };
            Matrix.prototype.to_string = function () {
                return this.toString();
            };
            Matrix.prototype.random = function () {
                return this.data.length == 0 ? undefined : this.at(RT.Math_.random(this.data.length));
            };
            Matrix.prototype.clear = function (value) {
                for (var i = 0; i < this.data.length; ++i)
                    this.data[i] = value;
            };
            Matrix.prototype.debuggerDisplay = function (clickHandler) {
                var container = TDev.div(null).withClick(clickHandler);
                var tableVar;
                var tableDataCell;
                var tableRow;
                tableVar = document.createElement("table").withClick(clickHandler);
                for (var i = 0; i < this.rowCount; ++i) {
                    tableRow = TDev.createElement("tr");
                    for (var j = 0; j < this.columnCount; ++j) {
                        tableDataCell = document.createElement("td").withClick(clickHandler);
                        tableDataCell.innerText = this.data[this.index(i, j)].toString();
                        tableDataCell.style.padding = "0.5em";
                        tableRow.appendChild(tableDataCell);
                    }
                    tableVar.appendChild(tableRow);
                }
                container.appendChild(tableVar);
                return container;
            };
            return Matrix;
        })(RT.RTValue);
        RT.Matrix = Matrix;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ArtCache;
        (function (ArtCache) {
            ArtCache.runningTests = false;
            function log(s) {
                TDev.Util.log("ArtCache: " + s);
            }
            var getArtCacheTableAsync = function () { return TDev.Storage.getTableAsync("ArtCache"); };
            ArtCache.getMaxItems = function () {
                return TDev.Browser.lowMemory ? 0 : TDev.Browser.isMobile ? 25 : 150;
            };
            ArtCache.getMaxItemSize = function () {
                return TDev.Browser.isMobile ? 500000 : 10000000;
            };
            var itemsToDownload = 0;
            var itemsDownloaded = 0;
            function resetProgress() {
                itemsToDownload = 0;
                itemsDownloaded = 0;
            }
            ArtCache.resetProgress = resetProgress;
            ArtCache.isArtResource = function (url) {
                return /^https:\/\/az31353\.vo\.msecnd\.net\/pub\//i.test(url) || /^http:\/\/cdn.touchdevelop.com\/pub\//i.test(url);
            };
            function responseToDataUrl(response) {
                if (typeof response.content() == "string") {
                    return "data:text/plain;base64," + TDev.Util.base64Encode(TDev.Util.toUTF8(response.content()));
                }
                var bytes = response.contentAsArraybuffer();
                if (!bytes)
                    return null;
                var contentType = response.header('Content-Type');
                if (!contentType) {
                    TDev.Util.log('art cache: missing Content-Type');
                    return null;
                }
                if (bytes.length > ArtCache.getMaxItemSize()) {
                    TDev.Util.log('art cache: item too big ' + (bytes.length / 1e6).toFixed(1) + 'Mb');
                    return "data:none";
                }
                var encoded = TDev.Util.base64EncodeBytes(bytes);
                return "data:" + contentType + ";base64," + encoded;
            }
            ArtCache.responseToDataUrl = responseToDataUrl;
            function snapshotCacheAsync(storage) {
                return getArtCacheTableAsync().then(function (table) { return table.getKeysAsync().then(function (keys) { return table.getItemsAsync(keys).then(function (v) {
                    storage.artCache = v;
                }); }); });
            }
            ArtCache.snapshotCacheAsync = snapshotCacheAsync;
            function restoreCacheAsync(storage) {
                if (!storage.artCache)
                    return TDev.Promise.as();
                return getArtCacheTableAsync().then(function (table) { return table.getKeysAsync().then(function (keys) {
                    var toSet = storage.artCache;
                    keys.forEach(function (k) {
                        if (!toSet.hasOwnProperty(k))
                            toSet[k] = null;
                    });
                    return table.setItemsAsync(toSet);
                }); });
            }
            ArtCache.restoreCacheAsync = restoreCacheAsync;
            function getArtAsync(url, accept) {
                if (accept === void 0) { accept = "*"; }
                if (!ArtCache.getMaxItems())
                    return null;
                if (!url || !/^https?:\/\//.test(url)) {
                    TDev.Util.log('art cache: must be absolute url');
                    return TDev.Promise.as(null);
                }
                url = TDev.HTML.proxyResource(url);
                var id = url;
                var art = null;
                var table = null;
                return getArtCacheTableAsync().then(function (t) {
                    table = t;
                    return table.getValueAsync(id);
                }).then(function (value) {
                    if (typeof value === "string") {
                        log("art cache: hit " + id);
                        if (value == "data:none") {
                            log("art cache: hit on art too big, streaming " + id);
                            return null;
                        }
                        return value;
                    }
                    log("art cache: miss " + id);
                    var rt = TDev.Runtime.theRuntime;
                    itemsToDownload++;
                    if (!TDev.Cloud.isOnline()) {
                        TDev.Util.log('art cache: no internet');
                        return null;
                    }
                    var request = TDev.RT.WebRequest.mk(url, null);
                    if (accept)
                        request.set_header("Accept", accept);
                    request.show_notifications(false);
                    return request.sendAsync().then(function (response) {
                        itemsDownloaded++;
                        if (!ArtCache.runningTests)
                            TDev.ProgressOverlay.setProgress(TDev.Util.fmt("{0} of {1} done", itemsDownloaded, itemsToDownload));
                        art = responseToDataUrl(response);
                        if (!art) {
                            TDev.Util.log('art cache: request failed ' + id);
                            return null;
                        }
                        return table.getValueAsync("arttable:keys").then(function (k) {
                            if (!k)
                                k = "";
                            var keys = k.split(';');
                            var items = {};
                            items[id] = art;
                            var ii = keys.indexOf(id);
                            if (ii > -1) {
                                keys[ii] = null;
                                keys = keys.filter(function (kk) { return !!kk; });
                            }
                            var maxKeys = ArtCache.getMaxItems();
                            while (keys.length > maxKeys) {
                                items[keys[0]] = null;
                                keys.shift();
                                log("art cache: drop " + id);
                            }
                            keys.push(id);
                            items["arttable:keys"] = keys.join(';');
                            return table.setItemsAsync(items);
                        }).then(function () { return art; });
                    });
                });
            }
            ArtCache.getArtAsync = getArtAsync;
        })(ArtCache = RT.ArtCache || (RT.ArtCache = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var OAuthResponse = (function (_super) {
            __extends(OAuthResponse, _super);
            function OAuthResponse() {
                _super.apply(this, arguments);
            }
            OAuthResponse.prototype.exportJson = function (ctx) {
                return {
                    time: this._time && this._time.exportJson(ctx),
                    accessToken: this._accessToken,
                    expiresIn: this._expiresIn,
                    scope: this._scope,
                    error: this._error,
                    errorDescription: this._errorDescription,
                    errorUri: this._errorUri,
                    others: this._others && this._others.exportJson(ctx),
                };
            };
            OAuthResponse.prototype.importJson = function (ctx, json) {
                if (typeof json != "object")
                    json = undefined;
                this._time = ctx.importDateTime(json, "time");
                this._accessToken = ctx.importString(json, "accessToken");
                this._expiresIn = ctx.importNumber(json, "expiresIn");
                this._scope = ctx.importString(json, "scope");
                this._error = ctx.importString(json, "error");
                this._errorDescription = ctx.importString(json, "errorDescription");
                this._errorUri = ctx.importString(json, "errorUri");
                this._others = ctx.importStringMap(json, this._others, "others");
                return this;
            };
            OAuthResponse.parseJSON = function (json) {
                var accessToken;
                var expiresIn = 0;
                var scope;
                var isError = false;
                var error;
                var errorDescription;
                var errorUri;
                var others = RT.Collections.create_string_map();
                var keys = json.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var key = keys.at(i);
                    var value = json.at(i);
                    switch (key) {
                        case "access_token":
                            accessToken = value.to_string();
                            break;
                        case "expires_in":
                            expiresIn = Math.floor(value.to_number() || -1);
                            break;
                        case "scope":
                            scope = value.to_string();
                            break;
                        case "error":
                            error = value.to_string();
                            isError = true;
                            break;
                        case "error_description":
                            errorDescription = value.to_string();
                            break;
                        case "error_uri":
                            errorUri = value.to_string();
                            break;
                        case "state": break;
                        default:
                            others.set_at(key, value.to_string());
                            break;
                    }
                }
                if (!accessToken && !isError)
                    return undefined;
                else if (accessToken && !isError)
                    return OAuthResponse.mkAccessToken(accessToken, expiresIn, scope, others);
                else
                    return OAuthResponse.mkError(error, errorDescription, errorUri, others);
            };
            OAuthResponse.parse = function (redirect_url) {
                var queryIndex = redirect_url.indexOf('?');
                var markerIndex = redirect_url.indexOf('#', queryIndex + 1);
                if (queryIndex < 0 && markerIndex < 0)
                    return undefined;
                var query = queryIndex < 0 ? "" : redirect_url.substring(queryIndex + 1, markerIndex < 0 ? redirect_url.length : markerIndex);
                var marker = markerIndex < 0 ? "" : redirect_url.substring(markerIndex + 1);
                var args = query.split('&').concat(marker.split('&'));
                var accessToken;
                var expiresIn = 0;
                var scope;
                var isError = false;
                var error;
                var errorDescription;
                var errorUri;
                var others = RT.Collections.create_string_map();
                args.forEach(function (arg) {
                    var ei = arg.indexOf('=');
                    if (ei > -1) {
                        var key = RT.Web.url_decode(arg.substring(0, ei));
                        var value = RT.Web.url_decode(arg.substring(ei + 1));
                        switch (key) {
                            case "access_token":
                                accessToken = value;
                                break;
                            case "expires_in":
                                expiresIn = parseInt(value) || -1;
                                break;
                            case "scope":
                                scope = value;
                                break;
                            case "error":
                                error = value;
                                isError = true;
                                break;
                            case "error_description":
                                errorDescription = value;
                                break;
                            case "error_uri":
                                errorUri = value;
                                break;
                            case "state": break;
                            default:
                                others.set_at(key, value);
                                break;
                        }
                    }
                });
                if (!accessToken && !isError)
                    return undefined;
                else if (accessToken && !isError)
                    return OAuthResponse.mkAccessToken(accessToken, expiresIn, scope, others);
                else
                    return OAuthResponse.mkError(error, errorDescription, errorUri, others);
            };
            OAuthResponse.mkAccessToken = function (accessToken, expiresIn, scope, others) {
                if (others === void 0) { others = null; }
                var r = new OAuthResponse();
                r._time = RT.Time.now();
                r._accessToken = accessToken;
                r._expiresIn = expiresIn || 0;
                r._scope = scope;
                r._others = others;
                return r;
            };
            OAuthResponse.mkError = function (error, errorDescription, errorUri, others) {
                if (others === void 0) { others = null; }
                var r = new OAuthResponse();
                r._time = RT.Time.now();
                r._error = error;
                r._errorDescription = errorDescription;
                r._errorUri = errorUri;
                r._others = others;
                return r;
            };
            OAuthResponse.prototype.toString = function () {
                var s;
                if (this._error)
                    s = this._error + ", " + (this._errorDescription || "no description") + ", " + (this._errorUri || "no error uri");
                else
                    s = this._accessToken + ", " + this._expiresIn + ", " + (this._scope || "no scope");
                if (this._others)
                    s += " ," + this._others.toString();
                return s;
            };
            OAuthResponse.prototype.access_token = function () {
                return this._accessToken;
            };
            OAuthResponse.prototype.expires_in = function () {
                return this._expiresIn;
            };
            OAuthResponse.prototype.scope = function () {
                return this._scope;
            };
            OAuthResponse.prototype.error = function () {
                return this._error;
            };
            OAuthResponse.prototype.error_description = function () {
                return this._errorDescription;
            };
            OAuthResponse.prototype.error_uri = function () {
                return this._errorUri;
            };
            OAuthResponse.prototype.others = function () {
                if (!this._others)
                    this._others = RT.Collections.create_string_map();
                return this._others;
            };
            OAuthResponse.prototype.is_expiring = function (seconds) {
                if (this.is_error())
                    return true;
                return this._expiresIn > 0 && this._time.add_seconds(this._expiresIn + Math.max(0, seconds)).less(RT.Time.now());
            };
            OAuthResponse.prototype.is_error = function () {
                return !this._accessToken;
            };
            OAuthResponse.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return OAuthResponse;
        })(RT.RTValue);
        RT.OAuthResponse = OAuthResponse;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Action = (function (_super) {
            __extends(Action, _super);
            function Action() {
                _super.apply(this, arguments);
            }
            Action.prototype.run = function () {
            };
            return Action;
        })(RT.ActionBase);
        RT.Action = Action;
        var TextAction = (function (_super) {
            __extends(TextAction, _super);
            function TextAction() {
                _super.apply(this, arguments);
            }
            TextAction.prototype.run = function (text) {
            };
            return TextAction;
        })(RT.ActionBase);
        RT.TextAction = TextAction;
        var NumberAction = (function (_super) {
            __extends(NumberAction, _super);
            function NumberAction() {
                _super.apply(this, arguments);
            }
            NumberAction.prototype.run = function (x) {
            };
            return NumberAction;
        })(RT.ActionBase);
        RT.NumberAction = NumberAction;
        var BooleanAction = (function (_super) {
            __extends(BooleanAction, _super);
            function BooleanAction() {
                _super.apply(this, arguments);
            }
            BooleanAction.prototype.run = function (boolean) {
            };
            return BooleanAction;
        })(RT.ActionBase);
        RT.BooleanAction = BooleanAction;
        var PositionAction = (function (_super) {
            __extends(PositionAction, _super);
            function PositionAction() {
                _super.apply(this, arguments);
            }
            PositionAction.prototype.run = function (x, y) {
            };
            return PositionAction;
        })(RT.ActionBase);
        RT.PositionAction = PositionAction;
        var SpriteAction = (function (_super) {
            __extends(SpriteAction, _super);
            function SpriteAction() {
                _super.apply(this, arguments);
            }
            SpriteAction.prototype.run = function (sprite) {
            };
            return SpriteAction;
        })(RT.ActionBase);
        RT.SpriteAction = SpriteAction;
        var SpriteSetAction = (function (_super) {
            __extends(SpriteSetAction, _super);
            function SpriteSetAction() {
                _super.apply(this, arguments);
            }
            SpriteSetAction.prototype.run = function (sprites) {
            };
            return SpriteSetAction;
        })(RT.ActionBase);
        RT.SpriteSetAction = SpriteSetAction;
        var VectorAction = (function (_super) {
            __extends(VectorAction, _super);
            function VectorAction() {
                _super.apply(this, arguments);
            }
            VectorAction.prototype.run = function (x, y, delta_x, delta_y) {
            };
            return VectorAction;
        })(RT.ActionBase);
        RT.VectorAction = VectorAction;
        var WebResponseAction = (function (_super) {
            __extends(WebResponseAction, _super);
            function WebResponseAction() {
                _super.apply(this, arguments);
            }
            WebResponseAction.prototype.run = function (response) {
            };
            return WebResponseAction;
        })(RT.ActionBase);
        RT.WebResponseAction = WebResponseAction;
        var CollectionMessageAction = (function (_super) {
            __extends(CollectionMessageAction, _super);
            function CollectionMessageAction() {
                _super.apply(this, arguments);
            }
            CollectionMessageAction.prototype.run = function (msgs) {
            };
            return CollectionMessageAction;
        })(RT.ActionBase);
        RT.CollectionMessageAction = CollectionMessageAction;
        var JsonAction = (function (_super) {
            __extends(JsonAction, _super);
            function JsonAction() {
                _super.apply(this, arguments);
            }
            JsonAction.prototype.run = function (json) {
            };
            return JsonAction;
        })(RT.ActionBase);
        RT.JsonAction = JsonAction;
        var Comparison = (function (_super) {
            __extends(Comparison, _super);
            function Comparison() {
                _super.apply(this, arguments);
            }
            Comparison.prototype.run = function (a, b) {
                return 0;
            };
            return Comparison;
        })(RT.ActionBase);
        RT.Comparison = Comparison;
        var Predicate = (function (_super) {
            __extends(Predicate, _super);
            function Predicate() {
                _super.apply(this, arguments);
            }
            Predicate.prototype.run = function (elt) {
                return false;
            };
            return Predicate;
        })(RT.ActionBase);
        RT.Predicate = Predicate;
        var AtomicAction = (function (_super) {
            __extends(AtomicAction, _super);
            function AtomicAction() {
                _super.apply(this, arguments);
            }
            AtomicAction.prototype.run = function () {
            };
            return AtomicAction;
        })(RT.ActionBase);
        RT.AtomicAction = AtomicAction;
        var AtomicAction1 = (function (_super) {
            __extends(AtomicAction1, _super);
            function AtomicAction1() {
                _super.apply(this, arguments);
            }
            AtomicAction1.prototype.run = function (v) {
            };
            return AtomicAction1;
        })(RT.ActionBase);
        RT.AtomicAction1 = AtomicAction1;
        var Action1 = (function (_super) {
            __extends(Action1, _super);
            function Action1() {
                _super.apply(this, arguments);
            }
            Action1.prototype.run = function (v) {
            };
            return Action1;
        })(RT.ActionBase);
        RT.Action1 = Action1;
        var NumberConverter = (function (_super) {
            __extends(NumberConverter, _super);
            function NumberConverter() {
                _super.apply(this, arguments);
            }
            NumberConverter.prototype.run = function (elt) {
                return 0;
            };
            return NumberConverter;
        })(RT.ActionBase);
        RT.NumberConverter = NumberConverter;
        var StringConverter = (function (_super) {
            __extends(StringConverter, _super);
            function StringConverter() {
                _super.apply(this, arguments);
            }
            StringConverter.prototype.run = function (elt) {
                return "";
            };
            return StringConverter;
        })(RT.ActionBase);
        RT.StringConverter = StringConverter;
        var Converter = (function (_super) {
            __extends(Converter, _super);
            function Converter() {
                _super.apply(this, arguments);
            }
            Converter.prototype.run = function (elt) {
                return undefined;
            };
            return Converter;
        })(RT.ActionBase);
        RT.Converter = Converter;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Contract;
        (function (Contract) {
            function requires(condition, message, s) {
                if (s.rt.devMode && !condition)
                    TDev.Util.userError(TDev.lf("requirement failed: {0}", message), s.pc, 400);
            }
            Contract.requires = requires;
            function assert(condition, message, s) {
                if (s.rt.devMode && !condition)
                    TDev.Util.userError(TDev.lf("assertion failed: {0}", message), s.pc);
            }
            Contract.assert = assert;
        })(Contract = RT.Contract || (RT.Contract = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var CloudSession = (function (_super) {
            __extends(CloudSession, _super);
            function CloudSession() {
                _super.call(this);
            }
            CloudSession.prototype.isJustMeSession = function () {
                return this.tag === "pr";
            };
            CloudSession.prototype.isEveryoneSession = function () {
                return this.tag === "pu";
            };
            CloudSession.prototype.isBroadcastSession = function () {
                return this.tag === "cr";
            };
            CloudSession.prototype.isShareableSession = function () {
                return this.tag === "cw";
            };
            CloudSession.prototype.isPrivateSession = function () {
                return this.tag === "cp";
            };
            CloudSession.prototype.isNodeSession = function () {
                return this.tag === "pn";
            };
            CloudSession.prototype.type = function () {
                if (this.isBroadcastSession())
                    return "broadcast";
                if (this.isEveryoneSession() || this.isShareableSession())
                    return "public";
                return "";
            };
            CloudSession.prototype.toString = function () {
                return "cloud session: " + this._id + (this._title ? "(" + this._title + ")" : "");
            };
            CloudSession.fromDescriptor = function (desc) {
                if (!desc)
                    return undefined;
                var s = new CloudSession();
                s._id = desc.servername;
                s._title = desc.title;
                s._permissions = desc.permissions;
                return s.validate() ? s : undefined;
            };
            CloudSession.prototype.validate = function () {
                var pos = this._id.indexOf("0");
                if (pos > 3 && pos < this._id.length - 4) {
                    this.ownerid = this._id.substr(0, pos);
                    this.tag = this._id.substr(pos + 1, 2);
                    this.guidhash = this._id.substr(pos + 3);
                    return (/^[a-z]{3,}$/.test(this.ownerid) && /^[a-z]+$/.test(this.guidhash) && /^(pr|pu|cr|cw|cp|pn)$/.test(this.tag));
                }
                else
                    return false;
            };
            CloudSession.makeScriptTag = function (author, scriptname) {
                return (author + "xx" + TDev.Revisions.letterify(scriptname) + "xx");
            };
            CloudSession.makeScriptIdentifier = function (scriptid, authorid) {
                return scriptid + "@" + authorid;
            };
            CloudSession.prototype.equals = function (other) {
                return this._id === other._id;
            };
            CloudSession.prototype.id = function () {
                return this._id;
            };
            CloudSession.prototype.title = function () {
                return this._title;
            };
            CloudSession.prototype.owner = function () {
                return RT.User.mk(this.ownerid);
            };
            CloudSession.prototype.is_owned = function (s) {
                return s.rt.sessions.getUserId() === this.ownerid;
            };
            CloudSession.prototype.post_to_wall = function (s) {
                s.rt.postBoxedHtml(CloudData.formatCloudSessionInfo(this, false, false, true), s.pc, this);
            };
            CloudSession.prototype.server_info = function (r) {
                if (this.isNodeSession())
                    TDev.Util.userError(TDev.lf("cannot get session info for deployed cloud libraries"), r.rt.current.pc);
                if (this.ownerid !== r.rt.sessions.getUserId())
                    TDev.Util.userError(TDev.lf("not permitted: must be session owner"), r.rt.current.pc);
                if (this.isNodeSession())
                    TDev.Util.userError(TDev.lf("cannot query node sessions server info"));
                var promise = TDev.Revisions.getServerInfoAsync(this._id);
                promise.then(function (result) { return r.resumeVal(result); });
                return promise.done();
            };
            return CloudSession;
        })(RT.RTValue);
        RT.CloudSession = CloudSession;
        var CloudData;
        (function (CloudData) {
            function current_session(i) {
                return i.rt.sessions.getCurrentSession().getCloudSession();
            }
            CloudData.current_session = current_session;
            function rebuild_cache(r) {
                r.rt.sessions.resetCurrentSession().then(function (s) {
                    r.resumeVal(s);
                });
            }
            CloudData.rebuild_cache = rebuild_cache;
            function clear_all_data(i) {
                return i.rt.sessions.clearCurrentSession();
            }
            CloudData.clear_all_data = clear_all_data;
            function to_json(s) {
                var ctx = new TDev.JsonExportCtx(s, true);
                var json = s.rt.compiled._exportJson(s.rt.datas["this"], ctx);
                return RT.JsonObject.wrap(json);
            }
            CloudData.to_json = to_json;
            function from_json(jobj, s) {
                var json = jobj.value();
                var ctx = new TDev.JsonImportCtx(s);
                s.rt.compiled._importJson(s.rt.datas["this"], ctx, json);
            }
            CloudData.from_json = from_json;
            function last_session(s) {
                return s.rt.sessions.getCurrentSession().getCloudSession();
            }
            CloudData.last_session = last_session;
            function just_me_session(s) {
                return CloudSession.fromDescriptor(s.rt.sessions.getJustMeSessionDescriptor());
            }
            CloudData.just_me_session = just_me_session;
            function set_token_validator(validator, s) {
                s.rt.authValidator = validator;
            }
            CloudData.set_token_validator = set_token_validator;
            function authenticate(access_token, r) {
                r.rt.sessions.setAccessToken(access_token);
                r.rt.sessions.connectCurrent(r.rt.sessions.getNodeSessionDescriptor("tbd"));
                var cs = r.rt.sessions.getCurrentSession();
                cs.log("waiting for auth");
                var decided = false;
                TDev.Util.setTimeout(30 * 1000, function () {
                    if (!decided) {
                        decided = true;
                        r.resumeVal(false);
                    }
                });
                r.rt.sessions.addDoorbellListener(function () {
                    if (decided)
                        return false;
                    if (cs.receivedstatus) {
                        decided = true;
                        r.resumeVal(!!cs.clientUserId);
                        return false;
                    }
                    return true;
                });
            }
            CloudData.authenticate = authenticate;
            function everyone_session(s) {
                return CloudSession.fromDescriptor(s.rt.sessions.getEveryoneSessionDescriptor());
            }
            CloudData.everyone_session = everyone_session;
            function wait_for_server(timeout, r) {
                var ses = r.rt.sessions;
                var cs = ses.getCurrentSession();
                cs.user_yield();
                if (cs.user_get_connectionstatus(false) === "connected")
                    r.resumeVal(true);
                else if (timeout === 0)
                    r.resumeVal(false);
                else {
                    cs.log("issuing fence");
                    var decided = false;
                    TDev.Util.setTimeout(timeout * 1000, function () {
                        if (!decided) {
                            decided = true;
                            r.resumeVal(false);
                        }
                    });
                    cs.user_issue_fence(function () {
                        if (!decided) {
                            decided = true;
                            r.resumeVal(true);
                        }
                    }, !r.isTaskCtx());
                }
            }
            CloudData.wait_for_server = wait_for_server;
            function create_session(title, type, r) {
                if (!title)
                    TDev.Util.userError(TDev.lf("must specify title"), r.rt.current.pc);
                if (!/^(shareable|private|broadcast)$/.test(type))
                    TDev.Util.userError(TDev.lf("no such session type"), r.rt.current.pc);
                return r.rt.sessions.createCustomSessionAsync(title, type).then(function (val) {
                    r.resumeVal(val);
                }).done();
            }
            CloudData.create_session = create_session;
            function session_of(id, title, s) {
                var cs = new CloudSession();
                cs._id = id;
                cs._title = title;
                cs._permissions = "";
                if (cs.validate() && cs.tag[0] === "c")
                    return cs;
                else
                    TDev.Util.userError(TDev.lf("cannot get session from id"), s.pc);
            }
            CloudData.session_of = session_of;
            function connection_status(include_extra_details, s) {
                return s.rt.sessions.getCurrentSession().user_get_connectionstatus(include_extra_details);
            }
            CloudData.connection_status = connection_status;
            function participant_number(s) {
                return s.rt.sessions.getCurrentSession().getMemberNumber();
            }
            CloudData.participant_number = participant_number;
            function set_sync_enabled(enable, s) {
                s.rt.sessions.getCurrentSession().user_enable_sync(enable);
            }
            CloudData.set_sync_enabled = set_sync_enabled;
            function is_sync_enabled(s) {
                return s.rt.sessions.getCurrentSession().user_sync_enabled();
            }
            CloudData.is_sync_enabled = is_sync_enabled;
            function formatCloudSessionInfo(cloudSession, preselected, includesserverdata, showscriptname, user) {
                if (user === void 0) { user = null; }
                var percentfull = (cloudSession.sessionimpl && cloudSession.sessionimpl.user_get_percent_full()) ? cloudSession.sessionimpl.user_get_percent_full() : (cloudSession.serverinfo && cloudSession.serverinfo.percentfull) ? cloudSession.serverinfo.percentfull : 0;
                var percentfullstring = percentfull ? (" (" + percentfull + "% full)") : "";
                var title = (!showscriptname && cloudSession.isEveryoneSession()) ? "everyone session" : (!showscriptname && cloudSession.isJustMeSession()) ? "just-me session" : (cloudSession._title || ("session \"" + cloudSession._id + "\""));
                var owner = (cloudSession.ownerid === TDev.Cloud.getUserId()) ? "I" : user ? (user.name + " (/" + cloudSession.ownerid + ")") : ("user /" + cloudSession.ownerid);
                var permissions = (cloudSession.isEveryoneSession() || cloudSession.isShareableSession()) ? "everyone can read and modify" : (cloudSession.isJustMeSession() || cloudSession.isPrivateSession()) ? "only " + owner + " can read and modify" : ("only " + owner + " can modify, but everyone can read");
                var connected = cloudSession.sessionimpl && cloudSession.sessionimpl.user_is_websocket_open();
                var localname = cloudSession.sessionimpl ? cloudSession.sessionimpl.localname : cloudSession.localname;
                var existence = (includesserverdata || connected) ? ((cloudSession.serverinfo || connected) ? localname ? "stored in cloud" + percentfullstring + " and locally cached" : "stored in cloud" + percentfullstring + ", not locally cached" : localname ? "not stored in cloud, local only" : "not created yet") + "\n" : "";
                var icon = TDev.div("navImg", TDev.SVG.getCloudSymbol("black", cloudSession.type(), true));
                var titleelt = (preselected) ? TDev.HTML.span("bold", title) : TDev.HTML.span("", title);
                var information = ((owner === "I") ? "" : "owned by " + owner + "\n") + permissions + "\n" + ("session id: " + cloudSession._id + "\n") + existence;
                return TDev.HTML.mkButtonElt("navItem cloudSession", TDev.div("navItemInner", icon, TDev.div("navContent", TDev.div("navName", titleelt), TDev.div("navDescription", information))));
            }
            CloudData.formatCloudSessionInfo = formatCloudSessionInfo;
            var sessionstatusdiv;
            var sessionretrydiv;
            function refreshSessionInfo(session) {
                if (sessionstatusdiv)
                    sessionstatusdiv.setChildren([session.user_get_connectionstatus(true)]);
            }
            CloudData.refreshSessionInfo = refreshSessionInfo;
            function sessionInfoAsync(rt) {
                var session = rt.sessions.getCurrentSession();
                var sessioninfo = CloudData.formatCloudSessionInfo(session.getCloudSession(), false, false, false);
                sessioninfo.style.background = "white";
                if (!sessionstatusdiv)
                    sessionstatusdiv = TDev.div("wall-dialog-body");
                if (!sessionretrydiv)
                    sessionretrydiv = TDev.div("wall-dialog-body").withClick(function (e) { return session.user_retry_now(); });
                this.refreshSessionInfo(session);
                var m = new TDev.ModalDialog();
                m.add([
                    TDev.div("wall-dialog-header", TDev.lf("current cloud session")),
                    sessioninfo,
                    TDev.div("wall-dialog-header wall-dialog-extra-space", TDev.lf("connection status")),
                    sessionstatusdiv,
                    sessionretrydiv
                ]);
                if (session.isMarooned() || session.isClosed() || session.isFaulted()) {
                    m.addOk("discard locally cached data, and try again", function () {
                        rt.sessions.resetCurrentSession();
                        m.dismiss();
                    });
                    m.addOk("cancel");
                }
                else
                    m.addOk("ok");
                var retrytimeindicatorinterval = setInterval(function () {
                    var msg;
                    var mr = session.user_get_missing_rounds();
                    if (mr) {
                        msg = mr + " remaining.";
                    }
                    var rt = session.user_get_next_connection_attempt();
                    if (rt) {
                        var secs = Math.floor((rt - 700 - new Date().getTime()) / 1000);
                        var msg = (secs < 1) ? "connection attempt in progress..." : "next connection attempt in " + secs.toString() + " seconds";
                    }
                    sessionretrydiv.setChildren([msg]);
                }, 50);
                m.onDismiss = function () { return clearInterval(retrytimeindicatorinterval); };
                m.show();
            }
            CloudData.sessionInfoAsync = sessionInfoAsync;
            function mkSimpleBtnConfirm(desc, f) {
                var isRed = false;
                var btn = TDev.HTML.mkButton(desc, function () {
                    if (isRed)
                        f();
                    else {
                        isRed = true;
                        btn.style.color = 'red';
                        TDev.Util.setTimeout(3000, function () {
                            isRed = false;
                            btn.style.color = '';
                        });
                    }
                });
                return btn;
            }
            function managementDialog(rt) {
                var p = TDev.Cloud.getUserId() ? TDev.Promise.as() : TDev.Cloud.authenticateAsync(TDev.lf("cloud data"));
                return p.thenalways(function (x) {
                    if (TDev.Cloud.getUserId())
                        return sessionDialogAsync(undefined, "manage cloud sessions", false, rt);
                });
            }
            CloudData.managementDialog = managementDialog;
            function scriptSessionsDialog(rt) {
                var p = TDev.Cloud.getUserId() ? TDev.Promise.as() : TDev.Cloud.authenticateAsync(TDev.lf("cloud data"));
                return p.thenalways(function (x) {
                    if (TDev.Cloud.getUserId()) {
                        var s = rt.sessions.getLastSession();
                        return sessionDialogAsync(s && s.getCloudSession(), TDev.lf("select cloud session for this script"), true, rt).then(function (s) {
                            if (s)
                                return rt.sessions.connectCurrent(rt.sessions.getCloudSessionDescriptor(s._id, s._title, s._permissions));
                            else
                                return undefined;
                        });
                    }
                });
            }
            CloudData.scriptSessionsDialog = scriptSessionsDialog;
            function sessionDialogAsync(preselectedsession, title, specificscript, rt, rctx) {
                if (rctx === void 0) { rctx = undefined; }
                var p = new TDev.PromiseInv();
                var sessionmap = {};
                var counter = 0;
                var incorporate = function (x) {
                    if (sessionmap.hasOwnProperty(x._id)) {
                        var cur = sessionmap[x._id];
                        ["_title", "localname", "serverinfo", "position", "membernumber", "enable_sync"].forEach(function (s) {
                            if (!cur[s])
                                cur[s] = x[s];
                        });
                    }
                    else {
                        x.position = counter++;
                        sessionmap[x._id] = x;
                    }
                };
                if (specificscript) {
                    incorporate(CloudSession.fromDescriptor(rt.sessions.getJustMeSessionDescriptor()));
                    incorporate(CloudSession.fromDescriptor(rt.sessions.getEveryoneSessionDescriptor()));
                }
                if (preselectedsession)
                    incorporate(preselectedsession);
                var dialog = function (includesSessionsOnRevisionServer) {
                    var sessionarray = [];
                    for (var x in sessionmap)
                        if (sessionmap.hasOwnProperty(x))
                            sessionarray.push(sessionmap[x]);
                    sessionarray.sort(function (a, b) { return (a.position - b.position); });
                    var m = new TDev.ModalDialog();
                    var chosenSession = preselectedsession;
                    var btns = sessionarray.map(function (cloudSession, i) {
                        var deleting = false;
                        var cloudSessionElt = CloudData.formatCloudSessionInfo(cloudSession, preselectedsession && cloudSession.equals(preselectedsession), includesSessionsOnRevisionServer, !specificscript);
                        if (specificscript) {
                            cloudSessionElt.withClick(function () {
                                if (!deleting) {
                                    chosenSession = cloudSession;
                                    m.dismiss();
                                }
                            });
                        }
                        var inuse = (rt.sessions.getLastSession() && rt.sessions.getLastSession().servername === cloudSession.id());
                        var owned = TDev.Cloud.getUserId() === cloudSession.ownerid;
                        var cached = !owned && (cloudSession.isBroadcastSession() || cloudSession.isShareableSession());
                        if (owned || (cached && !inuse)) {
                            var deleteElt = TDev.HTML.mkButtonElt("navItem", inuse ? "clear" : cached ? "remove" : "delete");
                            var isRed = false;
                            deleteElt.withClick(function () {
                                if (!isRed) {
                                    isRed = true;
                                    deleteElt.style.color = 'red';
                                    TDev.Util.setTimeout(3000, function () {
                                        isRed = false;
                                        deleteElt.style.color = '';
                                    });
                                    return;
                                }
                                if (!inuse)
                                    elt.className += " disabledItem";
                                deleting = !inuse;
                                deleteDiv.removeAllChildren();
                                deleteDiv.appendChildren(TDev.div(null, inuse ? "clearing..." : cached ? "removing..." : "deleting..."));
                                var errorhandler = function (e) {
                                    deleteDiv.removeAllChildren();
                                    deleteDiv.appendChildren(TDev.div(null, "" + e));
                                };
                                if (inuse) {
                                    rt.sessions.getCurrentSession().user_clear_all();
                                    TDev.Util.setTimeout(800, function () { return deleteDiv.removeAllChildren(); });
                                }
                                else {
                                    TDev.Revisions.deleteSessionAsync(rt.sessions.getCloudSessionDescriptor(cloudSession._id, cloudSession._title, cloudSession._permissions), rt).then(function () {
                                        deleteDiv.removeAllChildren();
                                        deleteDiv.appendChildren(TDev.div(null, cached ? "removed" : "deleted"));
                                    }, errorhandler).done();
                                }
                            });
                            var deleteDiv = TDev.div("floatright", deleteElt);
                            var elt = TDev.div(null, deleteDiv, TDev.div("floatleft", cloudSessionElt), TDev.div("clear"));
                            return elt;
                        }
                        else
                            return cloudSessionElt;
                    });
                    m.setScroll();
                    var existingTitleDiv = TDev.div("wall-dialog-header", title);
                    m.add([existingTitleDiv]);
                    if (specificscript) {
                        var createDiv = TDev.div("floatright");
                        var addCreateElt = function (type) {
                            var createElt = TDev.HTML.mkButtonElt("wall-button", type);
                            createElt.withClick(function () {
                                var title = createTitle.textarea.value;
                                if (!title) {
                                    createMsgDiv.removeAllChildren();
                                    createMsgDiv.appendChildren(TDev.div(null, "must specify title"));
                                    return;
                                }
                                rt.sessions.createCustomSessionAsync(createTitle.textarea.value, type).then(function (session) {
                                    chosenSession = session;
                                    m.dismiss();
                                }, function (e) {
                                    createMsgDiv.removeAllChildren();
                                    createMsgDiv.appendChildren(TDev.div(null, "" + e));
                                }).done();
                            });
                            createDiv.appendChildren(createElt);
                        };
                        addCreateElt("shareable");
                        addCreateElt("private");
                        addCreateElt("broadcast");
                        var connectToShareableElt = TDev.HTML.mkButtonElt("wall-button", "connect");
                        connectToShareableElt.withClick(function () {
                            var cs = new CloudSession();
                            cs._id = sharableId.textarea.value;
                            cs._title = "";
                            cs._permissions = "";
                            if (cs.validate() && cs.tag[0] === "c") {
                                chosenSession = cs;
                                m.dismiss();
                            }
                            else {
                                sharableMsgDiv.removeAllChildren();
                                sharableMsgDiv.appendChildren(TDev.div(null, "invalid id"));
                            }
                        });
                        var connectToShareableDiv = TDev.div("floatright", connectToShareableElt);
                        var createTitle = TDev.HTML.mkAutoExpandingTextArea();
                        createTitle.textarea.placeholder = "title of new session";
                        var createMsgDiv = TDev.div("wall-dialog-body");
                        var sharableId = TDev.HTML.mkAutoExpandingTextArea();
                        sharableId.textarea.placeholder = "shareable session id";
                        var sharableMsgDiv = TDev.div("wall-dialog-body");
                        var createbutton = TDev.HTML.mkButtonElt("wall-button", "create");
                        var connectbutton = TDev.HTML.mkButtonElt("wall-button", "enter code");
                        var cancelbutton = TDev.HTML.mkButtonElt("wall-button", "cancel");
                        var innested = false;
                        var setCreatePaneDisplay = function (show) {
                            var d = show ? "" : "none";
                            createTitle.div.style.display = d;
                            createDiv.style.display = d;
                            createMsgDiv.style.display = d;
                            createbutton.style.display = (show) ? "none" : "";
                        };
                        var setConnectPaneDisplay = function (show) {
                            var d = show ? "" : "none";
                            sharableId.div.style.display = d;
                            connectToShareableDiv.style.display = d;
                            sharableMsgDiv.style.display = d;
                            connectbutton.style.display = (show) ? "none" : "";
                        };
                        var setButtonsDisplay = function (show) {
                            var d = show ? "" : "none";
                            createbutton.style.display = d;
                            connectbutton.style.display = d;
                        };
                        createbutton.withClick(function () {
                            existingTitleDiv.setChildren(["create a new session"]);
                            setCreatePaneDisplay(true);
                            setConnectPaneDisplay(false);
                            m.showorhidelist(false);
                            setButtonsDisplay(false);
                            innested = true;
                        });
                        connectbutton.withClick(function () {
                            existingTitleDiv.setChildren(["enter a session id"]);
                            setCreatePaneDisplay(false);
                            setConnectPaneDisplay(true);
                            m.showorhidelist(false);
                            setButtonsDisplay(false);
                            innested = true;
                        });
                        cancelbutton.withClick(function () {
                            if (innested) {
                                setCreatePaneDisplay(false);
                                setConnectPaneDisplay(false);
                                m.showorhidelist(true);
                                existingTitleDiv.setChildren([title]);
                                setButtonsDisplay(true);
                                innested = false;
                            }
                            else
                                m.dismiss();
                        });
                        setCreatePaneDisplay(false);
                        setConnectPaneDisplay(false);
                        m.showorhidelist(true);
                        m.add([
                            createTitle.div,
                            createDiv,
                            TDev.div("clear"),
                            createMsgDiv,
                            sharableId.div,
                            connectToShareableDiv,
                            TDev.div("clear"),
                            sharableMsgDiv
                        ]);
                    }
                    var options = {
                        searchHint: 'search sessions',
                        noBackground: true,
                        adjustListSize: true,
                        custombuttons: [createbutton, connectbutton, cancelbutton]
                    };
                    m.choose(btns, options);
                    if (!includesSessionsOnRevisionServer) {
                        m.add([TDev.div("wall-dialog-body", TDev.lf("server unreachable; are you offline?"))]);
                    }
                    m.onDismiss = function () {
                        p.success(chosenSession);
                    };
                };
                TDev.HTML.showProgressNotification(TDev.lf("Loading sessions..."));
                TDev.Revisions.queryCachedSessionsAsync(specificscript, rt).then(function (sessionsInCache) {
                    sessionsInCache.forEach(function (s) { return incorporate(s); });
                    return TDev.Revisions.queryMySessionsOnRevisionServerAsync(rt, specificscript).then(function (sessionsOnRevisionServer) {
                        sessionsOnRevisionServer.forEach(function (s) { return incorporate(s); });
                        return true;
                    }, function (e) { return false; }).then(function (includesSessionsOnRevisionServer) { return dialog(includesSessionsOnRevisionServer); });
                }).done();
                return p;
            }
            CloudData.sessionDialogAsync = sessionDialogAsync;
            function askSwitchAccessAsync(previoussession, session, owner, r, secondchance) {
                if (session.isPrivateSession() || session.ownerid === r.rt.sessions.getUserId())
                    return TDev.Promise.as(session);
                var p = r.rt.host.askSourceAccessAsync("shared cloud data owned by " + owner, "and share data in the cloud. " + owner + " administers the data, and can share it with other users or delete it.", secondchance);
                return p.then(function (allow) {
                    if (!allow) {
                        var mdp = new TDev.PromiseInv();
                        TDev.ModalDialog.askMany("Fall-back session", "Because you have indicated that this script should not participate in cloud sessions owned by " + owner + ", we are using a private just-me session instead.", {
                            ok: function () { return mdp.success(previoussession.getCloudSession()); },
                            reconsider: function () { return askSwitchAccessAsync(previoussession, session, owner, r, true).then(function (s) { return mdp.success(s); }); }
                        });
                        return mdp;
                    }
                    return TDev.Promise.as(session);
                });
            }
            function switch_to_session(session, r) {
                var rt = r.rt;
                if (session.ownerid !== rt.sessions.getUserId() && session.tag === "pr")
                    TDev.Util.userError(TDev.lf("cannot connect to a just-me session of another user"));
                if (session.isNodeSession())
                    TDev.Util.userError(TDev.lf("cannot connect to a node session"));
                var ls = rt.sessions.getCurrentSession();
                ls.user_yield();
                if (session._id === ls.servername) {
                    r.resumeVal(undefined);
                }
                else {
                    var p = TDev.Promise.as();
                    var ownerinfo;
                    p = p.then(function () { return RT.User.getJsonAsync(session.ownerid).then(function (user) { return ownerinfo = user; }, function (e) { return ownerinfo = undefined; }); });
                    p = p.then(function () {
                        var ownername = ownerinfo ? (ownerinfo.name + " (/" + session.ownerid + ")") : ("user /" + session.ownerid);
                        return askSwitchAccessAsync(ls, session, ownername, r, false);
                    });
                    p.then(function (s) {
                        return r.rt.sessions.connectCurrent(r.rt.sessions.getCloudSessionDescriptor(s._id, s._title, s._permissions)).then(function () { return r.resumeVal(undefined); });
                    }).done();
                }
            }
            CloudData.switch_to_session = switch_to_session;
            function switch_sessions(r) {
                var session = r.rt.sessions.getCurrentSession();
                session.user_yield();
                var p = sessionDialogAsync(session.getCloudSession(), "choose a cloud session", true, r.rt, r);
                p.then(function (s) {
                    r.rt.sessions.connectCurrent(r.rt.sessions.getCloudSessionDescriptor(s._id, s._title, s._permissions)).then(function () { return r.resumeVal(undefined); });
                }).done();
            }
            CloudData.switch_sessions = switch_sessions;
        })(CloudData = RT.CloudData || (RT.CloudData = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Tiles;
        (function (Tiles) {
            Tiles.updateTileAsync = function (fragment, data) {
                return TDev.Promise.as();
            };
            function defaultFragment(r) {
                return 'run%3A' + r.getScriptGuid();
            }
            function set_default(title, content, counter, r) {
                var rt = r.rt;
                Tiles.updateTileAsync(defaultFragment(rt), {
                    title: title,
                    background: r.rt.getScriptColor(),
                    content: content,
                    counter: RT.Math_.clamp(0, 100, counter),
                }).done(function () { return r.resume(); });
            }
            Tiles.set_default = set_default;
            function set_default_counter(value, r) {
                var rt = r.rt;
                Tiles.updateTileAsync(defaultFragment(rt), {
                    counter: RT.Math_.clamp(0, 100, value),
                    background: r.rt.getScriptColor()
                }).done(function () { return r.resume(); });
            }
            Tiles.set_default_counter = set_default_counter;
            function set_default_text(title, content, r) {
                var rt = r.rt;
                Tiles.updateTileAsync(defaultFragment(rt), {
                    title: title,
                    background: r.rt.getScriptColor(),
                    content: content,
                    count: -1,
                }).done(function () { return r.resume(); });
            }
            Tiles.set_default_text = set_default_text;
            function pin_default(r) {
                var rt = r.rt;
                Tiles.updateTileAsync(defaultFragment(rt), {
                    title: r.rt.getScriptName(),
                    background: r.rt.getScriptColor(),
                    pin: true,
                    count: -1,
                }).done(function () { return r.resume(); });
            }
            Tiles.pin_default = pin_default;
            function pin_pictures(title, counter, icon, pictures, r) {
                var maxWidth = 691;
                var rt = r.rt;
                var iconUri = "";
                var pictureUris = [];
                TDev.HTML.showProgressNotification(TDev.lf("pinning tile..."));
                icon.getDataUriAsync(0.85, 150).then(function (u) {
                    iconUri = u;
                    return TDev.Promise.join(pictures.a.map(function (pic) { return pic.getDataUriAsync(0.85, 691).then(function (uri) { return pictureUris.push(uri); }); }));
                }).then(function () {
                    Tiles.updateTileAsync(defaultFragment(rt), {
                        title: title,
                        background: r.rt.getScriptColor(),
                        counter: RT.Math_.clamp(0, 100, counter),
                        icon: iconUri,
                        pictures: pictureUris,
                        template: 'cycle',
                        pin: true
                    });
                }).done(function () { return r.resume(); });
            }
            Tiles.pin_pictures = pin_pictures;
            function pin_picture(title, content, counter, pic, r) {
                var maxWidth = 691;
                var rt = r.rt;
                var iconUri = "";
                var wideUri = "";
                TDev.HTML.showProgressNotification(TDev.lf("pinning tile..."));
                pic.getDataUriAsync(0.85, 691).then(function (u) {
                    Tiles.updateTileAsync(defaultFragment(rt), {
                        title: title,
                        background: r.rt.getScriptColor(),
                        counter: RT.Math_.clamp(0, 100, counter),
                        content: content,
                        icon: u,
                        pictures: [u],
                        template: 'flip',
                        pin: true
                    });
                }).done(function () { return r.resume(); });
            }
            Tiles.pin_picture = pin_picture;
        })(Tiles = RT.Tiles || (RT.Tiles = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Buffer = (function (_super) {
            __extends(Buffer, _super);
            function Buffer() {
                _super.apply(this, arguments);
            }
            Buffer.fromString = function (s, encoding) {
                function bin(b) {
                    if (!b)
                        return undefined;
                    return Buffer.fromTypedArray(TDev.Util.stringToUint8Array(b));
                }
                function hex(s) {
                    var prev = -1;
                    var buf = null;
                    var len = 0;
                    for (var iter = 0; iter < 2; ++iter) {
                        for (var i = 0; i < s.length; ++i) {
                            var c = s.charCodeAt(i);
                            var v = 0;
                            if (48 <= c && c <= 57)
                                v = c - 48;
                            else if (97 <= c && c <= 102)
                                v = c - 97 + 10;
                            else if (65 <= c && c <= 70)
                                v = c - 65 + 10;
                            else if (/^[\s\r\n-,.=]$/.test(s.charAt(i)))
                                continue;
                            else
                                return undefined;
                            if (prev == -1)
                                prev = v * 16;
                            else {
                                prev += v;
                                if (buf)
                                    buf[len++] = prev;
                                else
                                    len++;
                                prev = -1;
                            }
                        }
                        if (buf)
                            return Buffer.fromTypedArray(buf);
                        prev = -1;
                        buf = new Uint8Array(len);
                        len = 0;
                    }
                }
                switch (encoding) {
                    case "base64":
                        return bin(TDev.Util.base64Decode(s));
                    case "hex":
                        return hex(s);
                    case "binary":
                        return bin(s);
                    case "utf8":
                        return bin(TDev.Util.toUTF8(s));
                    case "utf16le":
                        return bin(TDev.Util.toUTF16LE(s));
                    default:
                        return undefined;
                }
            };
            Buffer.fromImageData = function (id) {
                var r = Buffer.fromTypedArray(id.data);
                r.imageData = id;
                return r;
            };
            Buffer.fromTypedArray = function (a) {
                var r = new Buffer();
                r.buffer = a;
                return r;
            };
            Buffer.mk = function (size) {
                return this.fromTypedArray(new Uint8Array(size));
            };
            Buffer.prototype.needSubarray = function () {
                if (this.buffer.subarray)
                    return;
                var newBuf = new Uint8Array(this.buffer.length);
                for (var i = 0; i < newBuf.length; ++i)
                    newBuf[i] = this.buffer[i];
                this.buffer = newBuf;
                this.imageData = null;
            };
            Buffer.prototype.read_number = function (offset, format, endian) {
                var v = 0;
                var b = this.buffer;
                var max = 0;
                var size = 1;
                if (endian == "le") {
                    switch (format) {
                        case "int8":
                            max = 127;
                        case "uint8":
                            v = b[offset];
                            break;
                        case "int16":
                            max = 32767;
                        case "uint16":
                            size = 2;
                            v = (b[offset + 1] << 8) + b[offset];
                            break;
                        case "int32":
                            max = 2147483647;
                        case "uint32":
                            size = 4;
                            v = b[offset + 3] * (1 << 24) + (b[offset + 2] << 16) + (b[offset + 1] << 8) + b[offset];
                            break;
                        default:
                            TDev.Util.userError(TDev.lf("unknown number format: {0}", format));
                    }
                }
                else if (endian == "be") {
                    switch (format) {
                        case "int8":
                            max = 127;
                        case "uint8":
                            v = b[offset];
                            break;
                        case "int16":
                            max = 32767;
                        case "uint16":
                            size = 2;
                            v = (b[offset] << 8) + b[offset + 1];
                            break;
                        case "int32":
                            max = 2147483647;
                        case "uint32":
                            size = 4;
                            v = b[offset] * (1 << 24) + (b[offset + 1] << 16) + (b[offset + 2] << 8) + b[offset + 3];
                            break;
                        default:
                            TDev.Util.userError(TDev.lf("unknown number format: {0}", format));
                    }
                }
                else {
                    TDev.Util.userError(TDev.lf("unknown number endian: {0}", endian));
                }
                if (offset < 0 || offset + size > b.length)
                    TDev.Util.userError(TDev.lf("offset outside of range: {0} (buffer length {1})", offset, b.length));
                if (v === undefined || isNaN(v))
                    return undefined;
                if (max && v > max)
                    v = v - max * 2 - 2;
                return v;
            };
            Buffer.prototype.write_number = function (value, offset, format, endian) {
                var v = value;
                var b = this.buffer;
                var min = 0;
                var max = 0;
                var size = 0;
                if (Math.floor(v) != v)
                    TDev.Util.userError(TDev.lf("number {0} is fractional", v));
                switch (format) {
                    case "int8":
                        size = 1;
                        min = -0x80;
                        max = 0x7f;
                        break;
                    case "uint8":
                        size = 1;
                        max = 0xff;
                        break;
                    case "int16":
                        size = 2;
                        min = -0x8000;
                        max = 0x7fff;
                        break;
                    case "uint16":
                        size = 2;
                        max = 0xffff;
                        break;
                    case "int32":
                        size = 4;
                        min = -0x80000000;
                        max = 0x7fffffff;
                        break;
                    case "uint32":
                        size = 4;
                        max = 0xffffffff;
                        break;
                    default:
                        TDev.Util.userError(TDev.lf("unknown number format: {0}", format));
                }
                if (v < min || v > max)
                    TDev.Util.userError(TDev.lf("number {0} is outside range of {1}", v, format));
                v |= 0;
                if (endian == "be") {
                    for (var i = size - 1; i >= 0; i--) {
                        b[offset + i] = (v & 0xff);
                        v >>= 8;
                    }
                }
                else if (endian == "le") {
                    for (var i = 0; i < size; ++i) {
                        b[offset + i] = (v & 0xff);
                        v >>= 8;
                    }
                }
                else {
                    TDev.Util.userError(TDev.lf("unknown number endian: {0}", endian));
                }
            };
            Buffer.prototype.set = function (index, value) {
                this.buffer[index] = value;
            };
            Buffer.prototype.at = function (index) {
                return this.buffer[index];
            };
            Buffer.prototype.count = function () {
                return this.buffer.length;
            };
            Buffer.prototype.concat = function (other) {
                var r = Buffer.mk(this.count() + other.count());
                r.copy_from(0, this);
                r.copy_from(this.count(), other);
                return r;
            };
            Buffer.prototype.sub_buffer = function (start, length) {
                var len = this.count();
                start = TDev.Util.intBetween(0, start, len);
                length = TDev.Util.intBetween(0, length, len - start);
                if (start == 0 && length == len)
                    return this;
                this.needSubarray();
                return Buffer.fromTypedArray(this.buffer.subarray(start, start + length));
            };
            Buffer.prototype.fill_random = function () {
                TDev.Random.bytes(this.buffer);
            };
            Buffer.prototype.fill = function (value) {
                var buf = this.buffer;
                for (var i = 0; i < buf.length; ++i)
                    buf[i] = value;
            };
            Buffer.prototype.copy_from = function (target_offset, source) {
                var dst = this.buffer;
                var src = source.buffer;
                var len = Math.min(src.length, this.count() - target_offset);
                if (target_offset == 0)
                    for (var i = 0; i < len; ++i)
                        dst[i] = src[i];
                else
                    for (var i = 0; i < len; ++i)
                        dst[target_offset + i] = src[i];
            };
            Buffer.prototype.clone = function () {
                var res = Buffer.mk(this.count());
                res.copy_from(0, this);
                return res;
            };
            Buffer.prototype.to_string = function (encoding) {
                function hex(inp) {
                    var hexDigits = "0123456789abcdef";
                    var len = inp.length;
                    var res = "";
                    for (var i = 0; i < len; ++i) {
                        var v = inp[i];
                        res += hexDigits[(v >> 4) & 0xf] + hexDigits[v & 0xf];
                    }
                    return res;
                }
                function utf16(inp) {
                    if (inp.length & 1)
                        return undefined;
                    var len = inp.length;
                    var res = "";
                    for (var i = 0; i < len; i += 2)
                        res += String.fromCharCode(inp[i] | (inp[i + 1] << 8));
                    return res;
                }
                switch (encoding) {
                    case "base64":
                        return TDev.Util.base64EncodeBytes(this.buffer);
                    case "hex":
                        return hex(this.buffer);
                    case "binary":
                        return TDev.Util.uint8ArrayToString(this.buffer);
                    case "utf8":
                        TDev.Util.userError(TDev.lf("utf8 not implemented yet; sorry"));
                        return undefined;
                    case "utf16le":
                        return utf16(this.buffer);
                    default:
                        return undefined;
                }
            };
            return Buffer;
        })(RT.RTValue);
        RT.Buffer = Buffer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Bits;
        (function (Bits) {
            function add_uint32(x, y) {
                return (x + y) >>> 0;
            }
            Bits.add_uint32 = add_uint32;
            function subtract_uint32(x, y) {
                return (x - y) >>> 0;
            }
            Bits.subtract_uint32 = subtract_uint32;
            function multiply_uint32(x, y) {
                return TDev.Util.intMult(x, y) >>> 0;
            }
            Bits.multiply_uint32 = multiply_uint32;
            function add_int32(x, y) {
                return (x + y) | 0;
            }
            Bits.add_int32 = add_int32;
            function subtract_int32(x, y) {
                return (x - y) | 0;
            }
            Bits.subtract_int32 = subtract_int32;
            function multiply_int32(x, y) {
                return TDev.Util.intMult(x, y) | 0;
            }
            Bits.multiply_int32 = multiply_int32;
            function and_uint32(x, y) {
                return (x & y) >>> 0;
            }
            Bits.and_uint32 = and_uint32;
            function or_uint32(x, y) {
                return (x | y) >>> 0;
            }
            Bits.or_uint32 = or_uint32;
            function xor_uint32(x, y) {
                return (x ^ y) >>> 0;
            }
            Bits.xor_uint32 = xor_uint32;
            function not_uint32(x) {
                return (~x) >>> 0;
            }
            Bits.not_uint32 = not_uint32;
            function shift_left_uint32(x, bits) {
                return (x << bits) >>> 0;
            }
            Bits.shift_left_uint32 = shift_left_uint32;
            function shift_right_uint32(x, bits) {
                return x >>> bits;
            }
            Bits.shift_right_uint32 = shift_right_uint32;
            function rotate_left_uint32(x, bits) {
                return ((x << bits) | (x >>> (32 - bits))) >>> 0;
            }
            Bits.rotate_left_uint32 = rotate_left_uint32;
            function rotate_right_uint32(x, bits) {
                return ((x >>> bits) | (x << (32 - bits))) >>> 0;
            }
            Bits.rotate_right_uint32 = rotate_right_uint32;
            function create_buffer(size) {
                return RT.Buffer.mk(size);
            }
            Bits.create_buffer = create_buffer;
            function string_to_buffer(s, encoding) {
                return RT.Buffer.fromString(s, encoding);
            }
            Bits.string_to_buffer = string_to_buffer;
        })(Bits = RT.Bits || (RT.Bits = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Task = (function (_super) {
            __extends(Task, _super);
            function Task() {
                _super.apply(this, arguments);
                this._completed = false;
            }
            Task.prototype.completed = function () {
                return this._completed;
            };
            Task.prototype.resume = function (v) {
                TDev.Util.assert(!this._completed);
                this._completed = true;
                this._value = v;
                this.runAwaiters();
            };
            Task.prototype.await = function (r) {
                var _this = this;
                if (this._completed) {
                    r.rt.queueAsyncEvent(function () {
                        return r.rt.continueStackFrame(_this._value, r.stackframe);
                    });
                }
                else {
                    if (!this._awaitQueue)
                        this._awaitQueue = [r];
                    else
                        this._awaitQueue.push(r);
                }
            };
            Task.prototype.value = function () {
                if (!this._completed)
                    TDev.Util.userError(TDev.lf("cannot get value - task has not completed yet"));
                return this._value;
            };
            Task.prototype.await_at_most = function (seconds, r) {
                var _this = this;
                this.await(r);
                if (!this._completed) {
                    TDev.Util.setTimeout(seconds * 1000, function () {
                        if (_this._awaitQueue) {
                            var idx = _this._awaitQueue.indexOf(r);
                            if (idx >= 0) {
                                _this._awaitQueue.splice(idx, 1);
                                r.rt.queueAsyncEvent(function () {
                                    return r.rt.continueStackFrame(undefined, r.stackframe);
                                });
                            }
                        }
                    });
                }
            };
            Task.prototype.runAwaiters = function () {
                var _this = this;
                var q = this._awaitQueue;
                if (!q)
                    return;
                this._awaitQueue = null;
                q.forEach(function (r) {
                    r.rt.queueAsyncEvent(function () {
                        return r.rt.continueStackFrame(_this._value, r.stackframe);
                    });
                });
            };
            return Task;
        })(RT.RTValue);
        RT.Task = Task;
        var TaskResumeCtx = (function (_super) {
            __extends(TaskResumeCtx, _super);
            function TaskResumeCtx(task, s) {
                _super.call(this, s);
                this.task = task;
            }
            TaskResumeCtx.prototype.resumeCore = function (v) {
                this.task.resume(v);
            };
            TaskResumeCtx.prototype.isTaskCtx = function () {
                return true;
            };
            return TaskResumeCtx;
        })(TDev.ResumeCtx);
        RT.TaskResumeCtx = TaskResumeCtx;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(typeInfo) {
                _super.call(this);
                this.typeInfo = typeInfo;
                this.a = [];
            }
            Collection.mkAny = function (typeInfo, a) {
                if (a === void 0) { a = []; }
                return Collection.mk(typeInfo, a);
            };
            Collection.mk = function (a, typeInfo) {
                return Collection.fromArray(a, typeInfo);
            };
            Collection.mkStrings = function (a) {
                return Collection.fromArray(a, "string");
            };
            Collection.mkNumbers = function (a) {
                return Collection.fromArray(a, "number");
            };
            Collection.fromArray = function (a, typeInfo) {
                if (!a)
                    return undefined;
                var r = new Collection(typeInfo);
                r.a = a;
                return r;
            };
            Collection.prototype.get_enumerator = function () {
                return this.a.slice(0);
            };
            Collection.prototype.count = function () {
                return this.a.length;
            };
            Collection.prototype.clear = function () {
                this.a = [];
            };
            Collection.prototype.add = function (item) {
                this.a.push(item);
            };
            Collection.prototype.add_many = function (items) {
                this.a.pushRange(items.a.slice(0));
            };
            Collection.prototype.index_of = function (item, start) {
                if (TDev.Util.isOOB(start, this.count()))
                    return -1;
                for (var i = TDev.Util.indexCheck(start, this.count()); i < this.a.length; ++i)
                    if (this.a[i] === item)
                        return i;
                return -1;
            };
            Collection.prototype.at = function (index) {
                return this.a[Math.floor(index)];
            };
            Collection.prototype.contains = function (item) {
                var i = this.index_of(item, 0);
                return (i >= 0);
            };
            Collection.prototype.remove = function (item) {
                var i = this.index_of(item, 0);
                if (i >= 0) {
                    this.a.splice(i, 1);
                    return true;
                }
                else
                    return false;
            };
            Collection.prototype.remove_at = function (index) {
                if (TDev.Util.isOOB(index, this.count()))
                    return;
                this.a.splice(TDev.Util.indexCheck(index, this.count()), 1);
            };
            Collection.prototype.reverse = function () {
                this.a.reverse();
            };
            Collection.prototype.random = function () {
                return this.a.length == 0 ? undefined : this.at(RT.Math_.random(this.a.length));
            };
            Collection.prototype.set_at = function (index, item) {
                var _index = Math.floor(index);
                if (0 <= _index && index < this.a.length)
                    this.a[_index] = item;
            };
            Collection.prototype.insert_at = function (index, item) {
                if (TDev.Util.isOOB(index, this.count() + 1))
                    return;
                this.a.splice(TDev.Util.indexCheck(index, this.count() + 1), 0, item);
            };
            Collection.prototype.to_json = function (sf) {
                var ctx = new TDev.JsonExportCtx(sf);
                ctx.push(this);
                var json = this.exportJson(ctx);
                ctx.pop(this);
                return RT.JsonObject.wrap(json);
            };
            Collection.prototype.from_json = function (jobj, sf) {
                this.importJson(new TDev.JsonImportCtx(sf), jobj.value());
            };
            Collection.prototype.where = function (condition, s) {
                var rt = s.rt;
                return Collection.fromArray(this.a.filter(function (e) { return !!rt.runUserAction(condition, [e]); }), this.typeInfo);
            };
            Collection.prototype.map_to = function (converter, s, type_S) {
                var rt = s.rt;
                return Collection.fromArray(this.a.map(function (e) { return rt.runUserAction(converter, [e]); }), type_S);
            };
            Collection.prototype.sorted = function (comparison, s) {
                var rt = s.rt;
                return Collection.fromArray(this.a.stableSorted(function (a, b) { return rt.runValidUserAction(comparison, [a, b]); }), this.typeInfo);
            };
            Collection.prototype.ordered_by = function (key, s) {
                var rt = s.rt;
                return Collection.fromArray(this.a.stableSorted(function (a, b) {
                    return rt.runValidUserAction(key, [a]) - rt.runValidUserAction(key, [b]);
                }), this.typeInfo);
            };
            Collection.prototype.ordered_by_string = function (key, s) {
                var rt = s.rt;
                return Collection.fromArray(this.a.stableSorted(function (a, b) {
                    return rt.runValidUserAction(key, [a]).localeCompare(rt.runValidUserAction(key, [b]));
                }), this.typeInfo);
            };
            Collection.prototype.take = function (count, s) {
                return Collection.fromArray(this.a.slice(0, Math.floor(count)), this.typeInfo);
            };
            Collection.prototype.slice = function (start, end) {
                return Collection.fromArray(this.a.slice(Math.floor(start), Math.floor(end)), this.typeInfo);
            };
            Collection.prototype.first = function () {
                return this.at(0);
            };
            Collection.prototype.last = function () {
                return this.at(this.count() - 1);
            };
            Collection.prototype.jsonExportKey = function (ctx) {
                return null;
            };
            Collection.prototype.exportJson = function (ctx) {
                if (this.a.length > 0 && (this.a[0]["exportJson"] === undefined)) {
                    var a0 = this.a[0];
                    if (typeof a0 == "string" || typeof a0 == "number" || typeof a0 == "boolean") {
                    }
                    else
                        TDev.Util.userError(TDev.lf("json export is not supported for this type"));
                }
                return ctx.encodeArrayNode(this, this.a.slice(0));
            };
            Collection.prototype.importJson = function (ctx, json) {
                var _this = this;
                var prev = this.a;
                this.a = [];
                if (!Array.isArray(json))
                    return this;
                if (typeof this.typeInfo == "string") {
                    if (this.typeInfo === "number")
                        json.forEach(function (n) {
                            if (typeof n === "number")
                                _this.a.push(n);
                        });
                    else if (this.typeInfo === "string")
                        json.forEach(function (n) {
                            if (typeof n === "string")
                                _this.a.push(n);
                        });
                    else if (this.typeInfo === "boolean")
                        json.forEach(function (n) {
                            if (typeof n === "boolean")
                                _this.a.push(n);
                        });
                    else
                        TDev.Util.userError("json import is not supported for Collection of " + this.typeInfo);
                }
                else if (this.typeInfo instanceof RT.RecordSingleton) {
                    for (var n = 0; n < json.length; n++) {
                        var o = ctx.importRecord(json, prev[n], n, this.typeInfo);
                        if (o)
                            this.a.push(o);
                    }
                }
                else if (typeof this.typeInfo === "function") {
                    var ctor = this.typeInfo;
                    json.forEach(function (n) {
                        var v = new ctor();
                        v = v.importJson(ctx, n);
                        if (v)
                            _this.a.push(v);
                    });
                }
                else {
                    TDev.Util.userError("json import is not supported for this Collection");
                }
                return this;
            };
            Collection.prototype.getHtml = function () {
                var first = undefined;
                for (var i = 0; i < this.a.length; ++i)
                    if (this.a[i]) {
                        first = this.a[i];
                        break;
                    }
                var s = '[';
                for (var i = 0; i < this.a.length; ++i) {
                    if (i > 0)
                        s += ', ';
                    s += this.a[i];
                }
                s += ']';
                return TDev.span(null, s);
            };
            Collection.prototype.getRecord = function () {
                if (this.typeInfo instanceof RT.RecordSingleton)
                    return this.typeInfo;
                return null;
            };
            Collection.prototype.post_to_wall = function (s) {
                if (this.getRecord())
                    s.rt.postBoxedHtml(this.getRecord().getTable(this.a, s), s.pc);
                else
                    s.rt.postBoxedHtml(this.getHtml(), s.pc);
            };
            Collection.prototype.debuggerDisplay = function (clickHandler) {
                var e;
                if (this.getRecord()) {
                    try {
                        e = this.getRecord().getTable(this.a, null);
                    }
                    catch (e) {
                        e = TDev.span(null, e.message || "");
                    }
                }
                else {
                    e = this.getHtml();
                }
                return e.withClick(clickHandler);
            };
            Collection.prototype.pick_entry = function (text, r) {
                var rt = r.rt;
                var getView = function (o) {
                    if (o.getIndexCard)
                        return o.getIndexCard(r.stackframe);
                    else if (o.getViewCore)
                        return o.getViewCore(r.stackframe, null);
                    else if (o.toString)
                        return o.toString();
                    else
                        return o + "";
                };
                var m = new TDev.ModalDialog();
                var chosen = null;
                var btns = this.a.map(function (o) { return TDev.div('modalDialogChooseItem', getView(o)).withClick(function () {
                    chosen = o;
                    m.dismiss();
                }); });
                m.add([TDev.div("wall-dialog-header", text)]);
                m.onDismiss = function () { return r.resumeVal(chosen); };
                m.choose(btns);
            };
            Collection.prototype.sum_of = function (key, s) {
                var rt = s.rt;
                var v = this.a.map(function (x) { return rt.runValidUserAction(key, [x]); });
                return TDev.Util.stableSum(v);
            };
            Collection.prototype.max_of = function (key, s) {
                var rt = s.rt;
                if (this.a.length == 0)
                    return undefined;
                var m = rt.runValidUserAction(key, [this.a[0]]);
                for (var i = 1; i < this.a.length; ++i) {
                    var v = rt.runValidUserAction(key, [this.a[i]]);
                    if (v > m)
                        m = v;
                }
                return m;
            };
            Collection.prototype.avg_of = function (key, s) {
                var rt = s.rt;
                if (this.a.length == 0)
                    return undefined;
                return this.sum_of(key, s) / this.count();
            };
            Collection.prototype.min_of = function (key, s) {
                var rt = s.rt;
                if (this.a.length == 0)
                    return undefined;
                var m = rt.runValidUserAction(key, [this.a[0]]);
                for (var i = 1; i < this.a.length; ++i) {
                    var v = rt.runValidUserAction(key, [this.a[i]]);
                    if (v < m)
                        m = v;
                }
                return m;
            };
            Collection.prototype.min = function () {
                var a = this.a;
                if (a.length == 0)
                    return undefined;
                return this.a.min();
            };
            Collection.prototype.max = function () {
                if (this.a.length == 0)
                    return undefined;
                var a = this.a;
                return a.max();
            };
            Collection.prototype.sum = function () {
                if (this.a.length == 0)
                    return 0;
                var a = this.a;
                return TDev.Util.stableSum(a);
            };
            Collection.prototype.avg = function () {
                if (this.a.length == 0)
                    return 0;
                return this.sum() / this.a.length;
            };
            Collection.prototype.sort_by_date = function () {
                this.a.sort(function (m1, m2) {
                    if (!m1.time())
                        return 1;
                    if (!m2.time())
                        return -1;
                    return m1.time().d.valueOf() < m2.time().d.valueOf() ? -1 : 1;
                });
            };
            Collection.prototype.sort = function () {
                this.a.sort();
            };
            Collection.prototype.sort_by_distance = function (loc) {
                var getLoc = function (l) {
                    if (l instanceof RT.Place)
                        return l.location();
                    return l;
                };
                this.a.sort(function (l, r) {
                    var lloc = getLoc(l);
                    var rloc = getLoc(r);
                    if (!lloc && !rloc)
                        return 0;
                    if (!lloc)
                        return 1;
                    if (!rloc)
                        return -1;
                    return rloc.distance(lloc) - lloc.distance(rloc);
                });
            };
            Collection.prototype.join = function (separator) {
                return this.a.join(separator);
            };
            Collection.prototype.continuation = function () {
                return this._continuation || "";
            };
            Collection.prototype.set_continuation = function (value) {
                this._continuation = value;
            };
            return Collection;
        })(RT.RTValue);
        RT.Collection = Collection;
        var StringCollection;
        (function (StringCollection) {
            function mk(v) {
                return Collection.mkStrings(v);
            }
            StringCollection.mk = mk;
            function fromArray(v) {
                return Collection.mkStrings(v);
            }
            StringCollection.fromArray = fromArray;
        })(StringCollection = RT.StringCollection || (RT.StringCollection = {}));
        var NumberCollection;
        (function (NumberCollection) {
            function mk(v) {
                return Collection.mkNumbers(v);
            }
            NumberCollection.mk = mk;
            function fromArray(v) {
                return Collection.mkNumbers(v);
            }
            NumberCollection.fromArray = fromArray;
        })(NumberCollection = RT.NumberCollection || (RT.NumberCollection = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var User = (function (_super) {
            __extends(User, _super);
            function User() {
                _super.call(this);
                this._id = undefined;
            }
            User.getJsonAsync = function (userId) {
                if (User.jsonCache.hasOwnProperty(userId))
                    return User.jsonCache[userId];
                var p;
                var m = /^([^:]*):(.*)/.exec(userId);
                if (m) {
                    if (m[1] == "td")
                        p = User.getJsonAsync(m[2]);
                    else if (m[1] == "live" && /^[^0-9a-f]+$/.test(m[2]))
                        p = TDev.Util.httpGetJsonAsync("https://apis.live.net/v5.0/" + m[2]).then(function (resp) {
                            return {
                                kind: "user",
                                id: userId,
                                name: resp.name
                            };
                        });
                    else
                        p = TDev.Promise.as({
                            kind: "user",
                            id: userId,
                        });
                }
                else {
                    p = TDev.Cloud.getPublicApiAsync(encodeURIComponent(userId));
                }
                User.jsonCache[userId] = p;
                return p;
            };
            User.prototype.getJsonAsync = function () {
                return User.getJsonAsync(this._id);
            };
            User.prototype.getApiUrl = function (path) {
                var ns = this.idNamespace();
                var id = this._id;
                if (ns == "td" || ns == "")
                    id = this._id.replace(/^[^:]+:/, "");
                else
                    return undefined;
                return TDev.Cloud.getServiceUrl() + "/api/" + encodeURIComponent(id) + path;
            };
            User.prototype.getPictureUrl = function (user, which) {
                return (user && user.haspicture) ? this.getApiUrl("/picture" + ((which && which != "original") ? ("?type=" + encodeURIComponent(which)) : "")) : undefined;
            };
            User.prototype.idNamespace = function () {
                var m = /^([^:]*):(.*)/.exec(this._id);
                if (m)
                    return m[1];
                else
                    return "";
            };
            User.prototype.toJsonKey = function () {
                return this._id;
            };
            User.prototype.keyCompareTo = function (o) {
                var other = o;
                return (this._id < other._id) ? -1 : (this._id > other._id) ? 1 : 0;
            };
            User.mk = function (id) {
                var u = new User();
                u._id = id;
                return u;
            };
            User.prototype.getShortStringRepresentation = function () {
                return this._id;
            };
            User.prototype.toString = function () {
                var s = "user /" + this._id;
                return s;
            };
            User.prototype.exportJson = function (ctx) {
                return this._id;
            };
            User.prototype.importJson = function (ctx, json) {
                TDev.Util.oops("should not call immutable instance for importing");
                return undefined;
            };
            User.mkFromJson = function (ctx, json) {
                if (typeof (json) !== "string")
                    return undefined;
                else {
                    return User.mk(json);
                }
            };
            User.prototype.equals = function (other) {
                return this._id == other._id;
            };
            User.prototype.id = function () {
                return this._id;
            };
            User.prototype.preload = function (r) {
                this.loadFirst(r, function (user) {
                });
            };
            User.prototype.name = function (r) {
                this.loadFirst(r, function (user) { return user ? user.name : undefined; });
            };
            User.prototype.about = function (r) {
                this.loadFirst(r, function (user) { return user ? user.about : undefined; });
            };
            User.prototype.has_picture = function (r) {
                this.loadFirst(r, function (user) { return user ? user.haspicture : undefined; });
            };
            User.prototype.settings = function (r) {
                var currentUserId = TDev.Cloud.getUserId();
                if (this._id != currentUserId) {
                    r.resumeVal(RT.Web.json("{}"));
                    return;
                }
                r.rt.host.askSourceAccessAsync("settings", "your twitter handle, github user or minecraft user.", false).then(function (allowed) {
                    if (!allowed)
                        return TDev.Promise.as(undefined);
                    else
                        return TDev.Cloud.getUserSettingsAsync().then(function (user) { return user ? RT.JsonObject.wrap({
                            twitterhandle: user.twitterhandle,
                            githubuser: user.githubuser,
                            minecraftuser: user.minecraftuser
                        }) : undefined; });
                }).done(function (se) { return r.resumeVal(se); });
            };
            User.prototype.picture_address = function (which, r) {
                var _this = this;
                this.loadFirst(r, function (user) { return _this.getPictureUrl(user, which); });
            };
            User.prototype.picture = function (which, r) {
                var _this = this;
                TDev.Util.assert(!!r);
                this.getJsonAsync().then(function (user) { return _this.getPictureUrl(user, which); }).then(function (url) { return url ? RT.Picture.fromUrl(url) : undefined; }).done(function (picture) { return r.resumeVal(picture); });
            };
            User.prototype.loadFirst = function (r, f) {
                TDev.Util.assert(!!r);
                this.getJsonAsync().done(function (user) {
                    if (!f)
                        r.resume();
                    else
                        r.resumeVal(f(user));
                }, function (e) {
                    if (!f)
                        r.resume();
                    else
                        r.resumeVal(f(undefined));
                });
            };
            User.prototype.getViewCore = function (s, b) {
                var _this = this;
                if (b === void 0) { b = null; }
                var elt = TDev.div("item", [TDev.div("wall-dialog-header", "user /" + this._id)]);
                this.getJsonAsync().then(function (user) {
                    if (user.kind == "user") {
                        elt.appendChildren(TDev.div("wall-dialog-body", "name: " + user.name));
                        if (user.haspicture) {
                            var img = TDev.createElement("img");
                            img.setAttribute('class', 'wall-picture');
                            img.src = _this.getPictureUrl(user, "large");
                            img.alt = user.name;
                            elt.appendChildren(img);
                        }
                    }
                    else
                        elt.appendChildren(TDev.div("wall-dialog-body", TDev.lf("invalid user id")));
                }, function (e) {
                    elt.appendChildren(TDev.div("wall-dialog-body", TDev.lf("further user information unavailable")));
                }).done();
                return elt;
            };
            User.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            User.jsonCache = {};
            return User;
        })(RT.RTValue);
        RT.User = User;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BluetoothDevice = (function (_super) {
            __extends(BluetoothDevice, _super);
            function BluetoothDevice() {
                _super.apply(this, arguments);
                this._isConnected = false;
            }
            BluetoothDevice.prototype.name = function () {
                return this._displayName;
            };
            BluetoothDevice.prototype.address = function () {
                return this._hostName + ":" + this._serviceName;
            };
            BluetoothDevice.prototype.connected = function () {
                return this._isConnected;
            };
            BluetoothDevice.prototype.connect = function (r) {
            };
            BluetoothDevice.prototype.disconnect = function (r) {
            };
            BluetoothDevice.prototype.readAsync = function (max_length) {
                return TDev.Promise.as(undefined);
            };
            BluetoothDevice.prototype.read_buffer_at_most = function (max_length, r) {
                this.readAsync(max_length).done(function (buf) {
                    r.resumeVal(buf);
                });
            };
            BluetoothDevice.prototype.read_buffer = function (length, r) {
                var _this = this;
                var res = RT.Buffer.mk(length);
                var readMore = function (off) {
                    _this.readAsync(length - off).done(function (buf) {
                        if (!buf)
                            r.resumeVal(undefined);
                        else {
                            res.copy_from(off, buf);
                            off += buf.count();
                            if (off < length)
                                readMore(off);
                            else
                                r.resumeVal(res);
                        }
                    });
                };
                readMore(0);
            };
            BluetoothDevice.prototype.write_buffer = function (buffer, r) {
            };
            BluetoothDevice.prototype.toString = function () {
                return this.name() + " (" + this.address() + ") - " + (this.connected() ? "connected" : "not connected");
            };
            BluetoothDevice.prototype.post_to_wall = function (s) {
                s.rt.postBoxedText(this.toString(), s.pc);
            };
            BluetoothDevice.getDevicesAsync = function () { return TDev.Promise.as(undefined); };
            return BluetoothDevice;
        })(RT.RTValue);
        RT.BluetoothDevice = BluetoothDevice;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Ref = (function (_super) {
            __extends(Ref, _super);
            function Ref() {
                _super.call(this);
            }
            Ref.prototype._get = function (s) {
                return this._item;
            };
            Ref.prototype._confirmed = function (s) {
                return true;
            };
            Ref.prototype._set = function (t, s) {
                this._item = t;
            };
            Ref.prototype._clear = function (s) {
                this._set(undefined, s);
            };
            Ref.prototype._ref = function (s) {
                return this;
            };
            Ref.prototype._add = function (v, s) {
                this._set((this._get(s) + v), s);
            };
            Ref.prototype._test_and_set = function (v, s) {
                if (!this._get(s))
                    this._set(v, s);
            };
            Ref.prototype._with_notify = function (on_changed, s) {
                return new RefWithNotify(this, on_changed);
            };
            return Ref;
        })(RT.RTValue);
        RT.Ref = Ref;
        var GlobalVarRef = (function (_super) {
            __extends(GlobalVarRef, _super);
            function GlobalVarRef(d, fieldname) {
                _super.call(this);
                this.d = d;
                this.fieldname = fieldname;
            }
            GlobalVarRef.mk = function (d, fieldname) {
                return new GlobalVarRef(d, fieldname);
            };
            GlobalVarRef.prototype._set = function (v, s) {
                this.d[this.fieldname] = v;
            };
            GlobalVarRef.prototype._get = function (s) {
                return this.d[this.fieldname];
            };
            return GlobalVarRef;
        })(Ref);
        RT.GlobalVarRef = GlobalVarRef;
        var PersistedVarRef = (function (_super) {
            __extends(PersistedVarRef, _super);
            function PersistedVarRef(container, fieldname) {
                _super.call(this);
                this.container = container;
                this.fieldname = fieldname;
            }
            PersistedVarRef.mk = function (container, fieldname) {
                return new PersistedVarRef(container, fieldname);
            };
            PersistedVarRef.prototype._set = function (v, s) {
                this.container.perform_set(this.fieldname, v, s);
            };
            PersistedVarRef.prototype._get = function (s) {
                return this.container.perform_get(this.fieldname, s);
            };
            PersistedVarRef.prototype._clear = function (s) {
                this.container.perform_clear(this.fieldname, s);
            };
            PersistedVarRef.prototype._add = function (v, s) {
                this.container.perform_add(this.fieldname, v, s);
            };
            PersistedVarRef.prototype._test_and_set = function (v, s) {
                this.container.perform_test_and_set(this.fieldname, v, s);
            };
            PersistedVarRef.prototype._confirmed = function (s) {
                return this.container.perform_confirmed(this.fieldname);
            };
            return PersistedVarRef;
        })(Ref);
        RT.PersistedVarRef = PersistedVarRef;
        var FieldRef = (function (_super) {
            __extends(FieldRef, _super);
            function FieldRef(entry, fieldname) {
                _super.call(this);
                this.entry = entry;
                this.fieldname = fieldname;
            }
            FieldRef.mk = function (entry, fieldname) {
                return new FieldRef(entry, fieldname);
            };
            FieldRef.prototype._set = function (v, s) {
                this.entry.perform_set(this.fieldname, v, s);
            };
            FieldRef.prototype._get = function (s) {
                return this.entry.perform_get(this.fieldname, s);
            };
            FieldRef.prototype._clear = function (s) {
                this.entry.perform_clear(this.fieldname, s);
            };
            FieldRef.prototype._add = function (v, s) {
                this.entry.perform_add(this.fieldname, v, s);
            };
            FieldRef.prototype._test_and_set = function (v, s) {
                this.entry.perform_test_and_set(this.fieldname, v, s);
            };
            FieldRef.prototype._confirmed = function (s) {
                return this.entry.perform_confirmed(this.fieldname, s);
            };
            return FieldRef;
        })(Ref);
        RT.FieldRef = FieldRef;
        var RefWithNotify = (function (_super) {
            __extends(RefWithNotify, _super);
            function RefWithNotify(ref, on_changed) {
                _super.call(this);
                this.ref = ref;
                this.ev = new RT.Event_();
                this.ev.addHandler(on_changed);
            }
            RefWithNotify.prototype.notify = function (s) {
                s.rt.queueLocalEvent(this.ev, undefined, true, true);
            };
            RefWithNotify.prototype._set = function (v, s) {
                this.ref._set(v, s);
                this.notify(s);
            };
            RefWithNotify.prototype._get = function (s) {
                return this.ref._get(s);
            };
            RefWithNotify.prototype._clear = function (s) {
                this.ref._clear(s);
                this.notify(s);
            };
            RefWithNotify.prototype._add = function (v, s) {
                this.ref._add(v, s);
                this.notify(s);
            };
            RefWithNotify.prototype._test_and_set = function (v, s) {
                this.ref._test_and_set(v, s);
                this.notify(s);
            };
            RefWithNotify.prototype._confirmed = function (s) {
                return this.ref._confirmed(s);
            };
            return RefWithNotify;
        })(Ref);
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var AudioContextManager;
        (function (AudioContextManager) {
            var _context;
            function context() {
                if (!_context)
                    _context = freshContext();
                return _context;
            }
            function freshContext() {
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                if (window.AudioContext) {
                    try {
                        return new window.AudioContext();
                    }
                    catch (e) {
                    }
                }
                return undefined;
            }
            function isSupported() {
                return !!context();
            }
            AudioContextManager.isSupported = isSupported;
            function loadAsync(buffer) {
                var ctx = context();
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    ctx.decodeAudioData(buffer, function (b) { return onSuccess(b); }, function (e) { return onSuccess(undefined); });
                });
            }
            AudioContextManager.loadAsync = loadAsync;
            function play(buffer, volume) {
                var ctx = context();
                if (ctx) {
                    var source = ctx.createBufferSource();
                    source.buffer = buffer;
                    var gain = ctx.createGain();
                    gain.gain.value = volume;
                    source.connect(gain);
                    gain.connect(ctx.destination);
                    source.start(0);
                }
            }
            AudioContextManager.play = play;
            function createNode(ctx) {
                if (!ctx.createScriptProcessor)
                    return ctx.createJavaScriptNode(4096, 1, 1);
                else
                    return ctx.createScriptProcessor(4096, 1, 1);
            }
            function isMicrophoneSupported() {
                return isSupported() && RT.UserMediaManager.isSupported();
            }
            AudioContextManager.isMicrophoneSupported = isMicrophoneSupported;
            function recordMicrophoneAsync() {
                if (!isSupported())
                    return TDev.Promise.as(undefined);
                return RT.UserMediaManager.getMicrophoneStreamAsync().then(function (stream) {
                    if (!stream)
                        return TDev.Promise.as(undefined);
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var ctx = freshContext();
                        if (!ctx) {
                            RT.App.log("failed to acquire AudioContext");
                            onSuccess(undefined);
                            return;
                        }
                        var source = ctx.createMediaStreamSource(stream);
                        var node = createNode(ctx);
                        var buffers = [];
                        var buffersLength = 0;
                        node.onaudioprocess = function (e) {
                            if (!buffers)
                                return;
                            var b = e.inputBuffer.getChannelData(0);
                            var clone = new Float32Array(b.length);
                            clone.set(b);
                            buffers.push(clone);
                            buffersLength += clone.length;
                        };
                        source.connect(node);
                        node.connect(ctx.destination);
                        var wav = undefined;
                        var m = new TDev.ModalDialog();
                        m.add(TDev.div('wall-dialog-header', 'recording microphone...'));
                        m.add(TDev.div('wall-dialog-buttons', TDev.HTML.mkButton('done', function () {
                            source.disconnect();
                            source = null;
                            node.disconnect();
                            node.onaudioprocess = null;
                            node = null;
                            var wavBytes = encodeToWav(buffers, buffersLength, ctx.sampleRate);
                            wav = 'data:audio/wav;base64,' + TDev.Util.base64EncodeBytes(wavBytes);
                            m.dismiss();
                        })));
                        m.onDismiss = function () {
                            if (source) {
                                source.disconnect();
                                source = null;
                            }
                            if (node) {
                                node.disconnect();
                                node.onaudioprocess = null;
                                node = null;
                            }
                            ctx = null;
                            onSuccess(wav);
                        };
                        m.show();
                    });
                });
            }
            AudioContextManager.recordMicrophoneAsync = recordMicrophoneAsync;
            function encodeToWav(buffers, buffersLength, sampleRate) {
                var buffer = new ArrayBuffer(44 + buffersLength * 2);
                var view = new DataView(buffer);
                var offset = 0;
                function writeString(s) {
                    for (var i = 0; i < s.length; i++, offset++) {
                        view.setUint8(offset, s.charCodeAt(i));
                    }
                }
                function writeUint32(u) {
                    view.setUint32(offset, u, true);
                    offset += 4;
                }
                function writeUint16(u) {
                    view.setUint16(offset, u, true);
                    offset += 2;
                }
                function writePCM(buffer) {
                    for (var i = 0; i < buffer.length; i++, offset += 2) {
                        var s = Math.max(-1, Math.min(1, buffer[i]));
                        view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
                    }
                }
                var numChannels = 1;
                var bytesPerSample = 2;
                writeString('RIFF');
                writeUint32(36 + buffersLength * bytesPerSample);
                writeString('WAVE');
                writeString('fmt ');
                writeUint32(16);
                writeUint16(1);
                writeUint16(numChannels);
                writeUint32(sampleRate);
                writeUint32(sampleRate * bytesPerSample * numChannels);
                writeUint16(numChannels * bytesPerSample);
                writeUint16(bytesPerSample * 8);
                writeString('data');
                writeUint32(buffersLength * numChannels * bytesPerSample);
                for (var j = 0; j < buffers.length; ++j)
                    writePCM(buffers[j]);
                return new Uint8Array(buffer, 0, buffer.byteLength);
            }
        })(AudioContextManager = RT.AudioContextManager || (RT.AudioContextManager = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var SpriteSheet = (function (_super) {
            __extends(SpriteSheet, _super);
            function SpriteSheet(_board, _picture) {
                _super.call(this);
                this._board = _board;
                this._picture = _picture;
                this.frames = {};
                this.animations = {};
                this.empty = { x: 0, y: 0, width: 0, height: 0, rotated: false };
            }
            SpriteSheet.prototype.picture = function () {
                return this._picture;
            };
            SpriteSheet.prototype.set_frame = function (sprite, frame) {
                var f = this.frames[frame];
                sprite.setFrame(f || this.empty);
            };
            SpriteSheet.prototype.create_sprite = function (frame) {
                var sprite = this._board.mkSprite(3 /* Picture */, 1, 1);
                sprite.setSheet(this);
                this.set_frame(sprite, frame);
                return sprite;
            };
            SpriteSheet.prototype.set_frame_grid = function (rows, columns, frame_width, frame_height, margin_left, margin_top, spacing) {
                this.frames = [];
                if (rows < 1 || columns < 1)
                    return;
                rows = Math.floor(rows);
                columns = Math.floor(columns);
                var h = this._picture.heightSync();
                var w = this._picture.widthSync();
                var fw = frame_width > 0 ? frame_width : w / columns;
                var fh = frame_height > 0 ? frame_height : h / rows;
                var k = 1;
                var y = margin_top;
                for (var i = 0; i < rows; ++i) {
                    var x = margin_left;
                    for (var j = 0; j < columns; ++j) {
                        var name = (k++).toString();
                        this.add_frame(name, x, y, fw, fh, false);
                        x += fw + spacing;
                    }
                    y += fh + spacing;
                }
            };
            SpriteSheet.prototype.add_frame = function (name, x, y, width, height, rotated) {
                this.frames[name] = {
                    x: x,
                    y: y,
                    width: width,
                    height: height,
                    rotated: rotated
                };
            };
            SpriteSheet.prototype.findAnimation = function (name) {
                return this.animations[name];
            };
            SpriteSheet.prototype.add_grid_animation = function (name, start, count, duration, loops, yoyo) {
                var frs = [];
                start = Math.floor(start);
                count = Math.floor(count);
                if (count < 1)
                    return;
                var n = start + count;
                for (var i = start; i <= n; ++i)
                    frs.push(i.toString());
                if (frs.length > 0)
                    this.add_animation(name, RT.Collection.mkStrings(frs), duration, loops, yoyo);
            };
            SpriteSheet.prototype.add_animation = function (name, frames, duration, loops, yoyo) {
                if (duration <= 0)
                    duration = frames.count() * 1 / 30.0;
                this.animations[name] = {
                    frames: frames.a.slice(0),
                    duration: Math.max(0.02, duration),
                    loopCount: Math.floor(loops),
                    yoyo: yoyo
                };
            };
            SpriteSheet.prototype.getDebugCanvas = function () {
                var _this = this;
                var picCanvas = this._picture.getCanvas();
                var canvas = document.createElement("canvas");
                canvas.width = picCanvas.width;
                canvas.height = picCanvas.height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(picCanvas, 0, 0);
                ctx.strokeStyle = "blue";
                ctx.lineWidth = 1;
                ctx.font = "1em Arial";
                var keys = Object.keys(this.frames);
                keys.forEach(function (key) {
                    var frame = _this.frames[key];
                    ctx.strokeRect(frame.x, frame.y, frame.width, frame.height);
                    ctx.fillText(key, frame.x + 4, frame.y + 12);
                });
                return canvas;
            };
            SpriteSheet.prototype.getViewCore = function (s, b) {
                return this.getDebugCanvas();
            };
            SpriteSheet.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return SpriteSheet;
        })(RT.RTValue);
        RT.SpriteSheet = SpriteSheet;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var SpriteAnimation = (function (_super) {
            __extends(SpriteAnimation, _super);
            function SpriteAnimation(_sprite) {
                _super.call(this);
                this._sprite = _sprite;
                this._tweens = [];
                this._tweenIndex = 0;
                this._t = -1;
                this._timeScale = 1;
                this.isActive = true;
            }
            SpriteAnimation.prototype.pushTween = function (apply, easing, duration) {
                this.ensureActive();
                if (this._tweens.length > 0 && this._tweens[this._tweens.length - 1].repeat < 0)
                    TDev.Util.userError(TDev.lf("the previous animation repeats forever"));
                var tween = { apply: apply, easing: easing, duration: Math.max(duration, 0), repeat: 1, yoyo: false, reversed: false };
                this._tweens.push(tween);
                return tween;
            };
            SpriteAnimation.prototype.ensureActive = function () {
                if (!this.isActive)
                    TDev.Util.userError(TDev.lf("trying to chain a tween that has already stopped"));
            };
            SpriteAnimation.resolveEasing = function (name, shape) {
                var e = SpriteAnimation.easing[name.toLowerCase().replace(' ', '')] || SpriteAnimation.easing['cubic'];
                return e[shape.toLowerCase().replace(' ', '')] || e['inout'];
            };
            SpriteAnimation.prototype.time_scale = function () {
                return this._timeScale;
            };
            SpriteAnimation.prototype.set_time_scale = function (scale) {
                this._timeScale = scale;
            };
            SpriteAnimation.prototype.move_to = function (duration, easing, shape, x, y) {
                var oldx = this._sprite.x();
                var oldy = this._sprite.y();
                var dx = x - oldx;
                var dy = y - oldy;
                this.pushTween(function (rt, sprite, k) {
                    sprite.set_pos(oldx + k * dx, oldy + k * dy);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.text = function (duration, easing, shape, value) {
                var oldtext = this._sprite.text() || "";
                var oldnumber = parseInt(oldtext);
                var newnumber = parseInt(value);
                if (!isNaN(newnumber) && (!isNaN(oldnumber) || !oldnumber)) {
                    if (isNaN(oldnumber))
                        oldnumber = 0;
                    var d = newnumber - oldnumber;
                    this.pushTween(function (rt, sprite, k) {
                        sprite.set_text(RT.Math_.round(oldnumber + k * d).toString());
                    }, SpriteAnimation.resolveEasing(easing, shape), duration);
                }
                else {
                    var n = Math.max(oldtext.length, value.length);
                    var s = oldtext;
                    this.pushTween(function (rt, sprite, k) {
                        var i = Math.floor(k * n);
                        var c = value[i] || "";
                        s = (value.substring(0, i) || "") + +(oldtext.substring(i) || "");
                        sprite.set_text(s);
                    }, SpriteAnimation.resolveEasing(easing, shape), duration);
                }
            };
            SpriteAnimation.prototype.color = function (duration, easing, shape, c) {
                var old = this._sprite.color();
                this.pushTween(function (rt, sprite, k) {
                    var onek = 1 - k;
                    sprite.set_color(RT.Color.fromArgb(old.a * k + c.a * onek, old.r * k + c.r * onek, old.g * k + c.g * onek, old.b * k + c.b * onek));
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.beat = function (duration, cycle, value) {
                this.scale(duration, 'quadratic', 'inout', value);
                this.repeat(cycle * 2, true);
            };
            SpriteAnimation.prototype.scale = function (duration, easing, shape, value) {
                var current = 1.0;
                this.pushTween(function (rt, sprite, k) {
                    sprite.set_scale(current * (1 - k) + k * value);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.width = function (duration, easing, shape, value) {
                var current = this._sprite.width();
                this.pushTween(function (rt, sprite, k) {
                    sprite.set_width(current * (1 - k) + k * value);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.height = function (duration, easing, shape, value) {
                var current = this._sprite.height();
                this.pushTween(function (rt, sprite, k) {
                    sprite.set_height(current * (1 - k) + k * value);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.fork = function () {
                var anim = this._sprite.createAnimation();
                this.pushTween(function (rt, sprite, k) {
                    sprite.startAnimation(anim);
                }, SpriteAnimation.easing['linear']['in'], 0);
                return anim;
            };
            SpriteAnimation.prototype.wait = function (r) {
                var _this = this;
                var board = this._sprite._parent;
                var boardTick = board.tick;
                if (!board) {
                    r.resume();
                    return;
                }
                var step = function () {
                    r.rt.yield_now();
                    if (boardTick != board.tick) {
                        boardTick = board.tick;
                        board.evolve();
                        board.update_on_wall();
                    }
                    if (!_this.isActive)
                        r.resume();
                    else
                        TDev.Util.setTimeout(100, step);
                };
                step();
            };
            SpriteAnimation.prototype.wait_for = function (animation) {
                var tween = this.pushTween(function (rt, sprite, k) {
                    if (!animation.isActive)
                        tween.duration = -1;
                }, SpriteAnimation.easing['linear']['in'], 1e6);
            };
            SpriteAnimation.prototype.stop = function () {
                this._tweenIndex = this._tweens.length;
                this._t = 0;
            };
            SpriteAnimation.prototype.repeat = function (count, yoyo) {
                this.ensureActive();
                if (this._tweens.length > 0) {
                    var tween = this._tweens[this._tweens.length - 1];
                    tween.repeat = count;
                    tween.yoyo = yoyo;
                    tween.reversed = false;
                }
            };
            SpriteAnimation.prototype.on_start = function (handler) {
                if (!this._onStart)
                    this._onStart = new RT.Event_();
                return this._onStart.addHandler(handler);
            };
            SpriteAnimation.prototype.on_stop = function (handler) {
                this.ensureActive();
                if (!this._onStop)
                    this._onStop = new RT.Event_();
                return this._onStop.addHandler(handler);
            };
            SpriteAnimation.prototype.sleep = function (duration) {
                this.pushTween(function (rt, sprite, x) {
                }, SpriteAnimation.easing['linear']['in'], duration);
            };
            SpriteAnimation.prototype.fade_in = function (duration, easing) {
                var old = this._sprite.opacity();
                this.pushTween(function (rt, sprite, value) {
                    sprite.set_opacity(old * (1 - value) + value);
                }, SpriteAnimation.resolveEasing(easing, 'in'), duration);
            };
            SpriteAnimation.prototype.fade_out = function (duration, easing) {
                var old = this._sprite.opacity();
                this.pushTween(function (rt, sprite, value) {
                    sprite.set_opacity(old * (1 - value));
                }, SpriteAnimation.resolveEasing(easing, 'out'), duration);
            };
            SpriteAnimation.prototype.fade = function (duration, easing, shape, opacity) {
                var old = this._sprite.opacity();
                opacity = RT.Math_.normalize(opacity);
                this.pushTween(function (rt, sprite, value) {
                    sprite.set_opacity(old * (1 - value) + opacity * value);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.puff_out = function (duration, easing, scale) {
                var oldop = this._sprite.opacity();
                var oldscale = this._sprite.scale();
                this.pushTween(function (rt, sprite, value) {
                    sprite.set_opacity(oldop * (1 - value));
                    sprite.set_scale(oldscale * (1 - value) + value * scale);
                }, SpriteAnimation.resolveEasing(easing, 'out'), duration);
            };
            SpriteAnimation.prototype.hide = function () {
                this.pushTween(function (rt, sprite, value) {
                    sprite.hide();
                }, SpriteAnimation.easing['linear']['in'], 0);
            };
            SpriteAnimation.prototype.show = function () {
                this.pushTween(function (rt, sprite, value) {
                    sprite.show();
                }, SpriteAnimation.easing['linear']['in'], 0);
            };
            SpriteAnimation.prototype.delete_ = function () {
                this.pushTween(function (rt, sprite, value) {
                    sprite.delete_();
                }, SpriteAnimation.easing['linear']['in'], 0);
            };
            SpriteAnimation.prototype.play_sound = function (sound) {
                this.pushTween(function (rt, sprite, value) {
                    sound.playAsync().done();
                }, SpriteAnimation.easing['linear']['in'], 0);
            };
            SpriteAnimation.prototype.frame = function (name) {
                var sheet = this._sprite.sheet();
                if (sheet)
                    this.pushTween(function (rt, sprite, value) {
                        sheet.set_frame(sprite, name);
                    }, SpriteAnimation.easing['linear']['in'], 0);
            };
            SpriteAnimation.prototype.play_frames = function (animation) {
                var sheet = this._sprite.sheet();
                if (sheet) {
                    var data = sheet.findAnimation(animation);
                    if (data) {
                        this.pushTween(function (rt, sprite, x) {
                            sheet.set_frame(sprite, data.frames[Math.floor(x * (data.frames.length - 1))]);
                        }, SpriteAnimation.resolveEasing('linear', 'in'), data.duration);
                        this.repeat(data.loopCount, data.yoyo);
                    }
                }
            };
            SpriteAnimation.prototype.turn_to = function (duration, easing, shape, angle) {
                var old = this._sprite.angle();
                this.pushTween(function (rt, sprite, value) {
                    sprite.set_angle(old * value + (1 - value) * angle);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.run = function (duration, easing, shape, handler) {
                var ev = new RT.Event_();
                ev.addHandler(handler);
                this.pushTween(function (rt, sprite, x) {
                    rt.queueLocalEvent(ev, [x], false);
                }, SpriteAnimation.resolveEasing(easing, shape), duration);
            };
            SpriteAnimation.prototype.evolve = function (rt, dT) {
                if (!this.isActive)
                    return false;
                if (this._t < 0 && this._onStart && this._onStart.handlers)
                    rt.queueLocalEvent(this._onStart, [], false);
                var tween = this._tweens[this._tweenIndex];
                this._t = this._t < 0 ? 0 : this._t + dT * this._timeScale;
                while (tween && this._t > tween.duration) {
                    tween.apply(rt, this._sprite, tween.reversed ? 0 : 1);
                    this._t = tween.duration < 0 ? 0 : this._t - tween.duration;
                    if (tween.repeat == 0)
                        tween = this._tweens[++this._tweenIndex];
                    else if (tween.repeat > 0 && --tween.repeat == 0)
                        tween = this._tweens[++this._tweenIndex];
                    else if (tween.yoyo)
                        tween.reversed = !tween.reversed;
                }
                if (tween) {
                    var x = tween.easing(this._t / tween.duration);
                    tween.apply(rt, this._sprite, tween.reversed ? 1 - x : x);
                    return true;
                }
                else {
                    if (this._onStop && this._onStop.handlers)
                        rt.queueLocalEvent(this._onStop, [], false);
                    return this.isActive = false;
                }
            };
            SpriteAnimation.prototype.is_active = function () {
                return this.isActive;
            };
            SpriteAnimation.prototype.getViewCore = function (s, b) {
                return TDev.div('item', 'tween');
            };
            SpriteAnimation.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            SpriteAnimation.easing = {
                linear: {
                    in: function (x) {
                        return x;
                    },
                    out: function (x) {
                        return x;
                    },
                    inout: function (x) {
                        return x;
                    },
                },
                quadratic: {
                    in: function (x) {
                        return x * x;
                    },
                    out: function (x) {
                        return x * (2 - x);
                    },
                    inout: function (x) {
                        return (x *= 2) < 1 ? x * x / 2 : (1 - (--x) * (x - 2)) / 2;
                    },
                },
                cubic: {
                    in: function (x) {
                        return x * x * x;
                    },
                    out: function (x) {
                        --x;
                        return 1 + x * x * x;
                    },
                    inout: function (x) {
                        return (x *= 2) < 1 ? x * x * x / 2 : ((x -= 2) * x * x + 2) / 2;
                    }
                },
                sine: {
                    in: function (x) {
                        return 1 - Math.cos(x * Math.PI / 2);
                    },
                    out: function (x) {
                        return Math.sin(x * Math.PI / 2);
                    },
                    inout: function (x) {
                        return (1 - Math.cos(Math.PI * x)) / 2;
                    },
                },
                expo: {
                    in: function (x) {
                        return x == 0 ? 0 : Math.pow(1024, x - 1);
                    },
                    out: function (x) {
                        return x == 1 ? 1 : 1 - Math.pow(2, -10 * x);
                    },
                    inout: function (x) {
                        return x == 0 ? 0 : x == 1 ? 1 : (x *= 2) < 1 ? Math.pow(1024, x - 1) / 2 : 1 - Math.pow(2, -10 * (x - 1)) / 2;
                    },
                },
            };
            return SpriteAnimation;
        })(RT.RTValue);
        RT.SpriteAnimation = SpriteAnimation;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var BoardBackgroundScene = (function (_super) {
            __extends(BoardBackgroundScene, _super);
            function BoardBackgroundScene(_board) {
                _super.call(this);
                this._board = _board;
                this._offsetX = 0;
                this._offsetY = 0;
                this._layers = [];
            }
            BoardBackgroundScene.prototype.view_x = function () {
                return this._offsetX;
            };
            BoardBackgroundScene.prototype.set_view_x = function (x) {
                if (!isNaN(x))
                    this._offsetX = x;
            };
            BoardBackgroundScene.prototype.view_y = function () {
                return this._offsetY;
            };
            BoardBackgroundScene.prototype.set_view_y = function (y) {
                if (!isNaN(y))
                    this._offsetY = y;
            };
            BoardBackgroundScene.prototype.sortLayers = function () {
                this._layers.sort(function (a, b) { return b.distance() - a.distance(); });
            };
            BoardBackgroundScene.prototype.create_layer = function (distance, pic, r) {
                var _this = this;
                pic.loadFirst(r, function () {
                    var layer = new BoardBackgroundLayer(_this, distance, pic);
                    _this._layers.push(layer);
                    _this.sortLayers();
                    return layer;
                });
            };
            BoardBackgroundScene.prototype.count = function () {
                return this._layers.length;
            };
            BoardBackgroundScene.prototype.at = function (index) {
                return this._layers[Math.floor(index)];
            };
            BoardBackgroundScene.prototype.clear = function () {
                this._layers = [];
                this._offsetX = this._offsetY = 0;
            };
            BoardBackgroundScene.prototype.render = function (w, h, ctx) {
                var _this = this;
                this._layers.forEach(function (layer) {
                    var ox = Math.round(_this._offsetX / (1 + layer.distance()));
                    var oy = Math.round(_this._offsetY / (1 + layer.distance()));
                    layer.render(w, h, ctx, ox, oy);
                });
            };
            BoardBackgroundScene.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return BoardBackgroundScene;
        })(RT.RTValue);
        RT.BoardBackgroundScene = BoardBackgroundScene;
        var BoardBackgroundLayer = (function (_super) {
            __extends(BoardBackgroundLayer, _super);
            function BoardBackgroundLayer(_scene, _distance, _pic) {
                _super.call(this);
                this._scene = _scene;
                this._distance = _distance;
                this._pic = _pic;
                this._repeatX = true;
                this._repeatY = true;
                this._alignX = BoardBackgroundLayer.ARRANGE_LEFT;
                this._alignY = BoardBackgroundLayer.ARRANGE_TOP;
            }
            BoardBackgroundLayer.prototype.picture = function () {
                return this._pic;
            };
            BoardBackgroundLayer.prototype.distance = function () {
                return this._distance;
            };
            BoardBackgroundLayer.prototype.set_distance = function (d) {
                if (isNaN(d))
                    d = 0;
                var d = Math.max(0, d);
                if (this._distance != d) {
                    this._distance = d;
                    this._scene.sortLayers();
                }
            };
            BoardBackgroundLayer.prototype.align_x = function () {
                return this._alignX;
            };
            BoardBackgroundLayer.prototype.set_align_x = function (align) {
                switch (align.trim().toLowerCase()) {
                    case "left":
                        this._alignX = BoardBackgroundLayer.ARRANGE_LEFT;
                        break;
                    case "right":
                        this._alignX = BoardBackgroundLayer.ARRANGE_RIGHT;
                        break;
                    case "center":
                        this._alignX = BoardBackgroundLayer.ARRANGE_CENTER;
                        break;
                }
            };
            BoardBackgroundLayer.prototype.align_y = function () {
                return this._alignY;
            };
            BoardBackgroundLayer.prototype.set_align_y = function (align) {
                switch (align.trim().toLowerCase()) {
                    case "center":
                        this._alignY = BoardBackgroundLayer.ARRANGE_LEFT;
                        break;
                    case "top":
                        this._alignY = BoardBackgroundLayer.ARRANGE_TOP;
                        break;
                    case "bottom":
                        this._alignY = BoardBackgroundLayer.ARRANGE_BOTTOM;
                        break;
                }
            };
            BoardBackgroundLayer.prototype.repeat_x = function () {
                return this._repeatX;
            };
            BoardBackgroundLayer.prototype.set_repeat_x = function (repeat) {
                this._repeatX = !!repeat;
            };
            BoardBackgroundLayer.prototype.repeat_y = function () {
                return this._repeatY;
            };
            BoardBackgroundLayer.prototype.set_repeat_y = function (repeat) {
                this._repeatY = !!repeat;
            };
            BoardBackgroundLayer.prototype.render = function (w, h, ctx, offsetX, offsetY) {
                var p = this._pic.getCanvas();
                var pw = p.width;
                var ph = p.height;
                if (!pw || !ph)
                    return;
                var rx = -offsetX;
                var ry = -offsetY;
                switch (this._alignX) {
                    case BoardBackgroundLayer.ARRANGE_RIGHT:
                        rx -= (w + pw);
                        break;
                    case BoardBackgroundLayer.ARRANGE_CENTER:
                        rx -= (w + pw) / 2;
                        break;
                }
                switch (this._alignY) {
                    case BoardBackgroundLayer.ARRANGE_BOTTOM:
                        ry -= (h + ph);
                        break;
                    case BoardBackgroundLayer.ARRANGE_CENTER:
                        ry -= (h + ph) / 2;
                        break;
                }
                rx %= w;
                if (rx < 0)
                    rx += w;
                ry %= h;
                if (ry < 0)
                    ry += h;
                rx = Math.floor(rx);
                ry = Math.floor(ry);
                var renderEdge = !TDev.Browser.isWebkit;
                var y = 0;
                var py = 0;
                while (y < h) {
                    py = y % ph;
                    var dh = Math.min(ph - py, h - ry);
                    var x = 0;
                    while (x < w) {
                        var px = x % pw;
                        var dw = Math.min(pw - px, w - rx);
                        try {
                            ctx.drawImage(p, px, py, dw, dh, rx, ry, dw, dh);
                            if (renderEdge) {
                                if (this._repeatX)
                                    ctx.drawImage(p, px, py, 2, dh, rx - 1, ry, 2, dh);
                                if (this._repeatY)
                                    ctx.drawImage(p, px, py, dw, 2, rx, ry - 1, dw, 2);
                            }
                        }
                        catch (e) {
                            TDev.Util.log('scene: ' + JSON.stringify({
                                w: w,
                                h: h,
                                pw: pw,
                                ph: ph,
                                dw: dw,
                                dh: dh,
                                x: x,
                                y: y,
                                px: px,
                                py: py,
                                rx: rx,
                                ry: ry,
                                edge: renderEdge
                            }));
                            TDev.Util.reportError('backgroundScene', e, false);
                            return;
                        }
                        rx = (rx + dw) % w;
                        x += this._repeatX ? dw : w;
                    }
                    ry = (ry + dh) % h;
                    y += this._repeatY ? dh : h;
                }
            };
            BoardBackgroundLayer.ARRANGE_LEFT = 1;
            BoardBackgroundLayer.ARRANGE_RIGHT = 2;
            BoardBackgroundLayer.ARRANGE_TOP = 3;
            BoardBackgroundLayer.ARRANGE_BOTTOM = 4;
            BoardBackgroundLayer.ARRANGE_CENTER = 5;
            return BoardBackgroundLayer;
        })(RT.RTValue);
        RT.BoardBackgroundLayer = BoardBackgroundLayer;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Tutorial;
        (function (Tutorial) {
            function step_completed(s) {
                s.rt.forceNonRender();
                var st = s.rt.tutorialState;
                if (!st)
                    st = s.rt.tutorialState = {};
                st.validated = true;
                s.rt.host.notifyTutorial("stepCompleted");
            }
            Tutorial.step_completed = step_completed;
            function show_hint(message, r) {
                var m = new TDev.ModalDialog();
                m.add([TDev.div("wall-dialog-header", TDev.lf("tutorial hint")), RT.Wall.body(message), TDev.div("wall-dialog-buttons", [TDev.HTML.mkButtonOnce("ok", function () { return m.dismiss(); })])]);
                m.onDismiss = function () { return r.resume(); };
                m.show();
            }
            Tutorial.show_hint = show_hint;
        })(Tutorial = RT.Tutorial || (RT.Tutorial = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ServerRequest = (function (_super) {
            __extends(ServerRequest, _super);
            function ServerRequest() {
                _super.apply(this, arguments);
                this._headers = new RT.StringMap();
                this._querystring = new RT.StringMap();
                this._content = undefined;
            }
            ServerRequest.mk = function (req, _proxy) {
                var r = new ServerRequest();
                r._id = TDev.Random.uniqueId(12);
                r._headers = RT.StringMap.mk(req.headers);
                r._querystring = RT.StringMap.mk(req.tdQueryString);
                r._req = req;
                r._startTime = Date.now();
                var proto = "http";
                if (_proxy)
                    proto = "ws";
                if (req.headers['x-forwarded-proto'] === 'https' || req.headers['x-arr-ssl'] || req.connection.encrypted)
                    proto = "https";
                r._url = proto + "://" + (req.headers.host || "unknown") + req.url;
                r._response = new RT.ServerResponse(r, _proxy);
                return r;
            };
            ServerRequest.prototype.startHandle = function () {
                this._startHandleTime = Date.now();
                this.log(this.toString());
            };
            ServerRequest.prototype.stopHandle = function () {
                var n = Date.now();
                var t0 = (n - this._startHandleTime) / 1000;
                var t1 = (this._startHandleTime - this._startTime) / 1000;
                if (this._onStop !== undefined) {
                    this._onStop.success(true);
                }
                this.log(TDev.Util.fmt("status={0} [{1}s prep, {2}s exec]", this._response.status_code(), t1, t0));
            };
            ServerRequest.prototype.log = function (msg) {
                RT.App.log("[req:" + this._id + (this._user ? ":" + this._user.id() : "") + "] " + msg);
            };
            ServerRequest.prototype.getNodeRequest = function () {
                return this._req;
            };
            ServerRequest.prototype.recvContentAsync = function () {
                var _this = this;
                var r = new TDev.PromiseInv();
                var contentType = this.header("content-type") || "application/octet-stream";
                contentType = contentType.replace(/;.*/, "");
                this._isText = /^text\//.test(contentType) || contentType == "application/json";
                var req = this._req;
                if (this._isText) {
                    var acc = "";
                    req.setEncoding("utf8");
                    req.on("data", function (buf) { return acc += buf; });
                    req.on("end", function () {
                        _this._content = acc;
                        if (contentType == "application/json") {
                            var obj = RT.JsonObject.mk(_this._content, RT.Time.log);
                            _this._jsonBody = obj.value();
                        }
                        r.success(null);
                    });
                }
                else {
                    var bufs = [];
                    var len = 0;
                    req.on("data", function (buf) {
                        bufs.push(buf);
                        len += buf.length;
                    });
                    req.on("end", function () {
                        var bf = new Uint8Array(len);
                        var pos = 0;
                        bufs.forEach(function (buf) {
                            for (var i = 0; i < buf.length; ++i)
                                bf[pos++] = buf[i];
                        });
                        _this._content = RT.Buffer.fromTypedArray(bf);
                        r.success(null);
                    });
                }
                return r;
            };
            ServerRequest.prototype.getRestArgument = function (name, tp, s) {
                if (tp == "Server Request")
                    return this;
                if (tp == "Server Response")
                    return this.response();
                var v = this.query(name);
                if (v === undefined && this._jsonBody)
                    v = this._jsonBody[name];
                if (v === undefined)
                    return undefined;
                return TDev.Runtime.fromRestArgument(v, tp, s);
            };
            ServerRequest.prototype.response = function () {
                return this._response;
            };
            ServerRequest.prototype.content = function () {
                if (typeof this._content == "string")
                    return this._content;
                return undefined;
            };
            ServerRequest.prototype.content_as_buffer = function () {
                if (this._content instanceof RT.Buffer)
                    return this._content;
                return undefined;
            };
            ServerRequest.prototype.content_as_json = function () {
                if (this._jsonBody)
                    return RT.JsonObject.wrap(this._jsonBody);
                return undefined;
            };
            ServerRequest.prototype.method = function () {
                return this._req.method.toLowerCase();
            };
            ServerRequest.prototype.url = function () {
                return this._url;
            };
            ServerRequest.prototype.api_path = function () {
                return this._req.tdApiPath;
            };
            ServerRequest.prototype.header = function (name) {
                return this._headers.at(name.toLowerCase());
            };
            ServerRequest.prototype.query = function (name) {
                return this._querystring.at(name);
            };
            ServerRequest.prototype.equals = function (other) {
                return this == other;
            };
            ServerRequest.prototype.toString = function () {
                return this.method() + " " + this.url();
            };
            ServerRequest.prototype.post_to_wall = function (s) {
                var rt = s.rt;
                if (this._content && this._content.length)
                    rt.postBoxedText("Content-Length: " + this._content.length, s.pc);
                var keys = this._headers.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var key = keys.at(i);
                    rt.postBoxedText(keys.at(i) + ": " + this._headers.at(key), s.pc);
                }
                rt.postBoxedText(this.toString(), s.pc);
            };
            ServerRequest.prototype.header_names = function () {
                return this._headers.keys();
            };
            ServerRequest.prototype.query_names = function () {
                return this._querystring.keys();
            };
            ServerRequest.prototype.setJsonBody = function (json) {
                this._jsonBody = json;
            };
            ServerRequest.prototype.user = function () {
                return this._user;
            };
            return ServerRequest;
        })(RT.RTValue);
        RT.ServerRequest = ServerRequest;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var ServerResponse = (function (_super) {
            __extends(ServerResponse, _super);
            function ServerResponse(_request, _proxy) {
                _super.call(this);
                this._request = _request;
                this._proxy = _proxy;
                this._headers = new RT.StringMap();
                this._statusCode = 200;
            }
            ServerResponse.prototype.header = function (name) {
                return this._headers.at(name);
            };
            ServerResponse.prototype.set_header = function (name, value) {
                if (!value)
                    this._headers.remove(name.toLowerCase());
                else
                    this._headers.set_at(name.toLowerCase(), value);
            };
            ServerResponse.prototype.request = function () {
                return this._request;
            };
            ServerResponse.prototype.status_code = function () {
                return this._statusCode;
            };
            ServerResponse.prototype.set_status_code = function (code) {
                this._statusCode = code;
            };
            ServerResponse.prototype.equals = function (other) {
                return this == other;
            };
            ServerResponse.prototype.toString = function () {
                return "Response to " + this._request.toString();
            };
            ServerResponse.prototype.post_to_wall = function (s) {
                var rt = s.rt;
                if (this._content && this._content.length)
                    rt.postBoxedText("Content-Length: " + this._content.length, s.pc);
                var keys = this._headers.keys();
                for (var i = 0; i < keys.count(); ++i) {
                    var key = keys.at(i);
                    rt.postBoxedText(keys.at(i) + ": " + this._headers.at(key), s.pc);
                }
                rt.postBoxedText(this.toString(), s.pc);
            };
            ServerResponse.prototype.set_content_type = function (type) {
                this._headers.set_at("Content-Type", type);
            };
            ServerResponse.prototype.set_content = function (content) {
                this._content = content;
                this.set_content_type("text/plain; charset=utf-8");
            };
            ServerResponse.prototype.set_content_as_json = function (json) {
                this.set_content(json.toString());
                this.set_content_type("application/json; charset=utf-8");
            };
            ServerResponse.prototype.set_content_as_buffer = function (bytes) {
                this._content = bytes.toNodeBuffer();
                this.set_content_type("application/octet-stream");
            };
            ServerResponse.prototype.set_content_as_xml = function (xml) {
                this.set_content(xml.toString());
                this.set_content_type("text/xml; charset=utf-8");
            };
            ServerResponse.prototype.header_names = function () {
                return this._headers.keys();
            };
            ServerResponse.prototype.addRestResult = function (name, v) {
                if (!this._restResult)
                    this._restResult = {};
                this._restResult[name] = TDev.Runtime.toRestArgument(v, this._request._stackframe);
            };
            ServerResponse.prototype.sendNow = function () {
                var resp = this.request().getNodeRequest().tdResponse;
                var headers = this._headers.items;
                var data = this._content;
                if (this._proxy) {
                    return this._proxy.success(this._restResult || {});
                }
                if (data == undefined && this.request().header("TouchDevelop-Accept") == "text/plain") {
                    if (!headers["content-type"])
                        headers["content-type"] = "text/plain";
                    data = TDev.Util.values(this._restResult || {}).map(function (v) { return v + ""; }).join(";");
                }
                else if (data === undefined) {
                    var format = parseInt(this.request().query("x-td-format") || "0");
                    format = TDev.Util.between(0, format, 8);
                    if (format)
                        data = JSON.stringify(this._restResult || {}, null, format);
                    else
                        data = JSON.stringify(this._restResult || {});
                    if (!headers["content-type"])
                        headers["content-type"] = "application/json; charset=utf-8";
                }
                else {
                    if (this._restResult)
                        TDev.Util.userError(TDev.lf("set_content_... cannot be called on the response object when action has result(s)"));
                }
                if (typeof data == "string")
                    data = ServerResponse.toUtfBuffer(data);
                if (!headers["content-length"])
                    headers["content-length"] = data.length;
                resp.writeHead(this._statusCode, headers);
                resp.end(data);
                this.request().stopHandle();
            };
            return ServerResponse;
        })(RT.RTValue);
        RT.ServerResponse = ServerResponse;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var EditorServices;
        (function (EditorServices) {
            function getTokenAsync(aud) {
                if (!TDev.Cloud.getAccessToken())
                    return TDev.Promise.as(undefined);
                var tokens;
                try {
                    tokens = JSON.parse(localStorage["touchDevelopTokens"]);
                }
                catch (e) {
                    tokens = {};
                }
                var token = tokens[aud];
                if (token)
                    return TDev.Promise.as(token);
                var url = "https://touchdevelopuserauth.azurewebsites.net/api/sign_token?aud=" + encodeURIComponent(aud) + "&access_token=" + TDev.Cloud.getAccessToken();
                return TDev.Util.httpPostJsonAsync(url, {}).then(function (resp) {
                    if (!resp.jwt)
                        TDev.Util.oops(resp ? resp.status : "bad");
                    return resp.jwt;
                }).then(function (token) {
                    if (token) {
                        tokens[aud] = token;
                        localStorage["touchDevelopTokens"] = JSON.stringify(tokens);
                    }
                    return token;
                }, function (e) { return undefined; });
            }
            EditorServices.getTokenAsync = getTokenAsync;
        })(EditorServices = RT.EditorServices || (RT.EditorServices = {}));
        var Editor = (function (_super) {
            __extends(Editor, _super);
            function Editor(rt, headless) {
                _super.call(this);
                this.allAnnotations = [];
                rt.headlessPluginMode = headless;
                rt.editorObj = this;
            }
            Editor.prototype.progress = function (message, s) {
                TDev.ProgressOverlay.setProgress(message);
            };
            Editor.prototype.annotate_ast = function (id, category, message) {
                this.allAnnotations.push({ id: id, category: category, message: message });
            };
            Editor.prototype.current_script_id = function (s) {
                return s.rt.runningPluginOn;
            };
            Editor.prototype.current_script_ast = function (r) {
                RT.Bazaar.ast_of(this.current_script_id(r.stackframe), r);
            };
            Editor.prototype.tutorial_step_completed = function (s) {
                RT.Tutorial.step_completed(s);
            };
            Editor.prototype.deployment_settings = function (r) {
                r.rt.host.deploymentSettingsAsync(r.rt.runningPluginOn).done(function (ds) { return r.resumeVal(ds ? RT.JsonObject.wrap(ds) : undefined); });
            };
            Editor.prototype.user_token = function (app_name, r) {
                if (TDev.Cloud.anonMode(TDev.lf("user token"))) {
                    r.resumeVal("");
                    return;
                }
                if (!app_name || app_name.length < 4)
                    TDev.Util.userError(TDev.lf("app name must be at least 4 character long"));
                var userid = TDev.Cloud.getUserId();
                var pluginid = TDev.lf("{0} - {1}", app_name, userid);
                if (!r.rt.host.askSourceAccessAsync("a user token for " + pluginid, "an authentication token for the `" + pluginid + "` application. The token allows this script to authenticate you in their services. The script does not have access to any other personal information.", true)) {
                    r.resumeVal("");
                    return;
                }
                EditorServices.getTokenAsync(pluginid).done(function (token) { return r.resumeVal(token); });
            };
            Editor.prototype.upload_json = function (payload, r) {
                if (TDev.Cloud.anonMode(TDev.lf("upload plugin data"))) {
                    r.resumeVal("");
                    return;
                }
                var pluginid = r.rt.currentScriptId || "__unpublished__";
                EditorServices.getTokenAsync("TouchDevelop Bin").then(function (token) {
                    if (!token) {
                        r.resumeVal("");
                        return;
                    }
                    return TDev.Util.httpPostRealJsonAsync("https://touchdevelopbin.azurewebsites.net/api/upload", { token: token, pluginid: pluginid, payload: payload.value() });
                }).done(function (resp) {
                    if (resp)
                        r.resumeVal(resp["url"] || "");
                    else
                        r.resumeVal("");
                }, function (e) {
                    r.resumeVal("");
                });
            };
            Editor.prototype.package_current_script = function (options, r) {
                TDev.HTML.showProgressNotification(TDev.lf("packaging script..."), true);
                var id = this.current_script_id(r.stackframe);
                r.rt.host.packageScriptAsync(id, options.value()).done(function (instr) { return r.resumeVal(RT.JsonObject.wrap(instr)); }, function (err) { return r.resumeVal(RT.JsonObject.wrap({ error: err.message || "an error occured" })); });
            };
            return Editor;
        })(RT.RTValue);
        RT.Editor = Editor;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Create;
        (function (Create) {
            function Collection_of(s, type_T) {
                return new RT.Collection(type_T);
            }
            Create.Collection_of = Collection_of;
            function Ref_of(s, type_T) {
                var r = new RT.Ref();
                if (type_T == "string")
                    r._set("", s);
                else if (type_T == "number")
                    r._set(0, s);
                else if (type_T == "boolean")
                    r._set(false, s);
                return r;
            }
            Create.Ref_of = Ref_of;
        })(Create = RT.Create || (RT.Create = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var WebSocketMessage = (function (_super) {
            __extends(WebSocketMessage, _super);
            function WebSocketMessage() {
                _super.call(this);
            }
            WebSocketMessage.mk = function (data) {
                var msg = new WebSocketMessage();
                if (typeof data == "string")
                    msg.stringData = data;
                else
                    msg.binaryData = data;
                return msg;
            };
            WebSocketMessage.mkError = function (err) {
                var msg = new WebSocketMessage();
                msg.err = err;
                return msg;
            };
            WebSocketMessage.prototype.is_error = function () {
                return !!this.err;
            };
            WebSocketMessage.prototype.error = function () {
                return this.err;
            };
            WebSocketMessage.prototype.string = function () {
                return this.stringData;
            };
            WebSocketMessage.prototype.json = function () {
                if (!this.stringData)
                    return undefined;
                if (!this._json)
                    this._json = RT.JsonObject.mk(this.stringData);
                return this._json;
            };
            WebSocketMessage.prototype.buffer = function () {
                if (this.binaryData instanceof RT.Buffer)
                    return this.binaryData;
                if (this.binaryData instanceof ArrayBuffer) {
                    this.binaryData = RT.Buffer.fromTypedArray(new Uint8Array(this.binaryData));
                    return this.binaryData;
                }
                return undefined;
            };
            WebSocketMessage.prototype.toString = function () {
                if (this.err)
                    return "error: " + this.err;
                if (this.binaryData && this.binaryData.toString)
                    return this.binaryData.toString();
                return JSON.stringify(this.stringData);
            };
            WebSocketMessage.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return WebSocketMessage;
        })(RT.RTValue);
        RT.WebSocketMessage = WebSocketMessage;
        var WebSocket_ = (function (_super) {
            __extends(WebSocket_, _super);
            function WebSocket_(ws, rt) {
                _super.call(this);
                this.ws = ws;
                this.rt = rt;
                this.msgs = [];
            }
            WebSocket_.mk = function (ws, rt) {
                var w = new WebSocket_(ws, rt);
                w.attachEvents();
                return w;
            };
            WebSocket_.prototype.attachEvents = function () {
                var _this = this;
                this.ws.addEventListener("error", function (ev) {
                    RT.App.logEvent(RT.App.DEBUG, "ws", "error: " + ev.message, undefined);
                    _this.receiveMessage(WebSocketMessage.mkError(ev.message));
                }, false);
                this.ws.addEventListener("message", function (data) {
                    _this.receiveMessage(WebSocketMessage.mk(data.data));
                }, false);
            };
            WebSocket_.prototype.receiveMessage = function (msg) {
                var r = this.msgs[0];
                if (r && !(r instanceof WebSocketMessage)) {
                    this.msgs.shift()(msg);
                }
                else
                    this.msgs.push(msg);
            };
            WebSocket_.prototype.close = function () {
                this.ws.close();
            };
            WebSocket_.prototype.ready_state = function () {
                var rs = this.ws.readyState;
                switch (rs) {
                    case WebSocket.CONNECTING: return "connecting";
                    case WebSocket.CLOSED: return "closed";
                    case WebSocket.CLOSING: return "closing";
                    case WebSocket.OPEN: return "open";
                    default: return rs.toString();
                }
            };
            WebSocket_.prototype.buffered_amount = function () {
                return this.ws.bufferedAmount;
            };
            WebSocket_.prototype.receive = function (r) {
                var d = this.msgs[0];
                if (d && d instanceof WebSocketMessage)
                    r.resumeVal(this.msgs.shift());
                else
                    this.msgs.push(function (msg) { return r.resumeVal(msg); });
            };
            WebSocket_.prototype.sendPacket = function (d) {
                try {
                    this.ws.send(d);
                }
                catch (e) {
                    RT.App.logEvent(RT.App.DEBUG, "ws", "error: send" + e.message, undefined);
                    this.receiveMessage(WebSocketMessage.mkError(e));
                }
            };
            WebSocket_.prototype.send = function (msg) {
                this.sendPacket(msg);
            };
            WebSocket_.prototype.send_json = function (json) {
                this.send(JSON.stringify(json ? json.value() : null));
            };
            WebSocket_.prototype.send_buffer = function (buf) {
                this.sendPacket(buf.buffer);
            };
            WebSocket_.prototype.toString = function () {
                return this.ready_state() + " " + this.ws.url;
            };
            WebSocket_.prototype.post_to_wall = function (s) {
                _super.prototype.post_to_wall.call(this, s);
            };
            return WebSocket_;
        })(RT.RTValue);
        RT.WebSocket_ = WebSocket_;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var RecordEntry = (function (_super) {
            __extends(RecordEntry, _super);
            function RecordEntry() {
                _super.call(this);
            }
            RecordEntry.prototype.rtType = function () {
                return this.parent.rtType() + "$entry";
            };
            RecordEntry.prototype.noMagicRtType = function () {
                return true;
            };
            RecordEntry.prototype.equals = function (other) {
                return this === other;
            };
            RecordEntry.prototype.invalidate = function () {
                this.isDeleted = true;
                this.clear_fields();
                this.decorators = undefined;
            };
            RecordEntry.prototype.getShortStringRepresentation = function () {
                return "[" + this.parent.entryKindName + "]";
            };
            RecordEntry.prototype.post_to_wall = function (frame) {
                frame.rt.postBoxedHtml(this.parent.getTable([this], frame), frame.pc);
            };
            RecordEntry.prototype.to_json = function (s) {
                var ctx = new TDev.JsonExportCtx(s);
                ctx.push(this);
                var json = this.exportJson(ctx);
                ctx.pop(this);
                return RT.JsonObject.wrap(json);
            };
            RecordEntry.prototype.from_json = function (jobj, s) {
                this.parent.logMutation(s);
                this.importJsonFields(new TDev.JsonImportCtx(s), jobj.value());
            };
            RecordEntry.prototype.importJsonFields = function (ctx, jobj) {
                TDev.Util.oops("compiled code is supposed to override this method");
            };
            RecordEntry.prototype.jsonExportKey = function (ctx) {
                return null;
            };
            RecordEntry.prototype.exportJson = function (ctx) {
                var _this = this;
                if (this.is_deleted())
                    return undefined;
                var keys = this.fields.map(function (k) { return _this[k + "_realname"]; });
                var vals = this.fields.map(function (k) { return _this.getFieldValue(k, ctx.stackframe); });
                return ctx.encodeObjectNode(this, keys, vals);
            };
            RecordEntry.prototype.getIndexCard = function (sf) {
                var _this = this;
                var div = document.createElement("div");
                div.className = "wall-record";
                var hr = document.createElement("h3");
                hr.textContent = this.parent.entryKindName;
                hr.className = "wall-record";
                div.appendChild(hr);
                if (this.is_deleted()) {
                    var p = document.createElement("p");
                    p.className = "wall-record";
                    p.textContent = "(deleted)";
                    div.appendChild(p);
                }
                else {
                    var ul = document.createElement("ul");
                    ul.className = "wall-record";
                    this.fields.forEach(function (k) {
                        var name = _this[k + "_realname"];
                        var val = _this.getFieldValue(k, sf);
                        var s = name + ": ";
                        if (val instanceof RT.RTValue)
                            s = s + val.getShortStringRepresentation();
                        else if (typeof val !== "undefined")
                            s = s + val;
                        var li = document.createElement("li");
                        li.className = "wall-record";
                        li.textContent = s;
                        ul.appendChild(li);
                    });
                    div.appendChild(ul);
                }
                return div;
            };
            RecordEntry.prototype.debuggerDisplay = function (clickHandler) {
                var full;
                try {
                    full = this.getIndexCard(null);
                }
                catch (e) {
                    return TDev.span(null, e.message || "").withClick(clickHandler);
                }
                var sized = TDev.div("wall-record", this.parent.entryKindName);
                var fullDisplay = false;
                var updateButton = function () {
                    full.style.display = fullDisplay ? "block" : "none";
                    sized.style.display = fullDisplay ? "none" : "block";
                };
                updateButton();
                return TDev.div(null, sized, full).withClick(function () {
                    clickHandler();
                    updateButton();
                    fullDisplay = !fullDisplay;
                });
            };
            RecordEntry.prototype.debuggerChildren = function () {
                var _this = this;
                if (this.is_deleted())
                    return undefined;
                var r = {};
                this.fields.forEach(function (k) {
                    var val = _this.getFieldValue(k, undefined);
                    r[_this[k + "_realname"]] = val;
                });
                return r;
            };
            RecordEntry.prototype.getFieldValue = function (fieldname, sf) {
                return this[fieldname];
            };
            RecordEntry.prototype.getTableHeader = function () {
                var _this = this;
                var tr = document.createElement("tr");
                this.fields.forEach(function (k) {
                    var th = document.createElement("th");
                    th.setAttribute("scope", "col");
                    th.textContent = _this[k + "_realname"];
                    tr.appendChild(th);
                });
                return tr;
            };
            RecordEntry.prototype.getTableRow = function (sf) {
                var _this = this;
                var tr = document.createElement("tr");
                this.fields.forEach(function (k) {
                    var td = document.createElement("td");
                    var val = _this.getFieldValue(k, sf);
                    td.textContent = (val instanceof RT.RTValue) ? val.getShortStringRepresentation() : ((typeof val === "undefined") ? "" : val);
                    tr.appendChild(td);
                });
                return tr;
            };
            RecordEntry.prototype.clear_fields = function (s) {
                var _this = this;
                if (s)
                    this.parent.logMutation(s);
                this.values.forEach(function (k) {
                    delete _this[k];
                });
            };
            RecordEntry.prototype.is_deleted = function () {
                return false;
            };
            RecordEntry.prototype.confirmed = function () {
                return true;
            };
            RecordEntry.prototype.perform_get = function (fieldname, s) {
                return TDev.Util.abstract();
            };
            RecordEntry.prototype.perform_set = function (fieldname, value, s) {
                return TDev.Util.abstract();
            };
            RecordEntry.prototype.perform_confirmed = function (fieldname, s) {
                return true;
            };
            RecordEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                return TDev.Util.abstract();
            };
            RecordEntry.prototype.perform_add = function (fieldname, value, s) {
                return TDev.Util.abstract();
            };
            RecordEntry.prototype.perform_clear = function (fieldname, s) {
                return TDev.Util.abstract();
            };
            return RecordEntry;
        })(RT.RTValue);
        RT.RecordEntry = RecordEntry;
        var TableEntry = (function (_super) {
            __extends(TableEntry, _super);
            function TableEntry() {
                _super.call(this);
            }
            TableEntry.prototype.toJsonKey = function () {
                return this.rownumber;
            };
            TableEntry.prototype.jsonExportKey = function (ctx) {
                return this.rownumber.toString();
            };
            TableEntry.prototype.getShortStringRepresentation = function () {
                return "[" + this.parent.entryKindName + this.rownumber + "]";
            };
            TableEntry.prototype.delete_row = function (s) {
                this.parent.logMutation(s);
                if (this.isDeleted)
                    return;
                var idx = this.parent._elements.indexOf(this);
                if (idx >= 0)
                    this.parent._elements.splice(idx, 1);
                this.invalidate();
                this.parent.clearCachedData();
            };
            TableEntry.prototype.perform_get = function (fieldname, s) {
                this.is_deleted();
                return this[fieldname];
            };
            TableEntry.prototype.perform_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted) {
                    if (value == undefined)
                        delete this[fieldname];
                    else
                        this[fieldname] = value;
                }
            };
            TableEntry.prototype.perform_add = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted && value)
                    this[fieldname] += value;
            };
            TableEntry.prototype.perform_clear = function (fieldname, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted)
                    delete this[fieldname];
            };
            TableEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted && !this[fieldname] && value)
                    this[fieldname] = value;
            };
            TableEntry.prototype.is_deleted = function () {
                var _this = this;
                if (this.isDeleted)
                    return true;
                var deleted = false;
                if (this.keys.length > 0) {
                    this.keys.forEach(function (k) {
                        if (deleted)
                            return;
                        var key = _this[k];
                        if (((key instanceof TableEntry) && key.is_deleted()) || ((key instanceof CloudTableEntry) && key.is_deleted()))
                            deleted = true;
                    });
                }
                if (deleted && !this.isDeleted) {
                    this.invalidate();
                }
                return deleted;
            };
            TableEntry.prototype.keyCompareTo = function (other) {
                return this.rownumber - other.rownumber;
            };
            return TableEntry;
        })(RecordEntry);
        RT.TableEntry = TableEntry;
        var CloudTableEntry = (function (_super) {
            __extends(CloudTableEntry, _super);
            function CloudTableEntry() {
                _super.call(this);
            }
            CloudTableEntry.prototype.toJsonKey = function () {
                return this.sessionname + this.uid;
            };
            CloudTableEntry.prototype.equals = function (other) {
                var o = other;
                return this.uid === o.uid && this.sessionname === o.sessionname;
            };
            CloudTableEntry.prototype.getShortStringRepresentation = function () {
                return "[" + this.parent.entryKindName + ": " + this.uid + "]";
            };
            CloudTableEntry.prototype.hookup = function (item) {
                this.sessionname = item.session.servername;
                this.uid = item.uid;
                this.item = item;
                item.backlink = this;
                this.read_cloud_fields(item);
            };
            CloudTableEntry.prototype.unlink = function () {
                this.decorators = undefined;
                this.item = undefined;
                for (var i = 0; i < this.values.length; i++) {
                    this[this.values[i]] = undefined;
                }
            };
            CloudTableEntry.prototype.getFieldValue = function (fieldname, s) {
                this.check();
                var f = this[fieldname];
                if (f instanceof TDev.Revisions.LVal)
                    return Conv.read(this.parent.session(), f, s);
                else
                    return f;
            };
            CloudTableEntry.prototype.check = function (abort) {
                if (abort === void 0) { abort = true; }
                if (this.sessionname !== this.parent.session().servername) {
                    if (abort)
                        TDev.Util.userError(TDev.lf("stale row: originated in a different session"));
                    else
                        return false;
                }
                if (this.item === undefined || this.item.backlink != this || this.item.session !== this.parent.session()) {
                    var session = this.parent.session();
                    var item = session.user_get_item(this.uid);
                    if (item === undefined)
                        item = session.user_create_tombstone(this.parent.cloudtype, this.uid, this.keys.map(function (k) { return undefined; }), []);
                    this.hookup(item);
                }
                return true;
            };
            CloudTableEntry.prototype.confirmed = function () {
                var _this = this;
                this.check();
                var session = this.parent.session();
                var confirmed = this.existenceConfirmed() && !this.values.some(function (val) { return !session.user_is_datum_confirmed(_this[val]); });
                return confirmed;
            };
            CloudTableEntry.prototype.existenceConfirmed = function () {
                var _this = this;
                return this.parent.session().user_is_datum_confirmed(this.item) && !this.keys.some(function (key) {
                    var r = _this[key];
                    return (r && r instanceof CloudTableEntry && !r.existenceConfirmed());
                });
            };
            CloudTableEntry.prototype.jsonExportKey = function (ctx) {
                this.check();
                var uid = this.uid;
                if (uid.indexOf(".") === -1) {
                    var membernumber = this.parent.session().membernumber.toString();
                    if (membernumber === "-1")
                        membernumber = "";
                    uid = membernumber + "." + uid;
                }
                return uid;
            };
            CloudTableEntry.prototype.delete_row = function (s) {
                if (s)
                    this.parent.logMutation(s);
                this.check();
                this.parent.session().user_delete_item(this.item);
                this.parent.clearCachedData();
            };
            CloudTableEntry.prototype.clear_fields = function (s) {
                if (s)
                    this.parent.logMutation(s);
                this.check();
                for (var i = 0; i < this.values.length; i++) {
                    var lval = this[this.values[i]];
                    Conv.clear(this.parent.session(), lval);
                }
            };
            CloudTableEntry.prototype.perform_get = function (fieldname, s) {
                this.check();
                return Conv.read(this.parent.session(), this[fieldname], s);
            };
            CloudTableEntry.prototype.perform_confirmed = function (fieldname) {
                this.check();
                return this.parent.session().user_is_datum_confirmed(this[fieldname]);
            };
            CloudTableEntry.prototype.perform_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, false);
            };
            CloudTableEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, true);
            };
            CloudTableEntry.prototype.perform_add = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, true);
            };
            CloudTableEntry.prototype.perform_clear = function (fieldname, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], undefined, false);
            };
            CloudTableEntry.prototype.is_deleted = function () {
                if (!this.check())
                    return true;
                return this.parent.session().user_is_datum_deleted(this.item);
            };
            CloudTableEntry.prototype.keyCompareTo = function (other) {
                return this.item.compareTo(other.item);
            };
            CloudTableEntry.prototype.read_cloud_fields = function (datum) {
                var lkeycount = 0;
                var ukeycount = 0;
                TDev.Util.assert(this.parent.key_cloudtypes.length === this.keys.length);
                for (var i = 0; i < this.keys.length; i++) {
                    var keytype = this.parent.key_cloudtypes[i];
                    var val;
                    if (keytype.charAt(keytype.length - 1) === ")") {
                        var uid = datum.ukeys[ukeycount];
                        var linkedtable = this.parent.linked_cloudtables[ukeycount];
                        val = linkedtable.import_item_from_uid(uid);
                        ukeycount += 1;
                    }
                    else {
                        val = Conv.fromCloud(keytype, datum.lkeys[lkeycount]);
                        lkeycount += 1;
                    }
                    this[this.keys[i]] = val;
                }
                TDev.Util.assert(this.parent.value_cloudtypes.length === this.values.length);
                for (var i = 0; i < this.values.length; i++) {
                    var property = this.parent.value_cloudtypes[i];
                    this[this.values[i]] = this.parent.session().user_get_lval(property, [this.uid], []);
                }
            };
            return CloudTableEntry;
        })(RecordEntry);
        RT.CloudTableEntry = CloudTableEntry;
        var IndexEntry = (function (_super) {
            __extends(IndexEntry, _super);
            function IndexEntry() {
                _super.call(this);
                this.isDeleted = false;
            }
            IndexEntry.prototype.compareTo = function (other) {
                var _this = this;
                var diff = 0;
                this.keys.forEach(function (k) {
                    if (!diff) {
                        var a = _this[k];
                        var b = other[k];
                        switch (typeof a) {
                            case "string":
                                diff = a.localeCompare(b);
                                break;
                            case "number":
                                diff = a - b;
                                break;
                            case "boolean":
                                if (a !== b)
                                    diff = (a ? 1 : -1);
                                break;
                            default:
                                diff = RT.RTValue.CompareKeys(a, b);
                                break;
                        }
                    }
                });
                return diff;
            };
            IndexEntry.prototype.is_deleted = function () {
                var _this = this;
                if (this.isDeleted)
                    return true;
                var deleted = false;
                if (this.keys.length > 0) {
                    this.keys.forEach(function (k) {
                        if (deleted)
                            return;
                        var key = _this[k];
                        if (key && key instanceof TableEntry) {
                            if (key.is_deleted())
                                deleted = true;
                        }
                    });
                }
                if (deleted && !this.isDeleted) {
                    this.invalidate();
                }
                return deleted;
            };
            IndexEntry.prototype.perform_get = function (fieldname, s) {
                this.is_deleted();
                return this[fieldname];
            };
            IndexEntry.prototype.perform_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted) {
                    if (value == undefined)
                        delete this[fieldname];
                    else
                        this[fieldname] = value;
                }
            };
            IndexEntry.prototype.perform_add = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted && value)
                    this[fieldname] += value;
            };
            IndexEntry.prototype.perform_clear = function (fieldname, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted)
                    delete this[fieldname];
            };
            IndexEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                if (!this.isDeleted && !this[fieldname] && value)
                    this[fieldname] = value;
            };
            IndexEntry.prototype.hasNondefaultValue = function () {
                var _this = this;
                var found = false;
                this.values.forEach(function (v) {
                    if (found)
                        return;
                    var val = _this[v];
                    if (val) {
                        if (typeof val !== "object")
                            found = true;
                        else {
                            TDev.Util.assert(val instanceof RT.RTValue);
                            found = !val.isDefaultValue();
                        }
                    }
                });
                return found;
            };
            return IndexEntry;
        })(RecordEntry);
        RT.IndexEntry = IndexEntry;
        var ObjectEntry = (function (_super) {
            __extends(ObjectEntry, _super);
            function ObjectEntry() {
                _super.call(this);
                this.on_render_heap = false;
            }
            ObjectEntry.prototype.perform_get = function (fieldname, s) {
                return this[fieldname];
            };
            ObjectEntry.prototype.perform_set = function (fieldname, value, s) {
                s.rt.logDataWrite(this.on_render_heap);
                this[fieldname] = value;
            };
            ObjectEntry.prototype.perform_add = function (fieldname, value, s) {
                s.rt.logDataWrite(this.on_render_heap);
                if (value)
                    this[fieldname] += value;
            };
            ObjectEntry.prototype.perform_clear = function (fieldname, s) {
                s.rt.logDataWrite(this.on_render_heap);
                delete this[fieldname];
            };
            ObjectEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                s.rt.logDataWrite(this.on_render_heap);
                if (!this[fieldname] && value)
                    this[fieldname] = value;
            };
            return ObjectEntry;
        })(RecordEntry);
        RT.ObjectEntry = ObjectEntry;
        var DecoratorEntry = (function (_super) {
            __extends(DecoratorEntry, _super);
            function DecoratorEntry() {
                _super.call(this);
                this._written = 0;
            }
            DecoratorEntry.prototype.post_to_wall = function (frame) {
                this.clear_if_necessary();
                _super.prototype.post_to_wall.call(this, frame);
            };
            DecoratorEntry.prototype.clear_if_necessary = function () {
                var decsing = this.parent;
                if (this._written < decsing._generation) {
                    this._written = decsing._generation;
                    this.clear_fields();
                }
            };
            DecoratorEntry.prototype.target = function () {
                return this[this.keys[0]];
            };
            DecoratorEntry.prototype.perform_get = function (fieldname, s) {
                this.clear_if_necessary();
                return this[fieldname];
            };
            DecoratorEntry.prototype.perform_set = function (fieldname, value, s) {
                s.rt.logDataWrite(this.target().on_render_heap);
                this.clear_if_necessary();
                this[fieldname] = value;
            };
            DecoratorEntry.prototype.perform_add = function (fieldname, value, s) {
                s.rt.logDataWrite(this.target().on_render_heap);
                this.clear_if_necessary();
                if (value)
                    this[fieldname] += value;
            };
            DecoratorEntry.prototype.perform_clear = function (fieldname, s) {
                s.rt.logDataWrite(this.target().on_render_heap);
                this.clear_if_necessary();
                delete this[fieldname];
            };
            DecoratorEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                s.rt.logDataWrite(this.target().on_render_heap);
                this.clear_if_necessary();
                if (!this[fieldname] && value)
                    this[fieldname] = value;
            };
            return DecoratorEntry;
        })(RecordEntry);
        RT.DecoratorEntry = DecoratorEntry;
        var RecordSingleton = (function (_super) {
            __extends(RecordSingleton, _super);
            function RecordSingleton() {
                _super.call(this);
            }
            RecordSingleton.prototype.rtType = function () {
                return this.libName + "$" + this.stableName;
            };
            RecordSingleton.prototype.noMagicRtType = function () {
                return true;
            };
            RecordSingleton.prototype.initParent = function () {
            };
            RecordSingleton.prototype.isSerializable = function () {
                return true;
            };
            RecordSingleton.prototype.session = function () {
                var s = (this.localsession) ? TDev.Runtime.theRuntime.sessions.getLocalSession() : TDev.Runtime.theRuntime.sessions.getCurrentSession();
                if (!s)
                    TDev.Util.oops("missing " + (this.localsession ? "local" : "cloud") + " session, " + this.stableName);
                return s;
            };
            RecordSingleton.prototype.create_collection = function (s) {
                var o = RT.Collection.fromArray([], this);
                o.on_render_heap = s.rt.rendermode;
                return o;
            };
            RecordSingleton.prototype.copy_to_collection = function (s) {
                var o = this.create_collection(s);
                o.a.pushRange(this.get_enumerator());
                return o;
            };
            RecordSingleton.prototype.my_entries = function (s) {
                var o = this.create_collection(s);
                var userid = TDev.Cloud.getUserId();
                if (userid === undefined)
                    return undefined;
                o.a.pushRange(this.get_enumerator().filter(function (e) {
                    var u = e[e.keys[0]];
                    return u._id === userid;
                }));
                return o;
            };
            RecordSingleton.prototype.entries_linked_to = function () {
                var supplied = arguments;
                var o = this.create_collection(arguments[arguments.length - 1]);
                o.a.pushRange(this.get_enumerator().filter(function (e) {
                    for (var i = 0; i < e.keys.length; i++)
                        if (e[e.keys[i]] !== supplied[i])
                            return false;
                    return true;
                }));
                return o;
            };
            RecordSingleton.prototype.on_changed = function (perform, s) {
                if (!this.onChangeEvent)
                    this.onChangeEvent = new RT.Event_();
                var b = this.onChangeEvent.addHandler(perform);
                s.rt.queueLocalEvent(this.onChangeEvent, undefined, true, true);
                return b;
            };
            RecordSingleton.prototype.logMutation = function (s) {
                s.rt.logDataWrite(false);
                if (this.onChangeEvent)
                    s.rt.queueLocalEvent(this.onChangeEvent, undefined, true, true);
            };
            RecordSingleton.prototype.wait_for_update = function (r) {
                if (!this.onChangeEvent)
                    this.onChangeEvent = new RT.Event_();
                this.onChangeEvent.addAwaiter(function (v) {
                    r.resume();
                });
            };
            RecordSingleton.prototype.getTable = function (entries, sf) {
                var tab = document.createElement("table");
                tab.className = "wall-table";
                if (entries.length === 0) {
                    var tr = document.createElement("tr");
                    var td = document.createElement("td");
                    tr.textContent = "(empty table)";
                    tr.appendChild(td);
                    tab.appendChild(tr);
                }
                else {
                    tab.appendChild(entries[0].getTableHeader());
                    entries.forEach(function (e) { return tab.appendChild(e.getTableRow(sf)); });
                }
                return tab;
            };
            RecordSingleton.prototype.debuggerDisplay = function (_) {
                return null;
            };
            RecordSingleton.prototype.invalid_row = function () {
                return undefined;
            };
            RecordSingleton.prototype.invalid = function () {
                return undefined;
            };
            RecordSingleton.prototype.get_enumerator = function () {
                TDev.Util.oops("not implemented: enumerator");
                return [];
            };
            RecordSingleton.prototype.exportJson = function (ctx) {
                var entries = this.get_enumerator();
                return ctx.encodeArrayNode(this, entries.slice(0));
            };
            RecordSingleton.prototype.to_json = function (s) {
                var ctx = new TDev.JsonExportCtx(s);
                ctx.push(this);
                var json = this.exportJson(ctx);
                ctx.pop(this);
                return RT.JsonObject.wrap(json);
            };
            RecordSingleton.prototype.prune_to = function (entries) {
                TDev.Util.oops("must be overridden by index and table");
            };
            RecordSingleton.prototype.from_json = function (jobj, s) {
                this.logMutation(s);
                var ctx = new TDev.JsonImportCtx(s);
                var json = jobj.value();
                this.importJsonTableOrIndex(ctx, json);
            };
            RecordSingleton.prototype.importJsonTableOrIndex = function (ctx, json) {
                var _this = this;
                if (typeof json !== "object")
                    return;
                if (Array.isArray(json)) {
                    var elts = json.map(function (jsonelt) { return _this.importJsonRecord(ctx, undefined, jsonelt, true); });
                    for (var i = 0; i < elts.length; i++)
                        elts[i].importJsonFields(ctx, json[i]);
                    this.prune_to(elts);
                }
                else {
                    this.importJsonRecord(ctx, undefined, json, false);
                }
            };
            RecordSingleton.prototype.jsonExportKey = function (ctx) {
                return null;
            };
            RecordSingleton.prototype.importJsonKeys = function (ctx, jobj) {
                return [];
            };
            RecordSingleton.prototype.findImportTarget = function (ctx, id, target, json) {
                TDev.Util.oops("subclasses are supposed to override this method");
                return null;
            };
            RecordSingleton.prototype.importJsonRecord = function (ctx, target, json, delayrecursion) {
                this.logMutation(ctx.s);
                var id;
                if (typeof (json) === "string") {
                    id = ctx.map(this.stableName, json);
                }
                else if (typeof (json) !== "object" || Array.isArray(json)) {
                    return undefined;
                }
                else {
                    id = ctx.map(this.stableName, json["‚åπid"]);
                }
                target = this.findImportTarget(ctx, id, target, json);
                if (target) {
                    if (!delayrecursion)
                        target.importJsonFields(ctx, json);
                    if (id)
                        ctx.addmapping(this.stableName, id, target.jsonExportKey(undefined));
                }
                return target;
            };
            return RecordSingleton;
        })(RT.RTValue);
        RT.RecordSingleton = RecordSingleton;
        var TableSingleton = (function (_super) {
            __extends(TableSingleton, _super);
            function TableSingleton() {
                _super.call(this);
                this.row_counter = 0;
                this.dependentcaches = [];
            }
            TableSingleton.prototype.initParent = function () {
                this._elements = [];
            };
            TableSingleton.prototype.next_row_number = function () {
                this.row_counter = this.row_counter + 1;
                return this.row_counter;
            };
            TableSingleton.prototype.add_row = function (s) {
                return this.constructrow(arguments);
            };
            TableSingleton.prototype.constructrow = function (args) {
                this.clearCachedData();
                var ent = new this.entryCtor(this);
                ent.rownumber = this.next_row_number();
                this._elements.push(ent);
                TDev.Util.assert(args.length == ent.keys.length + 1);
                this.logMutation(args[args.length - 1]);
                for (var i = 0; i < ent.keys.length; ++i)
                    ent[ent.keys[i]] = args[i];
                return ent;
            };
            TableSingleton.prototype.row_at = function (index) {
                this.cacheItems();
                return this.cacheditems[Math.floor(index)];
            };
            TableSingleton.prototype.count = function () {
                this.cacheItems();
                return this.cacheditems.length;
            };
            TableSingleton.prototype.clear = function (s) {
                this.logMutation(s);
                this.clearCachedData();
                this._elements.forEach(function (e) {
                    e.invalidate();
                });
                this._elements = [];
            };
            TableSingleton.prototype.prune_to = function (entries) {
                this._elements = entries;
            };
            TableSingleton.prototype.findImportTarget = function (ctx, id, target, json) {
                if (id && (!target || target.jsonExportKey(undefined) !== id)) {
                    target = undefined;
                    this._elements.forEach(function (e) {
                        if (e.jsonExportKey(undefined) === id)
                            target = e;
                    });
                }
                if (target && target.is_deleted())
                    target = undefined;
                if (!target && (typeof (json) !== "string")) {
                    var keys = this.importJsonKeys(ctx, json);
                    keys.push(ctx.s);
                    target = this.constructrow(keys);
                }
                return target;
            };
            TableSingleton.prototype.cacheItems = function () {
                var _this = this;
                if (this.cacheditems === undefined) {
                    this.cacheditems = this._elements.filter(function (val) { return !val.is_deleted(); });
                    if (this.cacheditems.length > 0) {
                        var e = this.cacheditems[0];
                        if (e.keys.length > 0) {
                            e.keys.forEach(function (k) {
                                var key = e[k];
                                TDev.Util.assert(key instanceof TableEntry || key instanceof CloudTableEntry);
                                key.parent.dependentcaches[_this.stableName] = _this;
                            });
                        }
                    }
                }
            };
            TableSingleton.prototype.clearCachedData = function () {
                this.cacheditems = undefined;
                for (var l in this.dependentcaches) {
                    if (this.dependentcaches.hasOwnProperty(l))
                        this.dependentcaches[l].clearCachedData();
                }
            };
            TableSingleton.prototype.get_enumerator = function () {
                this.cacheItems();
                return this.cacheditems;
            };
            TableSingleton.prototype.post_to_wall = function (s) {
                s.rt.postBoxedHtml(this.getTable(this.get_enumerator(), s), s.pc);
            };
            return TableSingleton;
        })(RecordSingleton);
        RT.TableSingleton = TableSingleton;
        var CloudTableSingleton = (function (_super) {
            __extends(CloudTableSingleton, _super);
            function CloudTableSingleton() {
                _super.call(this);
                this.dependentcaches = [];
            }
            CloudTableSingleton.prototype.add_row = function (s) {
                return this.constructrow(arguments);
            };
            CloudTableSingleton.prototype.constructrow = function (args) {
                this.clearCachedData();
                var ent = new this.entryCtor(this);
                TDev.Util.assert(args.length == ent.keys.length + 1);
                this.logMutation(args[args.length - 1]);
                var links = new Array();
                for (var i = 0; i < ent.keys.length; ++i) {
                    var x = args[i];
                    var correctsession = x.check(false);
                    if (!correctsession)
                        TDev.Util.userError(TDev.lf("invalid link argument: originated in a different session"));
                    links.push(x.uid);
                    ent[ent.keys[i]] = x;
                }
                ent.hookup(this.session().user_create_item(this.cloudtype, links, []));
                return ent;
            };
            CloudTableSingleton.prototype.prune_to = function (entries) {
                var map = {};
                entries.forEach(function (e) { return map[e.uid] = true; });
                this.get_enumerator().forEach(function (r) { return map[r.uid] ? undefined : r.delete_row(); });
            };
            CloudTableSingleton.prototype.import_item = function (item) {
                if (item.backlink !== undefined)
                    return (item.backlink);
                else {
                    var ent = new this.entryCtor(this);
                    ent.hookup(item);
                    return ent;
                }
            };
            CloudTableSingleton.prototype.import_item_from_uid = function (uid, def) {
                if (!uid)
                    return undefined;
                var session = this.session();
                var item = session.user_get_item(uid);
                if (def && (!item || item.definition !== def))
                    return undefined;
                if (item === undefined)
                    item = session.user_create_tombstone(this.cloudtype, uid, this.key_cloudtypes.map(function (k) { return undefined; }), []);
                return this.import_item(item);
            };
            CloudTableSingleton.prototype.fromRest = function (json) {
                return this.import_item_from_uid(json["‚åπid"]);
            };
            CloudTableSingleton.prototype.cacheItems = function () {
                var _this = this;
                if (this.cacheditems === undefined) {
                    var session = this.session();
                    this.cacheditems = session.user_get_items_in_domain(this.cloudtype).sort(function (a, b) { return a.compareTo(b); });
                    this.linked_cloudtables.forEach(function (t) { return t.dependentcaches[_this.stableName] = _this; });
                    TDev.Runtime.theRuntime.sessions.registerDataCache(this.stableName, this);
                }
            };
            CloudTableSingleton.prototype.clearCachedData = function () {
                var _this = this;
                this.cacheditems = undefined;
                this.linked_cloudtables.forEach(function (t) { return delete t.dependentcaches[_this.stableName]; });
                TDev.Runtime.theRuntime.sessions.unregisterDataCache(this.stableName);
                for (var l in this.dependentcaches) {
                    if (this.dependentcaches.hasOwnProperty(l))
                        this.dependentcaches[l].clearCachedData();
                }
            };
            CloudTableSingleton.prototype.count = function () {
                this.cacheItems();
                return this.cacheditems.length;
            };
            CloudTableSingleton.prototype.row_at = function (index) {
                this.cacheItems();
                var item = this.cacheditems[Math.floor(index)];
                return item ? this.import_item(item) : undefined;
            };
            CloudTableSingleton.prototype.clear = function () {
                var _this = this;
                this.cacheItems();
                this.cacheditems.forEach(function (item) { return _this.session().user_delete_item(item); });
                this.clearCachedData();
            };
            CloudTableSingleton.prototype.get_enumerator = function () {
                var _this = this;
                this.cacheItems();
                var entries = this.cacheditems.map(function (i) { return _this.import_item(i); });
                return entries;
            };
            CloudTableSingleton.prototype.post_to_wall = function (frame) {
                frame.rt.postBoxedHtml(this.getTable(this.get_enumerator(), frame), frame.pc);
            };
            CloudTableSingleton.prototype.findImportTarget = function (ctx, id, t, json) {
                var target = t;
                if (id && (!target || target.jsonExportKey(undefined) !== id)) {
                    if (id[0] === ".")
                        id = id.slice(1);
                    target = this.import_item_from_uid(id, this.cloudtype);
                }
                if (target && target.is_deleted())
                    target = undefined;
                if (!target && (typeof (json) !== "string")) {
                    var keys = this.importJsonKeys(ctx, json);
                    keys.push(ctx.s);
                    target = this.constructrow(keys);
                }
                return target;
            };
            return CloudTableSingleton;
        })(RecordSingleton);
        RT.CloudTableSingleton = CloudTableSingleton;
        var CloudIndexEntry = (function (_super) {
            __extends(CloudIndexEntry, _super);
            function CloudIndexEntry() {
                _super.call(this);
            }
            CloudIndexEntry.prototype.equals = function (other) {
                var o = other;
                this.check();
                o.check();
                return (this.sessionname === o.sessionname) && (this.entry === o.entry);
            };
            CloudIndexEntry.prototype.getShortStringRepresentation = function () {
                return "[" + this.parent.entryKindName + "]";
            };
            CloudIndexEntry.prototype.hookup = function (entry) {
                this.sessionname = entry.session.servername;
                this.entry = entry;
                entry.backlink = this;
                this.read_cloud_fields(entry);
            };
            CloudIndexEntry.prototype.unlink = function () {
                this.decorators = undefined;
                this.entry = undefined;
                for (var i = 0; i < this.values.length; i++) {
                    this[this.values[i]] = undefined;
                }
            };
            CloudIndexEntry.prototype.getFieldValue = function (fieldname, s) {
                this.check();
                var f = this[fieldname];
                if (f instanceof TDev.Revisions.LVal)
                    return Conv.read(this.parent.session(), f, s);
                else
                    return f;
            };
            CloudIndexEntry.prototype.check = function (abort) {
                if (abort === void 0) { abort = true; }
                if (this.sessionname !== this.parent.session().servername) {
                    if (abort)
                        TDev.Util.userError(TDev.lf("stale index entry: originated in a different session"));
                    else
                        return false;
                }
                if (typeof (this.entry) === "undefined" || this.entry.backlink != this || this.entry.session !== this.parent.session()) {
                    TDev.Util.assert(this.keys.length === this.parent.key_cloudtypes.length);
                    var ukeys = new Array();
                    var lkeys = new Array();
                    for (var i = 0; i < this.keys.length; i++) {
                        var cloudtype = this.parent.key_cloudtypes[i];
                        if (cloudtype.charAt(cloudtype.length - 1) === ')') {
                            var uid = this[this.keys[i]].uid;
                            ukeys.push(uid);
                        }
                        else {
                            lkeys.push(Conv.toCloud(cloudtype, this[this.keys[i]], false));
                        }
                        this.hookup(this.parent.session().user_get_entry(this.parent.cloudtype, ukeys, lkeys));
                    }
                    return true;
                }
                return true;
            };
            CloudIndexEntry.prototype.clear_fields = function (s) {
                if (s)
                    this.parent.logMutation(s);
                this.check();
                for (var i = 0; i < this.values.length; i++) {
                    var lval = this[this.values[i]];
                    Conv.clear(this.parent.session(), lval);
                }
            };
            CloudIndexEntry.prototype.confirmed = function () {
                var _this = this;
                this.check();
                var session = this.parent.session();
                var confirmed = this.dependenciesconfirmed && !this.values.some(function (val) { return !session.user_is_datum_confirmed(_this[val]); });
                return confirmed;
            };
            CloudIndexEntry.prototype.dependenciesconfirmed = function () {
                var _this = this;
                return !this.keys.some(function (key) {
                    var r = _this[key];
                    return (r && r instanceof CloudTableEntry && !r.existenceConfirmed());
                });
            };
            CloudIndexEntry.prototype.compareTo = function (other) {
                var _this = this;
                this.check();
                other.check();
                var diff = 0;
                this.keys.forEach(function (k) {
                    if (!diff) {
                        var a = _this[k];
                        var b = other[k];
                        switch (typeof a) {
                            case "string":
                                diff = a.localeCompare(b);
                                break;
                            case "number":
                                diff = a - b;
                                break;
                            case "boolean":
                                if (a !== b)
                                    diff = (a ? 1 : -1);
                                break;
                            default:
                                diff = RT.RTValue.CompareKeys(a, b);
                                break;
                        }
                    }
                });
                return diff;
            };
            CloudIndexEntry.prototype.is_deleted = function () {
                if (!this.check())
                    return true;
                return this.parent.session().user_is_datum_deleted(this.entry);
            };
            CloudIndexEntry.prototype.perform_get = function (fieldname, s) {
                this.check();
                return Conv.read(this.parent.session(), this[fieldname], s);
            };
            CloudIndexEntry.prototype.perform_confirmed = function (fieldname) {
                this.check();
                return this.parent.session().user_is_datum_confirmed(this[fieldname]);
            };
            CloudIndexEntry.prototype.perform_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, false);
            };
            CloudIndexEntry.prototype.perform_test_and_set = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, true);
            };
            CloudIndexEntry.prototype.perform_add = function (fieldname, value, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], value, true);
            };
            CloudIndexEntry.prototype.perform_clear = function (fieldname, s) {
                this.parent.logMutation(s);
                this.check();
                Conv.modify(this.parent.session(), this[fieldname], undefined, false);
            };
            CloudIndexEntry.prototype.read_cloud_fields = function (datum) {
                var ukeys = new Array();
                var lkeys = new Array();
                TDev.Util.assert(this.parent.key_cloudtypes.length === this.keys.length);
                for (var i = 0; i < this.keys.length; i++) {
                    var keytype = this.parent.key_cloudtypes[i];
                    var val;
                    if (keytype.charAt(keytype.length - 1) === ")") {
                        var uid = datum.ukeys[ukeys.length];
                        var linkedtable = this.parent.linked_cloudtables[ukeys.length];
                        val = linkedtable.import_item_from_uid(uid);
                        ukeys.push(uid);
                    }
                    else {
                        var lit = datum.lkeys[lkeys.length];
                        val = Conv.fromCloud(keytype, lit);
                        lkeys.push(lit);
                    }
                    this[this.keys[i]] = val;
                }
                TDev.Util.assert(this.parent.value_cloudtypes.length === this.values.length);
                for (var i = 0; i < this.values.length; i++) {
                    var property = this.parent.value_cloudtypes[i];
                    this[this.values[i]] = this.parent.session().user_get_lval(property, ukeys, lkeys);
                }
            };
            return CloudIndexEntry;
        })(RecordEntry);
        RT.CloudIndexEntry = CloudIndexEntry;
        var PersistentVars = (function () {
            function PersistentVars(rt) {
                this.rt = rt;
                this.sessions = rt.sessions;
            }
            PersistentVars.prototype.check = function () {
                if (!this.session || (!this.localsession && this.session !== this.sessions.getCurrentSession())) {
                    this.session = (this.localsession ? this.sessions.getLocalSession() : this.sessions.getCurrentSession());
                    var prefix = (this.libName === "this") ? "" : (this.libName + ".");
                    for (var i = 0; i < this.names.length; i++) {
                        var name = this.names[i];
                        var property = prefix + this.cloudtypes[i];
                        this[name] = this.session.user_get_lval(property, [], []);
                    }
                }
            };
            PersistentVars.prototype.perform_get = function (fieldname, s) {
                this.check();
                return Conv.read(this.session, this[fieldname], s);
            };
            PersistentVars.prototype.perform_confirmed = function (fieldname) {
                this.check();
                return this.session.user_is_datum_confirmed(this[fieldname]);
            };
            PersistentVars.prototype.perform_set = function (fieldname, value, s) {
                s.rt.logDataWrite(false);
                this.check();
                Conv.modify(this.session, this[fieldname], value, false);
            };
            PersistentVars.prototype.perform_test_and_set = function (fieldname, value, s) {
                s.rt.logDataWrite(false);
                this.check();
                Conv.modify(this.session, this[fieldname], value, true);
            };
            PersistentVars.prototype.perform_add = function (fieldname, value, s) {
                s.rt.logDataWrite(false);
                this.check();
                Conv.modify(this.session, this[fieldname], value, true);
            };
            PersistentVars.prototype.perform_clear = function (fieldname, s) {
                s.rt.logDataWrite(false);
                this.check();
                Conv.modify(this.session, this[fieldname], undefined, false);
            };
            return PersistentVars;
        })();
        RT.PersistentVars = PersistentVars;
        var CloudIndexSingleton = (function (_super) {
            __extends(CloudIndexSingleton, _super);
            function CloudIndexSingleton() {
                _super.call(this);
            }
            CloudIndexSingleton.prototype.clear = function () {
                var session = this.session();
                var entries = session.user_get_entries_in_indexdomain(this.cloudtype);
                entries.forEach(function (e) { return e.lvals.forEach(function (l) { return Conv.clear(session, l); }); });
            };
            CloudIndexSingleton.prototype.count = function () {
                return this.session().user_get_entries_in_indexdomain(this.cloudtype).length;
            };
            CloudIndexSingleton.prototype.get_enumerator = function () {
                var _this = this;
                var entries = this.session().user_get_entries_in_indexdomain(this.cloudtype);
                var x = entries.map(function (e) { return _this.import_item(e); });
                x.sort(function (a, b) { return a.compareTo(b); });
                return x;
            };
            CloudIndexSingleton.prototype.post_to_wall = function (frame) {
                frame.rt.postBoxedHtml(this.getTable(this.get_enumerator(), frame), frame.pc);
            };
            CloudIndexSingleton.prototype.import_item = function (entry) {
                if (typeof (entry.backlink) != "undefined")
                    return (entry.backlink);
                else {
                    var ent = new this.entryCtor(this);
                    ent.hookup(entry);
                    return ent;
                }
            };
            CloudIndexSingleton.prototype.singleton = function () {
                return this.access(arguments);
            };
            CloudIndexSingleton.prototype.at = function () {
                return this.access(arguments);
            };
            CloudIndexSingleton.prototype.access = function (args) {
                TDev.Util.assert(args.length - 1 === this.key_cloudtypes.length);
                var ukeys = new Array();
                var lkeys = new Array();
                for (var i = 0; i < this.key_cloudtypes.length; i++) {
                    var cloudtype = this.key_cloudtypes[i];
                    if (cloudtype.charAt(cloudtype.length - 1) === ')') {
                        var uid = args[i].uid;
                        ukeys.push(uid);
                    }
                    else {
                        lkeys.push(Conv.toCloud(cloudtype, args[i], false));
                    }
                }
                var entry = this.session().user_get_entry(this.cloudtype, ukeys, lkeys);
                return this.import_item(entry);
            };
            CloudIndexSingleton.prototype.findImportTarget = function (ctx, id, target, json) {
                var keys = this.importJsonKeys(ctx, json);
                keys.push(ctx.s);
                return this.access(keys);
            };
            CloudIndexSingleton.prototype.prune_to = function (entries) {
                entries.forEach(function (e) { return e.flagthatthisentryispresentusingalongnoncollidingname = true; });
                this.get_enumerator().forEach(function (r) { return r.flagthatthisentryispresentusingalongnoncollidingname ? undefined : r.clear_fields(); });
                entries.forEach(function (e) { return delete e.flagthatthisentryispresentusingalongnoncollidingname; });
            };
            return CloudIndexSingleton;
        })(RecordSingleton);
        RT.CloudIndexSingleton = CloudIndexSingleton;
        var IndexSingleton = (function (_super) {
            __extends(IndexSingleton, _super);
            function IndexSingleton() {
                _super.call(this);
            }
            IndexSingleton.prototype.initParent = function () {
                this._index = TDev.Hashtable.forJson();
            };
            IndexSingleton.prototype.clear = function () {
                return this._index.clear();
            };
            IndexSingleton.prototype.count = function () {
                return this._index.countFiltered(function (val) { return (!val.is_deleted() && val.hasNondefaultValue()); });
            };
            IndexSingleton.prototype.singleton = function () {
                return this.access(arguments);
            };
            IndexSingleton.prototype.at = function () {
                return this.access(arguments);
            };
            IndexSingleton.prototype.makekey = function (args) {
                var key = [];
                for (var i = 0; i < args.length - 1; ++i) {
                    var a = args[i];
                    switch (typeof a) {
                        case "string":
                        case "number":
                        case "boolean":
                            key.push(a);
                            break;
                        default:
                            TDev.Util.assert(!!a);
                            key.push(a.toJsonKey());
                            break;
                    }
                }
                return key;
            };
            IndexSingleton.prototype.access = function (args) {
                var key = this.makekey(args);
                var e = this._index.get(key);
                if (!e) {
                    e = new this.entryCtor(this);
                    TDev.Util.assert((args.length === 0 && e.keys.length === 0) || (args.length - 1 === e.keys.length));
                    for (var i = 0; i < e.keys.length; ++i)
                        e[e.keys[i]] = args[i];
                    this._index.set(key, e);
                }
                return e;
            };
            IndexSingleton.prototype.get_enumerator = function () {
                var a = this._index.filteredValues(function (val) { return (!val.is_deleted() && val.hasNondefaultValue()); });
                a.sort(function (a, b) { return a.compareTo(b); });
                return a;
            };
            IndexSingleton.prototype.post_to_wall = function (frame) {
                frame.rt.postBoxedHtml(this.getTable(this.get_enumerator(), frame), frame.pc);
            };
            IndexSingleton.prototype.findImportTarget = function (ctx, id, target, json) {
                var keys = this.importJsonKeys(ctx, json);
                keys.push(ctx.s);
                return this.access(keys);
            };
            IndexSingleton.prototype.prune_to = function (entries) {
                var _this = this;
                entries.forEach(function (e) { return e.flagthatthisentryispresentusingalongnoncollidingname = true; });
                var tobedeleted = this._index.filteredValues(function (e) { return !e.flagthatthisentryispresentusingalongnoncollidingname; });
                entries.forEach(function (e) { return delete e.flagthatthisentryispresentusingalongnoncollidingname; });
                tobedeleted.forEach(function (e) {
                    var keys = e.keys.map(function (k) { return e[k]; });
                    keys.push(null);
                    var key = _this.makekey(keys);
                    _this._index.remove(key);
                });
            };
            return IndexSingleton;
        })(RecordSingleton);
        RT.IndexSingleton = IndexSingleton;
        var ObjectSingleton = (function (_super) {
            __extends(ObjectSingleton, _super);
            function ObjectSingleton() {
                _super.call(this);
            }
            ObjectSingleton.prototype.create = function (s) {
                var o = new this.entryCtor(this);
                o.on_render_heap = s.rt.rendermode;
                return o;
            };
            ObjectSingleton.prototype.create_from_json = function (jobj, s) {
                var o = this.create(s);
                o.from_json(jobj, s);
                return o;
            };
            ObjectSingleton.prototype.invalid = function () {
                return undefined;
            };
            ObjectSingleton.prototype.clear = function () {
            };
            ObjectSingleton.prototype.importJsonRecord = function (ctx, target, json) {
                if (!target)
                    target = this.create(ctx.s);
                target.importJsonFields(ctx, json);
                return target;
            };
            return ObjectSingleton;
        })(RecordSingleton);
        RT.ObjectSingleton = ObjectSingleton;
        var DecoratorSingleton = (function (_super) {
            __extends(DecoratorSingleton, _super);
            function DecoratorSingleton() {
                _super.call(this);
                this._generation = 0;
            }
            DecoratorSingleton.prototype.clear = function () {
                this._generation = this._generation + 1;
            };
            DecoratorSingleton.prototype.at = function (obj, s) {
                var decs = obj.decorators;
                if (!decs)
                    decs = obj.decorators = new RT.DecoratorCollection();
                var key = s.d["libName"] + "$" + this.stableName;
                var dec = decs[key];
                if (!dec) {
                    dec = new this.entryCtor(this);
                    dec[dec.keys[0]] = obj;
                    decs[key] = dec;
                }
                return dec;
            };
            return DecoratorSingleton;
        })(RecordSingleton);
        RT.DecoratorSingleton = DecoratorSingleton;
        var Conv = (function () {
            function Conv() {
            }
            Conv.modify = function (session, lval, val, relative) {
                if (val instanceof CloudTableEntry)
                    val = val.uid;
                var op = Conv.toCloud(lval.codomain, val, relative);
                session.user_modify_lval(lval, op);
            };
            Conv.read = function (session, lval, s) {
                var cur = session.user_get_value(lval);
                cur = Conv.fromCloud(lval.codomain, cur);
                if (cur && s && lval.codomain.charAt(0) === "^") {
                    var table = s.d["$" + lval.codomain.slice(1)];
                    cur = table.import_item_from_uid(cur);
                }
                return cur;
            };
            Conv.clear = function (session, lval) {
                var op = Conv.toCloud(lval.codomain, undefined, false);
                session.user_modify_lval(lval, op);
            };
            Conv.getCloudDomain = function (kind) {
                switch (kind) {
                    case "Location": return "location";
                    case "User": return "user";
                    case "Boolean": return "boolean";
                    case "Color": return "color";
                    case "DateTime": return "datetime";
                    case "String": return "string";
                    case "Number": return "double";
                    case "Vector3": return "vector3";
                    default: TDev.Util.oops("unhandled case for cloud domain: " + (kind || "none"));
                }
            };
            Conv.getCloudCodomain = function (kind) {
                switch (kind) {
                    case "Location": return "location";
                    case "User": return "user";
                    case "Boolean": return "boolean";
                    case "Color": return "color";
                    case "DateTime": return "datetime";
                    case "String": return "string";
                    case "Number": return "double";
                    case "OAuth Response": return "oauthresponse";
                    case "Link": return "link";
                    case "Json Object": return "json";
                    case "Cloud Picture": return "cloudpicture";
                    default: TDev.Util.oops("unhandled case for cloud codomain: " + (kind || "none"));
                }
            };
            Conv.toCloud = function (kind, val, relative) {
                if (relative === void 0) { relative = false; }
                switch (kind) {
                    case "location":
                        if (!val)
                            return "";
                        TDev.Util.assert(val instanceof RT.Location_);
                        return val.to_string();
                    case "user":
                        if (!val)
                            return "";
                        TDev.Util.assert(val instanceof RT.User);
                        return val.id();
                    case "boolean":
                        return val ? "t" : "";
                    case "color":
                        if (!val)
                            return "";
                        TDev.Util.assert(val instanceof RT.Color);
                        return val.toInt32().toString();
                    case "vector3":
                        if (!val)
                            return "";
                        return JSON.stringify(val.exportJson(null));
                    case "datetime":
                        if (!val)
                            return "";
                        TDev.Util.assert(val instanceof RT.DateTime);
                        return val.milliseconds_since_epoch().toString();
                    case "string":
                        if (typeof (val) != "string")
                            val = "";
                        if (relative)
                            return "^?" + val;
                        if (val.charAt(0) === "^")
                            return "^!" + val;
                        return val;
                    case "double":
                        var newval = (typeof val !== "number" ? 0 : val);
                        return relative ? ("A" + newval) : newval.toString();
                    case "oauthresponse":
                        if (!val)
                            return "";
                        return JSON.stringify(val.exportJson(null));
                    case "link":
                        if (!val)
                            return "";
                        return JSON.stringify(val.exportJson(null));
                    case "json":
                        if (!val)
                            return "";
                        return JSON.stringify(val.exportJson(null));
                    case "cloudpicture":
                        if (!val)
                            return "";
                        return JSON.stringify(val.exportJson(null));
                    default:
                        TDev.Util.assert(kind[0] === "^");
                        return val || "";
                }
            };
            Conv.fromCloud = function (kind, val) {
                switch (kind) {
                    case "location":
                        if (!val)
                            return;
                        return RT.Location_.mkFromString(val);
                    case "user":
                        if (!val)
                            return;
                        return RT.User.mk(val);
                    case "boolean":
                        return !!val && val !== "false";
                    case "color":
                        if (!val)
                            return;
                        return RT.Color.fromInt32(Number(val));
                    case "datetime":
                        var nr = Number(val || 0);
                        return RT.DateTime.mkMs(nr);
                    case "oauthresponse":
                        if (!val)
                            return;
                        return (new RT.OAuthResponse()).importJson(new TDev.JsonImportCtx(null), JSON.parse(val));
                    case "vector3":
                        if (!val)
                            return;
                        return RT.Vector3.mkFromJson(new TDev.JsonImportCtx(null), JSON.parse(val));
                    case "link":
                        if (!val)
                            return;
                        return (new RT.Link()).importJson(new TDev.JsonImportCtx(null), JSON.parse(val));
                    case "json":
                        if (!val)
                            return;
                        return RT.JsonObject.wrap(JSON.parse(val));
                    case "cloudpicture":
                        if (!val)
                            return;
                        return new RT.CloudPicture().importJson(new TDev.JsonImportCtx(null), JSON.parse(val));
                    case "string":
                        if (typeof (val) !== "string")
                            val = "";
                        else if (val.charAt(0) === "^")
                            val = val.substr(2);
                        return val;
                    case "double":
                        if (typeof (val) !== "string")
                            return 0;
                        TDev.Util.assert(val.charAt(0) !== "A");
                        return Number(val);
                    default:
                        TDev.Util.assert(kind[0] === "^");
                        return val || undefined;
                }
            };
            return Conv;
        })();
        RT.Conv = Conv;
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var HeadlessHost = (function () {
        function HeadlessHost() {
            this.crashes = [];
            this.wallWidth = 1000;
            this.wallHeight = 1000;
            this.wallOrientation = 0;
            this.wallVisible = false;
            this.keyboard = new TDev.RT.RuntimeKeyboard(undefined);
        }
        HeadlessHost.prototype.getWall = function () {
            return null;
        };
        HeadlessHost.prototype.astOfAsync = function (id) {
            return TDev.Promise.as(undefined);
        };
        HeadlessHost.prototype.pickScriptAsync = function (mode, message) {
            return TDev.Promise.as(undefined);
        };
        HeadlessHost.prototype.saveAstAsync = function (id, ast) {
            return TDev.Promise.as(undefined);
        };
        HeadlessHost.prototype.deploymentSettingsAsync = function (id) {
            return TDev.Promise.as(undefined);
        };
        HeadlessHost.prototype.packageScriptAsync = function (id, options) {
            return TDev.Promise.as(undefined);
        };
        HeadlessHost.prototype.fullWallWidth = function () {
            return this.wallWidth;
        };
        HeadlessHost.prototype.fullWallHeight = function () {
            return this.wallHeight;
        };
        HeadlessHost.prototype.userWallHeight = function () {
            return this.wallWidth;
        };
        HeadlessHost.prototype.isHeadless = function () {
            return true;
        };
        HeadlessHost.prototype.init = function (rt) {
            this.currentRt = rt;
        };
        HeadlessHost.prototype.liveMode = function () {
            return false;
        };
        HeadlessHost.prototype.dontWaitForEvents = function () {
            return false;
        };
        HeadlessHost.prototype.applyPageAttributes = function (wp) {
        };
        HeadlessHost.prototype.setTransform3d = function (trans, origin, perspective) {
        };
        HeadlessHost.prototype.setFullScreenElement = function (element) {
        };
        HeadlessHost.prototype.isFullScreen = function () {
            return false;
        };
        HeadlessHost.prototype.applyWallStyle = function () {
        };
        HeadlessHost.prototype.publishSizeUpdate = function () {
        };
        HeadlessHost.prototype.notifyPageButtonUpdate = function () {
        };
        HeadlessHost.prototype.additionalButtons = function () {
            return [];
        };
        HeadlessHost.prototype.additionalFullScreenButtons = function () {
            return [];
        };
        HeadlessHost.prototype.updateCloudState = function (hasCloudState, type, status) {
        };
        HeadlessHost.prototype.initApiKeysAsync = function () {
            return TDev.Promise.as();
        };
        HeadlessHost.prototype.agreeTermsOfUseAsync = function () {
            return TDev.Promise.as();
        };
        HeadlessHost.prototype.notifyTutorial = function (cmd) {
        };
        HeadlessHost.prototype.showWall = function () {
            this.wallVisible = true;
        };
        HeadlessHost.prototype.getFullScreenCanvas = function () {
            return undefined;
        };
        HeadlessHost.prototype.toScreenshotCanvas = function () {
            return undefined;
        };
        HeadlessHost.prototype.otherwiseBack = function () {
        };
        HeadlessHost.prototype.backBtnHandler = function () {
        };
        HeadlessHost.prototype.notifyRunState = function () {
        };
        HeadlessHost.prototype.notifyBreakpointHit = function () {
        };
        HeadlessHost.prototype.notifyBreakpointContinue = function () {
        };
        HeadlessHost.prototype.notifyPagePush = function () {
        };
        HeadlessHost.prototype.notifyPagePop = function (p) {
        };
        HeadlessHost.prototype.attachProfilingInfo = function (profile) {
        };
        HeadlessHost.prototype.attachCoverageInfo = function (coverage) {
        };
        HeadlessHost.prototype.notifyStopAsync = function () {
            TDev.Ticker.dbg("notifyStop");
            var p = this.currentRt.saveDataAsync();
            TDev.Util.log("program stopped");
            if (this.onProgramEnd)
                this.onProgramEnd();
            return p;
        };
        HeadlessHost.prototype.hideWallAsync = function () {
            TDev.Ticker.dbg("hideWallAsync");
            if (!this.wallVisible) {
                return TDev.Promise.as();
            }
            this.wallVisible = false;
            return TDev.Promise.as();
        };
        HeadlessHost.prototype.goBack = function () {
        };
        HeadlessHost.prototype.notifyHideWall = function () {
            var _this = this;
            TDev.Ticker.dbg("notifyHideWall");
            this.hideWallAsync().done(function () {
                _this.goBack();
            });
        };
        HeadlessHost.prototype.exceptionActions = function (e) {
            return null;
        };
        HeadlessHost.prototype.respondToCrash = function (bug) {
        };
        HeadlessHost.prototype.fillCrashInfo = function (crash) {
        };
        HeadlessHost.prototype.exceptionHandler = function (e) {
            e.includeSource = true;
            var bug = TDev.Ticker.mkBugReport(e, "runtime error");
            var msg = bug.exceptionMessage;
            var crash = {
                time: Date.now(),
                stack: this.currentRt.getStackTrace().map(function (n) {
                    return { pc: n.pc, name: n.name, d: { libName: (n.d ? n.d.libName : undefined) } };
                }),
                msg: msg
            };
            this.fillCrashInfo(crash);
            this.crashes.push(crash);
            TDev.RT.App.logException(e, crash);
            this.respondToCrash(bug);
            if (!e.isUserError)
                TDev.Util.sendErrorReport(bug);
            this.lastError = TDev.Ticker.bugReportToString(bug);
        };
        HeadlessHost.prototype.askSourceAccessAsync = function (source, description, critical) {
            return TDev.Promise.as(true);
        };
        HeadlessHost.prototype.initFromPrecompiled = function (precompiled) {
            if (precompiled === void 0) { precompiled = null; }
            var rt = this.currentRt;
            var cs = new TDev.CompiledScript();
            cs.initFromPrecompiled(precompiled);
            rt.initFrom(cs);
            rt.setHost(this);
            if (cs.setupRestRoutes)
                cs.setupRestRoutes(rt);
            rt.killTempState();
        };
        return HeadlessHost;
    })();
    TDev.HeadlessHost = HeadlessHost;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var Plugins;
    (function (Plugins) {
        var PluginHost = (function (_super) {
            __extends(PluginHost, _super);
            function PluginHost() {
                _super.call(this);
                this.currentRt = new TDev.Runtime();
                this.currentRt.runtimeKind = function () { return "plugin"; };
            }
            PluginHost.prototype.exceptionHandler = function (e) {
                _super.prototype.exceptionHandler.call(this, e);
                self.postMessage({
                    tdSlotId: this.slotId,
                    id: TDev.Random.uniqueId(),
                    op: "plugin_crashed",
                    message: this.lastError,
                });
            };
            return PluginHost;
        })(TDev.HeadlessHost);
        var hosts = {};
        function uninstallPlugin(d) {
            var h = hosts[d.slotId];
            if (h) {
                TDev.Util.log("shutting down plugin, id:" + d.slotId);
                h.currentRt.stopAsync().done();
                delete hosts[d.slotId];
            }
        }
        function installPlugin(d) {
            TDev.Util.log("installing plugin, id:" + d.slotId);
            var host = new PluginHost();
            hosts[d.slotId] = host;
            host.slotId = d.slotId;
            TDev.Promise.errorHandler = function (ctx, err) { return host.exceptionHandler(err); };
            eval(d.precompiled.replace(/^var TDev;/, ""));
            TDev.Random.strongEntropySource = function (buf) {
                for (var i = 0; i < buf.length; ++i)
                    buf[i] = d.entropy.charAt(i);
            };
            host.initFromPrecompiled();
            var rt = host.currentRt;
            TDev.Runtime.theRuntime = rt;
            rt.pluginSlotId = d.slotId;
            rt.initDataAsync().then(function () {
                var cs = rt.compiled;
                var fn = cs.actionsByName[cs.mainActionName];
                rt.run(fn, null);
            }).done();
        }
        function processMessage(e) {
            var d = e.data;
            if (!d)
                return;
            if (!d.tdOperation) {
                var send = function (h) {
                    if (h && !h.currentRt.isStopped())
                        TDev.RT.Web.receiveWorkerMessage(h.currentRt, e.data);
                };
                if (d.tdSlotId) {
                    send(hosts[d.tdSlotId]);
                }
                else {
                    TDev.Util.values(hosts).forEach(send);
                }
            }
            else {
                switch (d.tdOperation) {
                    case "install":
                        installPlugin(d);
                        break;
                    case "uninstall":
                        uninstallPlugin(d);
                        break;
                    default:
                        TDev.Util.log("operation unknown: " + d.tdOperation);
                        break;
                }
            }
        }
        function initWebWorker() {
            var w = window;
            w.setTimeout = function (a, b) { return self.setTimeout(a, b); };
            var ls = {};
            w.localStorage = ls;
            ls.getItem = function (s) { return ls[s]; };
            ls.setItem = function (s, v) { return ls[s] = v + ""; };
            ls.removeItem = function (s) { return delete ls[s]; };
            TDev.Cloud.authenticateAsync = function () { return TDev.Promise.as(false); };
            TDev.Browser.detect();
            TDev.Util.log("initilize web worker for plugins");
            self.onmessage = TDev.Util.catchErrors("worker-msg", processMessage);
            TDev.Util.initGenericExtensions();
            TDev.Ticker.disable();
            self.postMessage({ tdStatus: "ready" }, null);
        }
        Plugins.initWebWorker = initWebWorker;
        var worker;
        function startWorker() {
            worker = new Worker("worker.js");
            worker.postMessage({
                op: "load",
                url: "browser.js"
            });
            worker.postMessage({
                op: "load",
                url: "main.js"
            });
        }
        Plugins.startWorker = startWorker;
    })(Plugins = TDev.Plugins || (TDev.Plugins = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    TDev.baseUrl = "./";
    var LocalShell;
    (function (LocalShell) {
        function localProxyHandler() {
            return function (cmd, data) {
                if (cmd == "shell")
                    return LocalShell.runShellAsync(data);
                else if (cmd == "socket")
                    return LocalShell.mgmtRequestAsync("stats").then(function () {
                        return { url: mgmtUrl("").replace(/^http/, "ws") };
                    });
                else
                    return LocalShell.mgmtRequestAsync("plugin/" + cmd, data);
            };
        }
        LocalShell.localProxyHandler = localProxyHandler;
        function deploymentKey() {
            var mg = mgmtUrl("");
            var m = mg ? mg.match(/^.*?\/-tdevmgmt-\/([a-z0-9]+)$/) : undefined;
            return m ? m[1] : undefined;
        }
        LocalShell.deploymentKey = deploymentKey;
        function url() {
            var mg = mgmtUrl("");
            var m = mg ? mg.match(/^(.*?\/)-tdevmgmt-\/[a-z0-9]+$/) : undefined;
            return m ? m[1] : undefined;
        }
        LocalShell.url = url;
        function mgmtUrl(path) {
            if (path && !/^\//.test(path))
                path = "/" + path;
            var localProxy = window.localStorage.getItem("local_proxy");
            if (localProxy) {
                var r = localProxy + path;
                TDev.Util.log('shell: local proxy {0}', r);
                return r;
            }
            var tok = window.localStorage.getItem("td_deployment_key");
            if (!tok) {
                TDev.Util.log('shell: missing deployment key');
                return null;
            }
            var m = /(.*:\/\/[^\/]+\/)/.exec(TDev.baseUrl);
            if (!m) {
                TDev.Util.log('shell: invalid base url {0}', TDev.baseUrl);
                return null;
            }
            var r = m[1] + "-tdevmgmt-/" + tok + path;
            TDev.Util.log('shell: mgmturl {0}', r);
            return r;
        }
        LocalShell.mgmtUrl = mgmtUrl;
        function mgmtRequestAsync(path, data) {
            TDev.Util.log("shell mgmtRequest " + path);
            if (!data)
                return TDev.Util.httpGetJsonAsync(mgmtUrl(path));
            else
                return TDev.Util.httpPostRealJsonAsync(mgmtUrl(path), data);
        }
        LocalShell.mgmtRequestAsync = mgmtRequestAsync;
        var lastShell = undefined;
        function runShellAsync(data) {
            TDev.Util.log('shell run {0}', JSON.stringify(data));
            if (lastShell) {
                TDev.Util.log('killing previous shell process');
                lastShell.send(JSON.stringify({ op: "kill" }));
                lastShell.close();
                lastShell = undefined;
            }
            var res = new TDev.PromiseInv();
            var wsurl = mgmtUrl("").replace(/^http/, "ws");
            TDev.Util.log('shell socket: {0}', wsurl);
            var ws = lastShell = new WebSocket(wsurl);
            TDev.Util.log('socket created');
            ws.onopen = function () {
                data = TDev.Util.jsonClone(data);
                data.op = "shell";
                ws.send(JSON.stringify(data));
            };
            ws.onerror = function (e) {
                if (res.isPending())
                    res.error(e);
            };
            ws.onclose = function (e) {
                if (res.isPending())
                    res.error("shell connection closed");
            };
            var stdout = [];
            var stdoutbuf = "";
            var stderr = [];
            var stderrbuf = "";
            ws.onmessage = function (msg) {
                var d = JSON.parse(msg.data);
                if (d.op == "stdout") {
                    stdout.push(d.data);
                    stdoutbuf += d.data;
                    if (/\r?\n$/.test(stdoutbuf)) {
                        stdoutbuf.split(/\r?\n/).filter(function (s) { return !!s; }).forEach(function (s) { return TDev.RT.App.logEvent(TDev.RT.App.DEBUG, "", s, undefined); });
                        stdoutbuf = "";
                    }
                }
                else if (d.op == "stderr") {
                    stderr.push(d.data);
                    stderrbuf += d.data;
                    if (/\r?\n$/.test(stderrbuf)) {
                        stderrbuf.split(/\r?\n/).filter(function (s) { return !!s; }).forEach(function (s) { return TDev.RT.App.logEvent(TDev.RT.App.WARNING, "", s, undefined); });
                        stderrbuf = "";
                    }
                }
                else if (d.op == "error") {
                    TDev.RT.App.logEvent(TDev.RT.App.ERROR, "", d.message, undefined);
                    if (res.isPending())
                        res.error(d.message);
                    ws.close();
                    lastShell = undefined;
                }
                else if (d.op == "exit") {
                    TDev.RT.App.logEvent(d.code == 0 ? TDev.RT.App.INFO : TDev.RT.App.WARNING, "", "exited with " + d.code, undefined);
                    if (res.isPending())
                        res.success({
                            stdout: stdout.join(""),
                            stderr: stderr.join(""),
                            code: d.code,
                        });
                    ws.close();
                    lastShell = undefined;
                }
            };
            return res;
        }
        LocalShell.runShellAsync = runShellAsync;
    })(LocalShell = TDev.LocalShell || (TDev.LocalShell = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var ScriptCache;
    (function (ScriptCache) {
        function log(s) {
            TDev.Util.log("ScriptCache: " + s);
        }
        var getScriptCacheTableAsync = function () { return TDev.Storage.getTableAsync("ScriptCache"); };
        ScriptCache.shippedScripts = {};
        function scriptSource(text) {
            return function (id) {
                if (!id)
                    return TDev.Promise.as(text);
                else
                    return getScriptAsync(id);
            };
        }
        ScriptCache.scriptSource = scriptSource;
        function snapshotCacheAsync(storage) {
            return getScriptCacheTableAsync().then(function (table) { return table.getKeysAsync().then(function (keys) {
                keys = keys.filter(function (s) { return /^id-/.test(s); });
                return table.getItemsAsync(keys).then(function (v) {
                    storage.scriptCache = v;
                });
            }); });
        }
        ScriptCache.snapshotCacheAsync = snapshotCacheAsync;
        function restoreCacheAsync(storage) {
            if (!storage.scriptCache)
                return TDev.Promise.as();
            return getScriptCacheTableAsync().then(function (table) { return table.setItemsAsync(storage.scriptCache); });
        }
        ScriptCache.restoreCacheAsync = restoreCacheAsync;
        function getScriptAsync(id) {
            if (!TDev.Util.check(!!id))
                return TDev.Promise.as("");
            if (ScriptCache.shippedScripts.hasOwnProperty(id))
                return TDev.Promise.as(ScriptCache.shippedScripts[id]);
            return getScriptCacheTableAsync().then(function (table) { return table.getValueAsync("id-" + id); }).then(function (value) {
                if (typeof value === "string") {
                    log("cache hit: " + id);
                    return value;
                }
                log("cache miss: " + id);
                return TDev.Cloud.getScriptTextAsync(id).then(function (value) { return getScriptCacheTableAsync().then(function (table) {
                    if (!value)
                        return value;
                    var items = {};
                    items["id-" + id] = value;
                    return table.setItemsAsync(items).then(function () { return value; });
                }); }, function (err) {
                    if (err.status != 404) {
                        TDev.Util.reportError("getScriptAsync", err, false);
                        return null;
                    }
                    return "";
                });
            });
        }
        ScriptCache.getScriptAsync = getScriptAsync;
    })(ScriptCache = TDev.ScriptCache || (TDev.ScriptCache = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var World;
    (function (World) {
        function log(s) {
            TDev.Util.log("World: " + s);
        }
        World.log = log;
        World.getScriptMeta;
        World.sanitizeScriptTextForCloud;
        World.waitForUpdate = function (id) { return false; };
        var currentUserInfo = null;
        var currentUserPromise = new TDev.PromiseInv();
        var localStorage = window.localStorage;
        var getIndexTablePromise = function () { return TDev.Storage.getTableAsync("Index"); };
        var getScriptsTablePromise = function () { return TDev.Storage.getTableAsync("Scripts"); };
        var getTracesTablePromise = function () { return TDev.Storage.getTableAsync("Traces"); };
        var blobcontainer = "";
        function getHeader(body) {
            var x = JSON.parse(JSON.stringify(body));
            delete x.script;
            return x;
        }
        function removeInstalledAsync(indexTable, scriptsTable, guid) {
            var headerItem = {};
            headerItem[guid] = undefined;
            var bodyItem = {};
            bodyItem[guid + "-script"] = undefined;
            bodyItem[guid + "-scriptState"] = undefined;
            bodyItem[guid + "-scriptVersionInCloud"] = undefined;
            return TDev.Promise.join([indexTable.setItemsAsync(headerItem), scriptsTable.setItemsAsync(bodyItem)]);
        }
        function setInstalledAsync(indexTable, scriptsTable, header, script, editorState, scriptState, cloudScriptVersion) {
            var headerItem = {};
            if (script && (!header.meta || header.meta.comment === undefined))
                header.meta = World.getScriptMeta(script);
            headerItem[header.guid] = JSON.stringify(header);
            var bodyItem = {};
            if (script != null)
                bodyItem[header.guid + "-script"] = typeof script === "string" ? script : undefined;
            if (editorState != null)
                bodyItem[header.guid + "-editorState"] = typeof editorState === "string" ? editorState : undefined;
            if (scriptState !== null)
                bodyItem[header.guid + "-scriptState"] = typeof scriptState === "string" ? scriptState : undefined;
            if (cloudScriptVersion != null)
                bodyItem[header.guid + "-scriptVersionInCloud"] = typeof cloudScriptVersion === "string" ? cloudScriptVersion : undefined;
            log(header.guid + "/" + header.scriptId + ": " + header.name + " save with base " + header.scriptVersion.baseSnapshot);
            return TDev.Promise.join([indexTable.setItemsAsync(headerItem), scriptsTable.setItemsAsync(bodyItem)]);
        }
        function setCloudScriptVersionAsync(scriptsTable, guid, cloudScriptVersion) {
            var bodyItem = {};
            bodyItem[guid + "-scriptVersionInCloud"] = typeof cloudScriptVersion === "string" ? cloudScriptVersion : undefined;
            return scriptsTable.setItemsAsync(bodyItem);
        }
        function mergeJSON(base, local, server) {
            Object.keys(server).forEach(function (k) {
                if (typeof server[k] === "object" && local.hasOwnProperty(k) && typeof local[k] == "object")
                    local[k] = mergeJSON(base[k] || {}, local[k], server[k]);
                else if (!local.hasOwnProperty(k) || base[k] === local[k])
                    local[k] = server[k];
            });
            return local;
        }
        World.mergeJSON = mergeJSON;
        function mergeEditorStates(base, local, server) {
            return JSON.stringify(mergeJSON(JSON.parse(base), JSON.parse(local), JSON.parse(server)));
        }
        World.mergeScripts = function (base, local, server) { return local; };
        function getScriptBlobAsync(snapshotId) {
            return TDev.Util.httpGetJsonAsync(blobcontainer + snapshotId);
        }
        World.getScriptBlobAsync = getScriptBlobAsync;
        function downloadInstalledAsync(indexTable, scriptsTable, header) {
            log(header.guid + "/" + header.scriptId + ": " + header.name + " is newer");
            if (TDev.Cloud.lite)
                return getScriptBlobAsync(header.scriptVersion.baseSnapshot).then(function (resp) { return indexTable.getValueAsync(header.guid).then(function (str) { return str ? JSON.parse(str) : null; }).then(function (hd) {
                    var baseVer, currVer;
                    if (hd && hd.scriptVersion.instanceId != "cloud" && hd.scriptVersion.baseSnapshot) {
                        log(header.guid + "/" + header.scriptId + ": " + header.name + " merging based on " + hd.scriptVersion.baseSnapshot);
                        return getScriptBlobAsync(hd.scriptVersion.baseSnapshot).then(function (r) {
                            baseVer = r;
                        }).then(function () { return scriptsTable.getItemsAsync([header.guid + "-script", header.guid + "-editorState"]); }).then(function (r) {
                            currVer = { script: r[header.guid + "-script"], editorState: r[header.guid + "-editorState"] };
                        }).then(function () {
                            header.scriptVersion.instanceId = TDev.Cloud.getWorldId();
                            header.scriptVersion.time = getCurrentTime();
                            header.scriptVersion.version++;
                            return {
                                script: World.mergeScripts(baseVer.script, currVer.script, resp.script),
                                editorState: mergeEditorStates(baseVer.editorState, currVer.editorState, resp.editorState),
                            };
                        });
                    }
                    else {
                        return resp;
                    }
                }); }).then(function (resp) { return setInstalledAsync(indexTable, scriptsTable, header, resp.script, resp.editorState, null, null); }).then(function () { return header.scriptVersion.instanceId == "cloud" ? TDev.Promise.as() : uploadInstalledAsync(indexTable, scriptsTable, header); });
            return TDev.Cloud.getUserInstalledBodyAsync(header.guid).then(function (installedBodies) {
                var body = undefined;
                installedBodies.bodies.forEach(function (b) {
                    if (b.guid == header.guid)
                        body = b;
                });
                if (body) {
                    var cloudScriptVersion = JSON.stringify(header.scriptVersion);
                    if (body.status == "published")
                        return TDev.ScriptCache.getScriptAsync(body.scriptId).then(function (script) { return script == null ? TDev.Promise.as() : script == "" ? setInstalledAsync(indexTable, scriptsTable, uninstall(getHeader(body)), undefined, undefined, null, null) : setInstalledAsync(indexTable, scriptsTable, getHeader(body), script, body.editorState, null, cloudScriptVersion); });
                    else if (body.script == "")
                        return setInstalledAsync(indexTable, scriptsTable, uninstall(getHeader(body)), undefined, undefined, null, null);
                    else
                        return setInstalledAsync(indexTable, scriptsTable, getHeader(body), body.script, body.editorState, null, cloudScriptVersion);
                }
                else
                    return removeInstalledAsync(indexTable, scriptsTable, header.guid);
            });
        }
        function publishInstalledAsync(indexTable, scriptsTable, header) {
            log(header.guid + "/" + header.scriptId + ": " + header.name + " is to be published");
            return indexTable.getValueAsync(header.guid).then(function (resp) {
                header = JSON.parse(resp);
            }).then(function () { return TDev.Cloud.postUserInstalledPublishAsync(header.guid, header.publishAsHidden, JSON.stringify(header.scriptVersion), header.meta); }).then(function (installedBodies) {
                var body = undefined;
                installedBodies.bodies.forEach(function (b) {
                    if (b.guid == header.guid)
                        body = b;
                });
                if (!body)
                    return undefined;
                var cloudScriptVersion = JSON.stringify(header.scriptVersion);
                return setInstalledAsync(indexTable, scriptsTable, getHeader(body), body.script || null, body.editorState || null, null, cloudScriptVersion);
            }).then(function (r) { return r; }, function (e) {
                if (e.status == 400) {
                    TDev.ModalDialog.info("cannot publish", "Your script '" + header.name + "' cannot be published. Error message: " + (e.errorMessage || "not available"));
                    getInstalledHeaderAsync(header.guid).then(function (header) {
                        if (header.status == "tobepublished") {
                            header.status = "unpublished";
                            return setInstalledAsync(indexTable, scriptsTable, header, null, null, null, null);
                        }
                        else
                            return TDev.Promise.as();
                    }).done();
                }
                throw e;
            });
        }
        function uploadInstalledAsync(indexTable, scriptsTable, header) {
            log(header.guid + "/" + header.scriptId + ": " + header.name + " is dirty");
            return TDev.Promise.join({
                script: scriptsTable.getValueAsync(header.guid + "-script"),
                editorState: scriptsTable.getValueAsync(header.guid + "-editorState")
            }).then(function (data) {
                var body = JSON.parse(JSON.stringify(header));
                if (!TDev.Cloud.lite && body.status == "published")
                    body.script = "";
                else if ((TDev.Cloud.lite && body.status == "published") || body.status == "unpublished" || body.status == "tobepublished") {
                    body.script = World.sanitizeScriptTextForCloud(data.script);
                    body.status = "unpublished";
                }
                else
                    body.script = undefined;
                body.editorState = data.editorState;
                return TDev.Cloud.postUserInstalledAsync({ bodies: [body] }).then(function (resp) {
                    if (TDev.Cloud.lite) {
                        if (!resp.numErrors) {
                            var header = resp.headers[0];
                            if (body.script)
                                header.meta = World.getScriptMeta(body.script);
                            return setInstalledAsync(indexTable, scriptsTable, header, null, null, null, null).then(function () { return resp; });
                        }
                    }
                    return TDev.Promise.as(resp);
                });
            });
        }
        function recentUsesInstalledAsync(headers) {
            return TDev.Cloud.postUserInstalledAsync({ recentUses: headers.map(function (h) { return { guid: h.guid, recentUse: h.recentUse }; }) });
        }
        var syncVersion = undefined;
        var continuouslySyncVersion = undefined;
        var syncCount = 0;
        function cancelSync() {
            syncVersion = undefined;
        }
        World.cancelSync = cancelSync;
        function syncIsActive() {
            return !!syncVersion;
        }
        World.syncIsActive = syncIsActive;
        function cancelContinuouslySync() {
            if (continuouslySyncVersion) {
                continuouslySyncVersion = undefined;
                cancelSync();
            }
        }
        World.cancelContinuouslySync = cancelContinuouslySync;
        var updateCache = null;
        var addUpdates = {};
        World.onNewNotificationChanged = undefined;
        World._askEmail = false;
        World._askToEnableEmailNewsletter = false;
        World._askToEnableEmailNotifications = false;
        World._askToEnableNotifications = false;
        World._profileIndex = 0;
        World._profileCount = 0;
        function continuouslySyncAsync(m, onSyncedAsync) {
            if (onSyncedAsync === void 0) { onSyncedAsync = undefined; }
            if (continuouslySyncVersion)
                return TDev.Promise.as();
            return internalContinuouslySyncAsync(m, onSyncedAsync, continuouslySyncVersion = new Object());
        }
        World.continuouslySyncAsync = continuouslySyncAsync;
        function internalContinuouslySyncAsync(m, onSyncedAsync, myContinuouslySyncVersion) {
            var v = lastV;
            if (myContinuouslySyncVersion == continuouslySyncVersion && v)
                return syncAsync(false, v, m).then(function () {
                    var p = TDev.Promise.as();
                    if (myContinuouslySyncVersion == continuouslySyncVersion) {
                        if (onSyncedAsync && v != lastV)
                            p = p.then(function () { return onSyncedAsync(); });
                        p = p.then(function () { return TDev.Promise.delay(2000, function () { return internalContinuouslySyncAsync(m, onSyncedAsync, myContinuouslySyncVersion); }); });
                    }
                    return p;
                });
            else
                return TDev.Promise.as();
        }
        function getCurrentUserInfoAsync() {
            if (currentUserInfo)
                return TDev.Promise.as(currentUserInfo);
            else
                return currentUserPromise;
        }
        World.getCurrentUserInfoAsync = getCurrentUserInfoAsync;
        var lastV;
        function syncAsync(uploadRecentUses, v, m, onNotLoggedIn, onBadTime, onAskBeta, onAskSomething, onNoOtherAsk) {
            if (uploadRecentUses === void 0) { uploadRecentUses = true; }
            if (v === void 0) { v = undefined; }
            if (m === void 0) { m = false; }
            if (onNotLoggedIn === void 0) { onNotLoggedIn = undefined; }
            if (onBadTime === void 0) { onBadTime = undefined; }
            if (onAskBeta === void 0) { onAskBeta = undefined; }
            if (onAskSomething === void 0) { onAskSomething = undefined; }
            if (onNoOtherAsk === void 0) { onNoOtherAsk = undefined; }
            var totalCounter = TDev.RT.Perf.start("syncasync", true);
            var last = TDev.RT.Perf.start("startsync");
            function time(name) {
                if (!v)
                    TDev.RT.Perf.stop(last);
                last = TDev.RT.Perf.start(name);
            }
            if (syncCount > 0 && window.applicationCache.status == window.applicationCache.IDLE) {
                try {
                    window.applicationCache.update();
                }
                catch (e) {
                }
            }
            time("appcache");
            syncCount++;
            if (TDev.Cloud.isOffline()) {
                var message = "cannot sync - you appear to be offline";
                TDev.HTML.showProgressNotification(v ? undefined : message);
                return TDev.Promise.as(message);
            }
            time("isonline");
            var mySyncVersion = new Object();
            syncVersion = mySyncVersion;
            var canceled = TDev.Promise.wrapError("canceled");
            log("starting sync");
            localStorage.removeItem("editorScriptToSaveDirty");
            var pendingDownloads = 0;
            var pendingUploads = 0;
            var pendingPublishs = 0;
            var progress = function (deltaDownloads, deltaUploads, deltaPublishs) {
                if (syncVersion != mySyncVersion)
                    return;
                pendingDownloads += deltaDownloads;
                pendingUploads += deltaUploads;
                pendingPublishs += deltaPublishs;
                var a = [];
                if (pendingDownloads)
                    a.push(pendingDownloads + " down");
                if (pendingUploads)
                    a.push(pendingUploads + " up");
                if (pendingPublishs)
                    a.push(pendingPublishs + " publish");
                var s = "syncing...";
                if (a.length > 0) {
                    s += " (" + a.join(", ") + ")";
                    TDev.HTML.showProgressNotification(s, false);
                }
            };
            progress(0, 0, 0);
            var tobepublished = [];
            var newerHeaders = [];
            var deletedHeaders = [];
            var uptodates = [];
            var dirtyHeaders = [];
            var askBeta = false;
            var askSomething = null;
            return (v ? TDev.Cloud.getUserInstalledLongAsync(v, m) : TDev.Cloud.getUserInstalledAsync()).then(function (installedHeaders) {
                if (syncVersion != mySyncVersion)
                    return canceled;
                return TDev.Promise.join({
                    installedHeaders: installedHeaders,
                    indexTable: getIndexTablePromise(),
                    scriptsTable: getScriptsTablePromise()
                });
            }, function (e) {
                if (e.status == 204 || false) {
                    mySyncVersion = new Object();
                    return canceled;
                }
                throw e;
            }).then(function (data) {
                time("opendb+user/installed");
                if (syncVersion != mySyncVersion)
                    return canceled;
                var user = data.installedHeaders.user;
                if (user) {
                    currentUserInfo = user;
                    if (currentUserPromise) {
                        currentUserPromise.success(user);
                        currentUserPromise = null;
                    }
                }
                var min = data.installedHeaders.minimum;
                lastV = data.installedHeaders.v;
                if (min && TDev.Cloud.currentReleaseId && min < TDev.Cloud.currentReleaseId) {
                    if (World.waitForUpdate(min)) {
                        syncVersion = new Object();
                        return;
                    }
                }
                if (World.onNewNotificationChanged)
                    World.onNewNotificationChanged(data.installedHeaders.newNotifications);
                if (TDev.Runtime.offerNotifications()) {
                    var notifications = data.installedHeaders.notifications;
                    if (TDev.Runtime.refreshNotifications)
                        TDev.Runtime.refreshNotifications(notifications);
                    World._askToEnableNotifications = !notifications;
                }
                World._askEmail = !data.installedHeaders.email;
                World._askToEnableEmailNewsletter = !data.installedHeaders.emailNewsletter;
                World._askToEnableEmailNotifications = !data.installedHeaders.emailNotifications;
                World._profileIndex = data.installedHeaders.profileIndex || 0;
                World._profileCount = data.installedHeaders.profileCount || 0;
                blobcontainer = data.installedHeaders.blobcontainer;
                TDev.Random.addCloudEntropy(data.installedHeaders.random);
                if (data.installedHeaders.time) {
                    var now = new Date().getTime();
                    var seconds = (now - data.installedHeaders.time * 1000) / 1000;
                    if (Math.abs(seconds) > 120) {
                        TDev.HTML.showProgressNotification(v ? undefined : "syncing canceled.");
                        syncVersion = undefined;
                        if (onBadTime)
                            onBadTime(seconds);
                        return;
                    }
                }
                if (data.installedHeaders.askBeta && World.switchToChannel)
                    askBeta = true;
                askSomething = data.installedHeaders.askSomething;
                updateCache = {};
                data.installedHeaders.headers.forEach(function (hd) {
                    if (hd.updateId && hd.scriptId != hd.updateId && hd.updateTime > hd.scriptTime)
                        updateCache[hd.scriptId] = hd.updateId;
                });
                localStorage["updateCacheForInstalled"] = JSON.stringify(updateCache);
                data.keys = data.indexTable.getKeysAsync();
                return TDev.Promise.join(data);
            }).then(function (data) {
                time("readdb1");
                if (syncVersion != mySyncVersion)
                    return canceled;
                data.items = data.indexTable.getItemsAsync(data.keys);
                if (!TDev.Cloud.lite)
                    data.scriptVersionsInCloudItems = data.scriptsTable.getItemsAsync(data.keys.map(function (guid) { return guid + "-scriptVersionInCloud"; }));
                return TDev.Promise.join(data);
            }).then(function (data) {
                time("readdb2");
                if (syncVersion != mySyncVersion)
                    return canceled;
                var recentUses = [];
                var newerOrDeletedGuids = {};
                data.installedHeaders.headers.forEach(function (header) {
                    var existingItem = data.items[header.guid];
                    var isNewer = true;
                    if (existingItem) {
                        var existingHeader = JSON.parse(existingItem);
                        if (TDev.Cloud.lite) {
                            isNewer = header.scriptVersion.baseSnapshot != existingHeader.scriptVersion.baseSnapshot;
                            if (existingHeader.status == "deleted")
                                isNewer = false;
                        }
                        else
                            isNewer = TDev.Cloud.isVersionNewer(header.scriptVersion, existingHeader.scriptVersion);
                        if (header.recentUse < existingHeader.recentUse)
                            recentUses.push(existingHeader);
                    }
                    if (isNewer) {
                        newerOrDeletedGuids[header.guid] = true;
                        if (header.status === "deleted") {
                            if (existingItem)
                                deletedHeaders.push(header);
                        }
                        else {
                            newerHeaders.push(header);
                        }
                    }
                    else {
                        var cloudScriptVersion = JSON.stringify(header.scriptVersion);
                        var uptodate = TDev.Promise.as();
                        if (!TDev.Cloud.lite && data.scriptVersionsInCloudItems[header.guid + "-scriptVersionInCloud"] !== cloudScriptVersion)
                            uptodate = uptodate.then(function () { return setCloudScriptVersionAsync(data.scriptsTable, header.guid, cloudScriptVersion); });
                        if (header.recentUse > existingHeader.recentUse)
                            uptodate = uptodate.then(function () { return recentUseAsync(data.indexTable, header.guid, header.recentUse); });
                        uptodates.push(uptodate);
                    }
                });
                data.keys.forEach(function (key) {
                    var header = JSON.parse(data.items[key]);
                    if (newerOrDeletedGuids[header.guid])
                        return;
                    if (header.status === "tobepublished")
                        tobepublished.push(header);
                    var isDirty = true;
                    if (TDev.Cloud.lite) {
                        isDirty = header.scriptVersion.instanceId != "cloud";
                    }
                    else {
                        var s = data.scriptVersionsInCloudItems[key + "-scriptVersionInCloud"];
                        if (s) {
                            var cloudScriptVersion = JSON.parse(s);
                            if (!TDev.Cloud.isVersionNewer(header.scriptVersion, cloudScriptVersion))
                                isDirty = false;
                        }
                    }
                    if (isDirty)
                        dirtyHeaders.push(header);
                });
                log(recentUses.length + " items with newer recentUses");
                log(newerHeaders.length + " newer items to download, " + deletedHeaders.length + " deleted items");
                log(dirtyHeaders.length + " items to upload");
                progress(newerHeaders.length, dirtyHeaders.length, tobepublished.length);
                if (recentUses.length > 0 && uploadRecentUses)
                    data.recentUses = recentUsesInstalledAsync(recentUses);
                return TDev.Promise.join(data);
            }).then(function (data) {
                time("diff");
                data.downloaded = TDev.Promise.thenEach(newerHeaders, function (h) {
                    if (syncVersion != mySyncVersion)
                        return canceled;
                    return downloadInstalledAsync(data.indexTable, data.scriptsTable, h).then(function () {
                        progress(-1, 0, 0);
                    });
                });
                data.removed = TDev.Promise.thenEach(deletedHeaders, function (h) {
                    if (syncVersion != mySyncVersion)
                        return canceled;
                    return removeInstalledAsync(data.indexTable, data.scriptsTable, h.guid);
                });
                data.uploaded = TDev.Promise.thenEach(dirtyHeaders, function (h) {
                    if (syncVersion != mySyncVersion)
                        return canceled;
                    return uploadInstalledAsync(data.indexTable, data.scriptsTable, h).then(function () {
                        progress(0, -1, 0);
                    });
                });
                data.uptodates = TDev.Promise.join(uptodates);
                return TDev.Promise.join(data);
            }).then(function (data) {
                time("download+upload");
                if (syncVersion != mySyncVersion)
                    return canceled;
                data.tobepublished = TDev.Promise.thenEach(tobepublished, function (header) { return publishInstalledAsync(data.indexTable, data.scriptsTable, header).then(function (result) {
                    progress(0, 0, -1);
                    if (!result)
                        TDev.ModalDialog.info("publishing failed", "There was a versioning mismatch between your local state and the cloud. Please check the content of the script you want to publish and then try again.");
                }); });
                data.progress = TDev.Cloud.postPendingProgressAsync();
                return TDev.Promise.join(data);
            }).then(function () {
                time("publish");
                if (!v)
                    TDev.RT.Perf.stop(totalCounter);
                if (syncVersion != mySyncVersion)
                    return;
                syncVersion = undefined;
                TDev.HTML.showProgressNotification(v ? undefined : "syncing done", true, 0, 1000);
                if (askBeta && onAskBeta && !/localhost/.test(window.location.href))
                    onAskBeta();
                else if (askSomething && onAskSomething)
                    onAskSomething(askSomething);
                else if (onNoOtherAsk)
                    onNoOtherAsk();
                return undefined;
            }, function (e) {
                if (syncVersion != mySyncVersion)
                    return;
                syncVersion = undefined;
                var status = e.status;
                var errorMessage = e.errorMessage;
                if (!status)
                    Object.keys(e).forEach(function (k) {
                        var f = e[k];
                        if (!f)
                            return;
                        if (f.status)
                            status = f.status;
                        if (f.errorMessage)
                            errorMessage = f.errorMessage;
                        if (typeof f == "object")
                            Object.keys(f).forEach(function (l) {
                                var g = f[l];
                                if (!g)
                                    return;
                                if (g.status)
                                    status = g.status;
                                if (g.errorMessage)
                                    errorMessage = g.errorMessage;
                            });
                    });
                var info = "";
                if (status || errorMessage)
                    info = " (code " + status + (errorMessage ? (": " + errorMessage) : "") + ")";
                TDev.Util.log('nosync: ' + info);
                if (TDev.Util.navigatingAway) {
                    TDev.HTML.showProgressNotification(undefined);
                    return undefined;
                }
                else if (status == 400) {
                    var message = TDev.lf("Cloud precondition violated") + info;
                    TDev.HTML.showProgressNotification(message);
                    return message;
                }
                else if (status == 503) {
                    var message = TDev.lf("Did you post a lot recently? You must wait for one hour before you can post more.") + info;
                    TDev.HTML.showProgressNotification(message);
                    return message;
                }
                else if (status == 403) {
                    var message = status == 403 ? TDev.Cloud.getAccessToken() ? onNotLoggedIn ? TDev.lf("cannot sync - your access token has expired and will renew automatically") + info : TDev.lf("cannot sync - your access token has expired") + info : TDev.lf("cannot sync - you are not signed in") + info : TDev.lf("cannot sync") + info;
                    TDev.HTML.showProgressNotification(message);
                    if (status == 403)
                        TDev.Cloud.setAccessToken(undefined);
                    if (onNotLoggedIn)
                        onNotLoggedIn();
                    return message;
                }
                else if (!TDev.Cloud.isTouchDevelopOnline()) {
                    var message = TDev.lf("cannot sync - you are in offline mode");
                    TDev.HTML.showProgressNotification(v ? undefined : message);
                    return message;
                }
                else {
                    var message = TDev.lf("cannot sync - are you offline?") + info;
                    TDev.HTML.showProgressNotification(v ? undefined : message);
                    return message;
                }
            });
        }
        World.syncAsync = syncAsync;
        function saveAsync(guid, onNotLoggedIn, onBadTime) {
            if (onNotLoggedIn === void 0) { onNotLoggedIn = undefined; }
            if (onBadTime === void 0) { onBadTime = undefined; }
            if (!TDev.Cloud.getUserId()) {
                var r = TDev.HTML.showSaveNotification("sign in to backup your work", 3000);
                r.className += " not-logged-in";
                r.withClick(function () {
                    TDev.Cloud.authenticateAsync(TDev.lf("cloud backup")).done(function (ok) {
                    });
                });
                return TDev.Promise.as();
            }
            if (TDev.Cloud.isOffline()) {
                TDev.HTML.showSaveNotification("cannot back up to cloud - you appear to be offline", 3000);
                return TDev.Promise.as();
            }
            var mySyncVersion = new Object();
            syncVersion = mySyncVersion;
            var canceled = TDev.Promise.wrapError("canceled");
            log("starting save");
            return TDev.Promise.join({
                indexTable: getIndexTablePromise(),
                scriptsTable: getScriptsTablePromise(),
                header: getInstalledHeaderAsync(guid)
            }).then(function (data) {
                if (syncVersion != mySyncVersion)
                    return;
                return uploadInstalledAsync(data.indexTable, data.scriptsTable, data.header);
            }).then(function (result) {
                if (syncVersion != mySyncVersion)
                    return;
                syncVersion = undefined;
                TDev.HTML.showSaveNotification(result.numErrors ? TDev.lf("problems saving!") : TDev.lf("saved"));
                return result;
            }, function (e) {
                if (syncVersion != mySyncVersion)
                    return;
                syncVersion = undefined;
                var status = e.status;
                var errorMessage = e.errorMessage;
                var info = "";
                if (status || errorMessage)
                    info = " (code " + status + (errorMessage ? (": " + errorMessage) : "") + ")";
                if (status == 400)
                    throw new Error("Cloud precondition violated" + info);
                else if (status == 403 || (TDev.Cloud.isOnline() && /localhost/.test(document.URL))) {
                    TDev.HTML.showSaveNotification("could not save - you are not signed in (" + status + ")", 500);
                    if (status == 403)
                        TDev.Cloud.setAccessToken(undefined);
                    if (onNotLoggedIn)
                        onNotLoggedIn();
                }
                else
                    TDev.HTML.showSaveNotification("cannot back up to cloud - you appear to be offline");
            });
        }
        World.saveAsync = saveAsync;
        function handlePostingError(e, action) {
            if (e) {
                if (e.status == 502) {
                    TDev.Cloud.showModalOnlineInfo("could not " + action);
                    return;
                }
                else if (e.status == 503) {
                    TDev.ModalDialog.info("could not " + action, "Did you post a lot recently? Please try again later.");
                    return;
                }
                else if (e.status == 403) {
                    TDev.Cloud.accessTokenExpired();
                    TDev.ModalDialog.info("access denied", "Your access token might have expired. Please return to the main hub and then try again.");
                    return;
                }
                else if (e.status == 419) {
                    TDev.ModalDialog.info("access denied", "Your account is not authorized to perform this action.");
                    return;
                }
                else if (e.status == 400)
                    throw new Error("Cloud precondition violated (" + e.errorMessage + ")");
            }
            throw e;
        }
        World.handlePostingError = handlePostingError;
        function uninstall(header) {
            header.scriptVersion = { instanceId: TDev.Cloud.getWorldId(), version: 2147483647, time: 253402300799, baseSnapshot: header.scriptVersion.baseSnapshot };
            header.status = "deleted";
            return header;
        }
        function uninstallAsync(guid) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            log("starting uninstall of " + guid);
            return TDev.Promise.join({
                indexTable: getIndexTablePromise(),
                scriptsTable: getScriptsTablePromise(),
            }).then(function (data) {
                data.items = data.indexTable.getItemsAsync([guid]);
                return TDev.Promise.join(data);
            }).then(function (data) {
                var h = data.items[guid];
                if (!h)
                    return undefined;
                var header = uninstall(JSON.parse(h));
                return setInstalledAsync(data.indexTable, data.scriptsTable, header, undefined, undefined, null, null);
            });
        }
        World.uninstallAsync = uninstallAsync;
        function publishAsync(guid, hidden) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            log("starting publishing of " + guid);
            return TDev.Promise.join({
                indexTable: getIndexTablePromise()
            }).then(function (data) {
                data.items = data.indexTable.getItemsAsync([guid]);
                return TDev.Promise.join(data);
            }).then(function (data) {
                var h = data.items[guid];
                if (!h)
                    return undefined;
                var header = JSON.parse(h);
                if (header.status !== "unpublished")
                    return undefined;
                header.status = "tobepublished";
                header.publishAsHidden = hidden;
                var headerItem = {};
                headerItem[header.guid] = JSON.stringify(header);
                return data.indexTable.setItemsAsync(headerItem);
            });
        }
        World.publishAsync = publishAsync;
        function recentUseAsync(indexTable, guid, recentUse) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            return TDev.Promise.join({
                items: indexTable.getItemsAsync([guid])
            }).then(function (data) {
                var h = data.items[guid];
                if (!h)
                    return undefined;
                var header = JSON.parse(h);
                if (header.recentUse < recentUse)
                    header.recentUse = recentUse;
                var headerItem = {};
                headerItem[header.guid] = JSON.stringify(header);
                return indexTable.setItemsAsync(headerItem);
            });
        }
        World.recentUseAsync = recentUseAsync;
        function getCurrentTime() {
            return Math.floor(new Date().getTime() / 1000);
        }
        World.getCurrentTime = getCurrentTime;
        function installAsync(status, scriptId, userId, stub) {
            var meta;
            if (stub.editorName == "touchdevelop") {
                meta = World.getScriptMeta(stub.scriptText);
                TDev.Util.assert(meta.name == stub.scriptName);
                stub.editorName = "";
            }
            else {
                meta = {
                    localGuid: TDev.Util.guidGen(),
                    name: stub.scriptName,
                };
            }
            var h = {
                status: status,
                scriptId: scriptId,
                userId: userId,
                meta: meta,
                name: meta.name,
                scriptVersion: { instanceId: TDev.Cloud.getWorldId(), version: 0, time: getCurrentTime(), baseSnapshot: "" },
                guid: meta.localGuid,
                editor: stub.editorName,
            };
            TDev.Util.assert(!!h.guid);
            return TDev.Promise.join({
                indexTable: getIndexTablePromise(),
                scriptsTable: getScriptsTablePromise(),
            }).then(function (data) {
                return setInstalledAsync(data.indexTable, data.scriptsTable, h, stub.scriptText, null, null, null).then(function () { return h; });
            });
        }
        function installPublishedAsync(scriptId, userId) {
            if (!TDev.Util.check(!!scriptId))
                return TDev.Promise.as(undefined);
            return getInstalledAsync().then(function (items) {
                var guids = Object.keys(items);
                var matchingGuids = guids.filter(function (guid) {
                    var item = items[guid];
                    return item.status == "published" && item.scriptId == scriptId;
                });
                if (matchingGuids.length > 0)
                    return items[matchingGuids[0]];
                return TDev.ScriptCache.getScriptAsync(scriptId).then(function (text) {
                    if (!text) {
                        TDev.HTML.showErrorNotification("cannot get script /" + scriptId);
                        return new TDev.PromiseInv();
                    }
                    return installAsync("published", scriptId, userId, {
                        scriptText: text,
                        editorName: "touchdevelop",
                        scriptName: World.getScriptMeta(text).name,
                    });
                });
            });
        }
        World.installPublishedAsync = installPublishedAsync;
        function installUnpublishedAsync(baseScriptId, baseUserId, stub) {
            return installAsync("unpublished", baseScriptId, baseUserId, stub);
        }
        World.installUnpublishedAsync = installUnpublishedAsync;
        function getInstalledAsync() {
            return TDev.Promise.join({
                indexTable: getIndexTablePromise(),
                scriptsTable: getScriptsTablePromise(),
            }).then(function (data) {
                data.keys = data.indexTable.getKeysAsync();
                return TDev.Promise.join(data);
            }).then(function (data) {
                return data.indexTable.getItemsAsync(data.keys).then(function (items) { return TDev.Promise.thenEach(items, function (v) { return JSON.parse(v); }); });
            });
        }
        World.getInstalledAsync = getInstalledAsync;
        function getInstalledHeaderAsync(guid) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            return getIndexTablePromise().then(function (indexTable) { return indexTable.getValueAsync(guid); }).then(function (s) { return s ? JSON.parse(s) : undefined; });
        }
        World.getInstalledHeaderAsync = getInstalledHeaderAsync;
        function getInstalledScriptAsync(guid) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            return getScriptsTablePromise().then(function (scriptsTable) { return scriptsTable.getValueAsync(guid + "-script"); });
        }
        World.getInstalledScriptAsync = getInstalledScriptAsync;
        function getInstalledEditorStateAsync(guid) {
            if (!TDev.Util.check(!!guid))
                return TDev.Promise.as(undefined);
            return getScriptsTablePromise().then(function (scriptsTable) { return scriptsTable.getValueAsync(guid + "-editorState"); });
        }
        World.getInstalledEditorStateAsync = getInstalledEditorStateAsync;
        function getAnyScriptAsync(guid) {
            if (/-/.test(guid))
                return getInstalledScriptAsync(guid);
            else
                return TDev.ScriptCache.getScriptAsync(guid);
        }
        World.getAnyScriptAsync = getAnyScriptAsync;
        function getInstalledScriptsAsync(guids) {
            return getScriptsTablePromise().then(function (scriptsTable) { return scriptsTable.getItemsAsync(guids.map(function (g) { return g + "-script"; })).then(function (map) {
                var r = {};
                guids.forEach(function (g) {
                    r[g] = map[g + "-script"];
                });
                return r;
            }); });
        }
        World.getInstalledScriptsAsync = getInstalledScriptsAsync;
        function setInstalledScriptAsync(header, script, editorState, scriptState) {
            if (scriptState === void 0) { scriptState = null; }
            if (!TDev.Util.check(!!header))
                return TDev.Promise.as(undefined);
            log("setting " + header.guid);
            return TDev.Promise.join({
                indexTable: getIndexTablePromise(),
                scriptsTable: getScriptsTablePromise(),
            }).then(function (data) {
                return setInstalledAsync(data.indexTable, data.scriptsTable, header, script, editorState, scriptState, null);
            });
        }
        World.setInstalledScriptAsync = setInstalledScriptAsync;
        function initUpdateCache() {
            if (!updateCache) {
                var s = localStorage["updateCacheForInstalled"];
                updateCache = s ? JSON.parse(s) : {};
            }
        }
        function rememberUpdate(id, update) {
            addUpdates[id] = update;
        }
        World.rememberUpdate = rememberUpdate;
        function updateFor(h) {
            initUpdateCache();
            if (h && h.status == "published")
                return updateCache[h.scriptId] || addUpdates[h.scriptId] || null;
            return null;
        }
        World.updateFor = updateFor;
        function updateAsync(guid) {
            var id = "";
            return getInstalledHeaderAsync(guid).then(function (h) {
                id = updateFor(h);
                if (!id)
                    return TDev.Promise.as();
                return TDev.ScriptCache.getScriptAsync(id);
            }).then(function (text) {
                if (!text)
                    return TDev.Promise.as();
                return getInstalledHeaderAsync(guid).then(function (h) {
                    if (h.status != "published")
                        return TDev.Promise.as();
                    h.status = "published";
                    h.scriptId = id;
                    h.meta = null;
                    return updateInstalledScriptAsync(h, text, null, true);
                });
            });
        }
        World.updateAsync = updateAsync;
        function updateInstalledScriptAsync(hd, script, state, background) {
            if (background === void 0) { background = false; }
            if (!background) {
                hd.status = "unpublished";
                hd.recentUse = getCurrentTime();
            }
            hd.scriptVersion.instanceId = TDev.Cloud.getWorldId();
            hd.scriptVersion.time = getCurrentTime();
            hd.scriptVersion.version++;
            hd.meta = null;
            return World.setInstalledScriptAsync(hd, script, state, "");
        }
        World.updateInstalledScriptAsync = updateInstalledScriptAsync;
        World.switchToChannel = function (ch) {
            if (ch == "beta")
                TDev.Util.navigateInWindow(TDev.Cloud.getServiceUrl() + "/app/beta?nocache=" + TDev.Util.guidGen());
            else
                TDev.Util.navigateInWindow(TDev.Cloud.getServiceUrl() + "/app/");
        };
    })(World = TDev.World || (TDev.World = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    TDev.onWallClose = null;
    var RuntimeHostBase = (function () {
        function RuntimeHostBase() {
            this.wallContainer = TDev.div('');
            this.backBtnDiv = TDev.div(null);
            this.scriptTitleDiv = TDev.div("scriptTitle");
            this.titleDiv = TDev.div("title");
            this.subtitleDiv = TDev.div("subtitle");
            this.titleContainer = TDev.div("wallTitleDiv");
            this.cloudSymbol = TDev.div("wallCloudSymbol");
            this.cloudStatus = TDev.div("wallCloudStatus");
            this.bgPictureContainer = TDev.div("wallBgPictureHorizontal");
            this.fullScreenContainer = TDev.div("wallFullScreenContainer");
            this.adContainer = TDev.div('wallAdContainer');
            this.wallWidth = 1000;
            this.wallHeight = 1000;
            this.wallOrientation = 0;
            this.wallVisible = false;
            this.copyrightHeight = 26;
            this.showCopyright = !TDev.Browser.isWP8app;
            this.keyState = null;
            this.localProxyAsync = undefined;
            this.keyboard = undefined;
            this.cssSetup = false;
            this.cs_hasCloudState = false;
            this.cs_status = "";
            this.cs_type = "";
            this.cs_color = "#000000";
        }
        RuntimeHostBase.prototype.getWall = function () {
            return TDev.elt("theWall");
        };
        RuntimeHostBase.prototype.isHeadless = function () {
            return TDev.Browser.isHeadless || this.currentRt.headlessPluginMode;
        };
        RuntimeHostBase.prototype.fullWallHeight = function () {
            this.computeCopyrightHeight();
            return TDev.SizeMgr.windowHeight - (this.showCopyright ? this.copyrightHeight : 0);
        };
        RuntimeHostBase.prototype.computeCopyrightHeight = function () {
            this.copyrightHeight = Math.round(TDev.SizeMgr.topFontSize * 0.7 * 1.66);
        };
        RuntimeHostBase.prototype.userWallHeight = function () {
            if (!this.currentRt.getCurrentPage().chromeVisible)
                return this.fullWallHeight();
            this.computeCopyrightHeight();
            return TDev.SizeMgr.windowHeight - 4 * TDev.SizeMgr.topFontSize - (this.showCopyright ? this.copyrightHeight : 0);
        };
        RuntimeHostBase.prototype.fullWallWidth = function () {
            return TDev.SizeMgr.wallWindowWidth;
        };
        RuntimeHostBase.prototype.init = function (rt) {
            this.currentRt = rt;
        };
        RuntimeHostBase.prototype.liveMode = function () {
            return false;
        };
        RuntimeHostBase.prototype.dontWaitForEvents = function () {
            return false;
        };
        RuntimeHostBase.prototype.astOfAsync = function (id) {
            return TDev.Promise.as(undefined);
        };
        RuntimeHostBase.prototype.deploymentSettingsAsync = function (id) {
            return TDev.Promise.as(undefined);
        };
        RuntimeHostBase.prototype.pickScriptAsync = function (mode, message) {
            return TDev.Promise.as(undefined);
        };
        RuntimeHostBase.prototype.saveAstAsync = function (id, ast) {
            return TDev.Promise.as(undefined);
        };
        RuntimeHostBase.prototype.packageScriptAsync = function (id, options) {
            return TDev.Promise.as(undefined);
        };
        RuntimeHostBase.prototype.showBackButton = function () {
            if (TDev.Browser.notifyBackToHost)
                return this.currentRt.getCurrentPage().backButtonVisible;
            if (this.currentRt.getPageCount() == 1 && (TDev.Browser.isCompiledApp || TDev.SizeMgr.splitScreen))
                return false;
            if (!this.currentRt.isStopped())
                return this.currentRt.getCurrentPage().backButtonVisible;
            return true;
        };
        RuntimeHostBase.prototype.applyPageAttributes = function (wp) {
            this.titleDiv.setChildren(wp.title);
            this.subtitleDiv.setChildren(wp.subtitle);
            if (this.showBackButton())
                this.titleContainer.className = 'wallTitleDiv';
            else
                this.titleContainer.className = 'wallTitleDiv wallTitleDivFirst';
            var wall = TDev.elt("wallOverlay");
            wall.style.background = wp.bgColor;
            wall.style.color = wp.fgColor;
            this.updateCloudStateColor(wp.fgColor);
            var bgPic = this.bgPictureContainer;
            if (wp.bgVideo) {
                wp.bgVideo.style.width = '100%';
                wp.bgVideo.style.height = '100%';
                wp.bgVideo.style.overflow = 'hidden';
                wp.bgVideo.controls = false;
                bgPic.className = "wallBgPictureHorizontal";
                bgPic.setChildren(wp.bgVideo);
                wp.bgVideo.play();
            }
            else if (wp.bgPicture && wp.bgPictureWidth > 0 && wp.bgPictureHeight > 0) {
                var ww = wp.bgPictureWidth;
                var hh = wp.bgPictureHeight;
                var pic = wp.bgPicture;
                bgPic.setChildren(pic);
                var r = hh / ww;
                var sr = window.innerHeight / window.innerWidth;
                if (ww / hh < TDev.SizeMgr.wallWindowWidth / TDev.SizeMgr.windowHeight) {
                    pic.style.width = '100%';
                    var h = (100 * r / sr);
                    pic.style.height = h + '%';
                    bgPic.style.left = "0";
                    bgPic.style.top = (100 - h) / 2 + "%";
                    bgPic.className = "wallBgPictureHorizontal";
                }
                else {
                    var w = 100 / r * sr;
                    pic.style.width = w + '%';
                    pic.style.height = '100%';
                    bgPic.style.left = (100 - w) / 2 + "%";
                    bgPic.style.top = "0";
                    bgPic.className = "wallBgPictureVertical";
                }
            }
            else if (wp.bgPictureUrl) {
                bgPic.style.backgroundImage = TDev.HTML.cssImage(wp.bgPictureUrl);
                bgPic.style.backgroundSize = "cover";
                bgPic.style.width = '100%';
                bgPic.style.height = '100%';
                bgPic.className = 'wallBgPictureVertical';
            }
            else {
                bgPic.className = "";
                bgPic.style.width = '';
                bgPic.style.height = '';
                bgPic.style.backgroundImage = '';
                bgPic.style.backgroundSize = '';
                bgPic.setChildren([]);
            }
            var walkHtml = function (e) {
                if (!e)
                    return;
                if (e.getAttribute && e.getAttribute("fill")) {
                    e.setAttribute("fill", wp.fgColor);
                }
                if (e.className == "topMenu-button-frame")
                    e.style.borderColor = wp.fgColor;
                else if (e.className == "topMenu-button-desc" || e.className == "appBarSymbol")
                    e.style.color = wp.fgColor;
                TDev.Util.childNodes(e).forEach(walkHtml);
            };
            walkHtml(TDev.elt("wallBtns"));
            walkHtml(TDev.elt("wallFullScreenBtns"));
            walkHtml(TDev.elt("wallBottomBtns"));
        };
        RuntimeHostBase.prototype.setTransform3d = function (trans, origin, perspective) {
            var ch = this.fullScreenContainer.firstChild;
            if (ch)
                TDev.Util.setTransform(ch, trans, origin, perspective);
        };
        RuntimeHostBase.prototype.setFullScreenElement = function (element) {
            this.fullScreenContainer.setChildren(element);
            if (element) {
                var wall = TDev.elt("wallOverlay");
                this.fullScreenContainer.style.position = "relative";
                this.fullScreenContainer.style.display = "block";
            }
            else {
                this.fullScreenContainer.style.display = "none";
                this.fullScreenContainer.innerHTML = "";
            }
            this.updateButtonsVisibility();
        };
        RuntimeHostBase.prototype.isFullScreen = function () {
            return this.fullScreenContainer.style.display != "none" && !!this.fullScreenContainer.firstChild;
        };
        RuntimeHostBase.prototype.tweakMsg = function () {
            return TDev.div(null);
        };
        RuntimeHostBase.prototype.copyrightElement = function () {
            var _this = this;
            if (TDev.Browser.isCompiledApp && !TDev.Browser.webRunner)
                return TDev.div(null);
            var copyrights = TDev.div("copyright-text copyright-info");
            var logo = TDev.div("copyright-text copyright-logo", TDev.SVG.getHorizLogo());
            var theNote = TDev.div("copyright-note", logo, copyrights);
            var aw = window;
            var userName = TDev.Util.htmlEscape(aw.userName);
            var userId = TDev.Util.htmlEscape(aw.userId);
            var appName = TDev.Util.htmlEscape(aw.webAppName);
            var betaFriendlyId = aw.betaFriendlyId;
            var shareLink = function () { return TDev.Browser.webRunner ? window.location.toString().replace(/#.*/, "") : _this.currentRt && _this.currentRt.currentScriptId ? TDev.Cloud.getServiceUrl() + "/" + _this.currentRt.currentScriptId : ""; };
            var author = TDev.Browser.inEditor ? "" : " by <b>" + userName + "</b>";
            var betaNote = betaFriendlyId ? ("<b>" + betaFriendlyId + "</b> ") : "";
            betaNote += "<b>" + appName + "</b>" + author;
            TDev.Browser.setInnerHTML(copyrights, "¬©&nbsp;&nbsp;" + "<span class='beta-underline'>privacy and cookies</span>&nbsp;&nbsp;" + "<span class='beta-underline'>legal</span>");
            var link = function (text, lnk) { return TDev.HTML.mkButton(text, function () {
                window.open(/:\/\//.test(lnk) ? lnk : TDev.Cloud.getServiceUrl() + lnk);
            }); };
            var popup = function () {
                var m = new TDev.ModalDialog();
                m.fullWhite();
                m.add(TDev.div("wall-dialog-header", TDev.Util.htmlUnescape(appName)));
                m.addHTML("This web app was created" + author + " using TouchDevelop.");
                m.addHTML("The TouchDevelop platform - Copyright ¬© 2014 Microsoft Corporation. All rights reserved.");
                m.addHTML("<b>DISCLAIMER:</b> This web app is not endorsed by Microsoft.");
                if (!TDev.Browser.inEditor)
                    m.add(TDev.div("wall-dialog-buttons", link("more by " + userName, "/" + userId), link("try touchdevelop", "")));
                m.add(TDev.div("wall-dialog-buttons", link("legal", "/legal"), link("privacy and cookies", "/privacy")));
                m.show();
            };
            logo.withClick(popup);
            copyrights.withClick(popup);
            return theNote;
        };
        RuntimeHostBase.prototype.askSourceAccessAsync = function (source, description, secondchance, critical) {
            if (!TDev.RuntimeSettings.askSourceAccess)
                return TDev.Promise.as(true);
            var rt = this.currentRt;
            return rt.permissionsAsync().then(function (d) {
                var v = d[source];
                if (v === false && secondchance)
                    v = undefined;
                if (v != undefined) {
                    if (!v)
                        TDev.HTML.showProgressNotification("denied access to " + description);
                    return TDev.Promise.as(!!v);
                }
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    var m = new TDev.ModalDialog();
                    var allow = false;
                    m.onDismiss = function () {
                        d[source] = allow;
                        rt.savePermissionsAsync(d).done(function () { return onSuccess(allow); });
                    };
                    var buttons;
                    m.add([
                        TDev.div("wall-dialog-header", TDev.lf("allow access to {0}?", source)),
                        TDev.div("wall-dialog-body", TDev.lf("This script wants to access {0}", description)),
                        buttons = TDev.div("wall-dialog-buttons", TDev.HTML.mkButton(TDev.lf("deny"), function () {
                            allow = false;
                            m.dismiss();
                        }), TDev.HTML.mkButton(TDev.lf("allow"), function () {
                            allow = true;
                            m.dismiss();
                        }))
                    ]);
                    if (critical) {
                        m.critical();
                        buttons.style.display = "none";
                        TDev.Util.setTimeout(5000, function () {
                            buttons.style.display = "block";
                        });
                    }
                    m.show();
                });
            });
        };
        RuntimeHostBase.prototype.updateButtonsVisibility = function () {
            if (this.isHeadless())
                return;
            var wp = this.currentRt.getCurrentPage();
            var element = this.fullScreenContainer.firstChild;
            var isStopped = this.currentRt.isStopped();
            this.titleContainer.style.display = (!wp.chromeVisible || element) && !isStopped ? "none" : "block";
            this.backBtnDiv.style.display = this.showBackButton() ? "block" : "none";
            if (wp.chromeVisible)
                this.wallContainer.classList.remove('no-bar');
            else
                this.wallContainer.classList.add('no-bar');
            this.wallContainer.style.display = element ? "none" : "block";
            this.fullScreenBtnRow.style.display = (TDev.Browser.screenshots || element) ? "block" : "none";
            this.bottomBtnsDiv.style.display = (element || !this.bottomBtnsDiv.hasChildNodes()) ? "none" : "block";
            for (var i = 0; i < this.bottomBtnsDiv.children.length; ++i)
                this.bottomBtnsDiv.children[i].setFlag('disabled', isStopped);
        };
        RuntimeHostBase.prototype.applyWallStyle = function () {
            var w = this.getWall();
            w.className = "wallWithColumns";
            var h = TDev.SizeMgr.windowHeight;
            TDev.Util.setTransform(w, "none");
            TDev.Util.setupHDragToScroll(TDev.elt("wallContainer"));
            TDev.Util.resetDragToScroll(w);
            this.wallOrientation = 0;
            this.wallWidth = 18.5 * TDev.SizeMgr.topFontSize * 0.8;
            this.wallHeight = this.userWallHeight();
        };
        RuntimeHostBase.prototype.publishSizeUpdate = function () {
            if (this.currentRt) {
                var p = this.currentRt.getCurrentPage();
                if (p)
                    this.applyPageAttributes(p);
            }
            TDev.WallPage.applySizeUpdate(TDev.elt("wallOverlay"));
        };
        RuntimeHostBase.prototype.additionalButtons = function () {
            return [];
        };
        RuntimeHostBase.prototype.additionalFullScreenButtons = function () {
            return [];
        };
        RuntimeHostBase.prototype.notifyRunState = function () {
            this.updateButtonsVisibility();
        };
        RuntimeHostBase.prototype.notifyBreakpointHit = function (bp) {
        };
        RuntimeHostBase.prototype.notifyBreakpointContinue = function () {
        };
        RuntimeHostBase.prototype.notifyTutorial = function (cmd) {
        };
        RuntimeHostBase.prototype.initApiKeysAsync = function () {
            return TDev.Promise.as();
        };
        RuntimeHostBase.prototype.agreeTermsOfUseAsync = function () {
            return TDev.Promise.as();
        };
        RuntimeHostBase.prototype.keyDown = function (e) {
            return this.keyboard.keyDown(e);
        };
        RuntimeHostBase.prototype.keyUp = function (e) {
            return this.keyboard.keyUp(e);
        };
        RuntimeHostBase.prototype.clearCss = function () {
            this.cssSetup = false;
            TDev.Util.childNodes(document.head).forEach(function (ch) {
                if (ch.getAttribute && ch.getAttribute("data-td-css"))
                    document.head.removeChild(ch);
            });
        };
        RuntimeHostBase.prototype.importCss = function (css) {
            this.cssSetup = true;
            if (css) {
                var fileref = document.createElement("style");
                fileref.appendChild(document.createTextNode(css));
                fileref.setAttribute("data-td-css", "yes");
                document.head.appendChild(fileref);
            }
        };
        RuntimeHostBase.prototype.showWall = function () {
            var _this = this;
            TDev.Ticker.dbg("showWall");
            var back = TDev.HTML.mkRoundButton("svg:back,black", TDev.lf("back"), 262 /* wallBack */, function () { return _this.backBtnHandler(); });
            this.keyboard = new TDev.RT.RuntimeKeyboard(this.currentRt);
            this.clearCss();
            if (!TDev.SizeMgr.splitScreen) {
                var keyMgr = TDev.KeyboardMgr.instance;
                this.wallVisible = true;
                if (this.keyState == null)
                    this.keyState = keyMgr.saveState();
                keyMgr.btnShortcut(back, "Esc");
                keyMgr.register("*keydown*", function (e) { return _this.keyDown(e); });
                keyMgr.register("*keyup*", function (e) { return _this.keyUp(e); });
            }
            this.backBtnDiv = TDev.div("wallBack", back);
            this.scriptTitleDiv.setChildren([this.currentRt.compiled.scriptTitle]);
            this.cloudContainer = TDev.div("inlineBlock", this.cloudSymbol, this.cloudStatus);
            this.cloudContainer.withClick(function () {
                if (_this.cs_hasCloudState)
                    TDev.RT.CloudData.sessionInfoAsync(_this.currentRt);
            });
            this.wallContainer = TDev.divId("wallContainer", "pane", TDev.divId("theWall", null), TDev.divId("theWallFloat", null));
            var wall = TDev.elt("wallOverlay");
            this.titleContainer.setChildren([this.scriptTitleDiv, this.titleDiv, this.subtitleDiv]);
            this.topBtnRow = TDev.divId("wallBtns", "wallBtnRow", this.backBtnDiv, this.titleContainer, this.cloudContainer, this.additionalButtons());
            this.fullScreenBtnRow = TDev.divId("wallFullScreenBtns", "", this.additionalFullScreenButtons());
            this.bottomBtnsDiv = TDev.divId("wallBottomBtns", "bottomButtons");
            this.setFullScreenElement(null);
            this.bgPictureContainer.setChildren([]);
            wall.setChildren([
                this.bgPictureContainer,
                this.wallContainer,
                this.fullScreenContainer,
                this.topBtnRow,
                this.fullScreenBtnRow,
                this.bottomBtnsDiv
            ]);
            if (this.currentRt.compiled.showAd) {
                wall.appendChildren([this.adContainer]);
                TDev.RT.AdManager.initialize(this.adContainer);
            }
            if (this.showCopyright) {
                this.computeCopyrightHeight();
                this.wallContainer.style.bottom = this.copyrightHeight + "px";
                var copyright = this.copyrightElement();
                if (copyright) {
                    wall.appendChild(copyright);
                }
            }
            this.applyWallStyle();
            wall.style.display = "block";
            wall.style.opacity = "1";
            TDev.Util.showLeftPanel(wall);
            this.wallShown();
        };
        RuntimeHostBase.prototype.getFullScreenCanvas = function () {
            if (this.fullScreenContainer.style.display !== "none") {
                var el = this.fullScreenContainer.firstChild;
                while (el != null && !el.toDataURL)
                    el = el.firstChild;
                var fs = el;
                if (fs != null)
                    return fs;
            }
            return undefined;
        };
        RuntimeHostBase.prototype.toScreenshotCanvas = function () {
            var fs = this.getFullScreenCanvas();
            if (fs != null) {
                try {
                    var page = this.currentRt.getCurrentPage();
                    var bgColor = page.bgColor || 'white';
                    var bgPicture = page.bgPicture;
                    var canvas = document.createElement("canvas");
                    var w = fs.width;
                    var h = fs.height;
                    var f = 1;
                    if (h > w) {
                        if (h > 800)
                            f = 800 / h;
                    }
                    else {
                        if (w > 800)
                            f = 800 / w;
                    }
                    canvas.width = Math.floor(w * f);
                    canvas.height = Math.floor(h * f);
                    var ctx = canvas.getContext("2d");
                    ctx.save();
                    ctx.fillStyle = bgColor;
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    if (bgPicture) {
                        var ww = page.bgPictureWidth;
                        var hh = page.bgPictureHeight;
                        var r = hh / ww;
                        var sr = canvas.height / canvas.width;
                        var left, top;
                        if (r > sr) {
                            hh = ww * sr;
                            left = 0;
                            top = (page.bgPictureHeight - hh) / 2;
                        }
                        else {
                            ww = hh / sr;
                            top = 0;
                            left = (page.bgPictureWidth - ww) / 2;
                        }
                        ctx.drawImage(bgPicture, left, top, ww, hh, 0, 0, canvas.width, canvas.height);
                    }
                    ctx.drawImage(fs, 0, 0, canvas.width, canvas.height);
                    ctx.restore();
                    return canvas;
                }
                catch (e) {
                }
            }
            return undefined;
        };
        RuntimeHostBase.prototype.otherwiseBack = function () {
        };
        RuntimeHostBase.prototype.backBtnHandler = function () {
            TDev.Ticker.dbg("history.back from RuntimeHostBase.backBtnHandler");
            if (TDev.Browser.notifyBackToHost && this.currentRt.getPageCount() == 1)
                TDev.Util.externalNotify("exit");
            else
                TDev.Util.goBack();
        };
        RuntimeHostBase.prototype.notifyPageButtonUpdate = function () {
            this.bottomBtnsDiv.removeAllChildren();
            var page = this.currentRt.getCurrentPage();
            for (var i = 0; i < page.buttons.length; i++) {
                var button = page.buttons[i];
                this.bottomBtnsDiv.appendChild(button.getElement());
            }
            if (page.buttons.length > 0) {
                this.bottomBtnsDiv.style.display = 'block';
                this.getWall().firstChild.style.paddingBottom = '6em';
            }
            else {
                this.bottomBtnsDiv.style.display = 'none';
                this.getWall().firstChild.style.paddingBottom = null;
            }
            this.notifyRunState();
        };
        RuntimeHostBase.prototype.notifyPagePush = function () {
            var _this = this;
            this.notifyPageButtonUpdate();
            if (this.currentRt.getPageCount() > 1) {
                var p = this.currentRt.getCurrentPage();
                if (!TDev.SizeMgr.splitScreen)
                    TDev.Screen.pushModalHash("page" + p.id, function () {
                        _this.currentRt.popPagesIncluding(p);
                    });
            }
        };
        RuntimeHostBase.prototype.notifyPagePop = function (p) {
            this.notifyPageButtonUpdate();
            if (!TDev.SizeMgr.splitScreen)
                TDev.Screen.popModalHash("page" + p.id);
        };
        RuntimeHostBase.prototype.notifyStopAsync = function () {
            TDev.Ticker.dbg("notifyStop");
            var p = this.currentRt.saveDataAsync();
            this.notifyRunState();
            if (!TDev.SizeMgr.splitScreen && this.backBtnDiv && this.backBtnDiv.firstChild)
                TDev.KeyboardMgr.instance.btnShortcut(this.backBtnDiv.firstChild, "Esc");
            return p;
        };
        RuntimeHostBase.prototype.updateCloudState = function (hasCloudState, type, status) {
            if (hasCloudState !== this.cs_hasCloudState || type !== this.cs_type || status !== this.cs_status) {
                if (!hasCloudState)
                    this.cloudSymbol.setChildren([]);
                else {
                    var svg = TDev.SVG.getCloudSymbol(this.cs_color, type, status === "connected", 1.5);
                    this.cloudSymbol.setChildren(svg);
                }
                this.cs_hasCloudState = hasCloudState;
                this.cs_type = type;
            }
            if (status !== this.cs_status) {
                this.cloudStatus.setChildren(status);
                this.cs_status = status;
            }
        };
        RuntimeHostBase.prototype.updateCloudStateColor = function (color) {
            if (this.cs_color != color) {
                if (!this.cs_hasCloudState)
                    this.cloudSymbol.setChildren([]);
                else {
                    var svg = TDev.SVG.getCloudSymbol(color, this.cs_type, this.cs_status === "connected", 1.5);
                    this.cloudSymbol.setChildren(svg);
                }
                this.cs_color = color;
            }
        };
        RuntimeHostBase.prototype.attachProfilingInfo = function (profile) {
        };
        RuntimeHostBase.prototype.attachCoverageInfo = function (profile, showCoverage) {
        };
        RuntimeHostBase.prototype.attachDebuggingInfo = function (runMap, stackTrace, errorMessage) {
        };
        RuntimeHostBase.prototype.canEditCode = function () {
            return false;
        };
        RuntimeHostBase.prototype.fixErrorIn = function (stableName, error) {
        };
        RuntimeHostBase.prototype.wallHidden = function () {
        };
        RuntimeHostBase.prototype.wallShown = function () {
        };
        RuntimeHostBase.prototype.hideWallAsync = function () {
            var _this = this;
            TDev.Ticker.dbg("hideWallAsync");
            if (this.keyState)
                TDev.KeyboardMgr.instance.loadState(this.keyState);
            if (!this.wallVisible) {
                return TDev.Promise.as();
            }
            this.clearCss();
            var wall = TDev.elt("wallOverlay");
            this.keyState = null;
            this.wallHidden();
            return TDev.Util.animAsync("fadeOut", 200, wall).then(function () {
                _this.wallVisible = false;
                wall.style.display = "none";
            });
        };
        RuntimeHostBase.prototype.goBack = function () {
            TDev.Ticker.dbg("history.back from RuntimeHostBase.goBack");
            TDev.Util.goBack();
        };
        RuntimeHostBase.prototype.notifyHideWall = function () {
            var _this = this;
            TDev.Ticker.dbg("notifyHideWall");
            this.hideWallAsync().done(function () {
                var f = TDev.onWallClose;
                if (!!f) {
                    TDev.onWallClose = null;
                    f();
                }
                _this.goBack();
            });
        };
        RuntimeHostBase.prototype.exceptionActions = function (e) {
            return null;
        };
        RuntimeHostBase.prototype.attachScriptStackTrace = function (bug) {
        };
        RuntimeHostBase.prototype.debugModeEnabled = function () {
            return false;
        };
        RuntimeHostBase.prototype.exceptionHandler = function (e) {
            var _this = this;
            TDev.Ticker.dbg("wallExceptionHandler");
            e.includeSource = true;
            var bug = TDev.Ticker.mkBugReport(e, "runtime error");
            var msg = bug.exceptionMessage;
            var runMap = this.currentRt.runMap;
            var stack = TDev.PackedStackTrace.buildFrom(this.currentRt.getStackTrace());
            TDev.RT.App.logException(e);
            var actions = this.exceptionActions(e) || {};
            var debugAction = actions.debug || TDev.Util.doNothing;
            var stackTraceAction = actions.stack || TDev.Util.doNothing;
            var cancelAction = TDev.Util.doNothing;
            var error = ((e.isUserError && (e.message || e.name)) || "") + "";
            function frown(d) {
                d.addFirst(TDev.div("floatingFrown", ":("));
            }
            if (this.canEditCode() && !!e.syntaxErrorDeclName) {
                var dial = TDev.ModalDialog.buttons(TDev.lf("errors in the code?"), TDev.lf("the script appears to have some errors. fix each error marked with a red :( symbol and try to run again"), "", "", TDev.HTML.mkButton(TDev.lf("edit code"), function () {
                    TDev.tick(424 /* crashDialogEdit */);
                    dial.dismiss();
                    _this.fixErrorIn(e.syntaxErrorDeclName, error);
                }));
                dial.fullYellow();
                frown(dial);
            }
            else if (!!e.isUserError) {
                var dial = TDev.ModalDialog.buttons(TDev.lf("the script crashed"), this.canEditCode() ? TDev.lf("do you want do debug it?") : null, TDev.lf("error message"), error, this.canEditCode() ? TDev.HTML.mkButton(TDev.lf("debug"), function () {
                    TDev.tick(425 /* crashDialogDebug */);
                    dial.dismiss();
                    _this.attachDebuggingInfo(runMap, stack, msg);
                    debugAction();
                }) : null, TDev.HTML.mkButton(TDev.lf("cancel"), function () {
                    dial.dismiss();
                }));
                dial.fullYellow();
                frown(dial);
            }
            else {
                this.attachScriptStackTrace(bug);
                TDev.Util.sendErrorReport(bug);
                var jsinfo = TDev.dbg ? TDev.div("inlineBlock", TDev.HTML.mkButton(TDev.lf("js info (dbg)"), function () {
                    jsinfo.className = "";
                    var addInfo = bug.stackTrace ? bug.stackTrace : "(none available)";
                    TDev.Browser.setInnerHTML(jsinfo, TDev.Util.formatText(addInfo));
                })) : undefined;
                var dial = TDev.ModalDialog.buttons("TouchDevelop crashed", this.canEditCode() ? "do you want do debug the script?" : null, null, null, this.canEditCode() ? TDev.HTML.mkButton(TDev.lf("debug"), function () {
                    dial.dismiss();
                    _this.attachDebuggingInfo(runMap, stack, msg);
                    debugAction();
                }) : null, jsinfo, TDev.HTML.mkButton(TDev.lf("cancel"), function () {
                    dial.dismiss();
                }));
                dial.fullYellow();
                frown(dial);
            }
        };
        return RuntimeHostBase;
    })();
    TDev.RuntimeHostBase = RuntimeHostBase;
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            var URI = "ws://localhost:8042";
            (function (Status) {
                Status[Status["OK"] = 0] = "OK";
                Status[Status["ERR_PERMISSION_DENIED"] = -1] = "ERR_PERMISSION_DENIED";
                Status[Status["ERR_WEBSOCK_NOT_AVAILABLE"] = -2] = "ERR_WEBSOCK_NOT_AVAILABLE";
                Status[Status["ERR_WEBSOCK_ACCESS_DENIED"] = -3] = "ERR_WEBSOCK_ACCESS_DENIED";
                Status[Status["ERR_WEBSOCK_NOT_CONNECTED"] = -4] = "ERR_WEBSOCK_NOT_CONNECTED";
                Status[Status["ERR_AUTHENTICATION_REQUIRED"] = -5] = "ERR_AUTHENTICATION_REQUIRED";
                Status[Status["ERR_CANCELLED"] = -6] = "ERR_CANCELLED";
                Status[Status["ERR_MALFORMED_REQUEST"] = -7] = "ERR_MALFORMED_REQUEST";
                Status[Status["ERR_NOT_AVAILABLE"] = -8] = "ERR_NOT_AVAILABLE";
                Status[Status["ERR_NOT_AVAILABLE_WP8"] = -43] = "ERR_NOT_AVAILABLE_WP8";
                Status[Status["ERR_INTERNAL_ERROR"] = -500] = "ERR_INTERNAL_ERROR";
            })(Wab.Status || (Wab.Status = {}));
            var Status = Wab.Status;
            var Action;
            (function (Action) {
                Action.REQUEST_AUTHENTICATION = "REQUEST_AUTHENTICATION";
                Action.AUTHENTICATE = "AUTHENTICATE";
                Action.REQUEST_PERMISSIONS = "REQUEST_PERMISSIONS";
                Action.PICK_CONTACT = "PICK_CONTACT";
                Action.START_GYRO = "START_GYRO";
                Action.STOP_GYRO = "STOP_GYRO";
                Action.START_ACCELEROMETER = "START_ACCELEROMETER";
                Action.STOP_ACCELEROMETER = "STOP_ACCELEROMETER";
                Action.START_COMPASS = "START_COMPASS";
                Action.STOP_COMPASS = "STOP_COMPASS";
                Action.START_ORIENTATION = "START_ORIENTATION";
                Action.STOP_ORIENTATION = "STOP_ORIENTATION";
                Action.LOG = "LOG";
                Action.PROXY = "PROXY";
                Action.NOTIFICATION = "NOTIFICATION";
                Action.DB_GET = "DB_GET";
                Action.DB_SET = "DB_SET";
                Action.DB_KEYS = "DB_KEYS";
                Action.DB_DELETE = "DB_DELETE";
                Action.VIBRATE = "VIBRATE";
                Action.LIST_SONGS = "LIST_SONGS";
                Action.PLAYER_COMMAND = "PLAYER_COMMAND";
                Action.PLAYER_STATE = "PLAYER_STATE";
                Action.ACTIVE_SONG = "ACTIVE_SONG";
                Action.START_ACTIVE_SONG_CHANGED = "START_ACTIVE_SONG_CHANGED";
                Action.STOP_ACTIVE_SONG_CHANGED = "STOP_ACTIVE_SONG_CHANGED";
                Action.START_PLAYER_STATE_CHANGED = "START_PLAYER_STATE_CHANGED";
                Action.STOP_PLAYER_STATE_CHANGED = "STOP_PLAYER_STATE_CHANGED";
                Action.SAVE_TO_GALLERY = "SAVE_TO_GALLERY";
                Action.LIST_IMAGES = "LIST_IMAGES";
                Action.PICK_IMAGE = "PICK_IMAGE";
                Action.TAKE_PHOTO = "TAKE_PHOTO";
                Action.RECORD_MICROPHONE = "RECORD_MICROPHONE";
                Action.SHARE = "SHARE";
                Action.PLAY_SOUND = "PLAY_SOUND";
                Action.BROWSE = "BROWSE";
                Action.DICTATE = "DICTATE";
                Action.OAUTH_AUTHENTICATION = "OAUTH_AUTHENTICATION";
                Action.NETWORK_INFORMATION = "NETWORK_INFORMATION";
                Action.LOCK_ORIENTATION = "LOCK_ORIENTATION";
                Action.POWER_INFORMATION = "POWER_INFORMATION";
                Action.REVIEW_CURRENT_APP = "REVIEW_CURRENT_APP";
                Action.LIST_IMAGE_ALBUMS = "LIST_IMAGE_ALBUMS";
                Action.LIST_IMAGE_ALBUM = "LIST_IMAGE_ALBUM";
                Action.IMAGE = "IMAGE";
                Action.LIST_SONG_ALBUMS = "LIST_SONG_ALBUMS";
                Action.LIST_SONG_ALBUM = "LIST_SONG_ALBUM";
                Action.SONG_ALBUM = "SONG_ALBUM";
                Action.SONG_ALBUM_ART = "SONG_ALBUM_ART";
                Action.LIST_CONTACTS = "LIST_CONTACTS";
                Action.LIST_APPOINTMENTS = "LIST_APPOINTMENTS";
                Action.START_SEND_NFC_MESSAGE = "START_SEND_NFC_MESSAGE";
                Action.STOP_SEND_NFC_MESSAGE = "STOP_SEND_NFC_MESSAGE";
                Action.START_RECEIVE_NFC_MESSAGE = "START_RECEIVE_NFC_MESSAGE";
                Action.STOP_RECEIVE_NFC_MESSAGE = "STOP_RECEIVE_NFC_MESSAGE";
                Action.UPDATE_TILE = "UPDATE_TILE";
                Action.SPEAK_TEXT = "SPEAK_TEXT";
                Action.SPEAK_SSML = "SPEAK_SSML";
                Action.STATUS = "STATUS";
                Action.CURRENT_HASH = "CURRENT_HASH";
                Action.CHECK_FOR_REFRESH = "CHECK_FOR_REFRESH";
                Action.SWITCH_CHANNEL = "SWITCH_CHANNEL";
                Action.SEND_SMS = "SEND_SMS";
                Action.COPY_TO_CLIPBOARD = "COPY_TO_CLIPBOARD";
                Action.BLUETOOTH_DEVICES = "BLUETOOTH_DEVICES";
                Action.BLUETOOTH_CONNECT = "BLUETOOTH_CONNECT";
                Action.BLUETOOTH_READ = "BLUETOOTH_READ";
                Action.BLUETOOTH_WRITE = "BLUETOOTH_WRITE";
                Action.BLUETOOTH_DISCONNECT = "BLUETOOTH_DISCONNECT";
                Action.BLUETOOTHLE_DEVICES = "BLUETOOTHLE_DEVICES";
                Action.BLUETOOTHLE_READ = "BLUETOOTHLE_READ";
                Action.BLUETOOTHLE_WRITE = "BLUETOOTHLE_WRITE";
                Action.SCREENSHOT = "SCREENSHOT";
                Action.RADIO_COMMAND = "RADIO_COMMAND";
                Action.SHOW_AD = "SHOW_AD";
                Action.CURRENT_APP_INFO = "CURRENT_APP_INFO";
            })(Action = Wab.Action || (Wab.Action = {}));
            var Permission;
            (function (Permission) {
                Permission.READ_CONTACTS = "READ_CONTACTS";
                Permission.READ_CALENDAR = "READ_CALENDAR";
                Permission.GYRO = "GYRO";
                Permission.ACCELEROMETER = "ACCELEROMETER";
                Permission.AUDIO = "AUDIO";
                Permission.GALLERY = "GALLERY";
                Permission.CAMERA = "CAMERA";
                Permission.VIBRATE = "VIBRATE";
                Permission.RECORD_AUDIO = "RECORD_AUDIO";
                Permission.BLUETOOTH = "BLUETOOTH";
            })(Permission = Wab.Permission || (Wab.Permission = {}));
            function isLastResponse(r) {
                return !!r.lastForId || !!r.removeCallbackId;
            }
            Wab.isLastResponse = isLastResponse;
            var PendingResponse = (function () {
                function PendingResponse(action, onSuccess, onError) {
                    this.action = action;
                    this.onSuccess = onSuccess;
                    this.onError = onError;
                }
                return PendingResponse;
            })();
            var _nextId = 0;
            var _pendingResponses = {};
            var _webSocket = undefined;
            var isWP8app = false;
            var wp8AppVersion = -1;
            var supportsAttachments = false;
            var confirmedWP8app = false;
            function isActive() {
                return !!_webSocket || isWP8app;
            }
            Wab.isActive = isActive;
            function openWp8Async() {
                var ret = new TDev.PromiseInv();
                _webSocket = new WebSocket(URI);
                _webSocket.onopen = function () {
                    var r = ret;
                    ret = undefined;
                    TDev.Util.log("wp8ws: open");
                    if (r)
                        r.success(null);
                };
                _webSocket.onmessage = _onmessage;
                numAttachments = 0;
                _webSocket.onerror = function (e) {
                    TDev.Util.log("wp8ws: error");
                    var r = ret;
                    ret = undefined;
                    _webSocket = undefined;
                    _onerror(e);
                    if (r)
                        r.error(e);
                };
                _webSocket.onclose = function () {
                    TDev.Util.log("wp8ws: close");
                    _webSocket = undefined;
                };
                return ret;
            }
            var numAttachments = 0;
            var attachments = [];
            var finalAttachments = function () {
            };
            var orphanedReported = false;
            function handleMessage(r) {
                if (r == undefined)
                    return;
                var id = r.id;
                if (id == undefined)
                    return;
                var key = id + "";
                var pending = _pendingResponses[key];
                if (pending) {
                    if (!/START_|LIST_/.test(pending.action) || isLastResponse(r)) {
                        delete _pendingResponses[key];
                    }
                    if (pending.onSuccess)
                        TDev.Util.setTimeout(0, function () {
                            try {
                                pending.onSuccess(r);
                            }
                            catch (e) {
                                TDev.Util.reportError("wab-onmessage-success", e);
                            }
                        });
                }
                else if (r.status) {
                    if (!orphanedReported) {
                        orphanedReported = true;
                        statusError(r);
                    }
                }
            }
            function handleAttachments(r) {
                var scan = function (repl) {
                    Object.keys(r).forEach(function (k) {
                        if (!/^attach:/.test(k))
                            return;
                        var v = r[k];
                        if (typeof v == "number") {
                            if (repl)
                                v = attachments[v];
                            else
                                maxId = Math.max(maxId, v);
                        }
                        else if (Array.isArray(v)) {
                            v.forEach(function (z, i) {
                                if (typeof z == "number") {
                                    if (repl)
                                        v[i] = attachments[z];
                                    else
                                        maxId = Math.max(maxId, z);
                                }
                            });
                        }
                        if (repl) {
                            delete r[k];
                            k = k.slice(7);
                            r[k] = v;
                        }
                    });
                };
                var maxId = -1;
                scan(false);
                maxId++;
                if (maxId > 0) {
                    numAttachments = maxId;
                    attachments = [];
                    finalAttachments = function () {
                        scan(true);
                        attachments = [];
                        handleMessage(r);
                    };
                    return true;
                }
                return false;
            }
            function _onmessage(ev) {
                try {
                    if (numAttachments > 0) {
                        numAttachments--;
                        attachments.push(ev.data);
                        if (numAttachments == 0)
                            finalAttachments();
                        return;
                    }
                    var r;
                    try {
                        r = JSON.parse(ev.data);
                    }
                    catch (e) {
                        return;
                    }
                    if (supportsAttachments && handleAttachments(r))
                        return;
                    handleMessage(r);
                }
                catch (e) {
                    TDev.Util.reportError("wab-onmessage", e);
                }
            }
            function _onerror(ev) {
                var prs = _pendingResponses;
                _pendingResponses = {};
                Object.keys(prs).forEach(function (k) {
                    var h = prs[k].onError;
                    if (h)
                        h(ev);
                });
            }
            var sendingLock = new TDev.Lock();
            function moveToAttachments(request) {
                var oob = [];
                function isLong(v) {
                    return typeof v == "string" && v.length > 4000;
                }
                function attach(v) {
                    if (isLong(v)) {
                        var r = oob.length;
                        oob.push(v);
                        return r;
                    }
                    else {
                        return v;
                    }
                }
                Object.keys(request).forEach(function (k) {
                    var v = request[k];
                    if (isLong(v)) {
                        delete request[k];
                        request["attach:" + k] = attach(v);
                    }
                    else if (Array.isArray(v) && v.some(isLong)) {
                        delete request[k];
                        request["attach:" + k] = v.map(attach);
                    }
                });
                oob.unshift(JSON.stringify(request));
                return oob;
            }
            function _sendRequest(request, onSuccess, onError) {
                if (_webSocket === undefined) {
                    if (onSuccess)
                        onSuccess({ status: -4 /* ERR_WEBSOCK_NOT_CONNECTED */ });
                    return;
                }
                request.id = _nextId++;
                if (!(isWP8app && request.noResponse))
                    _pendingResponses[request.id + ""] = new PendingResponse(request.action, onSuccess, onError);
                if (supportsAttachments) {
                    var msgs = moveToAttachments(request);
                    msgs.forEach(function (s) { return _webSocket.send(s); });
                }
                else {
                    _webSocket.send(JSON.stringify(request));
                }
                return request.id + "";
            }
            function wrapResponse(response) {
                var msg = "";
                switch (response.status) {
                    case -500 /* ERR_INTERNAL_ERROR */:
                        msg = "TouchDevelop runtime crashed";
                        break;
                    case -7 /* ERR_MALFORMED_REQUEST */:
                        msg = "WebAppBooster reported a malformed request";
                        break;
                    case -8 /* ERR_NOT_AVAILABLE */:
                    case -43 /* ERR_NOT_AVAILABLE_WP8 */:
                        msg = "Not available";
                    default:
                        msg = "Error " + response.status;
                }
                if (response.errorMessage)
                    msg += ": " + response.errorMessage;
                TDev.Util.log(msg);
                var e = new Error(msg);
                e.wabStatus = response.status;
                e.wabCrashInfo = response.crashInfo;
                return e;
            }
            function requestError(err) {
                TDev.Util.reportError("wab-request", err);
            }
            function statusError(err) {
                TDev.Util.reportError("wab-status", wrapResponse(err));
            }
            function statusErrorRaw(err) {
                TDev.Util.reportError("wab-status", err);
            }
            Wab.statusErrorRaw = statusErrorRaw;
            function sendRequest(request, onSuccess, onError) {
                if (onError === void 0) { onError = statusErrorRaw; }
                return _sendRequest(request, function (response) {
                    switch (response.status) {
                        case 0 /* OK */:
                        case -6 /* ERR_CANCELLED */:
                            onSuccess(response);
                            break;
                        case -1 /* ERR_PERMISSION_DENIED */:
                            requestPermissionsAsync().done(function () {
                                _sendRequest(request, function (response) {
                                    if (response.status == 0 /* OK */ || response.status == -6 /* ERR_CANCELLED */)
                                        onSuccess(response);
                                    else
                                        onError(wrapResponse(response));
                                }, requestError);
                            }, requestError);
                            break;
                        default:
                            onError(wrapResponse(response));
                    }
                }, requestError);
            }
            Wab.sendRequest = sendRequest;
            function cancelRequest(id) {
                var pending = _pendingResponses[id];
                if (pending) {
                    delete _pendingResponses[id];
                    if (/^START_/.test(pending.action)) {
                        _sendRequest({ action: pending.action.replace(/^START_/, "STOP_") }, function (resp) {
                        }, function (err) {
                        });
                    }
                }
            }
            Wab.cancelRequest = cancelRequest;
            function sendRequestAsync(request) {
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    sendRequest(request, onSuccess, onError);
                });
            }
            Wab.sendRequestAsync = sendRequestAsync;
            function boostColors(s) {
                if (!s)
                    return;
                TDev.Util.log('wab: boosting COLORS');
                function boost(n, v) {
                    if (v) {
                        var c = RT.Color.fromHtml(v);
                        RT.Colors[n] = function () { return c; };
                    }
                }
                boost("foreground_os", s.themeForegroundColor);
                boost("background_os", s.themeBackgroundColor);
                boost("chrome", s.themeChromeColor);
                boost("subtle", s.themeSubtleColor);
                boost("accent", s.themeAccentColor);
            }
            function requestPermissionsAsync() {
                TDev.Util.log('wab: requesting permissions');
                return new TDev.Promise(function (onSuccess, onError, onProgress) {
                    _sendRequest({
                        action: Action.REQUEST_PERMISSIONS,
                        permissions: [Permission.READ_CONTACTS, Permission.READ_CALENDAR, Permission.GYRO, Permission.ACCELEROMETER, Permission.AUDIO, Permission.GALLERY, Permission.CAMERA, Permission.VIBRATE, Permission.RECORD_AUDIO, Permission.BLUETOOTH],
                    }, function (response) {
                        if (response.status == 0 /* OK */) {
                            supportedActions = response.supportedActions;
                            TDev.Util.log('wab: permissions: ' + supportedActions.join(', '));
                            if (response.wp8AppVersion && wp8AppVersion < 0) {
                                wp8AppVersion = response.wp8AppVersion;
                                TDev.Browser.platformCaps.push("wp8app-v" + wp8AppVersion);
                                TDev.Browser.platformCaps.push("wp8-v" + response.osVersion);
                                TDev.Util.log(TDev.Browser.platformCaps.join(", "));
                                boostColors(response.osSettings);
                            }
                            onSuccess(response);
                        }
                        else {
                            TDev.Util.log('wab: permissions request failed');
                            onError(undefined);
                        }
                    }, onError);
                });
            }
            var pendingMsgs = [];
            function flushMsgs() {
                if (pendingMsgs.length > 0) {
                    sendRequestAsync({ action: Action.LOG, noResponse: true, texts: pendingMsgs }).done();
                    pendingMsgs = [];
                }
                TDev.Util.setTimeout(500, flushMsgs);
            }
            var Wp8Table = (function () {
                function Wp8Table(name) {
                    this.name = name;
                }
                Wp8Table.prototype.getValueAsync = function (key) {
                    return this.getItemsAsync([key]).then(function (items) { return items[key]; });
                };
                Wp8Table.prototype.getItemsAsync = function (keys) {
                    return sendRequestAsync({ action: Action.DB_GET, table: this.name, keys: keys }).then(function (resp) {
                        var r = {};
                        keys.forEach(function (k, i) {
                            r[k] = resp.values[i];
                        });
                        return r;
                    });
                };
                Wp8Table.prototype.getKeysAsync = function () {
                    return sendRequestAsync({ action: Action.DB_KEYS, table: this.name }).then(function (resp) { return resp.keys; });
                };
                Wp8Table.prototype.setItemsAsync = function (items) {
                    var keys = Object.keys(items);
                    var hasBig = false;
                    var vals = keys.map(function (k) {
                        var v = items[k];
                        if (v && v.length > 100000)
                            hasBig = true;
                        if (v === undefined)
                            return null;
                        return v;
                    });
                    var req = { action: Action.DB_SET, table: this.name, keys: keys, values: vals };
                    if (hasBig) {
                        var ret = new TDev.PromiseInv();
                        Wp8Table.dbSetLock.acquire(function () {
                            sendRequestAsync(req).done(function (resp) {
                                Wp8Table.dbSetLock.release();
                                ret.success(resp);
                            });
                        });
                        return ret;
                    }
                    else
                        return sendRequestAsync(req);
                };
                Wp8Table.dbSetLock = new TDev.Lock();
                return Wp8Table;
            })();
            function setWp8UriAsync() {
                var r = new TDev.PromiseInv();
                window.tdevWsUri = function (uri, legal, appName) {
                    TDev.Util.log("ws uri: " + uri);
                    URI = uri;
                    TDev.Runtime.legalNotice = legal || "";
                    TDev.Runtime.appName = appName;
                    window.tdevWsUri = function () {
                    };
                    r.success(uri);
                };
                TDev.Util.log("notifying parent app");
                var wsuriRetry = 5;
                function tryNotify() {
                    try {
                        window.external.Notify("WSURI");
                    }
                    catch (e) {
                        if (wsuriRetry-- < 0)
                            throw e;
                        else
                            TDev.Util.setTimeout(500, tryNotify);
                    }
                }
                tryNotify();
                TDev.Util.log("parent app notified");
                return r;
            }
            function setupWp8app() {
                if (!TDev.Browser.isWP8app)
                    return null;
                if (!window.external)
                    return null;
                isWP8app = true;
                supportsAttachments = true;
                TDev.Browser.deviceMotion = true;
                TDev.Browser.webAppBooster = true;
                TDev.Browser.audioWav = true;
                TDev.Browser.canIndexedDB = false;
                TDev.Storage.getTableAsync = function (name) { return TDev.Promise.as(new Wp8Table(name)); };
                TDev.Storage.clearPreAsync = function () { return TDev.Promise.join(TDev.Storage.tableNames.map(function (t) { return sendRequestAsync({ action: Action.DB_DELETE, table: t }); })); };
                TDev.Util.log("wp8: sending auth app request");
                return setWp8UriAsync().then(function () { return openWp8Async(); }).then(function () {
                    _sendRequest({ action: Action.REQUEST_AUTHENTICATION, path: "app" }, function (resp) {
                        if (resp.status == 0 /* OK */) {
                            TDev.Util.externalLog = function (msg) {
                                pendingMsgs.push(msg);
                            };
                            TDev.Util.log("wp8: auth app request OK");
                            confirmedWP8app = true;
                            flushMsgs();
                        }
                        else {
                            TDev.Util.log("wp8: auth app request failed: " + JSON.stringify(resp));
                            isWP8app = false;
                        }
                    }, function (err) {
                        TDev.Util.log("wp8: auth app request failed (onError): " + err);
                        isWP8app = false;
                    });
                });
            }
            var supportedActions = [];
            function isSupportedAction(name) {
                return supportedActions.indexOf(name) > -1;
            }
            Wab.isSupportedAction = isSupportedAction;
            function lockOrientation(p, l, clock) {
                TDev.SizeMgr.lastOrientationLockTime = TDev.Util.now();
                sendRequestAsync({
                    action: Action.LOCK_ORIENTATION,
                    portraitAllowed: p,
                    landscapeAllowed: l,
                    showClock: clock
                }).done(function () {
                    TDev.SizeMgr.lastOrientationLockTime = TDev.Util.now();
                });
            }
            function arrivedAtHash(h) {
                sendRequestAsync({
                    action: Action.CURRENT_HASH,
                    hash: h,
                    isMainScreen: h == '#hub' || h == '#',
                }).done();
            }
            var lastChannelUri;
            function refreshNotifications(enable) {
                var request = {
                    action: Action.NOTIFICATION,
                    enable: enable
                };
                sendRequestAsync(request).then(function (response) {
                    if (response.channelUri && lastChannelUri != response.channelUri) {
                        lastChannelUri = response.channelUri;
                        var webRequest = { subscriptionuri: response.channelUri, versionminor: response.versionMinor, versionmajor: response.versionMajor };
                        TDev.Cloud.postNotificationChannelAsync(webRequest).done(function (webResponse) {
                        }, function (ex) {
                        });
                    }
                }).done();
            }
            function initAsync() {
                var r = setupWp8app();
                if (r)
                    return r.then(function () { return requestPermissionsAsync(); }).then(function () {
                        TDev.Util.log('wab: boosting NOTIFICATION');
                        TDev.Runtime.refreshNotifications = refreshNotifications;
                        TDev.Runtime.lockOrientation = lockOrientation;
                        if (isSupportedAction(Action.CURRENT_HASH))
                            TDev.Screen.arrivedAtHash = arrivedAtHash;
                        TDev.Runtime.rateTouchDevelop = function () {
                            sendRequestAsync({ action: Action.REVIEW_CURRENT_APP }).done();
                        };
                        lockOrientation(true, false, true);
                        function waitForUpdate(id) {
                            sendRequestAsync({ action: Action.CHECK_FOR_REFRESH }).done();
                            TDev.updateLoop(id, "refreshing runtime");
                            return true;
                        }
                        var w = TDev.World;
                        if (w) {
                            if (isSupportedAction(Action.CHECK_FOR_REFRESH)) {
                                TDev.Util.log('wab: boosting CHECK_FOR_REFRESH');
                                w.waitForUpdate = waitForUpdate;
                            }
                            else {
                                w.waitForUpdate = function () { return false; };
                            }
                            if (isSupportedAction(Action.SWITCH_CHANNEL)) {
                                TDev.Util.log('wab: boosting SWITCH_CHANNEL');
                                w.switchToChannel = function (ch) {
                                    sendRequestAsync({
                                        action: Action.SWITCH_CHANNEL,
                                        channel: ch,
                                    }).done();
                                    TDev.ProgressOverlay.lockAndShow("switching to " + ch);
                                };
                            }
                            else {
                                w.switchToChannel = null;
                            }
                        }
                        if (isSupportedAction(Action.CURRENT_HASH))
                            TDev.Util.log('wab: boosting CURRENT_HASH');
                        TDev.Runtime.continueAfter = function (ms, f) {
                            sendRequestAsync({
                                action: Action.CURRENT_HASH,
                                hash: undefined,
                                isMainScreen: false
                            }).done(f);
                        };
                    });
                return TDev.Promise.as();
            }
            Wab.initAsync = initAsync;
            function getSupportedCapabilities() {
                if (!isActive())
                    return [];
                var caps = [];
                if (isSupportedAction(Action.PICK_CONTACT) || isSupportedAction(Action.LIST_CONTACTS))
                    caps.push("contacts");
                if (isSupportedAction(Action.START_GYRO))
                    caps.push("gyroscope");
                if (isSupportedAction(Action.START_ACCELEROMETER))
                    caps.push("accelerometer");
                if (isSupportedAction(Action.START_COMPASS))
                    caps.push("compass");
                if (isSupportedAction(Action.START_ORIENTATION))
                    caps.push("orientation");
                if (isSupportedAction(Action.LIST_APPOINTMENTS))
                    caps.push("calendar");
                if (isSupportedAction(Action.UPDATE_TILE))
                    caps.push("tiles");
                if (isSupportedAction(Action.SPEAK_TEXT) || isSupportedAction(Action.SPEAK_SSML) || isSupportedAction(Action.DICTATE))
                    caps.push("speech");
                if (isSupportedAction(Action.LIST_SONGS) || isSupportedAction(Action.LIST_SONG_ALBUM) || isSupportedAction(Action.LIST_SONG_ALBUMS) || isSupportedAction(Action.SONG_ALBUM) || isSupportedAction(Action.PLAYER_COMMAND) || isSupportedAction(Action.PLAYER_STATE) || isSupportedAction(Action.ACTIVE_SONG) || isSupportedAction(Action.START_ACTIVE_SONG_CHANGED) || isSupportedAction(Action.START_PLAYER_STATE_CHANGED) || isSupportedAction(Action.PLAY_SOUND))
                    caps.push('musicandsounds');
                if (isSupportedAction(Action.SAVE_TO_GALLERY) || isSupportedAction(Action.PICK_IMAGE))
                    caps.push('media');
                if (isSupportedAction(Action.RECORD_MICROPHONE))
                    caps.push('microphone');
                if (isSupportedAction(Action.START_SEND_NFC_MESSAGE) || isSupportedAction(Action.START_RECEIVE_NFC_MESSAGE))
                    caps.push('proximity');
                if (isSupportedAction(Action.BLUETOOTH_DEVICES))
                    caps.push('bluetooth');
                if (isSupportedAction(Action.RADIO_COMMAND))
                    caps.push('radio');
                return caps;
            }
            Wab.getSupportedCapabilities = getSupportedCapabilities;
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function SocialInit() {
                if (Wab.isSupportedAction(Wab.Action.SEND_SMS)) {
                    TDev.Util.log('wab: boosting SEND_SMS');
                    RT.Social.sendSmsAsync = SocialWab.sendSmsAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.PICK_CONTACT)) {
                    TDev.Util.log('wab: boosting PICK_CONTACT');
                    RT.Social.chooseContactAsync = SocialWab.chooseContactAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_CONTACTS)) {
                    TDev.Util.log('wab: boosting LIST_CONTACTS');
                    RT.Social.searchContactsAsync = SocialWab.searchContactsAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_APPOINTMENTS)) {
                    TDev.Util.log('wab: boosting LIST_APPOINTMENTS');
                    RT.Social.searchAppointmentsAsync = SocialWab.searchAppointmentsAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.SAVE_TO_GALLERY)) {
                    TDev.Util.log('wab: boosting SAVE_TO_GALLERY');
                    RT.Picture.prototype.save_to_library = function (r) {
                        var pic = this;
                        pic.initAsync().done(function () {
                            var url = pic.getDataUri(0.95);
                            Wab.sendRequestAsync({ action: Wab.Action.SAVE_TO_GALLERY, uri: url }).then(function (response) {
                                if (response.status === 0 /* OK */) {
                                    r.resumeVal(response.name);
                                }
                                else
                                    r.resumeVal(undefined);
                            }).done();
                        });
                    };
                }
                if (Wab.isSupportedAction(Wab.Action.VIBRATE)) {
                    TDev.Util.log('wab: boosting VIBRATE');
                    RT.Phone.vibrateCore = function (seconds) {
                        var ms = Math.min(5, Math.max(0.02, seconds)) * 1000.0;
                        Wab.sendRequestAsync({ action: Wab.Action.VIBRATE, millis: ms }).done(function () {
                        }, function (e) {
                        });
                    };
                }
            }
            Wab.SocialInit = SocialInit;
            var SocialWab;
            (function (SocialWab) {
                function sendSmsAsync(to, body) {
                    return Wab.sendRequestAsync({ action: Wab.Action.SEND_SMS, to: to, body: body });
                }
                SocialWab.sendSmsAsync = sendSmsAsync;
                function chooseContactAsync() {
                    return Wab.sendRequestAsync({ action: Wab.Action.PICK_CONTACT }).then(function (response) {
                        if (response.status === 0 /* OK */)
                            return mkContact(response);
                        else
                            return undefined;
                    });
                }
                SocialWab.chooseContactAsync = chooseContactAsync;
                function searchContactsAsync(query) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.Util.log('wab: search contacts');
                        var aps = [];
                        Wab.sendRequest({ action: Wab.Action.LIST_CONTACTS, query: query }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                aps.push(mkContact(response));
                            }
                            else {
                                TDev.Util.log('wab: search contacts: ' + aps.length);
                                onSuccess(RT.Collection.mkAny(RT.Contact, aps));
                            }
                        });
                    });
                }
                SocialWab.searchContactsAsync = searchContactsAsync;
                function searchAppointmentsAsync(start, end) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.Util.log('wab: search appointments between ' + start + ' and ' + end);
                        var aps = [];
                        Wab.sendRequest({ action: Wab.Action.LIST_APPOINTMENTS, start: start.milliseconds_since_epoch(), end: end.milliseconds_since_epoch() }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                aps.push(mkAppointment(response));
                            }
                            else {
                                TDev.Util.log('wab: found ' + aps.length + ' appointments');
                                onSuccess(RT.Collection.mkAny(RT.Appointment, aps));
                            }
                        });
                    });
                }
                SocialWab.searchAppointmentsAsync = searchAppointmentsAsync;
                function mkAppointmentContact(r) {
                    if (r)
                        return RT.Contact.mk(r.nameDisplay, r.email);
                    else
                        return undefined;
                }
                function mkAppointmentContacts(r) {
                    if (r)
                        return RT.Collection.mkAny(RT.Contact, r.map(function (ac) { return RT.Contact.mk(ac.nameDisplay, ac.email); }));
                    else
                        return RT.Collection.mkAny(RT.Contact);
                }
                function mkAppointment(r) {
                    return RT.Appointment.mk(r.subject, r.details, r.location, RT.DateTime.mkMs(r.start), RT.DateTime.mkMs(r.end), r.source, mkAppointmentContact(r.organizer), mkAppointmentContacts(r.attendees), r.isPrivate, r.isAllDay, r.onlineStatus);
                }
                function mkContact(response) {
                    var c = new RT.Contact();
                    c.set_nick_name(response.name);
                    c.set_email(response.email);
                    c.set_phone_number(response.phone);
                    c.set_first_name(response.nameGiven);
                    c.set_middle_name(response.nameMiddle);
                    c.set_last_name(response.nameFamily);
                    c.set_home_phone(response.phoneHome);
                    c.set_work_phone(response.phoneWork);
                    c.set_mobile_phone(response.phoneMobile);
                    c.set_phone_number(response.phoneOther);
                    c.set_work_email(response.emailWork);
                    c.set_personal_email(response.emailHome);
                    c.set_email(response.emailOther);
                    c.set_home_address(response.addressHome || response.addressOther);
                    c.set_work_address(response.addressWork);
                    c.setPicture_url(response.photoUri);
                    c.set_source(response.source || "Phone");
                    return c;
                }
            })(SocialWab = Wab.SocialWab || (Wab.SocialWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function DeviceMotionInit() {
                if (Wab.isSupportedAction(Wab.Action.START_ACCELEROMETER)) {
                    TDev.Util.log('wab: boosting START_ACCELEROMETER');
                    RT.DeviceMotion.isSupported = DeviceMotionWab.isSupported;
                    RT.DeviceMotion.isMotionSupported = DeviceMotionWab.isMotionSupported;
                    RT.DeviceMotion.addReadingEvent = DeviceMotionWab.addReadingEvent;
                    RT.DeviceMotion.removeReadingEvent = DeviceMotionWab.removeReadingEvent;
                }
            }
            Wab.DeviceMotionInit = DeviceMotionInit;
            var DeviceMotionWab;
            (function (DeviceMotionWab) {
                var currId;
                function isSupported() {
                    return true;
                }
                DeviceMotionWab.isSupported = isSupported;
                function isMotionSupported() {
                    return true;
                }
                DeviceMotionWab.isMotionSupported = isMotionSupported;
                function addReadingEvent() {
                    TDev.Util.log('wab: starting accelerometer');
                    currId = Wab.sendRequest({ action: Wab.Action.START_ACCELEROMETER }, function (acc) {
                        RT.DeviceMotion.setRaw(RT.Vector3.mk(acc.x, acc.y, acc.z), acc.orientation);
                    });
                }
                DeviceMotionWab.addReadingEvent = addReadingEvent;
                function removeReadingEvent() {
                    TDev.Util.log('wab: stopping accelerometer');
                    if (currId) {
                        Wab.cancelRequest(currId);
                        currId = "";
                    }
                }
                DeviceMotionWab.removeReadingEvent = removeReadingEvent;
            })(DeviceMotionWab = Wab.DeviceMotionWab || (Wab.DeviceMotionWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function DeviceOrientationInit() {
                if (Wab.isSupportedAction(Wab.Action.START_ORIENTATION)) {
                    TDev.Util.log('wab: boosting START_ORIENTATION');
                    RT.DeviceOrientation.isOrientationSupported = DeviceOrientationWab.isHeadingSupported;
                    RT.DeviceOrientation.addOrientationReadingEvent = DeviceOrientationWab.addOrientationReadingEvent;
                    RT.DeviceOrientation.removeOrientationReadingEvent = DeviceOrientationWab.removeOrientationReadingEvent;
                }
                if (Wab.isSupportedAction(Wab.Action.START_COMPASS)) {
                    TDev.Util.log('wab: boosting START_COMPASS');
                    RT.DeviceOrientation.isHeadingSupported = DeviceOrientationWab.isHeadingSupported;
                    RT.DeviceOrientation.addHeadingReadingEvent = DeviceOrientationWab.addHeadingReadingEvent;
                    RT.DeviceOrientation.removeHeadingReadingEvent = DeviceOrientationWab.removeHeadingReadingEvent;
                }
            }
            Wab.DeviceOrientationInit = DeviceOrientationInit;
            var DeviceOrientationWab;
            (function (DeviceOrientationWab) {
                var currOrientationId;
                var currCompassId;
                function isOrientationSupported() {
                    return true;
                }
                DeviceOrientationWab.isOrientationSupported = isOrientationSupported;
                function isHeadingSupported() {
                    return true;
                }
                DeviceOrientationWab.isHeadingSupported = isHeadingSupported;
                function addOrientationReadingEvent() {
                    currOrientationId = Wab.sendRequest({ action: Wab.Action.START_ORIENTATION }, function (r) {
                        RT.DeviceOrientation.setOrientation(r.y, r.p, r.r);
                    });
                }
                DeviceOrientationWab.addOrientationReadingEvent = addOrientationReadingEvent;
                function addHeadingReadingEvent() {
                    currCompassId = Wab.sendRequest({ action: Wab.Action.START_COMPASS }, function (r) {
                        RT.DeviceOrientation.setHeading(r.v);
                    });
                }
                DeviceOrientationWab.addHeadingReadingEvent = addHeadingReadingEvent;
                function removeOrientationReadingEvent() {
                    if (currOrientationId) {
                        Wab.cancelRequest(currOrientationId);
                        currCompassId = "";
                    }
                }
                DeviceOrientationWab.removeOrientationReadingEvent = removeOrientationReadingEvent;
                function removeHeadingReadingEvent() {
                    if (currCompassId) {
                        Wab.cancelRequest(currCompassId);
                        currCompassId = "";
                    }
                }
                DeviceOrientationWab.removeHeadingReadingEvent = removeHeadingReadingEvent;
            })(DeviceOrientationWab = Wab.DeviceOrientationWab || (Wab.DeviceOrientationWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function WebInit() {
                var w = RT.Web;
                if (Wab.isSupportedAction(Wab.Action.NETWORK_INFORMATION)) {
                    TDev.Util.log('wab: boosting NETWORK_INFORMATION');
                    w.connection_type = WebWab.connection_type;
                    w.connection_name = WebWab.connection_name;
                }
                if (Wab.isSupportedAction(Wab.Action.BROWSE)) {
                    TDev.Util.log('wab: boosting BROWSE');
                    w.browseAsync = WebWab.browseAsync;
                }
                if (TDev.Browser.isWP8app) {
                    w.proxy = function (url) {
                        return url;
                    };
                    w.open_connection_settings = WebWp8.open_connection_settings;
                }
                else if (Wab.isSupportedAction(Wab.Action.PROXY)) {
                    TDev.Util.log('wab: boosting PROXY');
                    RT.WebRequest.prototype.sendAsync = function () {
                        var _this = this;
                        var request = this;
                        if (!TDev.Browser.isWP8app)
                            return request.sendCoreAsync();
                        var json = request.serializeForProxy();
                        json.action = Wab.Action.PROXY;
                        RT.Time.log(this.toString() + " [WP8 proxy]");
                        return Wab.sendRequestAsync(json).then(function (response) {
                            TDev.Util.log(_this.toString() + " [WP8 proxy response]");
                            var r = RT.WebResponse.mkProxy(request, response);
                            return r;
                        });
                    };
                }
                if (Wab.isSupportedAction(Wab.Action.OAUTH_AUTHENTICATION)) {
                    TDev.Util.log('wab: boosting OAUTH_AUTHENTICATION');
                    w.oauth_v2_dance_async = WebWab.oauth_v2_dance_async;
                }
            }
            Wab.WebInit = WebInit;
            var WebWp8;
            (function (WebWp8) {
                function open_connection_settings(page, r) {
                    switch (page.toLowerCase()) {
                        case 'airplanemode':
                        case 'bluetooth':
                        case 'cellular':
                        case 'wifi':
                            WebWab.browseAsync('ms-settings-' + page + ':').done(function () { return r.resume(); });
                            break;
                        default:
                            r.resume();
                            break;
                    }
                }
                WebWp8.open_connection_settings = open_connection_settings;
            })(WebWp8 = Wab.WebWp8 || (Wab.WebWp8 = {}));
            var WebWab;
            (function (WebWab) {
                function oauth_v2_dance_async(url, redirect_uri, userid, stateArg) {
                    return Wab.sendRequestAsync({
                        action: Wab.Action.OAUTH_AUTHENTICATION,
                        uri: url,
                        redirectUri: redirect_uri,
                        state: stateArg
                    }).then(function (response) {
                        if (response.status == 0 /* OK */ && response.uri && response.uri.indexOf(stateArg) > -1)
                            return RT.OAuthResponse.parse(response.uri);
                        else
                            return RT.OAuthResponse.mkError('access_denied', '', '');
                    });
                }
                WebWab.oauth_v2_dance_async = oauth_v2_dance_async;
                function connection_type(r) {
                    Wab.sendRequest({ action: Wab.Action.NETWORK_INFORMATION }, function (response) {
                        if (response.status == 0 /* OK */)
                            r.resumeVal(response.connectionType || 'none');
                        else
                            r.resumeVal('unknown');
                    });
                }
                WebWab.connection_type = connection_type;
                function connection_name(r) {
                    Wab.sendRequest({ action: Wab.Action.NETWORK_INFORMATION }, function (response) {
                        if (response.status == 0 /* OK */)
                            r.resumeVal(response.connectionName || "");
                        else
                            r.resumeVal('');
                    });
                }
                WebWab.connection_name = connection_name;
                function browseAsync(url) {
                    TDev.Util.log("wab: browse " + url);
                    return Wab.sendRequestAsync({ action: Wab.Action.BROWSE, uri: url });
                }
                WebWab.browseAsync = browseAsync;
            })(WebWab = Wab.WebWab || (Wab.WebWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function PlayerInit() {
                var Player = TDev.RT.Player;
                if (Wab.isSupportedAction(Wab.Action.PLAYER_COMMAND)) {
                    TDev.Util.log('wab: boosting PLAYER_COMMAND');
                    Player.stop = PlayerWab.stop;
                    Player.next = PlayerWab.next;
                    Player.previous = PlayerWab.previous;
                    Player.resume = PlayerWab.resume;
                    Player.pause = PlayerWab.pause;
                    Player.playOne = PlayerWab.playOne;
                }
                if (Wab.isSupportedAction(Wab.Action.PLAYER_STATE)) {
                    TDev.Util.log('wab: boosting PLAYER_STATE');
                    Player.is_repeating = PlayerWab.is_repeating;
                    Player.set_repeating = PlayerWab.set_repeating;
                    Player.is_shuffled = PlayerWab.is_shuffled;
                    Player.set_shuffled = PlayerWab.set_shuffled;
                    Player.is_muted = PlayerWab.is_muted;
                    Player.is_stopped = PlayerWab.is_stopped;
                    Player.is_paused = PlayerWab.is_paused;
                    Player.is_playing = PlayerWab.is_playing;
                }
                if (Wab.isSupportedAction(Wab.Action.ACTIVE_SONG)) {
                    TDev.Util.log('wab: boosting ACTIVE_SONG');
                    Player.active_song = PlayerWab.active_song;
                }
                if (Wab.isSupportedAction(Wab.Action.START_ACTIVE_SONG_CHANGED)) {
                    TDev.Util.log('wab: boosting START_ACTIVE_SONG_CHANGED');
                    Player.addActiveSongChangedEvent = PlayerWab.addActiveSongChangedEvent;
                    Player.removeActiveSongChangedEvent = PlayerWab.removeActiveSongChangedEvent;
                }
                if (Wab.isSupportedAction(Wab.Action.START_PLAYER_STATE_CHANGED)) {
                    TDev.Util.log('wab: boosting START_PLAYER_STATE_CHANGED');
                    Player.addPlayerStateChangedEvent = PlayerWab.addPlayerStateChangedEvent;
                    Player.removePlayerStateChangedEvent = PlayerWab.removePlayerStateChangedEvent;
                }
            }
            Wab.PlayerInit = PlayerInit;
            var PlayerWab;
            (function (PlayerWab) {
                function playerCommand(command, uri) {
                    TDev.Util.log('wab: player ' + command + ' ' + uri);
                    Wab.sendRequestAsync({
                        action: Wab.Action.PLAYER_COMMAND,
                        command: command,
                        uri: uri
                    }).done();
                }
                function stop() {
                    playerCommand('stop', null);
                }
                PlayerWab.stop = stop;
                function next() {
                    playerCommand('next', null);
                }
                PlayerWab.next = next;
                function previous() {
                    playerCommand('previous', null);
                }
                PlayerWab.previous = previous;
                function resume() {
                    playerCommand('resume', null);
                }
                PlayerWab.resume = resume;
                function pause() {
                    playerCommand('pause', null);
                }
                PlayerWab.pause = pause;
                function playOne(song) {
                    TDev.Util.log('wab: play ' + song.url());
                    TDev.HTML.showProgressNotification(TDev.lf("playing song..."));
                    playerCommand('play', song.url());
                    TDev.Util.log('wab: play done');
                }
                PlayerWab.playOne = playOne;
                function active_song(r) {
                    Wab.sendRequest({ action: Wab.Action.ACTIVE_SONG }, function (response) {
                        if (response.status == 0 /* OK */) {
                            if (!response.uri)
                                r.resumeVal(undefined);
                            else {
                                var song = RT.Song.mk(response.uri, undefined, response.title);
                                song.init(response.title, response.album, response.artist, response.duration || -1, "", 0, response.track || -1);
                                r.resumeVal(song);
                            }
                        }
                        else
                            r.resumeVal(undefined);
                    });
                }
                PlayerWab.active_song = active_song;
                function is_muted(r) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.muted : false);
                    });
                }
                PlayerWab.is_muted = is_muted;
                function is_shuffled(r) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.shuffle : false);
                    });
                }
                PlayerWab.is_shuffled = is_shuffled;
                function set_shuffled(value, r) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE, shuffle: value }, function (response) { return r.resume(); });
                }
                PlayerWab.set_shuffled = set_shuffled;
                function is_repeating(r) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.repeat : false);
                    });
                }
                PlayerWab.is_repeating = is_repeating;
                function set_repeating(value, r) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE, repeat: value }, function (response) { return r.resume(); });
                }
                PlayerWab.set_repeating = set_repeating;
                function is_stopped(r) {
                    isPlayerState(r, 'stopped');
                }
                PlayerWab.is_stopped = is_stopped;
                function is_paused(r) {
                    isPlayerState(r, 'paused');
                }
                PlayerWab.is_paused = is_paused;
                function is_playing(r) {
                    isPlayerState(r, 'playing');
                }
                PlayerWab.is_playing = is_playing;
                function isPlayerState(r, state) {
                    Wab.sendRequest({ action: Wab.Action.PLAYER_STATE }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.state == state : false);
                    });
                }
                var activeSongChangedId;
                function addActiveSongChangedEvent(rt) {
                    TDev.Util.log('wab: starting active song changed');
                    activeSongChangedId = Wab.sendRequest({ action: Wab.Action.START_ACTIVE_SONG_CHANGED }, function (response) {
                        if (response.status == 0 /* OK */)
                            rt.queueEvent("active song changed", null, []);
                    });
                }
                PlayerWab.addActiveSongChangedEvent = addActiveSongChangedEvent;
                function removeActiveSongChangedEvent() {
                    if (activeSongChangedId) {
                        TDev.Util.log('wab: stopping active song changed');
                        Wab.cancelRequest(activeSongChangedId);
                        activeSongChangedId = "";
                    }
                }
                PlayerWab.removeActiveSongChangedEvent = removeActiveSongChangedEvent;
                var playerStateChangedId;
                function addPlayerStateChangedEvent(rt) {
                    TDev.Util.log('wab: starting player state changed');
                    playerStateChangedId = Wab.sendRequest({ action: Wab.Action.START_PLAYER_STATE_CHANGED }, function (response) {
                        if (response.status == 0 /* OK */)
                            rt.queueEvent("player state changed", null, []);
                    });
                }
                PlayerWab.addPlayerStateChangedEvent = addPlayerStateChangedEvent;
                function removePlayerStateChangedEvent() {
                    if (playerStateChangedId) {
                        TDev.Util.log('wab: stopping player state changed');
                        Wab.cancelRequest(playerStateChangedId);
                        playerStateChangedId = "";
                    }
                }
                PlayerWab.removePlayerStateChangedEvent = removePlayerStateChangedEvent;
            })(PlayerWab = Wab.PlayerWab || (Wab.PlayerWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function SensesInit() {
                if (Wab.isSupportedAction(Wab.Action.POWER_INFORMATION)) {
                    TDev.Util.log('wab: boosting POWER_INFORMATION');
                    RT.Senses.battery_level = SensesWab.battery_level;
                    RT.Phone.power_source = PhoneWab.power_source;
                }
                if (Wab.isSupportedAction(Wab.Action.RECORD_MICROPHONE)) {
                    TDev.Util.log('wab: boosting RECORD_MICROPHONE');
                    RT.Senses.record_microphone = SensesWab.record_microphone;
                    TDev.HTML.mkAudioInput = Wab.HTMLWab.mkAudioInput;
                }
                if (Wab.isSupportedAction(Wab.Action.TAKE_PHOTO)) {
                    TDev.Util.log('wab: boosting TAKE_PHOTO');
                    RT.Senses.take_camera_picture = SensesWab.take_camera_picture;
                }
            }
            Wab.SensesInit = SensesInit;
            var PhoneWab;
            (function (PhoneWab) {
                function power_source(r) {
                    Wab.sendRequest({ action: Wab.Action.POWER_INFORMATION }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.source : "");
                    });
                }
                PhoneWab.power_source = power_source;
            })(PhoneWab = Wab.PhoneWab || (Wab.PhoneWab = {}));
            var SensesWab;
            (function (SensesWab) {
                function take_camera_picture(r) {
                    Wab.sendRequestAsync({ action: Wab.Action.TAKE_PHOTO }).then(function (response) {
                        if (response.status === 0 /* OK */)
                            return RT.Picture.fromUrl(response.uri);
                        else
                            return TDev.Promise.as(undefined);
                    }).done(function (pic) { return r.resumeVal(pic); });
                }
                SensesWab.take_camera_picture = take_camera_picture;
                function battery_level(r) {
                    Wab.sendRequest({ action: Wab.Action.POWER_INFORMATION }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.level : undefined);
                    });
                }
                SensesWab.battery_level = battery_level;
                function record_microphone(r) {
                    TDev.Util.log("wab: record microphone");
                    Wab.sendRequestAsync({ action: Wab.Action.RECORD_MICROPHONE }).then(function (response) {
                        if (response.status === 0 /* OK */) {
                            TDev.Util.log("wab: record microphone : success");
                            return RT.Sound.fromArtUrl(response.uri);
                        }
                        else {
                            TDev.Util.log("wab: record microphone : failed");
                            return TDev.Promise.as(undefined);
                        }
                    }).done(function (snd) { return r.resumeVal(snd); });
                }
                SensesWab.record_microphone = record_microphone;
            })(SensesWab = Wab.SensesWab || (Wab.SensesWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function LanguagesInit() {
                var Languages = TDev.RT.Languages;
                if (Wab.isSupportedAction(Wab.Action.DICTATE)) {
                    TDev.Util.log('wab: boosting DICTATE');
                    Languages.record_text = LanguagesWab.record_text;
                }
                if (Wab.isSupportedAction(Wab.Action.SPEAK_TEXT)) {
                    TDev.Util.log('wab: boosting SPEAK_TEXT');
                    Languages.speak_text = LanguagesWab.speak_text;
                }
                if (Wab.isSupportedAction(Wab.Action.SPEAK_SSML)) {
                    TDev.Util.log('wab: boosting SPEAK_SSML');
                    Languages.speak_ssml = LanguagesWab.speak_ssml;
                }
            }
            Wab.LanguagesInit = LanguagesInit;
            var LanguagesWab;
            (function (LanguagesWab) {
                function record_text(r) {
                    Wab.sendRequest({ action: Wab.Action.DICTATE }, function (response) {
                        if (response.status === 0 /* OK */)
                            r.resumeVal(response.text);
                        else
                            r.resumeVal('');
                    });
                }
                LanguagesWab.record_text = record_text;
                function speak_text(voice_language, voice_gender, text, r) {
                    Wab.sendRequest({ action: Wab.Action.SPEAK_TEXT, language: voice_language, gender: voice_gender, text: text }, function (response) { return r.resume(); });
                }
                LanguagesWab.speak_text = speak_text;
                function speak_ssml(ssml, r) {
                    Wab.sendRequest({ action: Wab.Action.SPEAK_SSML, markup: ssml.toString() }, function (response) { return r.resume(); });
                }
                LanguagesWab.speak_ssml = speak_ssml;
            })(LanguagesWab = Wab.LanguagesWab || (Wab.LanguagesWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function ShareManagerInit() {
                if (Wab.isSupportedAction(Wab.Action.SHARE)) {
                    TDev.Util.log('wab: boosting SHARE');
                    RT.ShareManager.shareSocialAsync = ShareManagerWab.shareSocialAsync;
                    RT.ShareManager.sharePictureAsync = ShareManagerWab.sharePictureAsync;
                    RT.ShareManager.facebookLike = ShareManagerWab.facebookLike;
                }
                if (Wab.isSupportedAction(Wab.Action.COPY_TO_CLIPBOARD)) {
                    TDev.Util.log('wab: boosting COPY_TO_CLIPBOARD');
                    RT.ShareManager.copyToClipboardAsync = ShareManagerWab.copyToClipboardAsync;
                }
            }
            Wab.ShareManagerInit = ShareManagerInit;
            var ShareManagerWab;
            (function (ShareManagerWab) {
                function nullToUndefined(x) {
                    return x === null ? undefined : x;
                }
                function copyToClipboardAsync(text) {
                    return Wab.sendRequestAsync({ action: Wab.Action.COPY_TO_CLIPBOARD, text: text });
                }
                ShareManagerWab.copyToClipboardAsync = copyToClipboardAsync;
                function facebookLike(text, url, fburl) {
                    return TDev.div("sdCmtBtn", TDev.lf("share")).withClick(function () {
                        Wab.sendRequestAsync({ action: Wab.Action.SHARE, text: nullToUndefined(text), uri: nullToUndefined(url), provider: '' }).done();
                    });
                }
                ShareManagerWab.facebookLike = facebookLike;
                function shareSocialAsync(network, text, uri) {
                    return Wab.sendRequestAsync({ action: Wab.Action.SHARE, text: nullToUndefined(text), provider: network, uri: nullToUndefined(uri) });
                }
                ShareManagerWab.shareSocialAsync = shareSocialAsync;
                function shareButtons(m, link, options) {
                    return [
                        TDev.HTML.mkButton(TDev.lf("share"), function () {
                            shareSocialAsync("", link.name(), link.address()).done();
                            if (!options.noDismiss)
                                m.dismiss();
                        })
                    ];
                }
                ShareManagerWab.shareButtons = shareButtons;
                function sharePictureAsync(pic, network, text) {
                    var dataUri = pic.getDataUri();
                    return Wab.sendRequestAsync({ action: Wab.Action.SHARE, photoUri: nullToUndefined(dataUri), text: nullToUndefined(text), provider: network });
                }
                ShareManagerWab.sharePictureAsync = sharePictureAsync;
            })(ShareManagerWab = Wab.ShareManagerWab || (Wab.ShareManagerWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function ScreenshotManagerInit() {
                if (Wab.isSupportedAction(Wab.Action.SCREENSHOT)) {
                    TDev.Util.log('wab: boosting screenshot');
                    TDev.RT.ScreenshotManager.toScreenshotURLAsync = ScreenshotManagerWab.toScreenshotURLAsync;
                }
            }
            Wab.ScreenshotManagerInit = ScreenshotManagerInit;
            var ScreenshotManagerWab;
            (function (ScreenshotManagerWab) {
                function toScreenshotURLAsync(rt) {
                    return Wab.sendRequestAsync({ action: Wab.Action.SCREENSHOT }).then(function (response) {
                        if (response.status === 0 /* OK */)
                            return response.uri;
                        else
                            return undefined;
                    });
                }
                ScreenshotManagerWab.toScreenshotURLAsync = toScreenshotURLAsync;
            })(ScreenshotManagerWab = Wab.ScreenshotManagerWab || (Wab.ScreenshotManagerWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function MediaInit() {
                var Media = TDev.RT.Media;
                if (Wab.isSupportedAction(Wab.Action.PICK_IMAGE)) {
                    TDev.Util.log('wab: boosting PICK_IMAGE');
                    Media.choose_picture = MediaWab.choose_picture;
                    TDev.HTML.mkImageInput = HTMLWab.mkImageInput;
                    TDev.HTML.mkImageChooser = HTMLWab.mkImageChooser;
                }
                if (Wab.isSupportedAction(Wab.Action.STATUS)) {
                    TDev.Util.log('wab: boosting STATUS');
                    TDev.HTML.showProgressNotification = HTMLWab.showProgressNotification;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_IMAGE_ALBUMS)) {
                    TDev.Util.log('wab: boosting LIST_IMAGE_ALBUMS');
                    Media.pictureAlbumsAsync = MediaWab.pictureAlbumsAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_IMAGES) || Wab.isSupportedAction(Wab.Action.LIST_IMAGE_ALBUM)) {
                    TDev.Util.log('wab: boosting LIST_IMAGES, LIST_IMAGE_ALBUM');
                    Media.picturesAsync = MediaWab.picturesAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.IMAGE)) {
                    TDev.Util.log('wab: boosting IMAGE');
                    Media.pictureDataUriAsync = MediaWab.pictureDataUriAsync;
                    Media.pictureUriForMedia = MediaWab.pictureUriForMedia;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_SONGS)) {
                    TDev.Util.log('wab: boosting LIST_SONGS');
                    Media.songsAsync = MediaWab.songsAsync;
                    MediaWab.songsAsyncAction = Wab.Action.LIST_SONGS;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_SONG_ALBUM)) {
                    TDev.Util.log('wab: boosting LIST_SONG_ALBUM');
                    Media.songsAsync = MediaWab.songsAsync;
                    MediaWab.songsAsyncAction = Wab.Action.LIST_SONG_ALBUM;
                }
                if (Wab.isSupportedAction(Wab.Action.LIST_SONG_ALBUMS)) {
                    TDev.Util.log('wab: boosting LIST_SONG_ALBUMS');
                    Media.songAlbumsAsync = MediaWab.songAlbumsAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.SONG_ALBUM)) {
                    TDev.Util.log('wab: boosting SONG_ALBUM');
                    Media.initSongAlbumAsync = MediaWab.initSongAlbumAsync;
                }
                if (Wab.isSupportedAction(Wab.Action.SONG_ALBUM_ART)) {
                    TDev.Util.log('wab: boosting SONG_ALBUM_ART');
                    Media.loadSongAlbumArtAsync = MediaWab.loadSongAlbumArtAsync;
                }
            }
            Wab.MediaInit = MediaInit;
            var MediaWab;
            (function (MediaWab) {
                function choose_picture(r) {
                    Wab.sendRequestAsync({ action: Wab.Action.PICK_IMAGE }).then(function (response) {
                        if (response.status === 0 /* OK */ && response.uri)
                            return RT.Picture.fromUrl(response.uri);
                        else
                            return TDev.Promise.as(undefined);
                    }).done(function (pic) { return r.resumeVal(pic); });
                }
                MediaWab.choose_picture = choose_picture;
                function pictureUriForMedia(uri, media) {
                    if (!/^wab:/.test(uri))
                        return uri;
                    return uri += "&media=" + encodeURIComponent(media);
                }
                MediaWab.pictureUriForMedia = pictureUriForMedia;
                function pictureDataUriAsync(uri) {
                    if (!/^wab:/.test(uri))
                        return TDev.Promise.as(undefined);
                    TDev.Util.log('wab: picture load');
                    return Wab.sendRequestAsync({ action: Wab.Action.IMAGE, uri: uri }).then(function (response) {
                        if (response.status == 0 /* OK */) {
                            TDev.Util.log('wab: picture load success: ' + uri);
                            return response.uri;
                        }
                        else {
                            TDev.Util.log('wab: picture load failed: ' + response.status);
                            return undefined;
                        }
                    });
                }
                MediaWab.pictureDataUriAsync = pictureDataUriAsync;
                function picturesAsync(uri) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var pics = [];
                        Wab.sendRequest({ action: Wab.Action.LIST_IMAGES, uri: uri }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                pics.push(response.uri);
                            }
                            else {
                                onSuccess(RT.Pictures.mk(pics));
                            }
                        });
                    });
                }
                MediaWab.picturesAsync = picturesAsync;
                function pictureAlbumsAsync(uri) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var albums = [];
                        Wab.sendRequest({ action: Wab.Action.LIST_IMAGE_ALBUMS, uri: uri }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                albums.push(RT.PictureAlbum.mk(response.name, response.uri));
                            }
                            else {
                                onSuccess(RT.PictureAlbums.mk(albums));
                            }
                        });
                    });
                }
                MediaWab.pictureAlbumsAsync = pictureAlbumsAsync;
                MediaWab.songsAsyncAction = Wab.Action.LIST_SONGS;
                function songsAsync(album) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.Util.log("wab: listing songs: " + album);
                        var songs = [];
                        Wab.sendRequest({ action: MediaWab.songsAsyncAction, name: album }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                var song = RT.Song.mk(response.uri, undefined, response.title);
                                song.init(response.title, response.album, response.artist, response.duration || -1, "", 0, response.track || -1);
                                songs.push(song);
                            }
                            else {
                                TDev.Util.log('wab: found songs: ' + songs.length);
                                onSuccess(RT.Songs.mk(songs));
                            }
                        });
                    });
                }
                MediaWab.songsAsync = songsAsync;
                function songAlbumsAsync() {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        TDev.Util.log("wab: listing song albums");
                        var albums = [];
                        Wab.sendRequest({ action: Wab.Action.LIST_SONG_ALBUMS }, function (response) {
                            if (response.status == 0 /* OK */ && !Wab.isLastResponse(response)) {
                                var album = RT.SongAlbum.mk(response.name, response.artist);
                                albums.push(album);
                            }
                            else {
                                onSuccess(RT.SongAlbums.mk(albums));
                            }
                        });
                    });
                }
                MediaWab.songAlbumsAsync = songAlbumsAsync;
                function initSongAlbumAsync(album) {
                    TDev.Util.log('wab: init song album:' + album.name());
                    var genre = '';
                    var duration = 0;
                    return Wab.sendRequestAsync({ action: Wab.Action.SONG_ALBUM, name: album.name() }).then(function (response) {
                        if (response.status == 0 /* OK */ && response.thumbnail) {
                            genre = response.genre;
                            duration = response.duration;
                            return RT.Picture.fromUrl(response.thumbnail, true);
                        }
                        else
                            return TDev.Promise.as(undefined);
                    }).then(function (thumbnail) { return album.init(genre, duration, thumbnail); });
                }
                MediaWab.initSongAlbumAsync = initSongAlbumAsync;
                function loadSongAlbumArtAsync(albumName) {
                    TDev.Util.log('wab: load song album art:' + albumName);
                    return Wab.sendRequestAsync({ action: Wab.Action.SONG_ALBUM_ART, name: albumName }).then(function (response) {
                        if (response.status == 0 /* OK */ && response.uri)
                            return RT.Picture.fromUrl(response.uri, true);
                        else
                            return TDev.Promise.as(undefined);
                    });
                }
                MediaWab.loadSongAlbumArtAsync = loadSongAlbumArtAsync;
            })(MediaWab = Wab.MediaWab || (Wab.MediaWab = {}));
            var HTMLWab;
            (function (HTMLWab) {
                function showProgressNotification(msgText, fadeOut, delay, duration) {
                    if (fadeOut === void 0) { fadeOut = true; }
                    if (delay === void 0) { delay = 1000; }
                    if (duration === void 0) { duration = 2000; }
                    TDev.Util.log('wab: status: ' + msgText + ', ' + duration);
                    Wab.sendRequestAsync({ action: Wab.Action.STATUS, progress: !fadeOut, message: msgText, duration: duration }).done();
                }
                HTMLWab.showProgressNotification = showProgressNotification;
                function mkAudioInput(allowEmpty, maxMb) {
                    var dataUri = null;
                    var statusDiv = TDev.div('', TDev.div('validation-error', 'no sound selected'));
                    return {
                        element: TDev.div("", TDev.HTML.mkButton(TDev.lf("record sound"), function () {
                            Wab.sendRequestAsync({ action: Wab.Action.RECORD_MICROPHONE }).done(function (response) {
                                if (response.status === 0 /* OK */) {
                                    dataUri = response.uri;
                                    var previewPlaying = false;
                                    var btn = TDev.HTML.mkRoundButton("svg:play,white", TDev.lf("play"), 0 /* noEvent */, function () {
                                        TDev.Util.log('audio input: preview play');
                                        if (!previewPlaying) {
                                            previewPlaying = true;
                                            RT.Sound.fromArtUrl(dataUri).then(function (snd) { return snd.playAsync(); }).done(function () {
                                                previewPlaying = false;
                                            });
                                        }
                                    });
                                    statusDiv.setChildren([btn]);
                                }
                                else {
                                    dataUri = null;
                                    statusDiv.setChildren([TDev.div('validation-error', TDev.lf("no sound selected"))]);
                                }
                            });
                        }), statusDiv),
                        validate: function () {
                            if (!dataUri)
                                return allowEmpty ? null : TDev.lf("Oops, you need to select a sound...");
                            if (dataUri.length > maxMb * 1000000)
                                return TDev.lf("Sorry, the sound is too big. The sound must be less than {0} Mb...", maxMb);
                            if (!/^data:audio\/wav/.test(dataUri))
                                return TDev.lf("Sorry, you can only upload WAV sounds...");
                            return null;
                        },
                        readAsync: function () {
                            return TDev.Promise.as(dataUri);
                        }
                    };
                }
                HTMLWab.mkAudioInput = mkAudioInput;
                HTMLWab.mkImageInput = function (allowEmpty, maxMb) {
                    var dataUri = null;
                    var statusDiv = TDev.div('', TDev.div('validation-error', TDev.lf("no picture selected")));
                    return {
                        element: TDev.div("", TDev.HTML.mkButton(TDev.lf("choose picture"), function () {
                            Wab.sendRequestAsync({ action: Wab.Action.PICK_IMAGE }).done(function (response) {
                                if (response.status === 0 /* OK */) {
                                    dataUri = response.uri;
                                    var img = TDev.HTML.mkImg(dataUri);
                                    img.className = 'upload-preview';
                                    statusDiv.setChildren([TDev.div('upload-preview', img)]);
                                }
                                else {
                                    dataUri = null;
                                    statusDiv.setChildren([TDev.div('validation-error', TDev.lf("no picture selected"))]);
                                }
                            });
                        }), statusDiv),
                        validate: function () {
                            if (!dataUri)
                                return allowEmpty ? null : TDev.lf("Oops, you need to select a picture...");
                            if (dataUri.length > maxMb * 1000000)
                                return TDev.lf("Sorry, the picture is too big. The picture must be less than {0} Mb...", maxMb);
                            if (!/^data:image\/(jpeg|png)/.test(dataUri))
                                return TDev.lf("Sorry, you can only upload JPEG and PNG pictures...");
                            return null;
                        },
                        readAsync: function () {
                            return TDev.Promise.as(dataUri);
                        }
                    };
                };
                function mkImageChooser(onchanged) {
                    return TDev.HTML.mkButton(TDev.lf("choose picture"), function () {
                        Wab.sendRequestAsync({ action: Wab.Action.PICK_IMAGE }).done(function (response) {
                            if (response.status === 0 /* OK */) {
                                onchanged(response.uri);
                            }
                        });
                    });
                }
                HTMLWab.mkImageChooser = mkImageChooser;
            })(HTMLWab = Wab.HTMLWab || (Wab.HTMLWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function SoundInit() {
                if (Wab.isSupportedAction(Wab.Action.PLAY_SOUND)) {
                    TDev.Util.log('wab: boosting PLAY_SOUND');
                    RT.Sound.prototype.playAsync = function () {
                        var sound = this;
                        return sound.toWabRequestAsync().then(function (r) {
                            if (/^data:audio\/wav;base64,/.test(r.uri)) {
                                var soundid = sound.soundid;
                                return Wab.sendRequestAsync({
                                    action: Wab.Action.PLAY_SOUND,
                                    soundid: soundid,
                                    uri: soundid ? "" : r.uri,
                                    pan: r.pan,
                                    pitch: r.pitch,
                                    volume: r.volume
                                }).then(function (e) {
                                    if (e.cachemiss) {
                                        TDev.Util.log('wab: play sound: cache-miss');
                                        sound.soundid = undefined;
                                        return Wab.sendRequestAsync({
                                            action: Wab.Action.PLAY_SOUND,
                                            uri: r.uri,
                                            pan: r.pan,
                                            pitch: r.pitch,
                                            volume: r.volume
                                        }).then(function (cm) {
                                            if (cm.soundid) {
                                                TDev.Util.log('wab: play sound: cached after miss ' + cm.soundid);
                                                sound.soundid = cm.soundid;
                                            }
                                        });
                                    }
                                    if (e.soundid) {
                                        TDev.Util.log('wab: play sound: cached ' + e.soundid);
                                        sound.soundid = e.soundid;
                                    }
                                    return TDev.Promise.as(undefined);
                                });
                            }
                            else {
                                return sound.playCoreAsync();
                            }
                        });
                    };
                }
            }
            Wab.SoundInit = SoundInit;
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function TagsInit() {
                if (Wab.isSupportedAction(Wab.Action.START_SEND_NFC_MESSAGE)) {
                    TDev.Util.log('wab: boosting START_SEND_NFC_MESSAGE');
                    RT.Tags.sendNFC = TagsWab.sendNFC;
                }
                if (Wab.isSupportedAction(Wab.Action.START_RECEIVE_NFC_MESSAGE)) {
                    TDev.Util.log('wab: boosting START_RECEIVE_NFC_MESSAGE');
                    RT.Tags.receiveNFC = TagsWab.receiveNFC;
                }
            }
            Wab.TagsInit = TagsInit;
            var TagsWab;
            (function (TagsWab) {
                function sendNFC(writeTag, type, value, sent, transferred) {
                    TDev.Util.log("wab: sending nfc tag");
                    var mid = 0;
                    Wab.sendRequest({ action: Wab.Action.START_SEND_NFC_MESSAGE, value: value, type: type, writeTag: writeTag }, function (response) {
                        TDev.Util.log("wab: send nfc tag status: " + response.status);
                        if (response.status == 0 /* OK */) {
                            if (response.transferred) {
                                TDev.Util.log("wab: send nfc transferred: " + response.id);
                                transferred();
                            }
                            else {
                                mid = response.id;
                                TDev.Util.log("wab: send nfc id: " + mid);
                                sent(mid);
                            }
                        }
                    });
                }
                TagsWab.sendNFC = sendNFC;
                function receiveNFC(type, sent, received) {
                    TDev.Util.log("wab: receiving nfc tag");
                    var mid = 0;
                    Wab.sendRequest({ action: Wab.Action.START_RECEIVE_NFC_MESSAGE, type: type }, function (response) {
                        TDev.Util.log("wab: receive nfc tag status: " + response.status);
                        if (response.status == 0 /* OK */) {
                            if (response.received) {
                                TDev.Util.log("wab: receive nfc received: " + response.id);
                                received(response.value);
                            }
                            else {
                                mid = response.id;
                                TDev.Util.log("wab: receive nfc id: " + mid);
                                sent(mid);
                            }
                        }
                    });
                }
                TagsWab.receiveNFC = receiveNFC;
            })(TagsWab = Wab.TagsWab || (Wab.TagsWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function TilesInit() {
                if (Wab.isSupportedAction(Wab.Action.UPDATE_TILE)) {
                    TDev.Util.log('wab: boosting UPDATE_TILE');
                    RT.Tiles.updateTileAsync = TilesWab.updateTileAsync;
                }
            }
            Wab.TilesInit = TilesInit;
            var TilesWab;
            (function (TilesWab) {
                function updateTileAsync(fragment, data) {
                    TDev.Util.log('wab: update tile');
                    return Wab.sendRequestAsync({ action: Wab.Action.UPDATE_TILE, uri: fragment, background: data.background, content: data.content, title: data.title, counter: data.counter, icon: data.icon, pictures: data.pictures, template: data.template, pin: data.pin }).then(function (r) {
                        TDev.Util.log('wab: update tile: ' + r.status);
                    });
                }
                TilesWab.updateTileAsync = updateTileAsync;
            })(TilesWab = Wab.TilesWab || (Wab.TilesWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function ArtCacheInit() {
                RT.ArtCache.getMaxItems = ArtCacheWab.getMaxItems;
            }
            Wab.ArtCacheInit = ArtCacheInit;
            var ArtCacheWab;
            (function (ArtCacheWab) {
                function getMaxItems() {
                    return 500;
                }
                ArtCacheWab.getMaxItems = getMaxItems;
            })(ArtCacheWab = Wab.ArtCacheWab || (Wab.ArtCacheWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            var WabBluetoothDevice = (function (_super) {
                __extends(WabBluetoothDevice, _super);
                function WabBluetoothDevice() {
                    _super.call(this);
                }
                WabBluetoothDevice.isBluetoothError = function (err) {
                    return (typeof err.message === "string" && /HRESULT: 0x/.test(err.message));
                };
                WabBluetoothDevice.prototype.initFrom = function (j) {
                    var _this = this;
                    this.errorHandler = function (err) {
                        if (WabBluetoothDevice.isBluetoothError(err)) {
                            _this._isConnected = false;
                            return undefined;
                        }
                        else
                            throw err;
                    };
                    this._displayName = j.displayName;
                    this._hostName = j.hostName;
                    this._serviceName = j.serviceName;
                    this._isConnected = false;
                };
                WabBluetoothDevice.prototype.mkReq = function (act) {
                    var r = {
                        action: act,
                        hostName: this._hostName,
                        serviceName: this._serviceName,
                    };
                    return r;
                };
                WabBluetoothDevice.prototype.connect = function (r) {
                    var _this = this;
                    Wab.sendRequestAsync(this.mkReq(Wab.Action.BLUETOOTH_CONNECT)).done(function (response) {
                        _this._isConnected = !!response.connected;
                        r.resume();
                    }, this.errorHandler);
                };
                WabBluetoothDevice.prototype.disconnect = function (r) {
                    var _this = this;
                    Wab.sendRequestAsync(this.mkReq(Wab.Action.BLUETOOTH_DISCONNECT)).done(function (response) {
                        _this._isConnected = !!response.connected;
                        r.resume();
                    }, this.errorHandler);
                };
                WabBluetoothDevice.prototype.readAsync = function (max_length) {
                    var _this = this;
                    if (!this._isConnected)
                        TDev.Util.userError(TDev.lf("bluetooth device {0}", this.toString()));
                    var req = this.mkReq(Wab.Action.BLUETOOTH_READ);
                    req.length = max_length;
                    TDev.Util.assert(!!this.errorHandler);
                    return Wab.sendRequestAsync(req).then(function (response) {
                        _this._isConnected = !!response.connected;
                        if (response.connected)
                            return RT.Buffer.fromString(response.data, "base64");
                        else
                            return undefined;
                    }, this.errorHandler);
                };
                WabBluetoothDevice.prototype.write_buffer = function (buffer, r) {
                    var _this = this;
                    if (!this._isConnected)
                        TDev.Util.userError(TDev.lf("bluetooth device {0}", this.toString()));
                    var req = this.mkReq(Wab.Action.BLUETOOTH_WRITE);
                    req.data = buffer.to_string("base64");
                    Wab.sendRequestAsync(req).done(function (response) {
                        _this._isConnected = !!response.connected;
                        r.resume();
                    }, this.errorHandler);
                };
                WabBluetoothDevice.getDevices = function () {
                    return Wab.sendRequestAsync({ action: Wab.Action.BLUETOOTH_DEVICES }).then(function (response) {
                        if (response.devices)
                            return response.devices.map(function (d) {
                                var b = new RT.BluetoothDevice();
                                b.initFrom(d);
                                return b;
                            });
                        else
                            return undefined;
                    }, function (err) {
                        if (WabBluetoothDevice.isBluetoothError(err))
                            return undefined;
                        else
                            throw err;
                    });
                };
                return WabBluetoothDevice;
            })(RT.BluetoothDevice);
            Wab.WabBluetoothDevice = WabBluetoothDevice;
            function BluetoothInit() {
                if (Wab.isSupportedAction(Wab.Action.BLUETOOTH_DEVICES)) {
                    TDev.Util.log('wab: boosting BLUETOOTH_DEVICES');
                    RT.BluetoothDevice.getDevicesAsync = WabBluetoothDevice.getDevices;
                }
            }
            Wab.BluetoothInit = BluetoothInit;
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function RadioInit() {
                var Radio = TDev.RT.Radio;
                if (Wab.isSupportedAction(Wab.Action.RADIO_COMMAND)) {
                    TDev.Util.log('wab: boosting RADIO_COMMAND');
                    Radio.is_playing = RadioWab.is_playing;
                    Radio.start = RadioWab.start;
                    Radio.stop = RadioWab.stop;
                    Radio.signal_strength = RadioWab.signal_strength;
                    Radio.frequency = RadioWab.frequency;
                    Radio.set_frequency = RadioWab.set_frequency;
                }
            }
            Wab.RadioInit = RadioInit;
            var RadioWab;
            (function (RadioWab) {
                function start(r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND, command: 'play' }, function () { return r.resume(); });
                }
                RadioWab.start = start;
                function stop(r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND, command: 'stop' }, function () { return r.resume(); });
                }
                RadioWab.stop = stop;
                function is_playing(r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.isPlaying : false);
                    });
                }
                RadioWab.is_playing = is_playing;
                function signal_strength(r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.signal : 0.0);
                    });
                }
                RadioWab.signal_strength = signal_strength;
                function frequency(r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND }, function (response) {
                        r.resumeVal(response.status == 0 /* OK */ ? response.frequency : 0.0);
                    });
                }
                RadioWab.frequency = frequency;
                function set_frequency(frequency, r) {
                    Wab.sendRequest({ action: Wab.Action.RADIO_COMMAND, frequency: frequency }, function () { return r.resume(); });
                }
                RadioWab.set_frequency = set_frequency;
            })(RadioWab = Wab.RadioWab || (Wab.RadioWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function AdManagerInit() {
                if (Wab.isSupportedAction(Wab.Action.SHOW_AD) && RT.ApiManager.pubCenterApplicationId && RT.ApiManager.pubCenterAdUnitId) {
                    TDev.Util.log('wab: boosting SHOW_AD');
                    RT.AdManager.initialize = AdManagerWab.initialize;
                }
            }
            Wab.AdManagerInit = AdManagerInit;
            var AdManagerWab;
            (function (AdManagerWab) {
                function initialize(el) {
                    TDev.Util.log('wab: initialize AdCenter, AdUnitId = ' + RT.ApiManager.pubCenterAdUnitId + ', ApplicationId = ' + RT.ApiManager.pubCenterApplicationId);
                    el.style.display = 'none';
                    Wab.sendRequest({
                        action: Wab.Action.SHOW_AD,
                        adUnitId: RT.ApiManager.pubCenterAdUnitId,
                        applicationId: RT.ApiManager.pubCenterApplicationId
                    }, function (response) {
                    });
                }
                AdManagerWab.initialize = initialize;
            })(AdManagerWab = Wab.AdManagerWab || (Wab.AdManagerWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Wab;
        (function (Wab) {
            function BazaarInit() {
                var Bazaar = TDev.RT.Bazaar;
                if (Wab.isSupportedAction(Wab.Action.CURRENT_APP_INFO)) {
                    TDev.Util.log('wab: boosting CURRENT_APP_INFO');
                    Bazaar.storeidAsync = BazaarWab.storeidAsync;
                }
            }
            Wab.BazaarInit = BazaarInit;
            var BazaarWab;
            (function (BazaarWab) {
                function storeidAsync() {
                    return Wab.sendRequestAsync({ action: Wab.Action.CURRENT_APP_INFO }).then(function (response) {
                        if (response.status === 0 /* OK */)
                            return response.storeid;
                        else
                            return undefined;
                    });
                }
                BazaarWab.storeidAsync = storeidAsync;
            })(BazaarWab = Wab.BazaarWab || (Wab.BazaarWab = {}));
        })(Wab = RT.Wab || (RT.Wab = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Node;
        (function (Node) {
            if (typeof require === "undefined") {
                window.require = function (name) {
                    return {};
                };
            }
            var fs = require("fs");
            var crypto = require("crypto");
            var querystring = require("querystring");
            var url = require("url");
            var util = require("util");
            var http = require("http");
            var https = require("https");
            var zlib = require("zlib");
            var Buffer;
            function setupGlobalAgent() {
                var maxSock = 15;
                var Agent = http.Agent;
                var AgentSSL = https.Agent;
                function buildAgent(self) {
                    self.removeAllListeners('free');
                    self.on('free', function (socket, host, port) {
                        var name = host + ':' + port;
                        if (self.requests[name] && self.requests[name].length) {
                            self.requests[name].shift().onSocket(socket);
                        }
                        else {
                            var onIdleError = function () {
                                socket.destroy();
                            };
                            socket._onIdleError = onIdleError;
                            socket.on('error', onIdleError);
                        }
                    });
                    self.addRequestNoreuse = self.addRequest;
                    self.addRequest = function (req, host, port) {
                        var name = host + ':' + port;
                        var socks = this.sockets[name];
                        if (socks) {
                            for (var i = 0; i < socks.length; ++i) {
                                var idleSocket = socks[i];
                                if (idleSocket._onIdleError) {
                                    idleSocket.removeListener('error', idleSocket._onIdleError);
                                    delete idleSocket._onIdleError;
                                    req._reusedSocket = true;
                                    req.onSocket(idleSocket);
                                    return;
                                }
                            }
                        }
                        this.addRequestNoreuse(req, host, port);
                    };
                }
                function ReuseAgent(options) {
                    Agent.call(this, options);
                    buildAgent(this);
                }
                util.inherits(ReuseAgent, Agent);
                function ReuseAgentSSL(options) {
                    AgentSSL.call(this, options);
                    buildAgent(this);
                }
                util.inherits(ReuseAgentSSL, AgentSSL);
                if (/^v0\.10/.test(process.version))
                    Node.mkAgent = function (p) { return p == "https:" ? new ReuseAgentSSL({ maxSockets: maxSock }) : new ReuseAgent({ maxSockets: maxSock }); };
                else
                    Node.mkAgent = function (p) { return p == "https:" ? new AgentSSL({ maxSockets: maxSock, keepAlive: true }) : new Agent({ maxSockets: maxSock, keepAlive: true }); };
                console.log("creating new HTTP agent");
                Node.httpAgent = http.globalAgent = Node.mkAgent("http:");
                Node.httpsAgent = https.globalAgent = Node.mkAgent("https:");
            }
            Node.httpAgent, Node.httpsAgent;
            Node.mkAgent;
            Node.logInfo;
            Node.logError;
            Node.handleError;
            var FsTable = (function () {
                function FsTable(tableName) {
                    this.tableName = tableName;
                    this.cache = {};
                    this.numWrites = 0;
                    this.path = "data/" + this.tableName + "/";
                    if (!fs.existsSync("data"))
                        fs.mkdirSync("data");
                    if (!fs.existsSync(this.path))
                        fs.mkdirSync(this.path);
                }
                FsTable.prototype.encode = function (s) {
                    return s.replace(/[^a-z0-9\-]/g, function (c) { return "_" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4); });
                };
                FsTable.prototype.decode = function (s) {
                    return s.toLowerCase().replace(/_([0-9a-f]{4})/g, function (a, b) { return String.fromCharCode(parseInt(b, 16)); });
                };
                FsTable.prototype.getValueAsync = function (key) {
                    var _this = this;
                    if (this.cache.hasOwnProperty(key))
                        return TDev.Promise.as(this.cache[key]);
                    var prevWrites = this.numWrites;
                    var r = new TDev.PromiseInv();
                    fs.readFile(this.path + this.encode(key), "utf8", function (err, data) {
                        if (err)
                            r.success(undefined);
                        else {
                            if (data.length < 256 && _this.numWrites == prevWrites)
                                _this.cache[key] = data;
                            r.success(data);
                        }
                    });
                    return r;
                };
                FsTable.prototype.getItemsAsync = function (keys) {
                    var _this = this;
                    var items = {};
                    var promises = keys.map(function (k) { return _this.getValueAsync(k).then(function (v) { return items[k] = v; }); });
                    return TDev.Promise.join(promises).then(function (v) { return items; });
                };
                FsTable.prototype.getKeysAsync = function () {
                    var _this = this;
                    var r = new TDev.PromiseInv();
                    fs.readdir(this.path, function (err, files) {
                        if (err)
                            r.error(err);
                        else
                            r.success(files.map(function (s) { return _this.decode(s); }));
                    });
                    return r;
                };
                FsTable.prototype.setItemAsync = function (key, val) {
                    var _this = this;
                    var r = new TDev.PromiseInv();
                    var temp = this.path + TDev.Random.uniqueId();
                    fs.writeFile(temp, val, function (err) {
                        if (err)
                            r.error(err);
                        else
                            fs.rename(temp, _this.path + _this.encode(key), function (err) {
                                if (err)
                                    r.error(err);
                                else {
                                    if (val.length < 256)
                                        _this.cache[key] = val;
                                    else
                                        delete _this.cache[key];
                                    _this.numWrites++;
                                    r.success(null);
                                }
                            });
                    });
                    return r;
                };
                FsTable.prototype.setItemsAsync = function (items) {
                    var _this = this;
                    var keys = Object.keys(items);
                    if (keys.length == 1)
                        return this.setItemAsync(keys[0], items[keys[0]]);
                    else
                        return TDev.Promise.join(Object.keys(items).map(function (k) { return _this.setItemAsync(k, items[k]); })).then(function (v) { return null; });
                };
                return FsTable;
            })();
            var TheNodeRuntime = (function (_super) {
                __extends(TheNodeRuntime, _super);
                function TheNodeRuntime(nodeHost, wsServer) {
                    _super.call(this, new TDev.Revisions.Sessions(wsServer));
                    this.nodeHost = nodeHost;
                    this.wsServer = wsServer;
                    this.routes = {};
                    this.restInits = [];
                    this.nodeModules = {};
                }
                TheNodeRuntime.prototype.initPageStack = function () {
                };
                TheNodeRuntime.prototype.getUserId = function () {
                    return TDev.Cloud.getUserId();
                };
                TheNodeRuntime.prototype.postBoxedText = function (s) {
                    TDev.Util.log("WALL: " + s);
                    return undefined;
                };
                TheNodeRuntime.prototype.postBoxedTextWithTap = function (s, rtV) {
                    return this.postBoxedText(s);
                };
                TheNodeRuntime.prototype.dispatchServerRequest = function (req, promise) {
                    var _this = this;
                    var path = unescape(req._api_path.replace(/\+/g, "%20"));
                    var path0 = path;
                    TDev.Util.log("path: {0}", path);
                    while (true) {
                        path = path.replace(/\/+$/, "");
                        if (this.routes.hasOwnProperty(path))
                            break;
                        if (path == "") {
                            return TDev.Promise.wrapError(new Error("No such API: " + path0));
                        }
                        path = path.replace(/[^\/]+$/, "");
                    }
                    var fn = this.routes[path];
                    req._api_path = path;
                    this.queueAsyncStd(function (rt, args) {
                        req.startHandle();
                        var bot = new TDev.StackBottom(_this);
                        var lc = fn(bot);
                        lc.needsPicker = true;
                        var f = lc.invoke(lc, TDev.Runtime.pumpEvents);
                        f.serverRequest = req;
                        req._stackframe = f;
                        return _this.enter(f);
                    });
                    return TDev.Promise.as(promise);
                };
                TheNodeRuntime.prototype.queueAsyncStd = function (cb) {
                    var _this = this;
                    this.queueEventCallback(function (rt, args) {
                        _this.queueAsyncEvent(function () { return cb(rt, args); });
                    });
                };
                TheNodeRuntime.prototype.queueAsync = function (cb) {
                    var _this = this;
                    this.queueAsyncStd(function (rt, args) {
                        cb();
                        var bot = new TDev.StackBottom(_this);
                        _this.current = bot;
                        return TDev.Runtime.pumpEvents;
                    });
                };
                TheNodeRuntime.prototype.queueActionCall = function (service, action, params, socket) {
                    var _this = this;
                    var promise = new TDev.PromiseInv();
                    var url = service + "/" + action;
                    var req = {
                        method: "WS",
                        url: url,
                        socket: socket,
                        _stackframe: undefined
                    };
                    var fn = this.routes[service + "/" + action];
                    var ev = new RT.Event_();
                    ev.addHandler(new RT.PseudoAction(function (rt, args) {
                        _this.queueAsyncEvent(function () {
                            var bot = new TDev.StackBottom(_this);
                            var lc = fn(bot);
                            lc.needsPicker = true;
                            var f = lc.invoke(lc, TDev.Runtime.pumpEvents);
                            f.serverRequest = req;
                            req._stackframe = f;
                            return _this.enter(f);
                        });
                    }));
                    this.queueLocalEvent(ev);
                    return promise;
                };
                TheNodeRuntime.prototype.addRestRoute = function (name, fn) {
                    this.routes[name] = fn;
                };
                TheNodeRuntime.prototype.addRestInit = function (fn) {
                    this.restInits.push(fn);
                };
                TheNodeRuntime.prototype.queueInits = function () {
                    var _this = this;
                    this.restInits.forEach(function (fn) {
                        var lifted = function (bot, retAddr) {
                            RT.App.log("running an _init action");
                            var lc = fn(bot);
                            return lc.invoke(lc, retAddr);
                        };
                        var ev = new RT.Event_();
                        ev.addHandler(lifted);
                        _this.queueLocalEvent(ev);
                    });
                };
                TheNodeRuntime.prototype.handleException = function (e) {
                    if (this.quietlyHandleError(e))
                        return;
                    if (e.programCounter)
                        this.errorPC = e.programCounter;
                    this.host.exceptionHandler(e);
                    this.restartAfterException();
                };
                return TheNodeRuntime;
            })(TDev.Runtime);
            Node.TheNodeRuntime = TheNodeRuntime;
            var RunnerHost = (function (_super) {
                __extends(RunnerHost, _super);
                function RunnerHost(wsServer) {
                    _super.call(this);
                    this.isServer = true;
                    this.currentRt = new TheNodeRuntime(this, wsServer);
                    this.localProxyAsync = TDev.LocalShell.localProxyHandler();
                    RT.App.log('node runtime initialized');
                }
                RunnerHost.prototype.respondToCrash = function (bug) {
                    var req = this.currentRt.getRestRequest();
                    if (!req)
                        return;
                    try {
                        var resp = req.getNodeRequest().tdResponse;
                        resp.writeHead(500);
                        resp.end("Whoops, " + bug.exceptionMessage);
                    }
                    catch (e) {
                        var ses = this.currentRt.sessions.CurrentSession;
                        ses.abortCurrentTransaction(bug);
                    }
                    Node.logError("CRASH DETAILS: " + bug.exceptionMessage + "\n" + bug.stackTrace);
                };
                RunnerHost.prototype.log = function (s) {
                    RT.App.log(s);
                };
                RunnerHost.prototype.fillCrashInfo = function (crash) {
                    var req = this.currentRt.getRestRequest();
                    crash.url = req ? req.url() : null;
                };
                return RunnerHost;
            })(TDev.HeadlessHost);
            Node.RunnerHost = RunnerHost;
            var host;
            function httpRequestStreamAsync(url_, method, body, contentType) {
                if (method === void 0) { method = "GET"; }
                if (body === void 0) { body = undefined; }
                if (contentType === void 0) { contentType = null; }
                var parsed = url.parse(url_);
                parsed.method = method.toUpperCase();
                var req;
                if (parsed.protocol == "http:") {
                    req = http.request(parsed);
                }
                else if (parsed.protocol == "https:") {
                    req = https.request(parsed);
                }
                else {
                    TDev.Util.oops("unknown node.js protocol " + parsed.protocol + " in " + url_);
                }
                var ret = new TDev.PromiseInv();
                if (contentType)
                    req.setHeader("content-type", contentType);
                req.on("error", function (err) {
                    ret.error(err);
                });
                req.on("response", function (res) {
                    if (res.statusCode == 200) {
                        if (/gzip/.test(res.headers['content-encoding'])) {
                            var g = zlib.createUnzip(undefined);
                            res.pipe(g);
                        }
                        else {
                            g = res;
                        }
                        ret.success(g);
                    }
                    else {
                        ret.error("bad status code " + res.statusCode);
                    }
                });
                if (body !== undefined)
                    req.end(body, "utf8");
                else
                    req.end();
                return ret;
            }
            Node.httpRequestStreamAsync = httpRequestStreamAsync;
            function httpRequestAsync(url_, method, body, contentType) {
                if (method === void 0) { method = "GET"; }
                if (body === void 0) { body = undefined; }
                if (contentType === void 0) { contentType = null; }
                return httpRequestStreamAsync(url_, method, body, contentType).then(function (g) {
                    if (g.setEncoding)
                        g.setEncoding('utf8');
                    var ret = new TDev.PromiseInv();
                    var d = "";
                    g.on('data', function (c) {
                        d += c;
                    });
                    g.on('end', function () {
                        ret.success(d);
                    });
                    return ret;
                });
            }
            function webRequestAsync(r) {
                var parsed = url.parse(r.url());
                parsed.method = r.method().toUpperCase();
                var j = r.serializeForProxy();
                parsed.headers = {};
                j.headers.forEach(function (h) { return parsed.headers[h.name] = h.value; });
                if (j.credentials)
                    parsed.auth = j.credentials.name + ":" + j.credentials.password;
                var data;
                if (typeof j.contentText == "string")
                    data = new Buffer(j.contentText, "utf8");
                else if (typeof j.content == "string")
                    data = new Buffer(j.content, "base64");
                else
                    data = new Buffer("", "binary");
                if (data.length > 0)
                    parsed.headers['content-length'] = data.length;
                if (!parsed.headers['connection'])
                    parsed.headers['connection'] = 'keep-alive';
                var req;
                if (parsed.protocol == "http:") {
                    parsed.agent = Node.httpAgent;
                    req = http.request(parsed);
                }
                else if (parsed.protocol == "https:") {
                    parsed.agent = Node.httpsAgent;
                    req = https.request(parsed);
                }
                else {
                    TDev.Util.userError("unknown request protocol " + parsed.protocol + " in " + r.url());
                }
                var ret = new TDev.PromiseInv();
                req.on("error", function (err) {
                    RT.App.log("Web request error: " + err);
                    ret.error(err);
                });
                req.on("response", function (res) {
                    var stream = res;
                    var encoding = (res.headers['content-encoding'] || "").toLowerCase();
                    if (encoding == "gzip")
                        stream = stream.pipe(zlib.createGunzip());
                    else if (encoding == "deflate")
                        stream = stream.pipe(zlib.createInflate());
                    var buffers = [];
                    stream.on('data', function (b) {
                        buffers.push(b);
                    });
                    stream.on('end', function () {
                        var buf = Buffer.concat(buffers);
                        var content = r.proxyResponseType() == "text" ? buf.toString("utf8") : buf.toString("binary");
                        var wresp = RT.WebResponse.mkProxy(r, {
                            code: res.statusCode,
                            headers: Object.keys(res.headers).map(function (h) {
                                return { name: h, value: res.headers[h] };
                            }),
                            forceText: true,
                            contentText: content,
                            binaryContent: buf
                        });
                        ret.success(wresp);
                    });
                });
                if (data.length == 0)
                    req.end();
                else
                    req.end(data);
                return ret;
            }
            function setup() {
                if (!TDev.Browser.isNodeJS)
                    return;
                Buffer = global.Buffer;
                TDev.Browser.canIndexedDB = false;
                TDev.Storage.getTableAsync = function (name) { return TDev.Promise.as(new FsTable(name)); };
                TDev.Storage.clearPreAsync = function () { return TDev.Promise.as(); };
                TDev.Util.httpRequestAsync = httpRequestAsync;
                RT.WebRequest.prototype.sendAsync = function () {
                    return webRequestAsync(this);
                };
                TDev.Ticker.disable();
                TDev.Util.initGenericExtensions();
                TDev.RT.RTValue.initApis();
                window = {};
                window.removeEventListener = function () {
                };
                window.setTimeout = setTimeout;
                window.rootUrl = "https://www.touchdevelop.com";
                var ls = {};
                window.localStorage = ls;
                window.localStorage['local_proxy'] = process.env['TD_SERVER'] + '/-tdevmgmt-/' + process.env['TD_DEPLOYMENT_KEY'];
                ls.getItem = function (s) { return ls[s]; };
                ls.setItem = function (s, v) { return ls[s] = v + ""; };
                ls.removeItem = function (s) { return delete ls[s]; };
                global.navigator = {};
                window.navigator = navigator;
                navigator.userAgent = "NodeJS " + process.version;
                TDev.Util.logSz = 3000;
                setupGlobalAgent();
                TDev.Promise.errorHandler = function (ctx, err) {
                    if (TDev.Runtime.theRuntime && !TDev.Runtime.theRuntime.isStopped()) {
                        TDev.Runtime.theRuntime.handleException(err);
                    }
                    else {
                        Node.handleError(err);
                    }
                    return new TDev.PromiseInv();
                };
                TDev.Cloud.getUserId = function () {
                    var rt = TDev.Runtime.theRuntime;
                    if (!rt)
                        return undefined;
                    var req = rt.getRestRequest();
                    if (!req)
                        return undefined;
                    var user = req.user();
                    if (user)
                        return user.id();
                };
                TDev.Cloud.authenticateAsync = function (activity, redirect, dontRedirect) {
                    if (redirect === void 0) { redirect = false; }
                    if (dontRedirect === void 0) { dontRedirect = false; }
                    return TDev.Promise.as(!!TDev.Cloud.getUserId());
                };
                try {
                    var xmldom = require('xmldom');
                    if (xmldom) {
                        global.DOMParser = xmldom.DOMParser;
                        global.XMLSerializer = xmldom.XMLSerializer;
                    }
                }
                catch (e) {
                }
                TDev.Random.strongEntropySource = function (buf) {
                    var b2 = crypto.randomBytes(buf.length);
                    for (var i = 0; i < buf.length; ++i)
                        b2[i] = buf[i];
                };
                TDev.RT.App.server_setting = function (key, optional, s) {
                    var setting = process.env[key];
                    if (!optional && setting == undefined)
                        TDev.Util.userError('missing environment variable ' + key, s.pc);
                    return setting;
                };
                TDev.RT.Web.proxy = function (url) { return url; };
                RT.ServerResponse.toUtfBuffer = function (s) { return new Buffer(s, "utf8"); };
                TDev.RT.Buffer.prototype.toNodeBuffer = function () {
                    if (Buffer.isBuffer(this.buffer))
                        return this.buffer;
                    var r = new Buffer(this.count());
                    var b = this.buffer;
                    for (var i = 0; i < r.length; ++i)
                        r[i] = b[i];
                    return r;
                };
                TDev.RT.Buffer.fromNodeBuffer = function (buf) { return TDev.RT.Buffer.fromTypedArray(buf); };
            }
            Node.setup = setup;
            function loadScriptAsync(wsServer) {
                host = new RunnerHost(wsServer);
                var rt = host.currentRt;
                TDev.Runtime.theRuntime = rt;
                var initProm = new TDev.PromiseInv();
                rt.initPromise = initProm;
                host.initFromPrecompiled();
                host.currentGuid = rt.compiled.scriptGuid;
                Node.logInfo("initializing data");
                TDev.Browser.localProxy = true;
                return rt.initDataAsync().then(function () {
                    Node.logInfo("starting server script");
                    rt.setState(3 /* AtAwait */, "start server");
                    rt.queueInits();
                    rt.queueAsyncStd(function () {
                        initProm.success(null);
                    });
                });
            }
            Node.loadScriptAsync = loadScriptAsync;
            function runtimeOpAsync(cmd, data) {
                return TDev.Promise.as({ error: "not implemented" });
            }
            Node.runtimeOpAsync = runtimeOpAsync;
            function getRuntimeInfoAsync(which) {
                var needed = TDev.Util.toDictionary(which.split(/,/), function (s) { return s; });
                if (needed["tdlog"]) {
                    var msgs = TDev.Util.getLogMsgs();
                    msgs.reverse();
                }
                return TDev.Promise.as({
                    applog: needed["applog"] ? RT.App.logs() : undefined,
                    tdlog: msgs,
                    crashes: needed["crashes"] ? (host ? host.crashes : []) : undefined,
                });
            }
            Node.getRuntimeInfoAsync = getRuntimeInfoAsync;
        })(Node = RT.Node || (RT.Node = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Node;
        (function (Node) {
            Node.storeOAuthHTML = "<!DOCTYPE html>\n" + "<html>\n" + "<head>\n" + "    <meta charset='utf-8' />\n" + "    <meta http-equiv='X-UA-Compatible' content='IE=edge' /> \n" + "    <meta name='viewport' content='width=320, initial-scale=1, maximum-scale=1, user-scalable=0'/>\n" + "    <title>Authorization finished</title>\n" + "</head>\n" + "<body id='root'>\n" + "  <div style='font-size: 14px; color:#444; font-family: sans-serif; line-height: 1.5em; width: 310px; margin: 2em auto;'>\n" + "    <h1>authorization finished</h1>\n" + "    <p>\n" + "        You can close this page. \n" + "        The web app should resume in a different tab or window.\n" + "    </p>\n" + "  </div>\n" + "  <script type='text/javascript'>\n" + "     var a = window.localStorage['oauth_redirect'];\n" + "     var b = [];\n" + "     var now = new Date().getTime();\n" + "     if (a)\n" + "         JSON.parse(a).forEach(function (e) {\n" + "             if (now - e.time < 10 * 60 * 1000) b.push(e); // remove anything older than 10 minutes\n" + "         });        \n" + "     b.push({redirect_url: window.location.href, time: now, user_id: 'web-app' });\n" + "     window.localStorage.setItem('oauth_redirect', JSON.stringify(b));\n" + "     if (window.opener) window.opener.postMessage(b, document.URL.replace(/(.*:\\/\\/[^\\/]+).*/, function(a,b){return b}));\n" + "     setTimeout(window.close, 3000);\n" + "  </script>\n" + "</body>\n" + "</html>\n";
        })(Node = RT.Node || (RT.Node = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Cordova;
        (function (Cordova) {
            function setup(f) {
                document.addEventListener("deviceready", function () {
                    f();
                }, false);
            }
            Cordova.setup = setup;
        })(Cordova = RT.Cordova || (RT.Cordova = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Cordova;
        (function (Cordova) {
            function DeviceOrientationInit() {
                if (navigator.compass) {
                    TDev.Util.log('cordova: boosting COMPASS');
                    RT.DeviceOrientation.isHeadingSupported = DeviceOrientationCordova.isHeadingSupported;
                    RT.DeviceOrientation.addHeadingReadingEvent = DeviceOrientationCordova.addHeadingReadingEvent;
                    RT.DeviceOrientation.removeHeadingReadingEvent = DeviceOrientationCordova.removeHeadingReadingEvent;
                }
            }
            Cordova.DeviceOrientationInit = DeviceOrientationInit;
            var DeviceOrientationCordova;
            (function (DeviceOrientationCordova) {
                var watchID;
                function isHeadingSupported() {
                    return true;
                }
                DeviceOrientationCordova.isHeadingSupported = isHeadingSupported;
                function addHeadingReadingEvent() {
                    watchID = navigator.compass.watchHeading(function (heading) {
                        RT.DeviceOrientation.setHeading(heading.magneticHeading);
                    }, function (error) {
                        TDev.Util.log("compass error: " + error);
                    }, {
                        frequency: 1000
                    });
                }
                DeviceOrientationCordova.addHeadingReadingEvent = addHeadingReadingEvent;
                function removeHeadingReadingEvent() {
                    if (watchID) {
                        navigator.compass.clearWatch(watchID);
                        watchID = null;
                    }
                }
                DeviceOrientationCordova.removeHeadingReadingEvent = removeHeadingReadingEvent;
            })(DeviceOrientationCordova = Cordova.DeviceOrientationCordova || (Cordova.DeviceOrientationCordova = {}));
        })(Cordova = RT.Cordova || (RT.Cordova = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Cordova;
        (function (Cordova) {
            function WebInit() {
                RT.Web.browseAsync = WebCordova.browseAsync;
                RT.Web.oauth_v2_dance_async = WebCordova.oauth_v2_dance_async;
            }
            Cordova.WebInit = WebInit;
            var WebCordova;
            (function (WebCordova) {
                function browseAsync(url) {
                    window.open(url, "_blank", 'location=no,toolbar=no');
                    return TDev.Promise.as();
                }
                WebCordova.browseAsync = browseAsync;
                function oauth_v2_dance_async(url, redirect_uri, userid, stateArg) {
                    return new TDev.Promise(function (onSuccess, onError, onProgress) {
                        var woptions = 'location=yes,menubar=no,toolbar=no';
                        var oauthWindow = window.open(url, '_blank', woptions);
                        oauthWindow.addEventListener('loadstart', function (e) {
                            var rurl = e.url;
                            RT.App.logEvent(RT.App.DEBUG, 'oauth', 'oauth redirect_uri: ' + rurl, undefined);
                            if (RT.String_.starts_with(rurl, redirect_uri)) {
                                var response = RT.OAuthResponse.parse(rurl);
                                if (response) {
                                    oauthWindow.close();
                                    onSuccess(response);
                                }
                            }
                        }, false);
                    });
                }
                WebCordova.oauth_v2_dance_async = oauth_v2_dance_async;
            })(WebCordova = Cordova.WebCordova || (Cordova.WebCordova = {}));
        })(Cordova = RT.Cordova || (RT.Cordova = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Cordova;
        (function (Cordova) {
            function ShareManagerInit() {
                RT.ShareManager.facebookLike = function (text, url, fburl) { return null; };
                RT.ShareManager.createFacebookLike = function () { return null; };
                RT.ShareManager.createTwitterTweet = function () { return null; };
            }
            Cordova.ShareManagerInit = ShareManagerInit;
        })(Cordova = RT.Cordova || (RT.Cordova = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var TDev;
(function (TDev) {
    var RT;
    (function (RT) {
        var Cordova;
        (function (Cordova) {
            var MediaShim = (function () {
                function MediaShim(url) {
                    this.duration = -1;
                    this.volume = 1;
                    this.playbackRate = 1;
                    this.media = new window.Media(url);
                    this.duration = this.media.getDuration();
                }
                MediaShim.prototype.play = function () {
                    this.runMedia(function (m) { return m.play(); });
                };
                MediaShim.prototype.runMedia = function (f) {
                    if (this.media) {
                        try {
                            f(this.media);
                        }
                        catch (e) {
                            TDev.Util.reportError("cordova sound", e, false);
                        }
                    }
                };
                return MediaShim;
            })();
            function SoundInit() {
                TDev.Util.log('wab: boosting PLAY_SOUND');
                RT.Sound.prototype.initAsync = function () {
                    var sound = this;
                    return sound.createUrlAsync().then(function (url) {
                        sound._audio = new MediaShim(url);
                    });
                };
                RT.Sound.prototype.resetAsync = function () {
                    var sound = this;
                    var media = sound._audio;
                    if (media)
                        media.seekTo(0);
                    return TDev.Promise.as();
                };
            }
            Cordova.SoundInit = SoundInit;
        })(Cordova = RT.Cordova || (RT.Cordova = {}));
    })(RT = TDev.RT || (TDev.RT = {}));
})(TDev || (TDev = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TDev;
(function (TDev) {
    TDev.runnerHost = null;
    var RunnerHost = (function (_super) {
        __extends(RunnerHost, _super);
        function RunnerHost() {
            _super.call(this);
            var script = TDev.precompiledScript;
            this.currentRt = new TDev.Runtime();
            this.currentRt.devMode = false;
        }
        RunnerHost.prototype.runAsync = function () {
            RunnerSettings.reportLaunch();
            TDev.SizeMgr.applySizes();
            var rt = this.currentRt;
            var cs = new TDev.CompiledScript();
            cs.initFromPrecompiled();
            if (!cs.baseScriptId)
                cs.baseScriptId = cs.scriptId;
            if (!cs.scriptTitle)
                cs.scriptTitle = window.webAppName;
            rt.initFrom(cs);
            rt.setHost(this);
            this.showWall();
            rt.initPageStack();
            rt.applyPageAttributes();
            TDev.SizeMgr.applySizes();
            this.runMain = function () {
                var fn = cs.actionsByName[cs.mainActionName];
                if (cs.pagesByName[cs.mainActionName] !== undefined) {
                    fn = TDev.Runtime.syntheticFrame(function (s) { return s.rt.postAutoPage("this", cs.mainActionName); });
                }
                rt.run(fn, null);
            };
            this.runMain();
            return TDev.Promise.as();
        };
        RunnerHost.prototype.notifyHideWall = function () {
            this.runMain();
        };
        RunnerHost.prototype.agreeTermsOfUseAsync = function () {
            return RunnerSettings.agreeTermsAsync();
        };
        RunnerHost.prototype.tweakMsg = function () {
            var webAppId = window.webAppId || "";
            var txt = webAppId && Math.random() < 0.2 ? "tweak this web app on touchdevelop.com" : "find more on touchdevelop.com";
            var d = TDev.div("copyright-text", txt);
            if (TDev.SizeMgr.phoneMode)
                d.innerHTML = "<span class='beta-underline'>more</span>";
            return d.withClick(function () {
                var link = function (text, lnk) { return TDev.HTML.mkButton(text, function () {
                    window.open(TDev.Cloud.getServiceUrl() + lnk);
                }); };
                var m = new TDev.ModalDialog();
                m.add(TDev.div("wall-dialog-header", TDev.lf("Create apps at TouchDevelop.com")));
                m.addHTML("With TouchDevelop you can create and publish apps. " + "You can also explore, use and edit apps published by others.");
                m.addHTML("TouchDevelop was brought to you by Microsoft Research and runs on " + "Windows, Windows Phone, Mac, Linux, iPhone, iPad, Android, etc. (and soon your toaster :-)");
                if (webAppId) {
                    m.add(TDev.div("wall-dialog-buttons", link("tweak this web app", "/" + webAppId), link("explore TouchDevelop", "/app")));
                }
                else {
                    m.add(TDev.div("wall-dialog-buttons", link("run TouchDevelop now!", "/app")));
                }
                m.show();
            });
        };
        return RunnerHost;
    })(TDev.RuntimeHostBase);
    TDev.RunnerHost = RunnerHost;
    function initEditor() {
        TDev.SizeMgr.earlyInit();
        document.onkeypress = TDev.Util.catchErrors("documentKeyPress", function (e) { return TDev.KeyboardMgr.instance.processKey(e); });
        document.onkeydown = TDev.Util.catchErrors("documentKeyDown", function (e) { return TDev.KeyboardMgr.instance.processKey(e); });
        document.onkeyup = TDev.Util.catchErrors("documentKeyUp", function (e) { return TDev.KeyboardMgr.instance.keyUp(e); });
        document.onselectstart = function () {
            return false;
        };
        window.onunload = function () {
        };
        function saveState() {
            TDev.Ticker.saveCurrent();
            TDev.RT.Perf.saveCurrent();
        }
        window.tdevSaveState = saveState;
        var e = TDev.elt("loading");
        if (e)
            e.removeSelf();
        var r = TDev.divId("scriptEditor", null, TDev.divId("wallOverlay", null));
        TDev.elt("root").appendChild(r);
    }
    function initWebRunnerApis() {
        TDev.RT.ApiManager.bingMapsKey = 'AsnQk63tYReqttLHcIL1RUsc_0h0BwCOib6j0Zvk8QjWs4FQjM9JRM9wEKescphX';
        TDev.RT.ArtCache.isArtResource = function (url) { return false; };
        TDev.RT.ApiManager.getKeyAsync = function (url) {
            return TDev.Promise.as(undefined);
        };
        TDev.RT.AdManager.initialize = function (el) { return el.style.display = 'none'; };
        TDev.RT.BingServices.searchAsync = function (kind, query, loc) {
            return TDev.Promise.as([]);
        };
        TDev.RT.Languages.picture_to_text = function picture_to_text(lang, pic, r) {
            r.resumeVal(undefined);
        };
        if (!TDev.Browser.webRunner) {
            TDev.RT.Sound.patchLocalArtUrl = function (url) {
                if (/\.\/art\//.test(url) && !/\.(wav|m4a)\?a=/.test(url)) {
                    url = url + (TDev.Browser.audioWav ? '.wav' : '.m4a') + "?a=" + window.webAppGuid;
                    url = TDev.Util.toAbsoluteUrl(url);
                    TDev.Util.log('patched local art sound: ' + url);
                }
                return url;
            };
            TDev.RT.Picture.patchLocalArtUrl = function (url) {
                if (/\.\/art\//.test(url) && !/\?a=/.test(url)) {
                    url += "?a=" + window.webAppGuid;
                    url = TDev.Util.toAbsoluteUrl(url);
                    TDev.Util.log('patched local art picture: ' + url);
                }
                return url;
            };
        }
        if (TDev.Browser.webAppImplicit) {
            var auth = TDev.Cloud.authenticateAsync;
            TDev.Cloud.authenticateAsync = function (reason) {
                if (reason == "leaderboard")
                    return TDev.Promise.as(!TDev.Cloud.isAccessTokenExpired());
                return auth(reason);
            };
        }
    }
    function initCompiledApp() {
        TDev.RuntimeSettings.askSourceAccess = false;
        TDev.Cloud.authenticateAsync = function (reason) { return TDev.Promise.as(true); };
        TDev.RT.ArtCache.isArtResource = function (url) { return false; };
        TDev.RT.ApiManager.getKeyAsync = function (url) { return TDev.Promise.as(TDev.RT.ApiManager.keys[url] || undefined); };
        TDev.RT.BingServices.searchAsync = function (kind, query, loc) {
            if (!TDev.RT.ApiManager.bingSearchKey) {
                TDev.RT.Time.log('Missing API Key for Bing search. Please edit /js/apikeys.js.');
                return TDev.Promise.as([]);
            }
            var url = 'https://api.datamarket.azure.com/Bing/Search/v1/' + encodeURIComponent(kind) + "?Adult='Strict'&Query=" + encodeURIComponent("'" + query + "'");
            if (loc) {
                url += '&Latitude=' + encodeURIComponent(loc.latitude().toString()) + '&Longitude=' + encodeURIComponent(loc.longitude().toString());
            }
            var request = TDev.RT.WebRequest.mk(url, undefined);
            request.set_credentials('', TDev.RT.ApiManager.bingSearchKey);
            return request.sendAsync().then(function (response) {
                var r = [];
                var feed = TDev.RT.Web.feed(response.content());
                for (var i = 0; i < feed.count(); ++i) {
                    var msg = feed.at(i);
                    var kind = msg.title();
                    var values = msg.values();
                    if (/^webresult$/i.test(kind)) {
                        r.push({
                            name: values.at('Title'),
                            url: values.at('Url'),
                            thumbUrl: null,
                            web: values.at('DisplayUrl')
                        });
                    }
                    else if (/^imageresult$/i.test(kind)) {
                        r.push({
                            name: values.at('Title'),
                            url: values.at('MediaUrl'),
                            thumbUrl: null,
                            web: values.at('Url')
                        });
                    }
                    else if (/^newsresult/i.test(kind)) {
                        var dt = Date.parse(values.at('Date'));
                        r.push({
                            name: values.at('Title') + ' - ' + values.at('Source') + ' - ' + TDev.Util.timeSince(dt),
                            url: values.at('Url'),
                            thumbUrl: null,
                            web: null
                        });
                    }
                }
                return r;
            });
        };
        TDev.RT.Languages.translate = function translate(source_lang, target_lang, text, r) {
            TDev.Util.log('translate: called');
            if (!target_lang) {
                TDev.RT.Time.log('languages->translate: no target language');
                r.resumeVal(undefined);
                return;
            }
            if (!text || source_lang === target_lang) {
                r.resumeVal(text);
                return;
            }
            if (!TDev.RT.ApiManager.microsoftTranslatorKey) {
                TDev.RT.Time.log('Missing Microsoft Translator API Key.');
                r.resumeVal(undefined);
                return;
            }
            TDev.Util.log('translating text...');
            var url = 'https://api.datamarket.azure.com/Bing/MicrosoftTranslator/v1/Translate?' + 'Text=%27' + encodeURIComponent(text) + "%27" + '&To=%27' + encodeURIComponent(target_lang) + "%27";
            if (source_lang)
                url += '&From=%27' + encodeURIComponent(source_lang) + "%27";
            TDev.RT.Time.log('languages->translate: sending request');
            var request = TDev.RT.WebRequest.mk(url, undefined);
            request.set_credentials('', TDev.RT.ApiManager.microsoftTranslatorKey);
            request.sendAsync().done(function (response) {
                var translated = TDev.RT.Web.feed(response.content());
                if (translated && translated.count() > 0) {
                    var tr = translated.at(0);
                    var rts = tr.values().at('Text');
                    r.resumeVal(rts);
                    return;
                }
                r.resumeVal(undefined);
            }, function (e) {
                TDev.RT.Time.log('error while translating');
                r.resumeVal(undefined);
            });
        };
        TDev.RT.Languages.detect_language = function detect_language(text, r) {
            if (!text) {
                r.resumeVal(undefined);
                return;
            }
            if (!TDev.RT.ApiManager.microsoftTranslatorKey) {
                TDev.RT.Time.log('Missing Microsoft Translator API Key. Please edit /js/apikeys.js.');
                r.resumeVal(undefined);
                return;
            }
            var url = 'https://api.datamarket.azure.com/Bing/MicrosoftTranslator/v1/Detect?' + 'Text=%27' + encodeURIComponent(text) + "%27";
            var request = TDev.RT.WebRequest.mk(url, undefined);
            request.set_credentials('', TDev.RT.ApiManager.microsoftTranslatorKey);
            request.sendAsync().done(function (response) {
                var translated = TDev.RT.Web.feed(response.content());
                if (translated && translated.count() > 0) {
                    var tr = translated.at(0);
                    var code = tr.values().at('Code');
                    r.resumeVal(code);
                    return;
                }
                r.resumeVal(undefined);
            }, function (e) {
                TDev.RT.Time.log('error while detecting language');
                r.resumeVal(undefined);
            });
        };
        TDev.RT.MicrosoftTranslator.speak = function (lang, text) {
            if (lang.length == 0 || text.length == 0)
                return undefined;
            if (!TDev.RT.ApiManager.microsoftTranslatorClientId || !TDev.RT.ApiManager.microsoftTranslatorClientSecret) {
                TDev.RT.Time.log('Missing Microsoft Translator Client ID and Client Secret. Please edit /js/apikeys.js.');
                return undefined;
            }
            var url = 'http://api.microsofttranslator.com/V2/Http.svc/Speak?' + 'language=' + encodeURIComponent(lang) + '&text=' + encodeURIComponent(text) + '&format=' + encodeURIComponent('audio/mp3') + '&options=MaxQuality';
            var snd = TDev.RT.Sound.mk(url, 2 /* MicrosoftTranslator */, 'audio/mp4');
            return snd;
        };
    }
    function initAsync() {
        if (TDev.RT.Wab)
            return TDev.RT.Wab.initAsync().then(function () { return init2Async(); });
        else
            return init2Async();
    }
    function init2Async() {
        TDev.Ticker.disable();
        TDev.tick(1 /* mainInit */);
        TDev.Util.initHtmlExtensions();
        TDev.Util.initGenericExtensions();
        initEditor();
        TDev.RT.RTValue.initApis();
        if (TDev.Browser.webRunner)
            initWebRunnerApis();
        else if (TDev.Browser.isCompiledApp)
            initCompiledApp();
        var h = new TDev.HistoryMgr();
        window.addEventListener("hashchange", TDev.Util.catchErrors("hashchange", function (ev) {
            h.hashChange();
        }), false);
        window.addEventListener("popstate", TDev.Util.catchErrors("popState", function (ev) {
            if (h.popState) {
                h.popState(ev);
            }
        }), false);
        TDev.runnerHost = new RunnerHost();
        TDev.runnerHost.currentGuid = window.webAppGuid || "6B4CD5BD-8C23-458D-9422-E329520060AE";
        window.addEventListener("resize", TDev.Util.catchErrors("windowResize", function () {
            TDev.SizeMgr.applySizes();
            TDev.runnerHost.currentRt.forcePageRefresh();
            TDev.runnerHost.publishSizeUpdate();
        }));
        return TDev.runnerHost.runAsync();
    }
    function initJs() {
        window.onload = TDev.Util.catchErrors("windowOnLoad", function () {
            initAsync().done();
        });
    }
    function globalInit() {
        window.onerror = function (errMsg, url, lineNumber) {
            TDev.Util.log("error " + lineNumber + ":" + errMsg);
            return false;
        };
        if (TDev.isWebserviceOnly) {
            TDev.Util.navigateInWindow(window.errorUrl + "#webservice");
            return;
        }
        TDev.Browser.isCompiledApp = true;
        TDev.Browser.detect();
        TDev.Ticker.fillEditorInfoBugReport = function (b) {
            try {
                b.currentUrl = "runner";
                b.scriptId = "";
                b.userAgent = TDev.Browser.isNodeJS ? "node" : window.navigator.userAgent;
                b.resolution = "";
            }
            catch (e) {
            }
        };
        TDev.Runtime.initialUrl = document.URL;
        if (TDev.Browser.isNodeJS) {
            if (TDev.RT.Node)
                (TDev.RT.Node).setup();
        }
        else if (TDev.Browser.inCordova) {
            TDev.RT.Cordova.setup(function () { return initAsync().done(); });
        }
        else {
            initJs();
        }
    }
    TDev.globalInit = globalInit;
    var RunnerSettings;
    (function (RunnerSettings) {
        var _appid = undefined;
        var _storeid = undefined;
        RunnerSettings.showTermsOfUse = false;
        RunnerSettings.showFeedback = false;
        RunnerSettings.showSettings = false;
        RunnerSettings.privacyStatement = "";
        RunnerSettings.privacyStatementUrl = "";
        RunnerSettings.termsOfUse = "";
        RunnerSettings.termsOfUseUrl = "";
        RunnerSettings.title = "";
        RunnerSettings.author = "";
        RunnerSettings.description = "";
        RunnerSettings.isGame = false;
        function agreeTermsAsync() {
            TDev.Util.log('checking agreed terms...');
            if (!RunnerSettings.termsOfUseUrl && !RunnerSettings.privacyStatementUrl)
                return TDev.Promise.as();
            var agreed = !!TDev.RuntimeSettings.readSetting("td.agreed.termsofuse");
            if (agreed)
                return TDev.Promise.as();
            TDev.Util.log('asking user to agree terms...');
            return new TDev.Promise(function (onSuccess, onError, onProgress) {
                var m = new TDev.ModalDialog();
                m.onDismiss = function () {
                    TDev.RuntimeSettings.storeSetting("td.agreed.termsofuse", true);
                    onSuccess(undefined);
                };
                m.canDismiss = false;
                m.fullWhite();
                m.addHTML("<div class='wall-dialog-body'>To use this app, you must agree to the <a href='" + RunnerSettings.termsOfUseUrl + "'>Terms of use</a> and <a href='" + RunnerSettings.termsOfUseUrl + "'>Privacy Statement</a>.</div>");
                m.add(TDev.div('wall-dialog-buttons', TDev.HTML.mkButton(TDev.lf("I Agree"), function () {
                    m.canDismiss = true;
                    m.dismiss();
                })));
                m.show();
            });
        }
        RunnerSettings.agreeTermsAsync = agreeTermsAsync;
        function showPrivacyStatementDialog() {
            var m = new TDev.ModalDialog();
            m.add(TDev.div('wall-dialog-header', 'privacy statement'));
            m.add(TDev.div('wall-dialog-body', RunnerSettings.privacyStatement));
            m.setScroll();
            m.addOk();
            m.show();
        }
        RunnerSettings.showPrivacyStatementDialog = showPrivacyStatementDialog;
        function showTermsOfUseDialog() {
            var m = new TDev.ModalDialog();
            m.add(TDev.div('wall-dialog-header', 'terms of use'));
            m.add(TDev.div('wall-dialog-body', RunnerSettings.termsOfUse));
            m.setScroll();
            m.addOk();
            m.show();
        }
        RunnerSettings.showTermsOfUseDialog = showTermsOfUseDialog;
        function showAboutDialog() {
            var m = new TDev.ModalDialog();
            m.add(TDev.div('wall-dialog-header', 'about'));
            m.add(TDev.div('wall-dialog-body', RunnerSettings.title));
            m.add(TDev.div('wall-dialog-body', 'by ' + RunnerSettings.author));
            m.add(TDev.div('wall-dialog-body', RunnerSettings.description));
            m.setScroll();
            m.addOk();
            m.show();
        }
        RunnerSettings.showAboutDialog = showAboutDialog;
        function showSettingsDialog() {
            var locationcb = TDev.HTML.mkCheckBox(TDev.lf("access and use your location"), function (b) { return TDev.RuntimeSettings.setLocation(b); }, TDev.RuntimeSettings.location());
            var soundcb = TDev.HTML.mkCheckBox(TDev.lf("sounds"), function (b) { return TDev.RuntimeSettings.setSounds(b); }, TDev.RuntimeSettings.sounds());
            var m = new TDev.ModalDialog();
            m.add(TDev.div('wall-dialog-header', TDev.lf("settings")));
            m.add(TDev.div('wall-dialog-body', locationcb));
            m.add(TDev.div('wall-dialog-body', soundcb));
            m.addOk();
            m.show();
        }
        RunnerSettings.showSettingsDialog = showSettingsDialog;
        var _launchReported = false;
        function reportLaunch() {
            if (_appid && window.navigator.onLine && !_launchReported) {
                TDev.RT.Bazaar.storeidAsync().done(function (sid) {
                    if (sid) {
                        var url = TDev.Cloud.getPrivateApiUrl("app/" + encodeURIComponent(_appid) + "/" + encodeURIComponent(userid()) + "/launch/" + encodeURIComponent(sid) + "?store=" + encodeURIComponent(_storeid));
                        TDev.Util.log('runner: report launch ' + url);
                        var req = TDev.RT.WebRequest.mk(url, undefined);
                        req.show_notifications(false);
                        req.sendAsync().done(function () {
                            _launchReported = true;
                        }, function (e) {
                            TDev.Util.log('runner: launch report failed');
                        });
                    }
                }, function (e) {
                });
            }
        }
        RunnerSettings.reportLaunch = reportLaunch;
        function launch(appid, storeid) {
            _appid = appid || "invalid";
            _storeid = storeid || "unknown";
            RunnerSettings.reportLaunch();
            TDev.RT.Bazaar.loadLeaderboardItemsAsync = function (scriptId) {
                return TDev.Promise.as([]);
            };
            TDev.RT.Bazaar.leaderboard_score = function (r) {
                if (window.navigator.onLine && (TDev.Browser.webRunner || TDev.Browser.webAppImplicit)) {
                    var url = TDev.Cloud.getPrivateApiUrl("app/" + encodeURIComponent(_appid) + "/" + encodeURIComponent(userid()) + "/leaderboardscored");
                    var req = TDev.RT.WebRequest.mk(url, undefined);
                    req.sendAsync().done(function (resp) {
                        updateScoreFromResponse(resp.content_as_json());
                        r.resumeVal(RunnerSettings.score());
                    }, function (e) { return r.resumeVal(RunnerSettings.score()); });
                }
                else
                    r.resumeVal(RunnerSettings.score());
            };
            TDev.RT.Bazaar.post_leaderboard_score = function (score, r) {
                var curr = RunnerSettings.score();
                if (score < curr) {
                    r.resume();
                }
                else {
                    setScore(score);
                    if (window.navigator.onLine && (TDev.Browser.webRunner || TDev.Browser.webAppImplicit)) {
                        var url = TDev.Cloud.getPrivateApiUrl("app/" + encodeURIComponent(_appid) + "/" + encodeURIComponent(userid()) + "/leaderboard");
                        var req = TDev.RT.WebRequest.mk(url, undefined);
                        req.set_method('post');
                        req.set_content(JSON.stringify({ kind: "leaderboardscore", score: score }));
                        req.sendAsync().done(function (resp) {
                            updateScoreFromResponse(resp.content_as_json());
                            r.resume();
                        }, function (e) { return r.resume(); });
                    }
                    else {
                        r.resume();
                    }
                }
            };
            TDev.RT.Bazaar.post_leaderboard_to_wall = function (r) {
                if (!TDev.Browser.webRunner && !TDev.Browser.webAppImplicit) {
                    TDev.RT.App.restart("", r);
                    return;
                }
                var leaderboardDiv = TDev.div('item', [TDev.div('item-title', 'leaderboards')]);
                var rt = r.rt;
                if (window.navigator.onLine) {
                    r.progress(TDev.lf("Loading leaderboards..."));
                    var url = TDev.Cloud.getPrivateApiUrl("app/" + encodeURIComponent(_appid) + "/" + encodeURIComponent(userid()) + "/leaderboard");
                    var request = TDev.RT.WebRequest.mk(url, undefined);
                    request.sendAsync().done(function (response) {
                        var json = response.content_as_json();
                        if (json) {
                            var items = json.field('items');
                            if (items) {
                                for (var i = 0; i < items.count(); ++i) {
                                    var item = items.at(i);
                                    if (item.string('kind') === 'leaderboardscore') {
                                        var userid = item.string('userid');
                                        var username = item.string('username');
                                        var userscore = (item.number('score') || 0).toString();
                                        var time = TDev.Util.timeSince(item.number('time'));
                                        var imgDiv = TDev.div('leaderboard-img');
                                        imgDiv.innerHTML = TDev.Util.svgGravatar(userid);
                                        var scoreDiv = TDev.div('item leaderboard-item', [
                                            imgDiv,
                                            TDev.div('leaderboards-score', userscore),
                                            TDev.div('leaderboard-center', [
                                                TDev.div('item-title', username),
                                                TDev.div('item-subtle', time)
                                            ])
                                        ]);
                                        leaderboardDiv.appendChild(scoreDiv);
                                    }
                                }
                            }
                        }
                        rt.postBoxedHtml(leaderboardDiv, rt.current.pc);
                        r.resume();
                    });
                }
                else {
                    rt.postText(TDev.lf("Please connect to internet to see the leaderboard."), rt.current.pc);
                    r.resume();
                }
            };
        }
        RunnerSettings.launch = launch;
        function updateScoreFromResponse(response) {
            if (response) {
                var score = response.number('score');
                if (score)
                    RunnerSettings.setScore(score);
            }
        }
        function score() {
            return Number(TDev.RuntimeSettings.readSetting("td.score") || 0);
        }
        RunnerSettings.score = score;
        function setScore(score) {
            if (score > RunnerSettings.score())
                TDev.RuntimeSettings.storeSetting("td.score", score);
        }
        RunnerSettings.setScore = setScore;
        function userid() {
            var userid = TDev.RuntimeSettings.readSetting("td.userid");
            if (!userid) {
                userid = TDev.Util.guidGen();
                TDev.RuntimeSettings.storeSetting("td.userid", userid);
            }
            return userid;
        }
        RunnerSettings.userid = userid;
    })(RunnerSettings = TDev.RunnerSettings || (TDev.RunnerSettings = {}));
})(TDev || (TDev = {}));
TDev.globalInit();
